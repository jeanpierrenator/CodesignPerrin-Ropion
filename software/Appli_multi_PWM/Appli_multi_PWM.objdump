
Appli_multi_PWM.elf:     file format elf32-littlenios2
Appli_multi_PWM.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00016418 memsz 0x00016418 flags r-x
    LOAD off    0x00017438 vaddr 0x00016438 paddr 0x000180a0 align 2**12
         filesz 0x00001c68 memsz 0x00001c68 flags rw-
    LOAD off    0x00019d08 vaddr 0x00019d08 paddr 0x00019d08 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015bb4  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000654  00015de4  00015de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c68  00016438  000180a0  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  00019d08  00019d08  00019d08  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00019e80  00019e80  000190a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000190a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001168  00000000  00000000  000190c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d1cb  00000000  00000000  0001a230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b258  00000000  00000000  000473fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e80c  00000000  00000000  00052653  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000028fc  00000000  00000000  00060e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004193  00000000  00000000  0006375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001d621  00000000  00000000  000678ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00084f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001bc0  00000000  00000000  00084f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008a516  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0008a519  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008a520  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008a521  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000008  00000000  00000000  0008a522  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000008  00000000  00000000  0008a52a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000008  00000000  00000000  0008a532  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000013  00000000  00000000  0008a53a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0008a54d  2**0
                  CONTENTS, READONLY
 26 .jdi          00004407  00000000  00000000  0008a57c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006bd3c  00000000  00000000  0008e983  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00015de4 l    d  .rodata	00000000 .rodata
00016438 l    d  .rwdata	00000000 .rwdata
00019d08 l    d  .bss	00000000 .bss
00019e80 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Appli_multi_PWM_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ihm_lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 pwmPioDriver.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001728 l     F .text	00000008 __fp_unlock
0000173c l     F .text	0000019c __sinit.part.1
000018d8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016488 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00003468 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015eb6 l     O .rodata	00000010 zeroes.4389
00015ec6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
00015ed6 l     O .rodata	00000010 zeroes.4404
00007ef8 l     F .text	000000bc __sbprintf
00015ee6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000081bc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00016cd4 l     O .rwdata	00000020 lc_ctype_charset
00016cb4 l     O .rwdata	00000020 lc_message_charset
00016cf4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00015f14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00016038 l     O .rodata	00000010 zeroes.4333
00016048 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0000d338 l     F .text	000000fc __sprint_r.part.0
00016058 l     O .rodata	00000010 zeroes.4349
0000e974 l     F .text	000000bc __sbprintf
00016068 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000124e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000125f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000129b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012a9c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012b88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00012d64 l     F .text	0000003c alt_get_errno
00012da0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00012fe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001808c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001328c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000133c8 l     F .text	00000034 alt_dev_reg
00016ed4 l     O .rwdata	00001060 JtagUART
00017f34 l     O .rwdata	00000120 lcd_16207_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000136e8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000138f4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00018090 l     O .rwdata	00000004 colstart
00013f2c l     F .text	000000b8 lcd_write_command
00013fe4 l     F .text	000000d8 lcd_write_data
000140bc l     F .text	000000e8 lcd_clear_screen
000141a4 l     F .text	00000228 lcd_repaint_screen
000143cc l     F .text	000000e8 lcd_scroll_up
000144b4 l     F .text	000002c4 lcd_handle_escape
00014c98 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014ed8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015728 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
000162b6 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019d4c g     O .bss	00000004 alt_instruction_exception_handler
00019d13 g     O .bss	00000001 digit
0000b53c g     F .text	00000074 _mprec_log10
0000b628 g     F .text	0000008c __any_on
0000a0e4 g     F .text	00000054 _isatty_r
00015f20 g     O .rodata	00000028 __mprec_tinytens
00012ca0 g     F .text	0000007c alt_main
00003394 g     F .text	000000c0 _puts_r
00019d80 g     O .bss	00000100 alt_irq
0000a214 g     F .text	00000060 _lseek_r
000180a0 g       *ABS*	00000000 __flash_rwdata_start
00009b70 g     F .text	000000ac __sflags
00010eb8 g     F .text	00000088 .hidden __eqdf2
00019e80 g       *ABS*	00000000 __alt_heap_start
00003358 g     F .text	0000003c printf
000011b4 g     F .text	00000050 isOn
0000ee6c g     F .text	0000009c _wcrtomb_r
00003848 g     F .text	0000005c __sseek
00001a88 g     F .text	00000010 __sinit
00001238 g     F .text	00000038 setTon
0000ed14 g     F .text	00000140 __swbuf_r
000012a4 g     F .text	00000028 readOnOff
0000a138 g     F .text	0000007c _setlocale_r
000018e0 g     F .text	00000078 __sfmoreglue
00001178 g     F .text	0000003c updateTon
00012d40 g     F .text	00000024 __malloc_unlock
00000fb4 g     F .text	0000006c initInterupt
00019d48 g     O .bss	00000004 altera_avalon_timer_ts_freq
00019d08 g     O .bss	00000004 fp
0000a4a0 g     F .text	0000015c memmove
00001a70 g     F .text	00000018 _cleanup
0000a5fc g     F .text	000000a8 _Balloc
00010f40 g     F .text	000000dc .hidden __gtdf2
00015a2c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00019d14 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
000024e4 g     F .text	0000005c _fstat_r
00019d18 g     O .bss	00000004 errno
000037c4 g     F .text	00000008 __seofread
0000bf98 g     F .text	000013a0 ___svfiprintf_internal_r
00019d3c g     O .bss	00000004 alt_argv
00020054 g       *ABS*	00000000 _gp
0001325c g     F .text	00000030 usleep
00016d54 g     O .rwdata	00000180 alt_fd_list
00015410 g     F .text	00000090 alt_find_dev
0000a358 g     F .text	00000148 memcpy
00001730 g     F .text	0000000c _cleanup_r
000122f8 g     F .text	000000dc .hidden __floatsidf
000002dc g     F .text	0000005c initLCD
0001580c g     F .text	0000007c alt_io_redirect
0001101c g     F .text	000000f4 .hidden __ltdf2
00015de4 g       *ABS*	00000000 __DTOR_END__
00003454 g     F .text	00000014 puts
0001568c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000bc78 g     F .text	00000074 __fpclassifyd
0000b498 g     F .text	000000a4 __ratio
0000e958 g     F .text	0000001c __vfiprintf_internal
00013aec g     F .text	0000021c altera_avalon_jtag_uart_read
00003328 g     F .text	00000030 _printf_r
000013c4 g     F .text	00000064 .hidden __udivsi3
000129f0 g     F .text	000000ac isatty
00015f70 g     O .rodata	000000c8 __mprec_tens
0000a1b4 g     F .text	0000000c __locale_charset
00019d24 g     O .bss	00000004 __malloc_top_pad
00018068 g     O .rwdata	00000004 __mb_cur_max
0000a1e4 g     F .text	0000000c _localeconv_r
0000aa30 g     F .text	0000003c __i2b
00009c1c g     F .text	000004c8 __sfvwrite_r
00001270 g     F .text	00000034 setOnOff
00003658 g     F .text	00000054 _sbrk_r
0000b6b4 g     F .text	00000060 _read_r
00018080 g     O .rwdata	00000004 alt_max_fd
00001078 g     F .text	00000098 setCanal
00009a6c g     F .text	000000f0 _fclose_r
000016f8 g     F .text	00000030 fflush
00019d20 g     O .bss	00000004 __malloc_max_sbrked_mem
0000fc3c g     F .text	000008ac .hidden __adddf3
0000b240 g     F .text	0000010c __b2d
0000f650 g     F .text	000005c4 .hidden __umoddi3
00012bc4 g     F .text	000000dc lseek
00018058 g     O .rwdata	00000004 _global_impure_ptr
0000b714 g     F .text	00000564 _realloc_r
00019e80 g       *ABS*	00000000 __bss_end
000128c4 g     F .text	000000f0 alt_iic_isr_register
00019d12 g     O .bss	00000001 updateOnOff
00015924 g     F .text	00000108 alt_tick
0000f054 g     F .text	000005fc .hidden __udivdi3
0000ec70 g     F .text	00000024 _fputwc_r
00015f48 g     O .rodata	00000028 __mprec_bigtens
0000a814 g     F .text	00000104 __s2b
000123d4 g     F .text	000000a8 .hidden __floatunsidf
0000af80 g     F .text	00000060 __mcmp
00018056 g     O .rwdata	00000002 increment
00001aa8 g     F .text	00000018 __fp_lock_all
00016458 g     O .rwdata	00000030 pwmTon
00012878 g     F .text	0000004c alt_ic_irq_enabled
00015888 g     F .text	0000009c alt_alarm_stop
00019d34 g     O .bss	00000004 alt_irq_active
00002084 g     F .text	00000444 _fseeko_r
000000fc g     F .exceptions	000000d4 alt_irq_handler
00016d2c g     O .rwdata	00000028 alt_dev_null
00015250 g     F .text	00000020 alt_dcache_flush_all
0000a918 g     F .text	00000068 __hi0bits
00012278 g     F .text	00000080 .hidden __fixdfsi
000180a0 g       *ABS*	00000000 __ram_rwdata_end
00018078 g     O .rwdata	00000008 alt_dev_list
000132c8 g     F .text	00000100 write
00016438 g       *ABS*	00000000 __ram_rodata_end
0001265c g     F .text	000000b8 fstat
00001c0c g     F .text	00000024 fprintf
0001101c g     F .text	000000f4 .hidden __ledf2
0000acf8 g     F .text	00000140 __pow5mult
0000d44c g     F .text	0000150c ___vfiprintf_internal_r
00019d30 g     O .bss	00000004 __nlocale_changed
00001428 g     F .text	00000058 .hidden __umodsi3
00019e80 g       *ABS*	00000000 end
00014778 g     F .text	00000520 altera_avalon_lcd_16207_write
000024c8 g     F .text	0000001c fseeko
00002068 g     F .text	0000001c fseek
00013628 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00015de4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00014f50 g     F .text	0000007c alt_avalon_timer_sc_init
0001247c g     F .text	00000064 .hidden __clzsi2
00013d08 g     F .text	00000224 altera_avalon_jtag_uart_write
00001a98 g     F .text	00000004 __sfp_lock_acquire
0000a274 g     F .text	000000e4 memchr
00005c00 g     F .text	000022dc ___vfprintf_internal_r
000036ac g     F .text	00000058 _sprintf_r
00001d54 g     F .text	00000310 _free_r
0000a1c0 g     F .text	00000010 __locale_mb_cur_max
00015c30 g     F .text	00000180 __call_exitprocs
00000e4c g     F .text	00000168 boutonInterupt
00019d2c g     O .bss	00000004 __mlocale_changed
00018060 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00019d50 g     O .bss	00000004 _alt_tick_rate
0000ae38 g     F .text	00000148 __lshift
00019d54 g     O .bss	00000004 _alt_nticks
00013024 g     F .text	00000104 read
00013434 g     F .text	00000090 alt_sys_init
0000bdc8 g     F .text	000001d0 __ssprint_r
000032c8 g     F .text	00000060 _open_r
00019d0c g     O .bss	00000001 numCanal
00015b18 g     F .text	00000118 __register_exitproc
00016438 g     O .rwdata	00000020 buffer
0000aa6c g     F .text	0000028c __multiply
00013994 g     F .text	00000068 altera_avalon_jtag_uart_close
0000fc14 g     F .text	00000028 .hidden __mulsi3
00016438 g       *ABS*	00000000 __ram_rwdata_start
00015de4 g       *ABS*	00000000 __ram_rodata_start
00019d58 g     O .bss	00000028 __malloc_current_mallinfo
0000b34c g     F .text	0000014c __d2b
000134c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000155a8 g     F .text	000000c4 alt_get_fd
000150f8 g     F .text	00000158 alt_busy_sleep
00008168 g     F .text	00000054 _close_r
00015a9c g     F .text	0000007c memcmp
00013584 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019e80 g       *ABS*	00000000 __alt_stack_base
000135d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000026c8 g     F .text	000000dc _fwrite_r
00008014 g     F .text	00000154 __swsetup_r
000104e8 g     F .text	000009d0 .hidden __divdf3
00001958 g     F .text	00000118 __sfp
0000b5b0 g     F .text	00000078 __copybits
000168ac g     O .rwdata	00000408 __malloc_av_
00001aa4 g     F .text	00000004 __sinit_lock_release
00011110 g     F .text	0000086c .hidden __muldf3
00003770 g     F .text	00000054 __sread
000154a0 g     F .text	00000108 alt_find_file
000152ac g     F .text	000000a4 alt_dev_llist_insert
00012d1c g     F .text	00000024 __malloc_lock
00001be4 g     F .text	00000028 _fprintf_r
000131ac g     F .text	000000b0 sbrk
00003944 g     F .text	000022bc ___svfprintf_internal_r
0000169c g     F .text	0000005c _fflush_r
00000380 g     F .text	00000088 writeOnOff
0000ea30 g     F .text	000000dc _calloc_r
00001bcc g     F .text	00000018 fopen
00019d08 g       *ABS*	00000000 __bss_start
000031a0 g     F .text	00000128 memset
00000554 g     F .text	000008f8 main
00019d40 g     O .bss	00000004 alt_envp
00019d1c g     O .bss	00000004 __malloc_max_total_mem
00013524 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ee54 g     F .text	00000018 __swbuf
00014d44 g     F .text	00000134 altera_avalon_lcd_16207_init
000038a4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00009b5c g     F .text	00000014 fclose
000083e4 g     F .text	00001688 _dtoa_r
00002994 g     F .text	0000080c _malloc_r
0000efc8 g     F .text	00000030 __ascii_wctomb
00018084 g     O .rwdata	00000004 alt_errno
00002540 g     F .text	000000c4 _fwalk
000012cc g     F .text	00000084 .hidden __divsi3
00001c30 g     F .text	00000124 _malloc_trim_r
00015de4 g       *ABS*	00000000 __CTOR_END__
0000bcec g     F .text	000000dc strcmp
00015de4 g       *ABS*	00000000 __flash_rodata_start
00015de4 g       *ABS*	00000000 __DTOR_LIST__
00010eb8 g     F .text	00000088 .hidden __nedf2
000133fc g     F .text	00000038 alt_irq_init
00013128 g     F .text	00000084 alt_release_fd
00003704 g     F .text	0000006c sprintf
00016078 g     O .rodata	00000100 .hidden __clz_tab
00019d28 g     O .bss	00000004 _PathLocale
00000338 g     F .text	00000048 writeCaracter
00015a50 g     F .text	00000014 atexit
00007fb4 g     F .text	00000060 _write_r
0000a1f0 g     F .text	00000018 setlocale
0000026c g     F .text	00000070 customPrintf
0001805c g     O .rwdata	00000004 _impure_ptr
00019d38 g     O .bss	00000004 alt_argc
00001480 g     F .text	0000021c __sflush_r
00019d44 g     O .bss	00000004 altera_avalon_timer_ts_base
000153b0 g     F .text	00000060 _do_dtors
0000a1dc g     F .text	00000008 __locale_cjk_lang
00000408 g     F .text	00000098 writeCanal
00002064 g     F .text	00000004 _fseek_r
00003484 g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000b1dc g     F .text	00000064 __ulp
00001ac0 g     F .text	00000018 __fp_unlock_all
00014e78 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00018070 g     O .rwdata	00000008 alt_fs_list
00001204 g     F .text	00000034 setlatch
00019d10 g     O .bss	00000002 newTon
00001020 g     F .text	00000058 initPWM
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a208 g     F .text	0000000c localeconv
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00012714 g     F .text	00000050 alt_ic_isr_register
000027a4 g     F .text	00000034 fwrite
000180a0 g       *ABS*	00000000 _edata
00019e80 g       *ABS*	00000000 _end
0000eb0c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
000139fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000004a0 g     F .text	000000b4 writeTon
000127ec g     F .text	0000008c alt_ic_irq_disable
000037cc g     F .text	0000007c __swrite
00018064 g     O .rwdata	00000004 __malloc_trim_threshold
00018054 g     O .rwdata	00000001 lastNumCanal
0000a1d0 g     F .text	0000000c __locale_msgcharset
00015a64 g     F .text	00000038 exit
00002604 g     F .text	000000c4 _fwalk_reent
0000afe0 g     F .text	000001fc __mdiff
00001350 g     F .text	00000074 .hidden __modsi3
0001809c g     O .rwdata	00000004 __ctype_ptr__
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001a9c g     F .text	00000004 __sfp_lock_release
000161b5 g     O .rodata	00000101 _ctype_
00001ad8 g     F .text	000000f4 _fopen_r
00015db0 g     F .text	00000034 _exit
00014fcc g     F .text	0000012c alt_alarm_start
000027d8 g     F .text	000001bc __smakebuf_r
000038ac g     F .text	00000098 strlen
00012e8c g     F .text	0000015c open
00010f40 g     F .text	000000dc .hidden __gedf2
0001806c g     O .rwdata	00000004 __wctomb
0000d434 g     F .text	00000018 __sprint_r
0001566c g     F .text	00000020 alt_icache_flush_all
00018088 g     O .rwdata	00000004 alt_priority_mask
00012764 g     F .text	00000088 alt_ic_irq_enable
00007edc g     F .text	0000001c __vfprintf_internal
0000eff8 g     F .text	0000005c _wctomb_r
0001197c g     F .text	000008fc .hidden __subdf3
0000a980 g     F .text	000000b0 __lo0bits
00018094 g     O .rwdata	00000008 alt_alarm_list
00015350 g     F .text	00000060 _do_ctors
00001110 g     F .text	00000068 updateValue
0000ef08 g     F .text	000000c0 wcrtomb
0001251c g     F .text	000000d8 close
00012b04 g     F .text	00000084 alt_load
0000ec94 g     F .text	00000080 fputwc
00001aa0 g     F .text	00000004 __sinit_lock_acquire
0000a6cc g     F .text	00000148 __multadd
00019d0e g     O .bss	00000002 value
0000a6a4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a76004 	addi	r2,r2,-25216
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a76004 	addi	r2,r2,-25216
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a73e17 	ldw	r2,-25352(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a73e17 	ldw	r2,-25352(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d6801514 	ori	gp,gp,84
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10a74214 	ori	r2,r2,40200

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18e7a014 	ori	r3,r3,40576

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0012b040 	call	12b04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0012ca00 	call	12ca0 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xf8000268>

0000026c <customPrintf>:

FILE * fp;
char buffer[32] = "C              \nP               ";


void customPrintf(){
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
	fprintf(fp,"\x1B[2J");
     27c:	d0a72d17 	ldw	r2,-25420(gp)
     280:	100f883a 	mov	r7,r2
     284:	01800104 	movi	r6,4
     288:	01400044 	movi	r5,1
     28c:	01000074 	movhi	r4,1
     290:	21177904 	addi	r4,r4,24036
     294:	00027a40 	call	27a4 <fwrite>
	fprintf(fp,"%.*s",32,buffer);
     298:	d0a72d17 	ldw	r2,-25420(gp)
     29c:	01c00074 	movhi	r7,1
     2a0:	39d90e04 	addi	r7,r7,25656
     2a4:	01800804 	movi	r6,32
     2a8:	01400074 	movhi	r5,1
     2ac:	29577b04 	addi	r5,r5,24044
     2b0:	1009883a 	mov	r4,r2
     2b4:	0001c0c0 	call	1c0c <fprintf>
	fflush(fp);
     2b8:	d0a72d17 	ldw	r2,-25420(gp)
     2bc:	1009883a 	mov	r4,r2
     2c0:	00016f80 	call	16f8 <fflush>

}
     2c4:	0001883a 	nop
     2c8:	e037883a 	mov	sp,fp
     2cc:	dfc00117 	ldw	ra,4(sp)
     2d0:	df000017 	ldw	fp,0(sp)
     2d4:	dec00204 	addi	sp,sp,8
     2d8:	f800283a 	ret

000002dc <initLCD>:

void initLCD(){
     2dc:	defffe04 	addi	sp,sp,-8
     2e0:	dfc00115 	stw	ra,4(sp)
     2e4:	df000015 	stw	fp,0(sp)
     2e8:	d839883a 	mov	fp,sp
	fp = fopen("/dev/lcd_16207_0", "w");
     2ec:	01400074 	movhi	r5,1
     2f0:	29577d04 	addi	r5,r5,24052
     2f4:	01000074 	movhi	r4,1
     2f8:	21177e04 	addi	r4,r4,24056
     2fc:	0001bcc0 	call	1bcc <fopen>
     300:	d0a72d15 	stw	r2,-25420(gp)
	fprintf(fp,"\x1B[2J");
     304:	d0a72d17 	ldw	r2,-25420(gp)
     308:	100f883a 	mov	r7,r2
     30c:	01800104 	movi	r6,4
     310:	01400044 	movi	r5,1
     314:	01000074 	movhi	r4,1
     318:	21177904 	addi	r4,r4,24036
     31c:	00027a40 	call	27a4 <fwrite>

}
     320:	0001883a 	nop
     324:	e037883a 	mov	sp,fp
     328:	dfc00117 	ldw	ra,4(sp)
     32c:	df000017 	ldw	fp,0(sp)
     330:	dec00204 	addi	sp,sp,8
     334:	f800283a 	ret

00000338 <writeCaracter>:


void writeCaracter(char caracter,char pos){
     338:	defffd04 	addi	sp,sp,-12
     33c:	df000215 	stw	fp,8(sp)
     340:	df000204 	addi	fp,sp,8
     344:	2007883a 	mov	r3,r4
     348:	2805883a 	mov	r2,r5
     34c:	e0fffe05 	stb	r3,-8(fp)
     350:	e0bfff05 	stb	r2,-4(fp)
	buffer[pos] = caracter;
     354:	e0ffff07 	ldb	r3,-4(fp)
     358:	00800074 	movhi	r2,1
     35c:	10990e04 	addi	r2,r2,25656
     360:	10c5883a 	add	r2,r2,r3
     364:	e0fffe03 	ldbu	r3,-8(fp)
     368:	10c00005 	stb	r3,0(r2)

}
     36c:	0001883a 	nop
     370:	e037883a 	mov	sp,fp
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00104 	addi	sp,sp,4
     37c:	f800283a 	ret

00000380 <writeOnOff>:

void writeOnOff(char etat){
     380:	defffd04 	addi	sp,sp,-12
     384:	dfc00215 	stw	ra,8(sp)
     388:	df000115 	stw	fp,4(sp)
     38c:	df000104 	addi	fp,sp,4
     390:	2005883a 	mov	r2,r4
     394:	e0bfff05 	stb	r2,-4(fp)
	if(!etat)
     398:	e0bfff07 	ldb	r2,-4(fp)
     39c:	10000a1e 	bne	r2,zero,3c8 <writeOnOff+0x48>
	{
		writeCaracter('O',12);
     3a0:	01400304 	movi	r5,12
     3a4:	010013c4 	movi	r4,79
     3a8:	00003380 	call	338 <writeCaracter>
		writeCaracter('N',13);
     3ac:	01400344 	movi	r5,13
     3b0:	01001384 	movi	r4,78
     3b4:	00003380 	call	338 <writeCaracter>
		writeCaracter(' ',14);
     3b8:	01400384 	movi	r5,14
     3bc:	01000804 	movi	r4,32
     3c0:	00003380 	call	338 <writeCaracter>
     3c4:	00000906 	br	3ec <writeOnOff+0x6c>

	}
	else
	{
		writeCaracter('O',12);
     3c8:	01400304 	movi	r5,12
     3cc:	010013c4 	movi	r4,79
     3d0:	00003380 	call	338 <writeCaracter>
		writeCaracter('F',13);
     3d4:	01400344 	movi	r5,13
     3d8:	01001184 	movi	r4,70
     3dc:	00003380 	call	338 <writeCaracter>
		writeCaracter('F',14);
     3e0:	01400384 	movi	r5,14
     3e4:	01001184 	movi	r4,70
     3e8:	00003380 	call	338 <writeCaracter>
	}
	customPrintf();
     3ec:	000026c0 	call	26c <customPrintf>
}
     3f0:	0001883a 	nop
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <writeCanal>:

void writeCanal(char num){
     408:	defffc04 	addi	sp,sp,-16
     40c:	dfc00315 	stw	ra,12(sp)
     410:	df000215 	stw	fp,8(sp)
     414:	df000204 	addi	fp,sp,8
     418:	2005883a 	mov	r2,r4
     41c:	e0bfff05 	stb	r2,-4(fp)
	char snum[2];
	if (num >= 0 && num <= 23){
     420:	e0bfff07 	ldb	r2,-4(fp)
     424:	10001816 	blt	r2,zero,488 <writeCanal+0x80>
     428:	e0bfff07 	ldb	r2,-4(fp)
     42c:	10800608 	cmpgei	r2,r2,24
     430:	1000151e 	bne	r2,zero,488 <writeCanal+0x80>
	sprintf(snum, "%0.2d", num);
     434:	e0bfff07 	ldb	r2,-4(fp)
     438:	100d883a 	mov	r6,r2
     43c:	01400074 	movhi	r5,1
     440:	29578304 	addi	r5,r5,24076
     444:	e13ffe04 	addi	r4,fp,-8
     448:	00037040 	call	3704 <sprintf>
	writeCaracter(snum[0],2);
     44c:	e0bffe03 	ldbu	r2,-8(fp)
     450:	10803fcc 	andi	r2,r2,255
     454:	1080201c 	xori	r2,r2,128
     458:	10bfe004 	addi	r2,r2,-128
     45c:	01400084 	movi	r5,2
     460:	1009883a 	mov	r4,r2
     464:	00003380 	call	338 <writeCaracter>
	writeCaracter(snum[1],3);
     468:	e0bffe43 	ldbu	r2,-7(fp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	1080201c 	xori	r2,r2,128
     474:	10bfe004 	addi	r2,r2,-128
     478:	014000c4 	movi	r5,3
     47c:	1009883a 	mov	r4,r2
     480:	00003380 	call	338 <writeCaracter>
	customPrintf();
     484:	000026c0 	call	26c <customPrintf>
	}
}
     488:	0001883a 	nop
     48c:	e037883a 	mov	sp,fp
     490:	dfc00117 	ldw	ra,4(sp)
     494:	df000017 	ldw	fp,0(sp)
     498:	dec00204 	addi	sp,sp,8
     49c:	f800283a 	ret

000004a0 <writeTon>:

void writeTon(int Ton){
     4a0:	defffc04 	addi	sp,sp,-16
     4a4:	dfc00315 	stw	ra,12(sp)
     4a8:	df000215 	stw	fp,8(sp)
     4ac:	df000204 	addi	fp,sp,8
     4b0:	e13fff15 	stw	r4,-4(fp)
	char snum[4];
	sprintf(snum, "%0.4d", Ton);
     4b4:	e1bfff17 	ldw	r6,-4(fp)
     4b8:	01400074 	movhi	r5,1
     4bc:	29578504 	addi	r5,r5,24084
     4c0:	e13ffe04 	addi	r4,fp,-8
     4c4:	00037040 	call	3704 <sprintf>
	writeCaracter(snum[0], 18);
     4c8:	e0bffe03 	ldbu	r2,-8(fp)
     4cc:	10803fcc 	andi	r2,r2,255
     4d0:	1080201c 	xori	r2,r2,128
     4d4:	10bfe004 	addi	r2,r2,-128
     4d8:	01400484 	movi	r5,18
     4dc:	1009883a 	mov	r4,r2
     4e0:	00003380 	call	338 <writeCaracter>
	writeCaracter(snum[1], 19);
     4e4:	e0bffe43 	ldbu	r2,-7(fp)
     4e8:	10803fcc 	andi	r2,r2,255
     4ec:	1080201c 	xori	r2,r2,128
     4f0:	10bfe004 	addi	r2,r2,-128
     4f4:	014004c4 	movi	r5,19
     4f8:	1009883a 	mov	r4,r2
     4fc:	00003380 	call	338 <writeCaracter>
	writeCaracter(snum[2], 20);
     500:	e0bffe83 	ldbu	r2,-6(fp)
     504:	10803fcc 	andi	r2,r2,255
     508:	1080201c 	xori	r2,r2,128
     50c:	10bfe004 	addi	r2,r2,-128
     510:	01400504 	movi	r5,20
     514:	1009883a 	mov	r4,r2
     518:	00003380 	call	338 <writeCaracter>
	writeCaracter(snum[3], 21);
     51c:	e0bffec3 	ldbu	r2,-5(fp)
     520:	10803fcc 	andi	r2,r2,255
     524:	1080201c 	xori	r2,r2,128
     528:	10bfe004 	addi	r2,r2,-128
     52c:	01400544 	movi	r5,21
     530:	1009883a 	mov	r4,r2
     534:	00003380 	call	338 <writeCaracter>
	customPrintf();
     538:	000026c0 	call	26c <customPrintf>
}
     53c:	0001883a 	nop
     540:	e037883a 	mov	sp,fp
     544:	dfc00117 	ldw	ra,4(sp)
     548:	df000017 	ldw	fp,0(sp)
     54c:	dec00204 	addi	sp,sp,8
     550:	f800283a 	ret

00000554 <main>:
void boutonInterupt(void * isr_context);
void initInterupt();
int edge_capture;				// Variable d'etat boutons poussoirs

int main()
{
     554:	defffc04 	addi	sp,sp,-16
     558:	dfc00315 	stw	ra,12(sp)
     55c:	df000215 	stw	fp,8(sp)
     560:	dc000115 	stw	r16,4(sp)
     564:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
     568:	01000074 	movhi	r4,1
     56c:	21178704 	addi	r4,r4,24092
     570:	00034540 	call	3454 <puts>




  initLCD();
     574:	00002dc0 	call	2dc <initLCD>
  initPWM();
     578:	00010200 	call	1020 <initPWM>
  initInterupt();
     57c:	0000fb40 	call	fb4 <initInterupt>
  alt_ic_isr_register(BUTTON_IRQ_INTERRUPT_CONTROLLER_ID,BUTTON_IRQ,boutonInterupt,NULL,NULL);
     580:	d8000015 	stw	zero,0(sp)
     584:	000f883a 	mov	r7,zero
     588:	01800034 	movhi	r6,0
     58c:	31839304 	addi	r6,r6,3660
     590:	01400044 	movi	r5,1
     594:	0009883a 	mov	r4,zero
     598:	00127140 	call	12714 <alt_ic_isr_register>
  //updateValue(1,250);
  writeOnOff(1);
     59c:	01000044 	movi	r4,1
     5a0:	00003800 	call	380 <writeOnOff>
  writeCanal(15);
     5a4:	010003c4 	movi	r4,15
     5a8:	00004080 	call	408 <writeCanal>
  writeTon(251);
     5ac:	01003ec4 	movi	r4,251
     5b0:	00004a00 	call	4a0 <writeTon>

  while(1){
      if(numCanal != lastNumCanal){
     5b4:	d0e72e03 	ldbu	r3,-25416(gp)
     5b8:	d0a00003 	ldbu	r2,-32768(gp)
     5bc:	18c03fcc 	andi	r3,r3,255
     5c0:	18c0201c 	xori	r3,r3,128
     5c4:	18ffe004 	addi	r3,r3,-128
     5c8:	10803fcc 	andi	r2,r2,255
     5cc:	1080201c 	xori	r2,r2,128
     5d0:	10bfe004 	addi	r2,r2,-128
     5d4:	18802126 	beq	r3,r2,65c <main+0x108>
          lastNumCanal = numCanal;
     5d8:	d0a72e03 	ldbu	r2,-25416(gp)
     5dc:	d0a00005 	stb	r2,-32768(gp)
          writeCanal(numCanal);
     5e0:	d0a72e03 	ldbu	r2,-25416(gp)
     5e4:	10803fcc 	andi	r2,r2,255
     5e8:	1080201c 	xori	r2,r2,128
     5ec:	10bfe004 	addi	r2,r2,-128
     5f0:	1009883a 	mov	r4,r2
     5f4:	00004080 	call	408 <writeCanal>
          writeOnOff(isOn(numCanal));
     5f8:	d0a72e03 	ldbu	r2,-25416(gp)
     5fc:	10803fcc 	andi	r2,r2,255
     600:	1080201c 	xori	r2,r2,128
     604:	10bfe004 	addi	r2,r2,-128
     608:	1009883a 	mov	r4,r2
     60c:	00011b40 	call	11b4 <isOn>
     610:	10803fcc 	andi	r2,r2,255
     614:	1080201c 	xori	r2,r2,128
     618:	10bfe004 	addi	r2,r2,-128
     61c:	1009883a 	mov	r4,r2
     620:	00003800 	call	380 <writeOnOff>
          writeTon(pwmTon[numCanal]);
     624:	d0a72e03 	ldbu	r2,-25416(gp)
     628:	10c03fcc 	andi	r3,r2,255
     62c:	18c0201c 	xori	r3,r3,128
     630:	18ffe004 	addi	r3,r3,-128
     634:	00800074 	movhi	r2,1
     638:	10991604 	addi	r2,r2,25688
     63c:	18c7883a 	add	r3,r3,r3
     640:	10c5883a 	add	r2,r2,r3
     644:	1080000b 	ldhu	r2,0(r2)
     648:	10bfffcc 	andi	r2,r2,65535
     64c:	10a0001c 	xori	r2,r2,32768
     650:	10a00004 	addi	r2,r2,-32768
     654:	1009883a 	mov	r4,r2
     658:	00004a00 	call	4a0 <writeTon>
      }
      if(newTon){
     65c:	d0a72f0b 	ldhu	r2,-25412(gp)
     660:	10bfffcc 	andi	r2,r2,65535
     664:	10a0001c 	xori	r2,r2,32768
     668:	10a00004 	addi	r2,r2,-32768
     66c:	1001c726 	beq	r2,zero,d8c <main+0x838>
          newTon = 0;
     670:	d0272f0d 	sth	zero,-25412(gp)
          /** traitement increment **/
          switch(increment){
     674:	d0a0008b 	ldhu	r2,-32766(gp)
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	10a0001c 	xori	r2,r2,32768
     680:	10a00004 	addi	r2,r2,-32768
     684:	10c00060 	cmpeqi	r3,r2,1
     688:	18007d1e 	bne	r3,zero,880 <main+0x32c>
     68c:	10c00088 	cmpgei	r3,r2,2
     690:	1800021e 	bne	r3,zero,69c <main+0x148>
     694:	10011026 	beq	r2,zero,ad8 <main+0x584>
     698:	00019a06 	br	d04 <main+0x7b0>
     69c:	10c000a0 	cmpeqi	r3,r2,2
     6a0:	1800251e 	bne	r3,zero,738 <main+0x1e4>
     6a4:	108000e0 	cmpeqi	r2,r2,3
     6a8:	10019626 	beq	r2,zero,d04 <main+0x7b0>
          case 3 :
          	  if(pwmTon[numCanal]<1000){
     6ac:	d0a72e03 	ldbu	r2,-25416(gp)
     6b0:	10c03fcc 	andi	r3,r2,255
     6b4:	18c0201c 	xori	r3,r3,128
     6b8:	18ffe004 	addi	r3,r3,-128
     6bc:	00800074 	movhi	r2,1
     6c0:	10991604 	addi	r2,r2,25688
     6c4:	18c7883a 	add	r3,r3,r3
     6c8:	10c5883a 	add	r2,r2,r3
     6cc:	1080000b 	ldhu	r2,0(r2)
     6d0:	10bfffcc 	andi	r2,r2,65535
     6d4:	10a0001c 	xori	r2,r2,32768
     6d8:	10a00004 	addi	r2,r2,-32768
     6dc:	1080fa08 	cmpgei	r2,r2,1000
     6e0:	10000b1e 	bne	r2,zero,710 <main+0x1bc>
          		  pwmTon[numCanal] = 1000;
     6e4:	d0a72e03 	ldbu	r2,-25416(gp)
     6e8:	10c03fcc 	andi	r3,r2,255
     6ec:	18c0201c 	xori	r3,r3,128
     6f0:	18ffe004 	addi	r3,r3,-128
     6f4:	00800074 	movhi	r2,1
     6f8:	10991604 	addi	r2,r2,25688
     6fc:	18c7883a 	add	r3,r3,r3
     700:	10c5883a 	add	r2,r2,r3
     704:	00c0fa04 	movi	r3,1000
     708:	10c0000d 	sth	r3,0(r2)
          	  }else{
        	  pwmTon[numCanal] = 0;
          	  }
          	  break;
     70c:	00017d06 	br	d04 <main+0x7b0>
          switch(increment){
          case 3 :
          	  if(pwmTon[numCanal]<1000){
          		  pwmTon[numCanal] = 1000;
          	  }else{
        	  pwmTon[numCanal] = 0;
     710:	d0a72e03 	ldbu	r2,-25416(gp)
     714:	10c03fcc 	andi	r3,r2,255
     718:	18c0201c 	xori	r3,r3,128
     71c:	18ffe004 	addi	r3,r3,-128
     720:	00800074 	movhi	r2,1
     724:	10991604 	addi	r2,r2,25688
     728:	18c7883a 	add	r3,r3,r3
     72c:	10c5883a 	add	r2,r2,r3
     730:	1000000d 	sth	zero,0(r2)
          	  }
          	  break;
     734:	00017306 	br	d04 <main+0x7b0>
          case 2 :
        	  if(pwmTon[numCanal]<1000){
     738:	d0a72e03 	ldbu	r2,-25416(gp)
     73c:	10c03fcc 	andi	r3,r2,255
     740:	18c0201c 	xori	r3,r3,128
     744:	18ffe004 	addi	r3,r3,-128
     748:	00800074 	movhi	r2,1
     74c:	10991604 	addi	r2,r2,25688
     750:	18c7883a 	add	r3,r3,r3
     754:	10c5883a 	add	r2,r2,r3
     758:	1080000b 	ldhu	r2,0(r2)
     75c:	10bfffcc 	andi	r2,r2,65535
     760:	10a0001c 	xori	r2,r2,32768
     764:	10a00004 	addi	r2,r2,-32768
     768:	1080fa08 	cmpgei	r2,r2,1000
     76c:	1001641e 	bne	r2,zero,d00 <main+0x7ac>
        	  if((pwmTon[numCanal]/100)%10 ==9){
     770:	d0a72e03 	ldbu	r2,-25416(gp)
     774:	10c03fcc 	andi	r3,r2,255
     778:	18c0201c 	xori	r3,r3,128
     77c:	18ffe004 	addi	r3,r3,-128
     780:	00800074 	movhi	r2,1
     784:	10991604 	addi	r2,r2,25688
     788:	18c7883a 	add	r3,r3,r3
     78c:	10c5883a 	add	r2,r2,r3
     790:	1080000b 	ldhu	r2,0(r2)
     794:	10bfffcc 	andi	r2,r2,65535
     798:	10a0001c 	xori	r2,r2,32768
     79c:	10a00004 	addi	r2,r2,-32768
     7a0:	01401904 	movi	r5,100
     7a4:	1009883a 	mov	r4,r2
     7a8:	00012cc0 	call	12cc <__divsi3>
     7ac:	10bfffcc 	andi	r2,r2,65535
     7b0:	10a0001c 	xori	r2,r2,32768
     7b4:	10a00004 	addi	r2,r2,-32768
     7b8:	01400284 	movi	r5,10
     7bc:	1009883a 	mov	r4,r2
     7c0:	00013500 	call	1350 <__modsi3>
     7c4:	10bfffcc 	andi	r2,r2,65535
     7c8:	10a0001c 	xori	r2,r2,32768
     7cc:	10a00004 	addi	r2,r2,-32768
     7d0:	10800258 	cmpnei	r2,r2,9
     7d4:	1000151e 	bne	r2,zero,82c <main+0x2d8>
        		  pwmTon[numCanal] -=900;
     7d8:	d0a72e03 	ldbu	r2,-25416(gp)
     7dc:	10c03fcc 	andi	r3,r2,255
     7e0:	18c0201c 	xori	r3,r3,128
     7e4:	18ffe004 	addi	r3,r3,-128
     7e8:	d0a72e03 	ldbu	r2,-25416(gp)
     7ec:	11003fcc 	andi	r4,r2,255
     7f0:	2100201c 	xori	r4,r4,128
     7f4:	213fe004 	addi	r4,r4,-128
     7f8:	00800074 	movhi	r2,1
     7fc:	10991604 	addi	r2,r2,25688
     800:	2109883a 	add	r4,r4,r4
     804:	1105883a 	add	r2,r2,r4
     808:	1080000b 	ldhu	r2,0(r2)
     80c:	10bf1f04 	addi	r2,r2,-900
     810:	1009883a 	mov	r4,r2
     814:	00800074 	movhi	r2,1
     818:	10991604 	addi	r2,r2,25688
     81c:	18c7883a 	add	r3,r3,r3
     820:	10c5883a 	add	r2,r2,r3
     824:	1100000d 	sth	r4,0(r2)
        	  }else{
        		  pwmTon[numCanal] +=100;
        	  }
        	  }
        	  break;
     828:	00013506 	br	d00 <main+0x7ac>
          case 2 :
        	  if(pwmTon[numCanal]<1000){
        	  if((pwmTon[numCanal]/100)%10 ==9){
        		  pwmTon[numCanal] -=900;
        	  }else{
        		  pwmTon[numCanal] +=100;
     82c:	d0a72e03 	ldbu	r2,-25416(gp)
     830:	10c03fcc 	andi	r3,r2,255
     834:	18c0201c 	xori	r3,r3,128
     838:	18ffe004 	addi	r3,r3,-128
     83c:	d0a72e03 	ldbu	r2,-25416(gp)
     840:	11003fcc 	andi	r4,r2,255
     844:	2100201c 	xori	r4,r4,128
     848:	213fe004 	addi	r4,r4,-128
     84c:	00800074 	movhi	r2,1
     850:	10991604 	addi	r2,r2,25688
     854:	2109883a 	add	r4,r4,r4
     858:	1105883a 	add	r2,r2,r4
     85c:	1080000b 	ldhu	r2,0(r2)
     860:	10801904 	addi	r2,r2,100
     864:	1009883a 	mov	r4,r2
     868:	00800074 	movhi	r2,1
     86c:	10991604 	addi	r2,r2,25688
     870:	18c7883a 	add	r3,r3,r3
     874:	10c5883a 	add	r2,r2,r3
     878:	1100000d 	sth	r4,0(r2)
        	  }
        	  }
        	  break;
     87c:	00012006 	br	d00 <main+0x7ac>
          case 1 :
        	  if(pwmTon[numCanal]<1000){
     880:	d0a72e03 	ldbu	r2,-25416(gp)
     884:	10c03fcc 	andi	r3,r2,255
     888:	18c0201c 	xori	r3,r3,128
     88c:	18ffe004 	addi	r3,r3,-128
     890:	00800074 	movhi	r2,1
     894:	10991604 	addi	r2,r2,25688
     898:	18c7883a 	add	r3,r3,r3
     89c:	10c5883a 	add	r2,r2,r3
     8a0:	1080000b 	ldhu	r2,0(r2)
     8a4:	10bfffcc 	andi	r2,r2,65535
     8a8:	10a0001c 	xori	r2,r2,32768
     8ac:	10a00004 	addi	r2,r2,-32768
     8b0:	1080fa08 	cmpgei	r2,r2,1000
     8b4:	1000441e 	bne	r2,zero,9c8 <main+0x474>
        	          	  if((pwmTon[numCanal]/10)%10 ==9){
     8b8:	d0a72e03 	ldbu	r2,-25416(gp)
     8bc:	10c03fcc 	andi	r3,r2,255
     8c0:	18c0201c 	xori	r3,r3,128
     8c4:	18ffe004 	addi	r3,r3,-128
     8c8:	00800074 	movhi	r2,1
     8cc:	10991604 	addi	r2,r2,25688
     8d0:	18c7883a 	add	r3,r3,r3
     8d4:	10c5883a 	add	r2,r2,r3
     8d8:	1080000b 	ldhu	r2,0(r2)
     8dc:	10bfffcc 	andi	r2,r2,65535
     8e0:	10a0001c 	xori	r2,r2,32768
     8e4:	10a00004 	addi	r2,r2,-32768
     8e8:	01400284 	movi	r5,10
     8ec:	1009883a 	mov	r4,r2
     8f0:	00012cc0 	call	12cc <__divsi3>
     8f4:	10bfffcc 	andi	r2,r2,65535
     8f8:	10a0001c 	xori	r2,r2,32768
     8fc:	10a00004 	addi	r2,r2,-32768
     900:	01400284 	movi	r5,10
     904:	1009883a 	mov	r4,r2
     908:	00013500 	call	1350 <__modsi3>
     90c:	10bfffcc 	andi	r2,r2,65535
     910:	10a0001c 	xori	r2,r2,32768
     914:	10a00004 	addi	r2,r2,-32768
     918:	10800258 	cmpnei	r2,r2,9
     91c:	1000151e 	bne	r2,zero,974 <main+0x420>
        	          		  pwmTon[numCanal] -=90;
     920:	d0a72e03 	ldbu	r2,-25416(gp)
     924:	10c03fcc 	andi	r3,r2,255
     928:	18c0201c 	xori	r3,r3,128
     92c:	18ffe004 	addi	r3,r3,-128
     930:	d0a72e03 	ldbu	r2,-25416(gp)
     934:	11003fcc 	andi	r4,r2,255
     938:	2100201c 	xori	r4,r4,128
     93c:	213fe004 	addi	r4,r4,-128
     940:	00800074 	movhi	r2,1
     944:	10991604 	addi	r2,r2,25688
     948:	2109883a 	add	r4,r4,r4
     94c:	1105883a 	add	r2,r2,r4
     950:	1080000b 	ldhu	r2,0(r2)
     954:	10bfe984 	addi	r2,r2,-90
     958:	1009883a 	mov	r4,r2
     95c:	00800074 	movhi	r2,1
     960:	10991604 	addi	r2,r2,25688
     964:	18c7883a 	add	r3,r3,r3
     968:	10c5883a 	add	r2,r2,r3
     96c:	1100000d 	sth	r4,0(r2)
        	          		        	          		  pwmTon[numCanal] -=20;
        	          		        	          	  }else{
        	          		        	          		  pwmTon[numCanal] +=10;
        	          		        	          	  }
        	          	  }
        	  break;
     970:	0000e406 	br	d04 <main+0x7b0>
          case 1 :
        	  if(pwmTon[numCanal]<1000){
        	          	  if((pwmTon[numCanal]/10)%10 ==9){
        	          		  pwmTon[numCanal] -=90;
        	          	  }else{
        	          		  pwmTon[numCanal] +=10;
     974:	d0a72e03 	ldbu	r2,-25416(gp)
     978:	10c03fcc 	andi	r3,r2,255
     97c:	18c0201c 	xori	r3,r3,128
     980:	18ffe004 	addi	r3,r3,-128
     984:	d0a72e03 	ldbu	r2,-25416(gp)
     988:	11003fcc 	andi	r4,r2,255
     98c:	2100201c 	xori	r4,r4,128
     990:	213fe004 	addi	r4,r4,-128
     994:	00800074 	movhi	r2,1
     998:	10991604 	addi	r2,r2,25688
     99c:	2109883a 	add	r4,r4,r4
     9a0:	1105883a 	add	r2,r2,r4
     9a4:	1080000b 	ldhu	r2,0(r2)
     9a8:	10800284 	addi	r2,r2,10
     9ac:	1009883a 	mov	r4,r2
     9b0:	00800074 	movhi	r2,1
     9b4:	10991604 	addi	r2,r2,25688
     9b8:	18c7883a 	add	r3,r3,r3
     9bc:	10c5883a 	add	r2,r2,r3
     9c0:	1100000d 	sth	r4,0(r2)
        	          		        	          		  pwmTon[numCanal] -=20;
        	          		        	          	  }else{
        	          		        	          		  pwmTon[numCanal] +=10;
        	          		        	          	  }
        	          	  }
        	  break;
     9c4:	0000cf06 	br	d04 <main+0x7b0>
        	          		  pwmTon[numCanal] -=90;
        	          	  }else{
        	          		  pwmTon[numCanal] +=10;
        	          	  }
        	          	  }else{
        	          		if((pwmTon[numCanal]/10)%10 ==2){
     9c8:	d0a72e03 	ldbu	r2,-25416(gp)
     9cc:	10c03fcc 	andi	r3,r2,255
     9d0:	18c0201c 	xori	r3,r3,128
     9d4:	18ffe004 	addi	r3,r3,-128
     9d8:	00800074 	movhi	r2,1
     9dc:	10991604 	addi	r2,r2,25688
     9e0:	18c7883a 	add	r3,r3,r3
     9e4:	10c5883a 	add	r2,r2,r3
     9e8:	1080000b 	ldhu	r2,0(r2)
     9ec:	10bfffcc 	andi	r2,r2,65535
     9f0:	10a0001c 	xori	r2,r2,32768
     9f4:	10a00004 	addi	r2,r2,-32768
     9f8:	01400284 	movi	r5,10
     9fc:	1009883a 	mov	r4,r2
     a00:	00012cc0 	call	12cc <__divsi3>
     a04:	10bfffcc 	andi	r2,r2,65535
     a08:	10a0001c 	xori	r2,r2,32768
     a0c:	10a00004 	addi	r2,r2,-32768
     a10:	01400284 	movi	r5,10
     a14:	1009883a 	mov	r4,r2
     a18:	00013500 	call	1350 <__modsi3>
     a1c:	10bfffcc 	andi	r2,r2,65535
     a20:	10a0001c 	xori	r2,r2,32768
     a24:	10a00004 	addi	r2,r2,-32768
     a28:	10800098 	cmpnei	r2,r2,2
     a2c:	1000151e 	bne	r2,zero,a84 <main+0x530>
        	          		        	          		  pwmTon[numCanal] -=20;
     a30:	d0a72e03 	ldbu	r2,-25416(gp)
     a34:	10c03fcc 	andi	r3,r2,255
     a38:	18c0201c 	xori	r3,r3,128
     a3c:	18ffe004 	addi	r3,r3,-128
     a40:	d0a72e03 	ldbu	r2,-25416(gp)
     a44:	11003fcc 	andi	r4,r2,255
     a48:	2100201c 	xori	r4,r4,128
     a4c:	213fe004 	addi	r4,r4,-128
     a50:	00800074 	movhi	r2,1
     a54:	10991604 	addi	r2,r2,25688
     a58:	2109883a 	add	r4,r4,r4
     a5c:	1105883a 	add	r2,r2,r4
     a60:	1080000b 	ldhu	r2,0(r2)
     a64:	10bffb04 	addi	r2,r2,-20
     a68:	1009883a 	mov	r4,r2
     a6c:	00800074 	movhi	r2,1
     a70:	10991604 	addi	r2,r2,25688
     a74:	18c7883a 	add	r3,r3,r3
     a78:	10c5883a 	add	r2,r2,r3
     a7c:	1100000d 	sth	r4,0(r2)
        	          		        	          	  }else{
        	          		        	          		  pwmTon[numCanal] +=10;
        	          		        	          	  }
        	          	  }
        	  break;
     a80:	0000a006 	br	d04 <main+0x7b0>
        	          	  }
        	          	  }else{
        	          		if((pwmTon[numCanal]/10)%10 ==2){
        	          		        	          		  pwmTon[numCanal] -=20;
        	          		        	          	  }else{
        	          		        	          		  pwmTon[numCanal] +=10;
     a84:	d0a72e03 	ldbu	r2,-25416(gp)
     a88:	10c03fcc 	andi	r3,r2,255
     a8c:	18c0201c 	xori	r3,r3,128
     a90:	18ffe004 	addi	r3,r3,-128
     a94:	d0a72e03 	ldbu	r2,-25416(gp)
     a98:	11003fcc 	andi	r4,r2,255
     a9c:	2100201c 	xori	r4,r4,128
     aa0:	213fe004 	addi	r4,r4,-128
     aa4:	00800074 	movhi	r2,1
     aa8:	10991604 	addi	r2,r2,25688
     aac:	2109883a 	add	r4,r4,r4
     ab0:	1105883a 	add	r2,r2,r4
     ab4:	1080000b 	ldhu	r2,0(r2)
     ab8:	10800284 	addi	r2,r2,10
     abc:	1009883a 	mov	r4,r2
     ac0:	00800074 	movhi	r2,1
     ac4:	10991604 	addi	r2,r2,25688
     ac8:	18c7883a 	add	r3,r3,r3
     acc:	10c5883a 	add	r2,r2,r3
     ad0:	1100000d 	sth	r4,0(r2)
        	          		        	          	  }
        	          	  }
        	  break;
     ad4:	00008b06 	br	d04 <main+0x7b0>
          case 0 :
        	  if(pwmTon[numCanal]<1000){
     ad8:	d0a72e03 	ldbu	r2,-25416(gp)
     adc:	10c03fcc 	andi	r3,r2,255
     ae0:	18c0201c 	xori	r3,r3,128
     ae4:	18ffe004 	addi	r3,r3,-128
     ae8:	00800074 	movhi	r2,1
     aec:	10991604 	addi	r2,r2,25688
     af0:	18c7883a 	add	r3,r3,r3
     af4:	10c5883a 	add	r2,r2,r3
     af8:	1080000b 	ldhu	r2,0(r2)
     afc:	10bfffcc 	andi	r2,r2,65535
     b00:	10a0001c 	xori	r2,r2,32768
     b04:	10a00004 	addi	r2,r2,-32768
     b08:	1080fa08 	cmpgei	r2,r2,1000
     b0c:	10003e1e 	bne	r2,zero,c08 <main+0x6b4>
        	          	  if((pwmTon[numCanal]/1)%10 ==9){
     b10:	d0a72e03 	ldbu	r2,-25416(gp)
     b14:	10c03fcc 	andi	r3,r2,255
     b18:	18c0201c 	xori	r3,r3,128
     b1c:	18ffe004 	addi	r3,r3,-128
     b20:	00800074 	movhi	r2,1
     b24:	10991604 	addi	r2,r2,25688
     b28:	18c7883a 	add	r3,r3,r3
     b2c:	10c5883a 	add	r2,r2,r3
     b30:	1080000b 	ldhu	r2,0(r2)
     b34:	10bfffcc 	andi	r2,r2,65535
     b38:	10a0001c 	xori	r2,r2,32768
     b3c:	10a00004 	addi	r2,r2,-32768
     b40:	01400284 	movi	r5,10
     b44:	1009883a 	mov	r4,r2
     b48:	00013500 	call	1350 <__modsi3>
     b4c:	10bfffcc 	andi	r2,r2,65535
     b50:	10a0001c 	xori	r2,r2,32768
     b54:	10a00004 	addi	r2,r2,-32768
     b58:	10800258 	cmpnei	r2,r2,9
     b5c:	1000151e 	bne	r2,zero,bb4 <main+0x660>
        	          		  pwmTon[numCanal] -=9;
     b60:	d0a72e03 	ldbu	r2,-25416(gp)
     b64:	10c03fcc 	andi	r3,r2,255
     b68:	18c0201c 	xori	r3,r3,128
     b6c:	18ffe004 	addi	r3,r3,-128
     b70:	d0a72e03 	ldbu	r2,-25416(gp)
     b74:	11003fcc 	andi	r4,r2,255
     b78:	2100201c 	xori	r4,r4,128
     b7c:	213fe004 	addi	r4,r4,-128
     b80:	00800074 	movhi	r2,1
     b84:	10991604 	addi	r2,r2,25688
     b88:	2109883a 	add	r4,r4,r4
     b8c:	1105883a 	add	r2,r2,r4
     b90:	1080000b 	ldhu	r2,0(r2)
     b94:	10bffdc4 	addi	r2,r2,-9
     b98:	1009883a 	mov	r4,r2
     b9c:	00800074 	movhi	r2,1
     ba0:	10991604 	addi	r2,r2,25688
     ba4:	18c7883a 	add	r3,r3,r3
     ba8:	10c5883a 	add	r2,r2,r3
     bac:	1100000d 	sth	r4,0(r2)
        	                  	          		        	          		  pwmTon[numCanal] -=3;
        	                  	          		        	          	  }else{
        	                  	          		        	          		  pwmTon[numCanal] +=1;
        	                  	          		        	          	  }
        	          	  }
        	  break;
     bb0:	00005406 	br	d04 <main+0x7b0>
          case 0 :
        	  if(pwmTon[numCanal]<1000){
        	          	  if((pwmTon[numCanal]/1)%10 ==9){
        	          		  pwmTon[numCanal] -=9;
        	          	  }else{
        	          		  pwmTon[numCanal] +=1;
     bb4:	d0a72e03 	ldbu	r2,-25416(gp)
     bb8:	10c03fcc 	andi	r3,r2,255
     bbc:	18c0201c 	xori	r3,r3,128
     bc0:	18ffe004 	addi	r3,r3,-128
     bc4:	d0a72e03 	ldbu	r2,-25416(gp)
     bc8:	11003fcc 	andi	r4,r2,255
     bcc:	2100201c 	xori	r4,r4,128
     bd0:	213fe004 	addi	r4,r4,-128
     bd4:	00800074 	movhi	r2,1
     bd8:	10991604 	addi	r2,r2,25688
     bdc:	2109883a 	add	r4,r4,r4
     be0:	1105883a 	add	r2,r2,r4
     be4:	1080000b 	ldhu	r2,0(r2)
     be8:	10800044 	addi	r2,r2,1
     bec:	1009883a 	mov	r4,r2
     bf0:	00800074 	movhi	r2,1
     bf4:	10991604 	addi	r2,r2,25688
     bf8:	18c7883a 	add	r3,r3,r3
     bfc:	10c5883a 	add	r2,r2,r3
     c00:	1100000d 	sth	r4,0(r2)
        	                  	          		        	          		  pwmTon[numCanal] -=3;
        	                  	          		        	          	  }else{
        	                  	          		        	          		  pwmTon[numCanal] +=1;
        	                  	          		        	          	  }
        	          	  }
        	  break;
     c04:	00003f06 	br	d04 <main+0x7b0>
        	          		  pwmTon[numCanal] -=9;
        	          	  }else{
        	          		  pwmTon[numCanal] +=1;
        	          	  }
        	          	  }else{
        	          		if((pwmTon[numCanal]/1)%10 ==3){
     c08:	d0a72e03 	ldbu	r2,-25416(gp)
     c0c:	10c03fcc 	andi	r3,r2,255
     c10:	18c0201c 	xori	r3,r3,128
     c14:	18ffe004 	addi	r3,r3,-128
     c18:	00800074 	movhi	r2,1
     c1c:	10991604 	addi	r2,r2,25688
     c20:	18c7883a 	add	r3,r3,r3
     c24:	10c5883a 	add	r2,r2,r3
     c28:	1080000b 	ldhu	r2,0(r2)
     c2c:	10bfffcc 	andi	r2,r2,65535
     c30:	10a0001c 	xori	r2,r2,32768
     c34:	10a00004 	addi	r2,r2,-32768
     c38:	01400284 	movi	r5,10
     c3c:	1009883a 	mov	r4,r2
     c40:	00013500 	call	1350 <__modsi3>
     c44:	10bfffcc 	andi	r2,r2,65535
     c48:	10a0001c 	xori	r2,r2,32768
     c4c:	10a00004 	addi	r2,r2,-32768
     c50:	108000d8 	cmpnei	r2,r2,3
     c54:	1000151e 	bne	r2,zero,cac <main+0x758>
        	                  	          		        	          		  pwmTon[numCanal] -=3;
     c58:	d0a72e03 	ldbu	r2,-25416(gp)
     c5c:	10c03fcc 	andi	r3,r2,255
     c60:	18c0201c 	xori	r3,r3,128
     c64:	18ffe004 	addi	r3,r3,-128
     c68:	d0a72e03 	ldbu	r2,-25416(gp)
     c6c:	11003fcc 	andi	r4,r2,255
     c70:	2100201c 	xori	r4,r4,128
     c74:	213fe004 	addi	r4,r4,-128
     c78:	00800074 	movhi	r2,1
     c7c:	10991604 	addi	r2,r2,25688
     c80:	2109883a 	add	r4,r4,r4
     c84:	1105883a 	add	r2,r2,r4
     c88:	1080000b 	ldhu	r2,0(r2)
     c8c:	10bfff44 	addi	r2,r2,-3
     c90:	1009883a 	mov	r4,r2
     c94:	00800074 	movhi	r2,1
     c98:	10991604 	addi	r2,r2,25688
     c9c:	18c7883a 	add	r3,r3,r3
     ca0:	10c5883a 	add	r2,r2,r3
     ca4:	1100000d 	sth	r4,0(r2)
        	                  	          		        	          	  }else{
        	                  	          		        	          		  pwmTon[numCanal] +=1;
        	                  	          		        	          	  }
        	          	  }
        	  break;
     ca8:	00001606 	br	d04 <main+0x7b0>
        	          	  }
        	          	  }else{
        	          		if((pwmTon[numCanal]/1)%10 ==3){
        	                  	          		        	          		  pwmTon[numCanal] -=3;
        	                  	          		        	          	  }else{
        	                  	          		        	          		  pwmTon[numCanal] +=1;
     cac:	d0a72e03 	ldbu	r2,-25416(gp)
     cb0:	10c03fcc 	andi	r3,r2,255
     cb4:	18c0201c 	xori	r3,r3,128
     cb8:	18ffe004 	addi	r3,r3,-128
     cbc:	d0a72e03 	ldbu	r2,-25416(gp)
     cc0:	11003fcc 	andi	r4,r2,255
     cc4:	2100201c 	xori	r4,r4,128
     cc8:	213fe004 	addi	r4,r4,-128
     ccc:	00800074 	movhi	r2,1
     cd0:	10991604 	addi	r2,r2,25688
     cd4:	2109883a 	add	r4,r4,r4
     cd8:	1105883a 	add	r2,r2,r4
     cdc:	1080000b 	ldhu	r2,0(r2)
     ce0:	10800044 	addi	r2,r2,1
     ce4:	1009883a 	mov	r4,r2
     ce8:	00800074 	movhi	r2,1
     cec:	10991604 	addi	r2,r2,25688
     cf0:	18c7883a 	add	r3,r3,r3
     cf4:	10c5883a 	add	r2,r2,r3
     cf8:	1100000d 	sth	r4,0(r2)
        	                  	          		        	          	  }
        	          	  }
        	  break;
     cfc:	00000106 	br	d04 <main+0x7b0>
        		  pwmTon[numCanal] -=900;
        	  }else{
        		  pwmTon[numCanal] +=100;
        	  }
        	  }
        	  break;
     d00:	0001883a 	nop




          /** execute new ton**/
          updateValue(numCanal , pwmTon[numCanal]);
     d04:	d0a72e03 	ldbu	r2,-25416(gp)
     d08:	11003fcc 	andi	r4,r2,255
     d0c:	2100201c 	xori	r4,r4,128
     d10:	213fe004 	addi	r4,r4,-128
     d14:	d0a72e03 	ldbu	r2,-25416(gp)
     d18:	10c03fcc 	andi	r3,r2,255
     d1c:	18c0201c 	xori	r3,r3,128
     d20:	18ffe004 	addi	r3,r3,-128
     d24:	00800074 	movhi	r2,1
     d28:	10991604 	addi	r2,r2,25688
     d2c:	18c7883a 	add	r3,r3,r3
     d30:	10c5883a 	add	r2,r2,r3
     d34:	1080000b 	ldhu	r2,0(r2)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10a0001c 	xori	r2,r2,32768
     d40:	10a00004 	addi	r2,r2,-32768
     d44:	100b883a 	mov	r5,r2
     d48:	00011100 	call	1110 <updateValue>

          /** print new Ton**/



          writeTon(pwmTon[numCanal]);
     d4c:	d0a72e03 	ldbu	r2,-25416(gp)
     d50:	10c03fcc 	andi	r3,r2,255
     d54:	18c0201c 	xori	r3,r3,128
     d58:	18ffe004 	addi	r3,r3,-128
     d5c:	00800074 	movhi	r2,1
     d60:	10991604 	addi	r2,r2,25688
     d64:	18c7883a 	add	r3,r3,r3
     d68:	10c5883a 	add	r2,r2,r3
     d6c:	1080000b 	ldhu	r2,0(r2)
     d70:	10bfffcc 	andi	r2,r2,65535
     d74:	10a0001c 	xori	r2,r2,32768
     d78:	10a00004 	addi	r2,r2,-32768
     d7c:	1009883a 	mov	r4,r2
     d80:	00004a00 	call	4a0 <writeTon>
          increment = 5;
     d84:	00800144 	movi	r2,5
     d88:	d0a0008d 	sth	r2,-32766(gp)
      }
      if(updateOnOff){
     d8c:	d0a72f83 	ldbu	r2,-25410(gp)
     d90:	10803fcc 	andi	r2,r2,255
     d94:	1080201c 	xori	r2,r2,128
     d98:	10bfe004 	addi	r2,r2,-128
     d9c:	103e0526 	beq	r2,zero,5b4 <__alt_data_end+0xf80005b4>
          updateOnOff = 0;
     da0:	d0272f85 	stb	zero,-25410(gp)
          setCanal(numCanal,1^isOn(numCanal));
     da4:	d0a72e03 	ldbu	r2,-25416(gp)
     da8:	14003fcc 	andi	r16,r2,255
     dac:	8400201c 	xori	r16,r16,128
     db0:	843fe004 	addi	r16,r16,-128
     db4:	d0a72e03 	ldbu	r2,-25416(gp)
     db8:	10803fcc 	andi	r2,r2,255
     dbc:	1080201c 	xori	r2,r2,128
     dc0:	10bfe004 	addi	r2,r2,-128
     dc4:	1009883a 	mov	r4,r2
     dc8:	00011b40 	call	11b4 <isOn>
     dcc:	1080005c 	xori	r2,r2,1
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	1080201c 	xori	r2,r2,128
     dd8:	10bfe004 	addi	r2,r2,-128
     ddc:	100b883a 	mov	r5,r2
     de0:	8009883a 	mov	r4,r16
     de4:	00010780 	call	1078 <setCanal>
          writeOnOff(isOn(numCanal));
     de8:	d0a72e03 	ldbu	r2,-25416(gp)
     dec:	10803fcc 	andi	r2,r2,255
     df0:	1080201c 	xori	r2,r2,128
     df4:	10bfe004 	addi	r2,r2,-128
     df8:	1009883a 	mov	r4,r2
     dfc:	00011b40 	call	11b4 <isOn>
     e00:	10803fcc 	andi	r2,r2,255
     e04:	1080201c 	xori	r2,r2,128
     e08:	10bfe004 	addi	r2,r2,-128
     e0c:	1009883a 	mov	r4,r2
     e10:	00003800 	call	380 <writeOnOff>
          printf("Hello from update!%d\n",isOn(numCanal));
     e14:	d0a72e03 	ldbu	r2,-25416(gp)
     e18:	10803fcc 	andi	r2,r2,255
     e1c:	1080201c 	xori	r2,r2,128
     e20:	10bfe004 	addi	r2,r2,-128
     e24:	1009883a 	mov	r4,r2
     e28:	00011b40 	call	11b4 <isOn>
     e2c:	10803fcc 	andi	r2,r2,255
     e30:	1080201c 	xori	r2,r2,128
     e34:	10bfe004 	addi	r2,r2,-128
     e38:	100b883a 	mov	r5,r2
     e3c:	01000074 	movhi	r4,1
     e40:	21178c04 	addi	r4,r4,24112
     e44:	00033580 	call	3358 <printf>
      }



  }
     e48:	003dda06 	br	5b4 <__alt_data_end+0xf80005b4>

00000e4c <boutonInterupt>:
  return 0;
}



void boutonInterupt(void * isr_context){
     e4c:	defffb04 	addi	sp,sp,-20
     e50:	dfc00415 	stw	ra,16(sp)
     e54:	df000315 	stw	fp,12(sp)
     e58:	df000304 	addi	fp,sp,12
     e5c:	e13fff15 	stw	r4,-4(fp)
     printf("Hello from bouton!%d\n",IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE));
     e60:	00820034 	movhi	r2,2048
     e64:	10841c04 	addi	r2,r2,4208
     e68:	10800037 	ldwio	r2,0(r2)
     e6c:	100b883a 	mov	r5,r2
     e70:	01000074 	movhi	r4,1
     e74:	21179204 	addi	r4,r4,24136
     e78:	00033580 	call	3358 <printf>
     int test = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
     e7c:	00820034 	movhi	r2,2048
     e80:	10841c04 	addi	r2,r2,4208
     e84:	10800037 	ldwio	r2,0(r2)
     e88:	e0bffd15 	stw	r2,-12(fp)
     /* Cast context to edge_capture's type. It is important that this
     	be declared volatile to avoid unwanted compiler optimization. */
     	volatile int* edge_capture_ptr = (volatile int*) isr_context;
     e8c:	e0bfff17 	ldw	r2,-4(fp)
     e90:	e0bffe15 	stw	r2,-8(fp)
     	/*
     	* Read the edge capture register on the button PIO.
     	* Store value.
     	*/
     	*edge_capture_ptr =	IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
     e94:	00820034 	movhi	r2,2048
     e98:	10841f04 	addi	r2,r2,4220
     e9c:	10c00037 	ldwio	r3,0(r2)
     ea0:	e0bffe17 	ldw	r2,-8(fp)
     ea4:	10c00015 	stw	r3,0(r2)
        /* Write to the edge capture register to reset it. */
             	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0);
     ea8:	0007883a 	mov	r3,zero
     eac:	00820034 	movhi	r2,2048
     eb0:	10841f04 	addi	r2,r2,4220
     eb4:	10c00035 	stwio	r3,0(r2)
             	/* Read the PIO to delay ISR exit. This is done to prevent a
             	spurious interrupt in systems with high processor -> pio
             	latency and fast interrupts. */
             	IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE);
     eb8:	00820034 	movhi	r2,2048
     ebc:	10841f04 	addi	r2,r2,4220
     ec0:	10800037 	ldwio	r2,0(r2)



     if(BOUTON_CANAL == test){
     ec4:	e0bffd17 	ldw	r2,-12(fp)
     ec8:	108000d8 	cmpnei	r2,r2,3
     ecc:	10000b1e 	bne	r2,zero,efc <boutonInterupt+0xb0>
         if(numCanal < 23){
     ed0:	d0a72e03 	ldbu	r2,-25416(gp)
     ed4:	10803fcc 	andi	r2,r2,255
     ed8:	1080201c 	xori	r2,r2,128
     edc:	10bfe004 	addi	r2,r2,-128
     ee0:	108005c8 	cmpgei	r2,r2,23
     ee4:	1000041e 	bne	r2,zero,ef8 <boutonInterupt+0xac>
             numCanal += 1;
     ee8:	d0a72e03 	ldbu	r2,-25416(gp)
     eec:	10800044 	addi	r2,r2,1
     ef0:	d0a72e05 	stb	r2,-25416(gp)
     ef4:	00000106 	br	efc <boutonInterupt+0xb0>
         }else{
             numCanal = 0;
     ef8:	d0272e05 	stb	zero,-25416(gp)
         }



     }
     if(BOUTON_REGLAGE == test){
     efc:	e0bffd17 	ldw	r2,-12(fp)
     f00:	10800158 	cmpnei	r2,r2,5
     f04:	1000201e 	bne	r2,zero,f88 <boutonInterupt+0x13c>
         if(SWMILLIER){
     f08:	00820034 	movhi	r2,2048
     f0c:	10842004 	addi	r2,r2,4224
     f10:	10800037 	ldwio	r2,0(r2)
     f14:	1080020c 	andi	r2,r2,8
     f18:	10000326 	beq	r2,zero,f28 <boutonInterupt+0xdc>
             increment = 3;
     f1c:	008000c4 	movi	r2,3
     f20:	d0a0008d 	sth	r2,-32766(gp)
     f24:	00001606 	br	f80 <boutonInterupt+0x134>
         }else if(SWCENTAINE){
     f28:	00820034 	movhi	r2,2048
     f2c:	10842004 	addi	r2,r2,4224
     f30:	10800037 	ldwio	r2,0(r2)
     f34:	1080010c 	andi	r2,r2,4
     f38:	10000326 	beq	r2,zero,f48 <boutonInterupt+0xfc>
             increment = 2;
     f3c:	00800084 	movi	r2,2
     f40:	d0a0008d 	sth	r2,-32766(gp)
     f44:	00000e06 	br	f80 <boutonInterupt+0x134>
         }else if(SWDIZAINE){
     f48:	00820034 	movhi	r2,2048
     f4c:	10842004 	addi	r2,r2,4224
     f50:	10800037 	ldwio	r2,0(r2)
     f54:	1080008c 	andi	r2,r2,2
     f58:	10000326 	beq	r2,zero,f68 <boutonInterupt+0x11c>
             increment = 1;
     f5c:	00800044 	movi	r2,1
     f60:	d0a0008d 	sth	r2,-32766(gp)
     f64:	00000606 	br	f80 <boutonInterupt+0x134>
         }else if(SWUNITER){
     f68:	00820034 	movhi	r2,2048
     f6c:	10842004 	addi	r2,r2,4224
     f70:	10800037 	ldwio	r2,0(r2)
     f74:	1080004c 	andi	r2,r2,1
     f78:	10000126 	beq	r2,zero,f80 <boutonInterupt+0x134>
             increment = 0;
     f7c:	d020008d 	sth	zero,-32766(gp)
         }
         newTon = 1;
     f80:	00800044 	movi	r2,1
     f84:	d0a72f0d 	sth	r2,-25412(gp)



     }
     if(BOUTON_ACTIVATION == test){
     f88:	e0bffd17 	ldw	r2,-12(fp)
     f8c:	10800198 	cmpnei	r2,r2,6
     f90:	1000021e 	bne	r2,zero,f9c <boutonInterupt+0x150>
         updateOnOff = 1;
     f94:	00800044 	movi	r2,1
     f98:	d0a72f85 	stb	r2,-25410(gp)
     }

}
     f9c:	0001883a 	nop
     fa0:	e037883a 	mov	sp,fp
     fa4:	dfc00117 	ldw	ra,4(sp)
     fa8:	df000017 	ldw	fp,0(sp)
     fac:	dec00204 	addi	sp,sp,8
     fb0:	f800283a 	ret

00000fb4 <initInterupt>:

void initInterupt(){
     fb4:	defffc04 	addi	sp,sp,-16
     fb8:	dfc00315 	stw	ra,12(sp)
     fbc:	df000215 	stw	fp,8(sp)
     fc0:	df000204 	addi	fp,sp,8
	void* edge_capture_ptr = (void*) &edge_capture; /* Enable all 3 button interrupts. */
     fc4:	d0a73004 	addi	r2,gp,-25408
     fc8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_BASE, 0b111); /* Reset the edge capture register. */
     fcc:	00c001c4 	movi	r3,7
     fd0:	00820034 	movhi	r2,2048
     fd4:	10841e04 	addi	r2,r2,4216
     fd8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_BASE, 0b000); /* Register the ISR. */
     fdc:	0007883a 	mov	r3,zero
     fe0:	00820034 	movhi	r2,2048
     fe4:	10841f04 	addi	r2,r2,4220
     fe8:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_IRQ, boutonInterupt, edge_capture_ptr, 0x0);
     fec:	d8000015 	stw	zero,0(sp)
     ff0:	e1ffff17 	ldw	r7,-4(fp)
     ff4:	01800034 	movhi	r6,0
     ff8:	31839304 	addi	r6,r6,3660
     ffc:	01400044 	movi	r5,1
    1000:	0009883a 	mov	r4,zero
    1004:	00127140 	call	12714 <alt_ic_isr_register>
}
    1008:	0001883a 	nop
    100c:	e037883a 	mov	sp,fp
    1010:	dfc00117 	ldw	ra,4(sp)
    1014:	df000017 	ldw	fp,0(sp)
    1018:	dec00204 	addi	sp,sp,8
    101c:	f800283a 	ret

00001020 <initPWM>:
#include "pwm.h"

void initPWM(){
    1020:	defffe04 	addi	sp,sp,-8
    1024:	dfc00115 	stw	ra,4(sp)
    1028:	df000015 	stw	fp,0(sp)
    102c:	d839883a 	mov	fp,sp
	setOnOff(0b111111111111111111111111);
    1030:	01004034 	movhi	r4,256
    1034:	213fffc4 	addi	r4,r4,-1
    1038:	00012700 	call	1270 <setOnOff>
	setlatch(0b111111111111111111111111);
    103c:	01004034 	movhi	r4,256
    1040:	213fffc4 	addi	r4,r4,-1
    1044:	00012040 	call	1204 <setlatch>
	setTon(512);
    1048:	01008004 	movi	r4,512
    104c:	00012380 	call	1238 <setTon>
	usleep(100);
    1050:	01001904 	movi	r4,100
    1054:	001325c0 	call	1325c <usleep>
	setlatch(0b000000000000000000000000);
    1058:	0009883a 	mov	r4,zero
    105c:	00012040 	call	1204 <setlatch>
}
    1060:	0001883a 	nop
    1064:	e037883a 	mov	sp,fp
    1068:	dfc00117 	ldw	ra,4(sp)
    106c:	df000017 	ldw	fp,0(sp)
    1070:	dec00204 	addi	sp,sp,8
    1074:	f800283a 	ret

00001078 <setCanal>:

void setCanal(char num , char state){
    1078:	defffb04 	addi	sp,sp,-20
    107c:	dfc00415 	stw	ra,16(sp)
    1080:	df000315 	stw	fp,12(sp)
    1084:	df000304 	addi	fp,sp,12
    1088:	2007883a 	mov	r3,r4
    108c:	2805883a 	mov	r2,r5
    1090:	e0fffe05 	stb	r3,-8(fp)
    1094:	e0bfff05 	stb	r2,-4(fp)
	int retour;
	retour = readOnOff();
    1098:	00012a40 	call	12a4 <readOnOff>
    109c:	e0bffd15 	stw	r2,-12(fp)
	printf("test num%d\n",retour);
    10a0:	e17ffd17 	ldw	r5,-12(fp)
    10a4:	01000074 	movhi	r4,1
    10a8:	21179804 	addi	r4,r4,24160
    10ac:	00033580 	call	3358 <printf>
	if(!state){
    10b0:	e0bfff07 	ldb	r2,-4(fp)
    10b4:	1000081e 	bne	r2,zero,10d8 <setCanal+0x60>
		setOnOff((1<<num)|retour);
    10b8:	e0bffe07 	ldb	r2,-8(fp)
    10bc:	00c00044 	movi	r3,1
    10c0:	1886983a 	sll	r3,r3,r2
    10c4:	e0bffd17 	ldw	r2,-12(fp)
    10c8:	1884b03a 	or	r2,r3,r2
    10cc:	1009883a 	mov	r4,r2
    10d0:	00012700 	call	1270 <setOnOff>

	}else{
		setOnOff(retour & ~(1<<num));

	}
}
    10d4:	00000806 	br	10f8 <setCanal+0x80>
	printf("test num%d\n",retour);
	if(!state){
		setOnOff((1<<num)|retour);

	}else{
		setOnOff(retour & ~(1<<num));
    10d8:	e0bffe07 	ldb	r2,-8(fp)
    10dc:	00c00044 	movi	r3,1
    10e0:	1884983a 	sll	r2,r3,r2
    10e4:	0086303a 	nor	r3,zero,r2
    10e8:	e0bffd17 	ldw	r2,-12(fp)
    10ec:	1884703a 	and	r2,r3,r2
    10f0:	1009883a 	mov	r4,r2
    10f4:	00012700 	call	1270 <setOnOff>

	}
}
    10f8:	0001883a 	nop
    10fc:	e037883a 	mov	sp,fp
    1100:	dfc00117 	ldw	ra,4(sp)
    1104:	df000017 	ldw	fp,0(sp)
    1108:	dec00204 	addi	sp,sp,8
    110c:	f800283a 	ret

00001110 <updateValue>:

void updateValue(char num,short ton){
    1110:	defffc04 	addi	sp,sp,-16
    1114:	dfc00315 	stw	ra,12(sp)
    1118:	df000215 	stw	fp,8(sp)
    111c:	df000204 	addi	fp,sp,8
    1120:	2007883a 	mov	r3,r4
    1124:	2805883a 	mov	r2,r5
    1128:	e0fffe05 	stb	r3,-8(fp)
    112c:	e0bfff0d 	sth	r2,-4(fp)
	setlatch((1<<num));
    1130:	e0bffe07 	ldb	r2,-8(fp)
    1134:	00c00044 	movi	r3,1
    1138:	1884983a 	sll	r2,r3,r2
    113c:	1009883a 	mov	r4,r2
    1140:	00012040 	call	1204 <setlatch>
	setTon(ton);
    1144:	e0bfff0f 	ldh	r2,-4(fp)
    1148:	1009883a 	mov	r4,r2
    114c:	00012380 	call	1238 <setTon>
	usleep(1000);
    1150:	0100fa04 	movi	r4,1000
    1154:	001325c0 	call	1325c <usleep>
	setlatch((0<<num));
    1158:	0009883a 	mov	r4,zero
    115c:	00012040 	call	1204 <setlatch>
}
    1160:	0001883a 	nop
    1164:	e037883a 	mov	sp,fp
    1168:	dfc00117 	ldw	ra,4(sp)
    116c:	df000017 	ldw	fp,0(sp)
    1170:	dec00204 	addi	sp,sp,8
    1174:	f800283a 	ret

00001178 <updateTon>:
void updateTon(short ton){
    1178:	defffd04 	addi	sp,sp,-12
    117c:	dfc00215 	stw	ra,8(sp)
    1180:	df000115 	stw	fp,4(sp)
    1184:	df000104 	addi	fp,sp,4
    1188:	2005883a 	mov	r2,r4
    118c:	e0bfff0d 	sth	r2,-4(fp)
	setTon(ton);
    1190:	e0bfff0f 	ldh	r2,-4(fp)
    1194:	1009883a 	mov	r4,r2
    1198:	00012380 	call	1238 <setTon>
}
    119c:	0001883a 	nop
    11a0:	e037883a 	mov	sp,fp
    11a4:	dfc00117 	ldw	ra,4(sp)
    11a8:	df000017 	ldw	fp,0(sp)
    11ac:	dec00204 	addi	sp,sp,8
    11b0:	f800283a 	ret

000011b4 <isOn>:

char isOn(char num){
    11b4:	defffd04 	addi	sp,sp,-12
    11b8:	dfc00215 	stw	ra,8(sp)
    11bc:	df000115 	stw	fp,4(sp)
    11c0:	df000104 	addi	fp,sp,4
    11c4:	2005883a 	mov	r2,r4
    11c8:	e0bfff05 	stb	r2,-4(fp)
    if(!(readOnOff()&(1<<num))){
    11cc:	00012a40 	call	12a4 <readOnOff>
    11d0:	1007883a 	mov	r3,r2
    11d4:	e0bfff07 	ldb	r2,-4(fp)
    11d8:	1885d83a 	sra	r2,r3,r2
    11dc:	1080004c 	andi	r2,r2,1
    11e0:	1000021e 	bne	r2,zero,11ec <isOn+0x38>
        return 1;
    11e4:	00800044 	movi	r2,1
    11e8:	00000106 	br	11f0 <isOn+0x3c>
    }else{
        return 0;
    11ec:	0005883a 	mov	r2,zero
    }
}
    11f0:	e037883a 	mov	sp,fp
    11f4:	dfc00117 	ldw	ra,4(sp)
    11f8:	df000017 	ldw	fp,0(sp)
    11fc:	dec00204 	addi	sp,sp,8
    1200:	f800283a 	ret

00001204 <setlatch>:
#include "pwmPioDriver.h"

void setlatch(int value){
    1204:	defffe04 	addi	sp,sp,-8
    1208:	df000115 	stw	fp,4(sp)
    120c:	df000104 	addi	fp,sp,4
    1210:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_LATCH_BASE,value);
    1214:	00820034 	movhi	r2,2048
    1218:	10841404 	addi	r2,r2,4176
    121c:	e0ffff17 	ldw	r3,-4(fp)
    1220:	10c00035 	stwio	r3,0(r2)
}
    1224:	0001883a 	nop
    1228:	e037883a 	mov	sp,fp
    122c:	df000017 	ldw	fp,0(sp)
    1230:	dec00104 	addi	sp,sp,4
    1234:	f800283a 	ret

00001238 <setTon>:

void setTon(short value){
    1238:	defffe04 	addi	sp,sp,-8
    123c:	df000115 	stw	fp,4(sp)
    1240:	df000104 	addi	fp,sp,4
    1244:	2005883a 	mov	r2,r4
    1248:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_TON_BASE,value);
    124c:	e0ffff0f 	ldh	r3,-4(fp)
    1250:	00820034 	movhi	r2,2048
    1254:	10841804 	addi	r2,r2,4192
    1258:	10c00035 	stwio	r3,0(r2)
}
    125c:	0001883a 	nop
    1260:	e037883a 	mov	sp,fp
    1264:	df000017 	ldw	fp,0(sp)
    1268:	dec00104 	addi	sp,sp,4
    126c:	f800283a 	ret

00001270 <setOnOff>:

void setOnOff(int value){
    1270:	defffe04 	addi	sp,sp,-8
    1274:	df000115 	stw	fp,4(sp)
    1278:	df000104 	addi	fp,sp,4
    127c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_ONOFF_BASE,value);
    1280:	00820034 	movhi	r2,2048
    1284:	10841004 	addi	r2,r2,4160
    1288:	e0ffff17 	ldw	r3,-4(fp)
    128c:	10c00035 	stwio	r3,0(r2)
}
    1290:	0001883a 	nop
    1294:	e037883a 	mov	sp,fp
    1298:	df000017 	ldw	fp,0(sp)
    129c:	dec00104 	addi	sp,sp,4
    12a0:	f800283a 	ret

000012a4 <readOnOff>:

int readOnOff(){
    12a4:	deffff04 	addi	sp,sp,-4
    12a8:	df000015 	stw	fp,0(sp)
    12ac:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(PWM_ONOFF_BASE);
    12b0:	00820034 	movhi	r2,2048
    12b4:	10841004 	addi	r2,r2,4160
    12b8:	10800037 	ldwio	r2,0(r2)
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	df000017 	ldw	fp,0(sp)
    12c4:	dec00104 	addi	sp,sp,4
    12c8:	f800283a 	ret

000012cc <__divsi3>:
    12cc:	20001b16 	blt	r4,zero,133c <__divsi3+0x70>
    12d0:	000f883a 	mov	r7,zero
    12d4:	28001616 	blt	r5,zero,1330 <__divsi3+0x64>
    12d8:	200d883a 	mov	r6,r4
    12dc:	29001a2e 	bgeu	r5,r4,1348 <__divsi3+0x7c>
    12e0:	00800804 	movi	r2,32
    12e4:	00c00044 	movi	r3,1
    12e8:	00000106 	br	12f0 <__divsi3+0x24>
    12ec:	10000d26 	beq	r2,zero,1324 <__divsi3+0x58>
    12f0:	294b883a 	add	r5,r5,r5
    12f4:	10bfffc4 	addi	r2,r2,-1
    12f8:	18c7883a 	add	r3,r3,r3
    12fc:	293ffb36 	bltu	r5,r4,12ec <__alt_data_end+0xf80012ec>
    1300:	0005883a 	mov	r2,zero
    1304:	18000726 	beq	r3,zero,1324 <__divsi3+0x58>
    1308:	0005883a 	mov	r2,zero
    130c:	31400236 	bltu	r6,r5,1318 <__divsi3+0x4c>
    1310:	314dc83a 	sub	r6,r6,r5
    1314:	10c4b03a 	or	r2,r2,r3
    1318:	1806d07a 	srli	r3,r3,1
    131c:	280ad07a 	srli	r5,r5,1
    1320:	183ffa1e 	bne	r3,zero,130c <__alt_data_end+0xf800130c>
    1324:	38000126 	beq	r7,zero,132c <__divsi3+0x60>
    1328:	0085c83a 	sub	r2,zero,r2
    132c:	f800283a 	ret
    1330:	014bc83a 	sub	r5,zero,r5
    1334:	39c0005c 	xori	r7,r7,1
    1338:	003fe706 	br	12d8 <__alt_data_end+0xf80012d8>
    133c:	0109c83a 	sub	r4,zero,r4
    1340:	01c00044 	movi	r7,1
    1344:	003fe306 	br	12d4 <__alt_data_end+0xf80012d4>
    1348:	00c00044 	movi	r3,1
    134c:	003fee06 	br	1308 <__alt_data_end+0xf8001308>

00001350 <__modsi3>:
    1350:	20001716 	blt	r4,zero,13b0 <__modsi3+0x60>
    1354:	000f883a 	mov	r7,zero
    1358:	2005883a 	mov	r2,r4
    135c:	28001216 	blt	r5,zero,13a8 <__modsi3+0x58>
    1360:	2900162e 	bgeu	r5,r4,13bc <__modsi3+0x6c>
    1364:	01800804 	movi	r6,32
    1368:	00c00044 	movi	r3,1
    136c:	00000106 	br	1374 <__modsi3+0x24>
    1370:	30000a26 	beq	r6,zero,139c <__modsi3+0x4c>
    1374:	294b883a 	add	r5,r5,r5
    1378:	31bfffc4 	addi	r6,r6,-1
    137c:	18c7883a 	add	r3,r3,r3
    1380:	293ffb36 	bltu	r5,r4,1370 <__alt_data_end+0xf8001370>
    1384:	18000526 	beq	r3,zero,139c <__modsi3+0x4c>
    1388:	1806d07a 	srli	r3,r3,1
    138c:	11400136 	bltu	r2,r5,1394 <__modsi3+0x44>
    1390:	1145c83a 	sub	r2,r2,r5
    1394:	280ad07a 	srli	r5,r5,1
    1398:	183ffb1e 	bne	r3,zero,1388 <__alt_data_end+0xf8001388>
    139c:	38000126 	beq	r7,zero,13a4 <__modsi3+0x54>
    13a0:	0085c83a 	sub	r2,zero,r2
    13a4:	f800283a 	ret
    13a8:	014bc83a 	sub	r5,zero,r5
    13ac:	003fec06 	br	1360 <__alt_data_end+0xf8001360>
    13b0:	0109c83a 	sub	r4,zero,r4
    13b4:	01c00044 	movi	r7,1
    13b8:	003fe706 	br	1358 <__alt_data_end+0xf8001358>
    13bc:	00c00044 	movi	r3,1
    13c0:	003ff106 	br	1388 <__alt_data_end+0xf8001388>

000013c4 <__udivsi3>:
    13c4:	200d883a 	mov	r6,r4
    13c8:	2900152e 	bgeu	r5,r4,1420 <__udivsi3+0x5c>
    13cc:	28001416 	blt	r5,zero,1420 <__udivsi3+0x5c>
    13d0:	00800804 	movi	r2,32
    13d4:	00c00044 	movi	r3,1
    13d8:	00000206 	br	13e4 <__udivsi3+0x20>
    13dc:	10000e26 	beq	r2,zero,1418 <__udivsi3+0x54>
    13e0:	28000516 	blt	r5,zero,13f8 <__udivsi3+0x34>
    13e4:	294b883a 	add	r5,r5,r5
    13e8:	10bfffc4 	addi	r2,r2,-1
    13ec:	18c7883a 	add	r3,r3,r3
    13f0:	293ffa36 	bltu	r5,r4,13dc <__alt_data_end+0xf80013dc>
    13f4:	18000826 	beq	r3,zero,1418 <__udivsi3+0x54>
    13f8:	0005883a 	mov	r2,zero
    13fc:	31400236 	bltu	r6,r5,1408 <__udivsi3+0x44>
    1400:	314dc83a 	sub	r6,r6,r5
    1404:	10c4b03a 	or	r2,r2,r3
    1408:	1806d07a 	srli	r3,r3,1
    140c:	280ad07a 	srli	r5,r5,1
    1410:	183ffa1e 	bne	r3,zero,13fc <__alt_data_end+0xf80013fc>
    1414:	f800283a 	ret
    1418:	0005883a 	mov	r2,zero
    141c:	f800283a 	ret
    1420:	00c00044 	movi	r3,1
    1424:	003ff406 	br	13f8 <__alt_data_end+0xf80013f8>

00001428 <__umodsi3>:
    1428:	2005883a 	mov	r2,r4
    142c:	2900122e 	bgeu	r5,r4,1478 <__umodsi3+0x50>
    1430:	28001116 	blt	r5,zero,1478 <__umodsi3+0x50>
    1434:	01800804 	movi	r6,32
    1438:	00c00044 	movi	r3,1
    143c:	00000206 	br	1448 <__umodsi3+0x20>
    1440:	30000c26 	beq	r6,zero,1474 <__umodsi3+0x4c>
    1444:	28000516 	blt	r5,zero,145c <__umodsi3+0x34>
    1448:	294b883a 	add	r5,r5,r5
    144c:	31bfffc4 	addi	r6,r6,-1
    1450:	18c7883a 	add	r3,r3,r3
    1454:	293ffa36 	bltu	r5,r4,1440 <__alt_data_end+0xf8001440>
    1458:	18000626 	beq	r3,zero,1474 <__umodsi3+0x4c>
    145c:	1806d07a 	srli	r3,r3,1
    1460:	11400136 	bltu	r2,r5,1468 <__umodsi3+0x40>
    1464:	1145c83a 	sub	r2,r2,r5
    1468:	280ad07a 	srli	r5,r5,1
    146c:	183ffb1e 	bne	r3,zero,145c <__alt_data_end+0xf800145c>
    1470:	f800283a 	ret
    1474:	f800283a 	ret
    1478:	00c00044 	movi	r3,1
    147c:	003ff706 	br	145c <__alt_data_end+0xf800145c>

00001480 <__sflush_r>:
    1480:	2880030b 	ldhu	r2,12(r5)
    1484:	defffb04 	addi	sp,sp,-20
    1488:	dcc00315 	stw	r19,12(sp)
    148c:	dc400115 	stw	r17,4(sp)
    1490:	dfc00415 	stw	ra,16(sp)
    1494:	dc800215 	stw	r18,8(sp)
    1498:	dc000015 	stw	r16,0(sp)
    149c:	10c0020c 	andi	r3,r2,8
    14a0:	2823883a 	mov	r17,r5
    14a4:	2027883a 	mov	r19,r4
    14a8:	1800311e 	bne	r3,zero,1570 <__sflush_r+0xf0>
    14ac:	28c00117 	ldw	r3,4(r5)
    14b0:	10820014 	ori	r2,r2,2048
    14b4:	2880030d 	sth	r2,12(r5)
    14b8:	00c04b0e 	bge	zero,r3,15e8 <__sflush_r+0x168>
    14bc:	8a000a17 	ldw	r8,40(r17)
    14c0:	40002326 	beq	r8,zero,1550 <__sflush_r+0xd0>
    14c4:	9c000017 	ldw	r16,0(r19)
    14c8:	10c4000c 	andi	r3,r2,4096
    14cc:	98000015 	stw	zero,0(r19)
    14d0:	18004826 	beq	r3,zero,15f4 <__sflush_r+0x174>
    14d4:	89801417 	ldw	r6,80(r17)
    14d8:	10c0010c 	andi	r3,r2,4
    14dc:	18000626 	beq	r3,zero,14f8 <__sflush_r+0x78>
    14e0:	88c00117 	ldw	r3,4(r17)
    14e4:	88800c17 	ldw	r2,48(r17)
    14e8:	30cdc83a 	sub	r6,r6,r3
    14ec:	10000226 	beq	r2,zero,14f8 <__sflush_r+0x78>
    14f0:	88800f17 	ldw	r2,60(r17)
    14f4:	308dc83a 	sub	r6,r6,r2
    14f8:	89400717 	ldw	r5,28(r17)
    14fc:	000f883a 	mov	r7,zero
    1500:	9809883a 	mov	r4,r19
    1504:	403ee83a 	callr	r8
    1508:	00ffffc4 	movi	r3,-1
    150c:	10c04426 	beq	r2,r3,1620 <__sflush_r+0x1a0>
    1510:	88c0030b 	ldhu	r3,12(r17)
    1514:	89000417 	ldw	r4,16(r17)
    1518:	88000115 	stw	zero,4(r17)
    151c:	197dffcc 	andi	r5,r3,63487
    1520:	8940030d 	sth	r5,12(r17)
    1524:	89000015 	stw	r4,0(r17)
    1528:	18c4000c 	andi	r3,r3,4096
    152c:	18002c1e 	bne	r3,zero,15e0 <__sflush_r+0x160>
    1530:	89400c17 	ldw	r5,48(r17)
    1534:	9c000015 	stw	r16,0(r19)
    1538:	28000526 	beq	r5,zero,1550 <__sflush_r+0xd0>
    153c:	88801004 	addi	r2,r17,64
    1540:	28800226 	beq	r5,r2,154c <__sflush_r+0xcc>
    1544:	9809883a 	mov	r4,r19
    1548:	0001d540 	call	1d54 <_free_r>
    154c:	88000c15 	stw	zero,48(r17)
    1550:	0005883a 	mov	r2,zero
    1554:	dfc00417 	ldw	ra,16(sp)
    1558:	dcc00317 	ldw	r19,12(sp)
    155c:	dc800217 	ldw	r18,8(sp)
    1560:	dc400117 	ldw	r17,4(sp)
    1564:	dc000017 	ldw	r16,0(sp)
    1568:	dec00504 	addi	sp,sp,20
    156c:	f800283a 	ret
    1570:	2c800417 	ldw	r18,16(r5)
    1574:	903ff626 	beq	r18,zero,1550 <__alt_data_end+0xf8001550>
    1578:	2c000017 	ldw	r16,0(r5)
    157c:	108000cc 	andi	r2,r2,3
    1580:	2c800015 	stw	r18,0(r5)
    1584:	84a1c83a 	sub	r16,r16,r18
    1588:	1000131e 	bne	r2,zero,15d8 <__sflush_r+0x158>
    158c:	28800517 	ldw	r2,20(r5)
    1590:	88800215 	stw	r2,8(r17)
    1594:	04000316 	blt	zero,r16,15a4 <__sflush_r+0x124>
    1598:	003fed06 	br	1550 <__alt_data_end+0xf8001550>
    159c:	90a5883a 	add	r18,r18,r2
    15a0:	043feb0e 	bge	zero,r16,1550 <__alt_data_end+0xf8001550>
    15a4:	88800917 	ldw	r2,36(r17)
    15a8:	89400717 	ldw	r5,28(r17)
    15ac:	800f883a 	mov	r7,r16
    15b0:	900d883a 	mov	r6,r18
    15b4:	9809883a 	mov	r4,r19
    15b8:	103ee83a 	callr	r2
    15bc:	80a1c83a 	sub	r16,r16,r2
    15c0:	00bff616 	blt	zero,r2,159c <__alt_data_end+0xf800159c>
    15c4:	88c0030b 	ldhu	r3,12(r17)
    15c8:	00bfffc4 	movi	r2,-1
    15cc:	18c01014 	ori	r3,r3,64
    15d0:	88c0030d 	sth	r3,12(r17)
    15d4:	003fdf06 	br	1554 <__alt_data_end+0xf8001554>
    15d8:	0005883a 	mov	r2,zero
    15dc:	003fec06 	br	1590 <__alt_data_end+0xf8001590>
    15e0:	88801415 	stw	r2,80(r17)
    15e4:	003fd206 	br	1530 <__alt_data_end+0xf8001530>
    15e8:	28c00f17 	ldw	r3,60(r5)
    15ec:	00ffb316 	blt	zero,r3,14bc <__alt_data_end+0xf80014bc>
    15f0:	003fd706 	br	1550 <__alt_data_end+0xf8001550>
    15f4:	89400717 	ldw	r5,28(r17)
    15f8:	000d883a 	mov	r6,zero
    15fc:	01c00044 	movi	r7,1
    1600:	9809883a 	mov	r4,r19
    1604:	403ee83a 	callr	r8
    1608:	100d883a 	mov	r6,r2
    160c:	00bfffc4 	movi	r2,-1
    1610:	30801426 	beq	r6,r2,1664 <__sflush_r+0x1e4>
    1614:	8880030b 	ldhu	r2,12(r17)
    1618:	8a000a17 	ldw	r8,40(r17)
    161c:	003fae06 	br	14d8 <__alt_data_end+0xf80014d8>
    1620:	98c00017 	ldw	r3,0(r19)
    1624:	183fba26 	beq	r3,zero,1510 <__alt_data_end+0xf8001510>
    1628:	01000744 	movi	r4,29
    162c:	19000626 	beq	r3,r4,1648 <__sflush_r+0x1c8>
    1630:	01000584 	movi	r4,22
    1634:	19000426 	beq	r3,r4,1648 <__sflush_r+0x1c8>
    1638:	88c0030b 	ldhu	r3,12(r17)
    163c:	18c01014 	ori	r3,r3,64
    1640:	88c0030d 	sth	r3,12(r17)
    1644:	003fc306 	br	1554 <__alt_data_end+0xf8001554>
    1648:	8880030b 	ldhu	r2,12(r17)
    164c:	88c00417 	ldw	r3,16(r17)
    1650:	88000115 	stw	zero,4(r17)
    1654:	10bdffcc 	andi	r2,r2,63487
    1658:	8880030d 	sth	r2,12(r17)
    165c:	88c00015 	stw	r3,0(r17)
    1660:	003fb306 	br	1530 <__alt_data_end+0xf8001530>
    1664:	98800017 	ldw	r2,0(r19)
    1668:	103fea26 	beq	r2,zero,1614 <__alt_data_end+0xf8001614>
    166c:	00c00744 	movi	r3,29
    1670:	10c00226 	beq	r2,r3,167c <__sflush_r+0x1fc>
    1674:	00c00584 	movi	r3,22
    1678:	10c0031e 	bne	r2,r3,1688 <__sflush_r+0x208>
    167c:	9c000015 	stw	r16,0(r19)
    1680:	0005883a 	mov	r2,zero
    1684:	003fb306 	br	1554 <__alt_data_end+0xf8001554>
    1688:	88c0030b 	ldhu	r3,12(r17)
    168c:	3005883a 	mov	r2,r6
    1690:	18c01014 	ori	r3,r3,64
    1694:	88c0030d 	sth	r3,12(r17)
    1698:	003fae06 	br	1554 <__alt_data_end+0xf8001554>

0000169c <_fflush_r>:
    169c:	defffd04 	addi	sp,sp,-12
    16a0:	dc000115 	stw	r16,4(sp)
    16a4:	dfc00215 	stw	ra,8(sp)
    16a8:	2021883a 	mov	r16,r4
    16ac:	20000226 	beq	r4,zero,16b8 <_fflush_r+0x1c>
    16b0:	20800e17 	ldw	r2,56(r4)
    16b4:	10000c26 	beq	r2,zero,16e8 <_fflush_r+0x4c>
    16b8:	2880030f 	ldh	r2,12(r5)
    16bc:	1000051e 	bne	r2,zero,16d4 <_fflush_r+0x38>
    16c0:	0005883a 	mov	r2,zero
    16c4:	dfc00217 	ldw	ra,8(sp)
    16c8:	dc000117 	ldw	r16,4(sp)
    16cc:	dec00304 	addi	sp,sp,12
    16d0:	f800283a 	ret
    16d4:	8009883a 	mov	r4,r16
    16d8:	dfc00217 	ldw	ra,8(sp)
    16dc:	dc000117 	ldw	r16,4(sp)
    16e0:	dec00304 	addi	sp,sp,12
    16e4:	00014801 	jmpi	1480 <__sflush_r>
    16e8:	d9400015 	stw	r5,0(sp)
    16ec:	0001a880 	call	1a88 <__sinit>
    16f0:	d9400017 	ldw	r5,0(sp)
    16f4:	003ff006 	br	16b8 <__alt_data_end+0xf80016b8>

000016f8 <fflush>:
    16f8:	20000526 	beq	r4,zero,1710 <fflush+0x18>
    16fc:	008000b4 	movhi	r2,2
    1700:	10a01704 	addi	r2,r2,-32676
    1704:	200b883a 	mov	r5,r4
    1708:	11000017 	ldw	r4,0(r2)
    170c:	000169c1 	jmpi	169c <_fflush_r>
    1710:	008000b4 	movhi	r2,2
    1714:	10a01604 	addi	r2,r2,-32680
    1718:	11000017 	ldw	r4,0(r2)
    171c:	01400034 	movhi	r5,0
    1720:	2945a704 	addi	r5,r5,5788
    1724:	00026041 	jmpi	2604 <_fwalk_reent>

00001728 <__fp_unlock>:
    1728:	0005883a 	mov	r2,zero
    172c:	f800283a 	ret

00001730 <_cleanup_r>:
    1730:	01400074 	movhi	r5,1
    1734:	29669b04 	addi	r5,r5,-26004
    1738:	00026041 	jmpi	2604 <_fwalk_reent>

0000173c <__sinit.part.1>:
    173c:	defff704 	addi	sp,sp,-36
    1740:	00c00034 	movhi	r3,0
    1744:	dfc00815 	stw	ra,32(sp)
    1748:	ddc00715 	stw	r23,28(sp)
    174c:	dd800615 	stw	r22,24(sp)
    1750:	dd400515 	stw	r21,20(sp)
    1754:	dd000415 	stw	r20,16(sp)
    1758:	dcc00315 	stw	r19,12(sp)
    175c:	dc800215 	stw	r18,8(sp)
    1760:	dc400115 	stw	r17,4(sp)
    1764:	dc000015 	stw	r16,0(sp)
    1768:	18c5cc04 	addi	r3,r3,5936
    176c:	24000117 	ldw	r16,4(r4)
    1770:	20c00f15 	stw	r3,60(r4)
    1774:	2080bb04 	addi	r2,r4,748
    1778:	00c000c4 	movi	r3,3
    177c:	20c0b915 	stw	r3,740(r4)
    1780:	2080ba15 	stw	r2,744(r4)
    1784:	2000b815 	stw	zero,736(r4)
    1788:	05c00204 	movi	r23,8
    178c:	00800104 	movi	r2,4
    1790:	2025883a 	mov	r18,r4
    1794:	b80d883a 	mov	r6,r23
    1798:	81001704 	addi	r4,r16,92
    179c:	000b883a 	mov	r5,zero
    17a0:	80000015 	stw	zero,0(r16)
    17a4:	80000115 	stw	zero,4(r16)
    17a8:	80000215 	stw	zero,8(r16)
    17ac:	8080030d 	sth	r2,12(r16)
    17b0:	80001915 	stw	zero,100(r16)
    17b4:	8000038d 	sth	zero,14(r16)
    17b8:	80000415 	stw	zero,16(r16)
    17bc:	80000515 	stw	zero,20(r16)
    17c0:	80000615 	stw	zero,24(r16)
    17c4:	00031a00 	call	31a0 <memset>
    17c8:	05800034 	movhi	r22,0
    17cc:	94400217 	ldw	r17,8(r18)
    17d0:	05400034 	movhi	r21,0
    17d4:	05000034 	movhi	r20,0
    17d8:	04c00034 	movhi	r19,0
    17dc:	b58ddc04 	addi	r22,r22,14192
    17e0:	ad4df304 	addi	r21,r21,14284
    17e4:	a50e1204 	addi	r20,r20,14408
    17e8:	9cce2904 	addi	r19,r19,14500
    17ec:	85800815 	stw	r22,32(r16)
    17f0:	85400915 	stw	r21,36(r16)
    17f4:	85000a15 	stw	r20,40(r16)
    17f8:	84c00b15 	stw	r19,44(r16)
    17fc:	84000715 	stw	r16,28(r16)
    1800:	00800284 	movi	r2,10
    1804:	8880030d 	sth	r2,12(r17)
    1808:	00800044 	movi	r2,1
    180c:	b80d883a 	mov	r6,r23
    1810:	89001704 	addi	r4,r17,92
    1814:	000b883a 	mov	r5,zero
    1818:	88000015 	stw	zero,0(r17)
    181c:	88000115 	stw	zero,4(r17)
    1820:	88000215 	stw	zero,8(r17)
    1824:	88001915 	stw	zero,100(r17)
    1828:	8880038d 	sth	r2,14(r17)
    182c:	88000415 	stw	zero,16(r17)
    1830:	88000515 	stw	zero,20(r17)
    1834:	88000615 	stw	zero,24(r17)
    1838:	00031a00 	call	31a0 <memset>
    183c:	94000317 	ldw	r16,12(r18)
    1840:	00800484 	movi	r2,18
    1844:	8c400715 	stw	r17,28(r17)
    1848:	8d800815 	stw	r22,32(r17)
    184c:	8d400915 	stw	r21,36(r17)
    1850:	8d000a15 	stw	r20,40(r17)
    1854:	8cc00b15 	stw	r19,44(r17)
    1858:	8080030d 	sth	r2,12(r16)
    185c:	00800084 	movi	r2,2
    1860:	80000015 	stw	zero,0(r16)
    1864:	80000115 	stw	zero,4(r16)
    1868:	80000215 	stw	zero,8(r16)
    186c:	80001915 	stw	zero,100(r16)
    1870:	8080038d 	sth	r2,14(r16)
    1874:	80000415 	stw	zero,16(r16)
    1878:	80000515 	stw	zero,20(r16)
    187c:	80000615 	stw	zero,24(r16)
    1880:	b80d883a 	mov	r6,r23
    1884:	000b883a 	mov	r5,zero
    1888:	81001704 	addi	r4,r16,92
    188c:	00031a00 	call	31a0 <memset>
    1890:	00800044 	movi	r2,1
    1894:	84000715 	stw	r16,28(r16)
    1898:	85800815 	stw	r22,32(r16)
    189c:	85400915 	stw	r21,36(r16)
    18a0:	85000a15 	stw	r20,40(r16)
    18a4:	84c00b15 	stw	r19,44(r16)
    18a8:	90800e15 	stw	r2,56(r18)
    18ac:	dfc00817 	ldw	ra,32(sp)
    18b0:	ddc00717 	ldw	r23,28(sp)
    18b4:	dd800617 	ldw	r22,24(sp)
    18b8:	dd400517 	ldw	r21,20(sp)
    18bc:	dd000417 	ldw	r20,16(sp)
    18c0:	dcc00317 	ldw	r19,12(sp)
    18c4:	dc800217 	ldw	r18,8(sp)
    18c8:	dc400117 	ldw	r17,4(sp)
    18cc:	dc000017 	ldw	r16,0(sp)
    18d0:	dec00904 	addi	sp,sp,36
    18d4:	f800283a 	ret

000018d8 <__fp_lock>:
    18d8:	0005883a 	mov	r2,zero
    18dc:	f800283a 	ret

000018e0 <__sfmoreglue>:
    18e0:	defffc04 	addi	sp,sp,-16
    18e4:	dc800215 	stw	r18,8(sp)
    18e8:	2825883a 	mov	r18,r5
    18ec:	dc000015 	stw	r16,0(sp)
    18f0:	01401a04 	movi	r5,104
    18f4:	2021883a 	mov	r16,r4
    18f8:	913fffc4 	addi	r4,r18,-1
    18fc:	dfc00315 	stw	ra,12(sp)
    1900:	dc400115 	stw	r17,4(sp)
    1904:	000fc140 	call	fc14 <__mulsi3>
    1908:	8009883a 	mov	r4,r16
    190c:	11401d04 	addi	r5,r2,116
    1910:	1023883a 	mov	r17,r2
    1914:	00029940 	call	2994 <_malloc_r>
    1918:	1021883a 	mov	r16,r2
    191c:	10000726 	beq	r2,zero,193c <__sfmoreglue+0x5c>
    1920:	11000304 	addi	r4,r2,12
    1924:	10000015 	stw	zero,0(r2)
    1928:	14800115 	stw	r18,4(r2)
    192c:	11000215 	stw	r4,8(r2)
    1930:	89801a04 	addi	r6,r17,104
    1934:	000b883a 	mov	r5,zero
    1938:	00031a00 	call	31a0 <memset>
    193c:	8005883a 	mov	r2,r16
    1940:	dfc00317 	ldw	ra,12(sp)
    1944:	dc800217 	ldw	r18,8(sp)
    1948:	dc400117 	ldw	r17,4(sp)
    194c:	dc000017 	ldw	r16,0(sp)
    1950:	dec00404 	addi	sp,sp,16
    1954:	f800283a 	ret

00001958 <__sfp>:
    1958:	defffb04 	addi	sp,sp,-20
    195c:	dc000015 	stw	r16,0(sp)
    1960:	040000b4 	movhi	r16,2
    1964:	84201604 	addi	r16,r16,-32680
    1968:	dcc00315 	stw	r19,12(sp)
    196c:	2027883a 	mov	r19,r4
    1970:	81000017 	ldw	r4,0(r16)
    1974:	dfc00415 	stw	ra,16(sp)
    1978:	dc800215 	stw	r18,8(sp)
    197c:	20800e17 	ldw	r2,56(r4)
    1980:	dc400115 	stw	r17,4(sp)
    1984:	1000021e 	bne	r2,zero,1990 <__sfp+0x38>
    1988:	000173c0 	call	173c <__sinit.part.1>
    198c:	81000017 	ldw	r4,0(r16)
    1990:	2480b804 	addi	r18,r4,736
    1994:	047fffc4 	movi	r17,-1
    1998:	91000117 	ldw	r4,4(r18)
    199c:	94000217 	ldw	r16,8(r18)
    19a0:	213fffc4 	addi	r4,r4,-1
    19a4:	20000a16 	blt	r4,zero,19d0 <__sfp+0x78>
    19a8:	8080030f 	ldh	r2,12(r16)
    19ac:	10000c26 	beq	r2,zero,19e0 <__sfp+0x88>
    19b0:	80c01d04 	addi	r3,r16,116
    19b4:	00000206 	br	19c0 <__sfp+0x68>
    19b8:	18bfe60f 	ldh	r2,-104(r3)
    19bc:	10000826 	beq	r2,zero,19e0 <__sfp+0x88>
    19c0:	213fffc4 	addi	r4,r4,-1
    19c4:	1c3ffd04 	addi	r16,r3,-12
    19c8:	18c01a04 	addi	r3,r3,104
    19cc:	247ffa1e 	bne	r4,r17,19b8 <__alt_data_end+0xf80019b8>
    19d0:	90800017 	ldw	r2,0(r18)
    19d4:	10001d26 	beq	r2,zero,1a4c <__sfp+0xf4>
    19d8:	1025883a 	mov	r18,r2
    19dc:	003fee06 	br	1998 <__alt_data_end+0xf8001998>
    19e0:	00bfffc4 	movi	r2,-1
    19e4:	8080038d 	sth	r2,14(r16)
    19e8:	00800044 	movi	r2,1
    19ec:	8080030d 	sth	r2,12(r16)
    19f0:	80001915 	stw	zero,100(r16)
    19f4:	80000015 	stw	zero,0(r16)
    19f8:	80000215 	stw	zero,8(r16)
    19fc:	80000115 	stw	zero,4(r16)
    1a00:	80000415 	stw	zero,16(r16)
    1a04:	80000515 	stw	zero,20(r16)
    1a08:	80000615 	stw	zero,24(r16)
    1a0c:	01800204 	movi	r6,8
    1a10:	000b883a 	mov	r5,zero
    1a14:	81001704 	addi	r4,r16,92
    1a18:	00031a00 	call	31a0 <memset>
    1a1c:	8005883a 	mov	r2,r16
    1a20:	80000c15 	stw	zero,48(r16)
    1a24:	80000d15 	stw	zero,52(r16)
    1a28:	80001115 	stw	zero,68(r16)
    1a2c:	80001215 	stw	zero,72(r16)
    1a30:	dfc00417 	ldw	ra,16(sp)
    1a34:	dcc00317 	ldw	r19,12(sp)
    1a38:	dc800217 	ldw	r18,8(sp)
    1a3c:	dc400117 	ldw	r17,4(sp)
    1a40:	dc000017 	ldw	r16,0(sp)
    1a44:	dec00504 	addi	sp,sp,20
    1a48:	f800283a 	ret
    1a4c:	01400104 	movi	r5,4
    1a50:	9809883a 	mov	r4,r19
    1a54:	00018e00 	call	18e0 <__sfmoreglue>
    1a58:	90800015 	stw	r2,0(r18)
    1a5c:	103fde1e 	bne	r2,zero,19d8 <__alt_data_end+0xf80019d8>
    1a60:	00800304 	movi	r2,12
    1a64:	98800015 	stw	r2,0(r19)
    1a68:	0005883a 	mov	r2,zero
    1a6c:	003ff006 	br	1a30 <__alt_data_end+0xf8001a30>

00001a70 <_cleanup>:
    1a70:	008000b4 	movhi	r2,2
    1a74:	10a01604 	addi	r2,r2,-32680
    1a78:	11000017 	ldw	r4,0(r2)
    1a7c:	01400074 	movhi	r5,1
    1a80:	29669b04 	addi	r5,r5,-26004
    1a84:	00026041 	jmpi	2604 <_fwalk_reent>

00001a88 <__sinit>:
    1a88:	20800e17 	ldw	r2,56(r4)
    1a8c:	10000126 	beq	r2,zero,1a94 <__sinit+0xc>
    1a90:	f800283a 	ret
    1a94:	000173c1 	jmpi	173c <__sinit.part.1>

00001a98 <__sfp_lock_acquire>:
    1a98:	f800283a 	ret

00001a9c <__sfp_lock_release>:
    1a9c:	f800283a 	ret

00001aa0 <__sinit_lock_acquire>:
    1aa0:	f800283a 	ret

00001aa4 <__sinit_lock_release>:
    1aa4:	f800283a 	ret

00001aa8 <__fp_lock_all>:
    1aa8:	008000b4 	movhi	r2,2
    1aac:	10a01704 	addi	r2,r2,-32676
    1ab0:	11000017 	ldw	r4,0(r2)
    1ab4:	01400034 	movhi	r5,0
    1ab8:	29463604 	addi	r5,r5,6360
    1abc:	00025401 	jmpi	2540 <_fwalk>

00001ac0 <__fp_unlock_all>:
    1ac0:	008000b4 	movhi	r2,2
    1ac4:	10a01704 	addi	r2,r2,-32676
    1ac8:	11000017 	ldw	r4,0(r2)
    1acc:	01400034 	movhi	r5,0
    1ad0:	2945ca04 	addi	r5,r5,5928
    1ad4:	00025401 	jmpi	2540 <_fwalk>

00001ad8 <_fopen_r>:
    1ad8:	defffa04 	addi	sp,sp,-24
    1adc:	3005883a 	mov	r2,r6
    1ae0:	dcc00415 	stw	r19,16(sp)
    1ae4:	d80d883a 	mov	r6,sp
    1ae8:	2827883a 	mov	r19,r5
    1aec:	100b883a 	mov	r5,r2
    1af0:	dc800315 	stw	r18,12(sp)
    1af4:	dfc00515 	stw	ra,20(sp)
    1af8:	dc400215 	stw	r17,8(sp)
    1afc:	dc000115 	stw	r16,4(sp)
    1b00:	2025883a 	mov	r18,r4
    1b04:	0009b700 	call	9b70 <__sflags>
    1b08:	10002726 	beq	r2,zero,1ba8 <_fopen_r+0xd0>
    1b0c:	9009883a 	mov	r4,r18
    1b10:	1023883a 	mov	r17,r2
    1b14:	00019580 	call	1958 <__sfp>
    1b18:	1021883a 	mov	r16,r2
    1b1c:	10002226 	beq	r2,zero,1ba8 <_fopen_r+0xd0>
    1b20:	d9800017 	ldw	r6,0(sp)
    1b24:	01c06d84 	movi	r7,438
    1b28:	980b883a 	mov	r5,r19
    1b2c:	9009883a 	mov	r4,r18
    1b30:	00032c80 	call	32c8 <_open_r>
    1b34:	10001916 	blt	r2,zero,1b9c <_fopen_r+0xc4>
    1b38:	8080038d 	sth	r2,14(r16)
    1b3c:	00800034 	movhi	r2,0
    1b40:	108ddc04 	addi	r2,r2,14192
    1b44:	80800815 	stw	r2,32(r16)
    1b48:	00800034 	movhi	r2,0
    1b4c:	108df304 	addi	r2,r2,14284
    1b50:	80800915 	stw	r2,36(r16)
    1b54:	00800034 	movhi	r2,0
    1b58:	108e1204 	addi	r2,r2,14408
    1b5c:	80800a15 	stw	r2,40(r16)
    1b60:	00800034 	movhi	r2,0
    1b64:	108e2904 	addi	r2,r2,14500
    1b68:	8440030d 	sth	r17,12(r16)
    1b6c:	84000715 	stw	r16,28(r16)
    1b70:	80800b15 	stw	r2,44(r16)
    1b74:	8c40400c 	andi	r17,r17,256
    1b78:	88000d1e 	bne	r17,zero,1bb0 <_fopen_r+0xd8>
    1b7c:	8005883a 	mov	r2,r16
    1b80:	dfc00517 	ldw	ra,20(sp)
    1b84:	dcc00417 	ldw	r19,16(sp)
    1b88:	dc800317 	ldw	r18,12(sp)
    1b8c:	dc400217 	ldw	r17,8(sp)
    1b90:	dc000117 	ldw	r16,4(sp)
    1b94:	dec00604 	addi	sp,sp,24
    1b98:	f800283a 	ret
    1b9c:	0001a980 	call	1a98 <__sfp_lock_acquire>
    1ba0:	8000030d 	sth	zero,12(r16)
    1ba4:	0001a9c0 	call	1a9c <__sfp_lock_release>
    1ba8:	0005883a 	mov	r2,zero
    1bac:	003ff406 	br	1b80 <__alt_data_end+0xf8001b80>
    1bb0:	01c00084 	movi	r7,2
    1bb4:	000d883a 	mov	r6,zero
    1bb8:	800b883a 	mov	r5,r16
    1bbc:	9009883a 	mov	r4,r18
    1bc0:	00020640 	call	2064 <_fseek_r>
    1bc4:	8005883a 	mov	r2,r16
    1bc8:	003fed06 	br	1b80 <__alt_data_end+0xf8001b80>

00001bcc <fopen>:
    1bcc:	008000b4 	movhi	r2,2
    1bd0:	10a01704 	addi	r2,r2,-32676
    1bd4:	280d883a 	mov	r6,r5
    1bd8:	200b883a 	mov	r5,r4
    1bdc:	11000017 	ldw	r4,0(r2)
    1be0:	0001ad81 	jmpi	1ad8 <_fopen_r>

00001be4 <_fprintf_r>:
    1be4:	defffe04 	addi	sp,sp,-8
    1be8:	2809883a 	mov	r4,r5
    1bec:	300b883a 	mov	r5,r6
    1bf0:	dfc00015 	stw	ra,0(sp)
    1bf4:	d9c00115 	stw	r7,4(sp)
    1bf8:	d9800104 	addi	r6,sp,4
    1bfc:	0007edc0 	call	7edc <__vfprintf_internal>
    1c00:	dfc00017 	ldw	ra,0(sp)
    1c04:	dec00204 	addi	sp,sp,8
    1c08:	f800283a 	ret

00001c0c <fprintf>:
    1c0c:	defffd04 	addi	sp,sp,-12
    1c10:	dfc00015 	stw	ra,0(sp)
    1c14:	d9800115 	stw	r6,4(sp)
    1c18:	d9c00215 	stw	r7,8(sp)
    1c1c:	d9800104 	addi	r6,sp,4
    1c20:	0007edc0 	call	7edc <__vfprintf_internal>
    1c24:	dfc00017 	ldw	ra,0(sp)
    1c28:	dec00304 	addi	sp,sp,12
    1c2c:	f800283a 	ret

00001c30 <_malloc_trim_r>:
    1c30:	defffb04 	addi	sp,sp,-20
    1c34:	dcc00315 	stw	r19,12(sp)
    1c38:	04c00074 	movhi	r19,1
    1c3c:	dc800215 	stw	r18,8(sp)
    1c40:	dc400115 	stw	r17,4(sp)
    1c44:	dc000015 	stw	r16,0(sp)
    1c48:	dfc00415 	stw	ra,16(sp)
    1c4c:	2821883a 	mov	r16,r5
    1c50:	9cda2b04 	addi	r19,r19,26796
    1c54:	2025883a 	mov	r18,r4
    1c58:	0012d1c0 	call	12d1c <__malloc_lock>
    1c5c:	98800217 	ldw	r2,8(r19)
    1c60:	14400117 	ldw	r17,4(r2)
    1c64:	00bfff04 	movi	r2,-4
    1c68:	88a2703a 	and	r17,r17,r2
    1c6c:	8c21c83a 	sub	r16,r17,r16
    1c70:	8403fbc4 	addi	r16,r16,4079
    1c74:	8020d33a 	srli	r16,r16,12
    1c78:	0083ffc4 	movi	r2,4095
    1c7c:	843fffc4 	addi	r16,r16,-1
    1c80:	8020933a 	slli	r16,r16,12
    1c84:	1400060e 	bge	r2,r16,1ca0 <_malloc_trim_r+0x70>
    1c88:	000b883a 	mov	r5,zero
    1c8c:	9009883a 	mov	r4,r18
    1c90:	00036580 	call	3658 <_sbrk_r>
    1c94:	98c00217 	ldw	r3,8(r19)
    1c98:	1c47883a 	add	r3,r3,r17
    1c9c:	10c00a26 	beq	r2,r3,1cc8 <_malloc_trim_r+0x98>
    1ca0:	9009883a 	mov	r4,r18
    1ca4:	0012d400 	call	12d40 <__malloc_unlock>
    1ca8:	0005883a 	mov	r2,zero
    1cac:	dfc00417 	ldw	ra,16(sp)
    1cb0:	dcc00317 	ldw	r19,12(sp)
    1cb4:	dc800217 	ldw	r18,8(sp)
    1cb8:	dc400117 	ldw	r17,4(sp)
    1cbc:	dc000017 	ldw	r16,0(sp)
    1cc0:	dec00504 	addi	sp,sp,20
    1cc4:	f800283a 	ret
    1cc8:	040bc83a 	sub	r5,zero,r16
    1ccc:	9009883a 	mov	r4,r18
    1cd0:	00036580 	call	3658 <_sbrk_r>
    1cd4:	00ffffc4 	movi	r3,-1
    1cd8:	10c00d26 	beq	r2,r3,1d10 <_malloc_trim_r+0xe0>
    1cdc:	00c000b4 	movhi	r3,2
    1ce0:	18e75604 	addi	r3,r3,-25256
    1ce4:	18800017 	ldw	r2,0(r3)
    1ce8:	99000217 	ldw	r4,8(r19)
    1cec:	8c23c83a 	sub	r17,r17,r16
    1cf0:	8c400054 	ori	r17,r17,1
    1cf4:	1421c83a 	sub	r16,r2,r16
    1cf8:	24400115 	stw	r17,4(r4)
    1cfc:	9009883a 	mov	r4,r18
    1d00:	1c000015 	stw	r16,0(r3)
    1d04:	0012d400 	call	12d40 <__malloc_unlock>
    1d08:	00800044 	movi	r2,1
    1d0c:	003fe706 	br	1cac <__alt_data_end+0xf8001cac>
    1d10:	000b883a 	mov	r5,zero
    1d14:	9009883a 	mov	r4,r18
    1d18:	00036580 	call	3658 <_sbrk_r>
    1d1c:	99000217 	ldw	r4,8(r19)
    1d20:	014003c4 	movi	r5,15
    1d24:	1107c83a 	sub	r3,r2,r4
    1d28:	28ffdd0e 	bge	r5,r3,1ca0 <__alt_data_end+0xf8001ca0>
    1d2c:	014000b4 	movhi	r5,2
    1d30:	29601804 	addi	r5,r5,-32672
    1d34:	29400017 	ldw	r5,0(r5)
    1d38:	18c00054 	ori	r3,r3,1
    1d3c:	20c00115 	stw	r3,4(r4)
    1d40:	00c000b4 	movhi	r3,2
    1d44:	1145c83a 	sub	r2,r2,r5
    1d48:	18e75604 	addi	r3,r3,-25256
    1d4c:	18800015 	stw	r2,0(r3)
    1d50:	003fd306 	br	1ca0 <__alt_data_end+0xf8001ca0>

00001d54 <_free_r>:
    1d54:	28004126 	beq	r5,zero,1e5c <_free_r+0x108>
    1d58:	defffd04 	addi	sp,sp,-12
    1d5c:	dc400115 	stw	r17,4(sp)
    1d60:	dc000015 	stw	r16,0(sp)
    1d64:	2023883a 	mov	r17,r4
    1d68:	2821883a 	mov	r16,r5
    1d6c:	dfc00215 	stw	ra,8(sp)
    1d70:	0012d1c0 	call	12d1c <__malloc_lock>
    1d74:	81ffff17 	ldw	r7,-4(r16)
    1d78:	00bfff84 	movi	r2,-2
    1d7c:	01000074 	movhi	r4,1
    1d80:	81bffe04 	addi	r6,r16,-8
    1d84:	3884703a 	and	r2,r7,r2
    1d88:	211a2b04 	addi	r4,r4,26796
    1d8c:	308b883a 	add	r5,r6,r2
    1d90:	2a400117 	ldw	r9,4(r5)
    1d94:	22000217 	ldw	r8,8(r4)
    1d98:	00ffff04 	movi	r3,-4
    1d9c:	48c6703a 	and	r3,r9,r3
    1da0:	2a005726 	beq	r5,r8,1f00 <_free_r+0x1ac>
    1da4:	28c00115 	stw	r3,4(r5)
    1da8:	39c0004c 	andi	r7,r7,1
    1dac:	3800091e 	bne	r7,zero,1dd4 <_free_r+0x80>
    1db0:	823ffe17 	ldw	r8,-8(r16)
    1db4:	22400204 	addi	r9,r4,8
    1db8:	320dc83a 	sub	r6,r6,r8
    1dbc:	31c00217 	ldw	r7,8(r6)
    1dc0:	1205883a 	add	r2,r2,r8
    1dc4:	3a406526 	beq	r7,r9,1f5c <_free_r+0x208>
    1dc8:	32000317 	ldw	r8,12(r6)
    1dcc:	3a000315 	stw	r8,12(r7)
    1dd0:	41c00215 	stw	r7,8(r8)
    1dd4:	28cf883a 	add	r7,r5,r3
    1dd8:	39c00117 	ldw	r7,4(r7)
    1ddc:	39c0004c 	andi	r7,r7,1
    1de0:	38003a26 	beq	r7,zero,1ecc <_free_r+0x178>
    1de4:	10c00054 	ori	r3,r2,1
    1de8:	30c00115 	stw	r3,4(r6)
    1dec:	3087883a 	add	r3,r6,r2
    1df0:	18800015 	stw	r2,0(r3)
    1df4:	00c07fc4 	movi	r3,511
    1df8:	18801936 	bltu	r3,r2,1e60 <_free_r+0x10c>
    1dfc:	1004d0fa 	srli	r2,r2,3
    1e00:	01c00044 	movi	r7,1
    1e04:	21400117 	ldw	r5,4(r4)
    1e08:	10c00044 	addi	r3,r2,1
    1e0c:	18c7883a 	add	r3,r3,r3
    1e10:	1005d0ba 	srai	r2,r2,2
    1e14:	18c7883a 	add	r3,r3,r3
    1e18:	18c7883a 	add	r3,r3,r3
    1e1c:	1907883a 	add	r3,r3,r4
    1e20:	3884983a 	sll	r2,r7,r2
    1e24:	19c00017 	ldw	r7,0(r3)
    1e28:	1a3ffe04 	addi	r8,r3,-8
    1e2c:	1144b03a 	or	r2,r2,r5
    1e30:	32000315 	stw	r8,12(r6)
    1e34:	31c00215 	stw	r7,8(r6)
    1e38:	20800115 	stw	r2,4(r4)
    1e3c:	19800015 	stw	r6,0(r3)
    1e40:	39800315 	stw	r6,12(r7)
    1e44:	8809883a 	mov	r4,r17
    1e48:	dfc00217 	ldw	ra,8(sp)
    1e4c:	dc400117 	ldw	r17,4(sp)
    1e50:	dc000017 	ldw	r16,0(sp)
    1e54:	dec00304 	addi	sp,sp,12
    1e58:	0012d401 	jmpi	12d40 <__malloc_unlock>
    1e5c:	f800283a 	ret
    1e60:	100ad27a 	srli	r5,r2,9
    1e64:	00c00104 	movi	r3,4
    1e68:	19404a36 	bltu	r3,r5,1f94 <_free_r+0x240>
    1e6c:	100ad1ba 	srli	r5,r2,6
    1e70:	28c00e44 	addi	r3,r5,57
    1e74:	18c7883a 	add	r3,r3,r3
    1e78:	29400e04 	addi	r5,r5,56
    1e7c:	18c7883a 	add	r3,r3,r3
    1e80:	18c7883a 	add	r3,r3,r3
    1e84:	1909883a 	add	r4,r3,r4
    1e88:	20c00017 	ldw	r3,0(r4)
    1e8c:	01c00074 	movhi	r7,1
    1e90:	213ffe04 	addi	r4,r4,-8
    1e94:	39da2b04 	addi	r7,r7,26796
    1e98:	20c04426 	beq	r4,r3,1fac <_free_r+0x258>
    1e9c:	01ffff04 	movi	r7,-4
    1ea0:	19400117 	ldw	r5,4(r3)
    1ea4:	29ca703a 	and	r5,r5,r7
    1ea8:	1140022e 	bgeu	r2,r5,1eb4 <_free_r+0x160>
    1eac:	18c00217 	ldw	r3,8(r3)
    1eb0:	20fffb1e 	bne	r4,r3,1ea0 <__alt_data_end+0xf8001ea0>
    1eb4:	19000317 	ldw	r4,12(r3)
    1eb8:	31000315 	stw	r4,12(r6)
    1ebc:	30c00215 	stw	r3,8(r6)
    1ec0:	21800215 	stw	r6,8(r4)
    1ec4:	19800315 	stw	r6,12(r3)
    1ec8:	003fde06 	br	1e44 <__alt_data_end+0xf8001e44>
    1ecc:	29c00217 	ldw	r7,8(r5)
    1ed0:	10c5883a 	add	r2,r2,r3
    1ed4:	00c00074 	movhi	r3,1
    1ed8:	18da2d04 	addi	r3,r3,26804
    1edc:	38c03b26 	beq	r7,r3,1fcc <_free_r+0x278>
    1ee0:	2a000317 	ldw	r8,12(r5)
    1ee4:	11400054 	ori	r5,r2,1
    1ee8:	3087883a 	add	r3,r6,r2
    1eec:	3a000315 	stw	r8,12(r7)
    1ef0:	41c00215 	stw	r7,8(r8)
    1ef4:	31400115 	stw	r5,4(r6)
    1ef8:	18800015 	stw	r2,0(r3)
    1efc:	003fbd06 	br	1df4 <__alt_data_end+0xf8001df4>
    1f00:	39c0004c 	andi	r7,r7,1
    1f04:	10c5883a 	add	r2,r2,r3
    1f08:	3800071e 	bne	r7,zero,1f28 <_free_r+0x1d4>
    1f0c:	81fffe17 	ldw	r7,-8(r16)
    1f10:	31cdc83a 	sub	r6,r6,r7
    1f14:	30c00317 	ldw	r3,12(r6)
    1f18:	31400217 	ldw	r5,8(r6)
    1f1c:	11c5883a 	add	r2,r2,r7
    1f20:	28c00315 	stw	r3,12(r5)
    1f24:	19400215 	stw	r5,8(r3)
    1f28:	10c00054 	ori	r3,r2,1
    1f2c:	30c00115 	stw	r3,4(r6)
    1f30:	00c000b4 	movhi	r3,2
    1f34:	18e01904 	addi	r3,r3,-32668
    1f38:	18c00017 	ldw	r3,0(r3)
    1f3c:	21800215 	stw	r6,8(r4)
    1f40:	10ffc036 	bltu	r2,r3,1e44 <__alt_data_end+0xf8001e44>
    1f44:	008000b4 	movhi	r2,2
    1f48:	10a74904 	addi	r2,r2,-25308
    1f4c:	11400017 	ldw	r5,0(r2)
    1f50:	8809883a 	mov	r4,r17
    1f54:	0001c300 	call	1c30 <_malloc_trim_r>
    1f58:	003fba06 	br	1e44 <__alt_data_end+0xf8001e44>
    1f5c:	28c9883a 	add	r4,r5,r3
    1f60:	21000117 	ldw	r4,4(r4)
    1f64:	2100004c 	andi	r4,r4,1
    1f68:	2000391e 	bne	r4,zero,2050 <_free_r+0x2fc>
    1f6c:	29c00217 	ldw	r7,8(r5)
    1f70:	29000317 	ldw	r4,12(r5)
    1f74:	1885883a 	add	r2,r3,r2
    1f78:	10c00054 	ori	r3,r2,1
    1f7c:	39000315 	stw	r4,12(r7)
    1f80:	21c00215 	stw	r7,8(r4)
    1f84:	30c00115 	stw	r3,4(r6)
    1f88:	308d883a 	add	r6,r6,r2
    1f8c:	30800015 	stw	r2,0(r6)
    1f90:	003fac06 	br	1e44 <__alt_data_end+0xf8001e44>
    1f94:	00c00504 	movi	r3,20
    1f98:	19401536 	bltu	r3,r5,1ff0 <_free_r+0x29c>
    1f9c:	28c01704 	addi	r3,r5,92
    1fa0:	18c7883a 	add	r3,r3,r3
    1fa4:	294016c4 	addi	r5,r5,91
    1fa8:	003fb406 	br	1e7c <__alt_data_end+0xf8001e7c>
    1fac:	280bd0ba 	srai	r5,r5,2
    1fb0:	00c00044 	movi	r3,1
    1fb4:	38800117 	ldw	r2,4(r7)
    1fb8:	194a983a 	sll	r5,r3,r5
    1fbc:	2007883a 	mov	r3,r4
    1fc0:	2884b03a 	or	r2,r5,r2
    1fc4:	38800115 	stw	r2,4(r7)
    1fc8:	003fbb06 	br	1eb8 <__alt_data_end+0xf8001eb8>
    1fcc:	21800515 	stw	r6,20(r4)
    1fd0:	21800415 	stw	r6,16(r4)
    1fd4:	10c00054 	ori	r3,r2,1
    1fd8:	31c00315 	stw	r7,12(r6)
    1fdc:	31c00215 	stw	r7,8(r6)
    1fe0:	30c00115 	stw	r3,4(r6)
    1fe4:	308d883a 	add	r6,r6,r2
    1fe8:	30800015 	stw	r2,0(r6)
    1fec:	003f9506 	br	1e44 <__alt_data_end+0xf8001e44>
    1ff0:	00c01504 	movi	r3,84
    1ff4:	19400536 	bltu	r3,r5,200c <_free_r+0x2b8>
    1ff8:	100ad33a 	srli	r5,r2,12
    1ffc:	28c01bc4 	addi	r3,r5,111
    2000:	18c7883a 	add	r3,r3,r3
    2004:	29401b84 	addi	r5,r5,110
    2008:	003f9c06 	br	1e7c <__alt_data_end+0xf8001e7c>
    200c:	00c05504 	movi	r3,340
    2010:	19400536 	bltu	r3,r5,2028 <_free_r+0x2d4>
    2014:	100ad3fa 	srli	r5,r2,15
    2018:	28c01e04 	addi	r3,r5,120
    201c:	18c7883a 	add	r3,r3,r3
    2020:	29401dc4 	addi	r5,r5,119
    2024:	003f9506 	br	1e7c <__alt_data_end+0xf8001e7c>
    2028:	00c15504 	movi	r3,1364
    202c:	19400536 	bltu	r3,r5,2044 <_free_r+0x2f0>
    2030:	100ad4ba 	srli	r5,r2,18
    2034:	28c01f44 	addi	r3,r5,125
    2038:	18c7883a 	add	r3,r3,r3
    203c:	29401f04 	addi	r5,r5,124
    2040:	003f8e06 	br	1e7c <__alt_data_end+0xf8001e7c>
    2044:	00c03f84 	movi	r3,254
    2048:	01401f84 	movi	r5,126
    204c:	003f8b06 	br	1e7c <__alt_data_end+0xf8001e7c>
    2050:	10c00054 	ori	r3,r2,1
    2054:	30c00115 	stw	r3,4(r6)
    2058:	308d883a 	add	r6,r6,r2
    205c:	30800015 	stw	r2,0(r6)
    2060:	003f7806 	br	1e44 <__alt_data_end+0xf8001e44>

00002064 <_fseek_r>:
    2064:	00020841 	jmpi	2084 <_fseeko_r>

00002068 <fseek>:
    2068:	008000b4 	movhi	r2,2
    206c:	10a01704 	addi	r2,r2,-32676
    2070:	300f883a 	mov	r7,r6
    2074:	280d883a 	mov	r6,r5
    2078:	200b883a 	mov	r5,r4
    207c:	11000017 	ldw	r4,0(r2)
    2080:	00020841 	jmpi	2084 <_fseeko_r>

00002084 <_fseeko_r>:
    2084:	deffe804 	addi	sp,sp,-96
    2088:	dd401415 	stw	r21,80(sp)
    208c:	dc801115 	stw	r18,68(sp)
    2090:	dc401015 	stw	r17,64(sp)
    2094:	dc000f15 	stw	r16,60(sp)
    2098:	dfc01715 	stw	ra,92(sp)
    209c:	ddc01615 	stw	r23,88(sp)
    20a0:	dd801515 	stw	r22,84(sp)
    20a4:	dd001315 	stw	r20,76(sp)
    20a8:	dcc01215 	stw	r19,72(sp)
    20ac:	2023883a 	mov	r17,r4
    20b0:	2821883a 	mov	r16,r5
    20b4:	302b883a 	mov	r21,r6
    20b8:	3825883a 	mov	r18,r7
    20bc:	20000226 	beq	r4,zero,20c8 <_fseeko_r+0x44>
    20c0:	20800e17 	ldw	r2,56(r4)
    20c4:	10005a26 	beq	r2,zero,2230 <_fseeko_r+0x1ac>
    20c8:	8080030b 	ldhu	r2,12(r16)
    20cc:	00c04204 	movi	r3,264
    20d0:	1080420c 	andi	r2,r2,264
    20d4:	10c05b26 	beq	r2,r3,2244 <_fseeko_r+0x1c0>
    20d8:	85000a17 	ldw	r20,40(r16)
    20dc:	a000f626 	beq	r20,zero,24b8 <_fseeko_r+0x434>
    20e0:	00800044 	movi	r2,1
    20e4:	90803e26 	beq	r18,r2,21e0 <_fseeko_r+0x15c>
    20e8:	00800084 	movi	r2,2
    20ec:	90801026 	beq	r18,r2,2130 <_fseeko_r+0xac>
    20f0:	90000f26 	beq	r18,zero,2130 <_fseeko_r+0xac>
    20f4:	00800584 	movi	r2,22
    20f8:	88800015 	stw	r2,0(r17)
    20fc:	04ffffc4 	movi	r19,-1
    2100:	9805883a 	mov	r2,r19
    2104:	dfc01717 	ldw	ra,92(sp)
    2108:	ddc01617 	ldw	r23,88(sp)
    210c:	dd801517 	ldw	r22,84(sp)
    2110:	dd401417 	ldw	r21,80(sp)
    2114:	dd001317 	ldw	r20,76(sp)
    2118:	dcc01217 	ldw	r19,72(sp)
    211c:	dc801117 	ldw	r18,68(sp)
    2120:	dc401017 	ldw	r17,64(sp)
    2124:	dc000f17 	ldw	r16,60(sp)
    2128:	dec01804 	addi	sp,sp,96
    212c:	f800283a 	ret
    2130:	80800417 	ldw	r2,16(r16)
    2134:	002f883a 	mov	r23,zero
    2138:	0027883a 	mov	r19,zero
    213c:	1000cb26 	beq	r2,zero,246c <_fseeko_r+0x3e8>
    2140:	8080030b 	ldhu	r2,12(r16)
    2144:	10c2068c 	andi	r3,r2,2074
    2148:	1800071e 	bne	r3,zero,2168 <_fseeko_r+0xe4>
    214c:	10c1000c 	andi	r3,r2,1024
    2150:	1800451e 	bne	r3,zero,2268 <_fseeko_r+0x1e4>
    2154:	00c00034 	movhi	r3,0
    2158:	18ce1204 	addi	r3,r3,14408
    215c:	a0c0b726 	beq	r20,r3,243c <_fseeko_r+0x3b8>
    2160:	10820014 	ori	r2,r2,2048
    2164:	8080030d 	sth	r2,12(r16)
    2168:	800b883a 	mov	r5,r16
    216c:	8809883a 	mov	r4,r17
    2170:	000169c0 	call	169c <_fflush_r>
    2174:	1027883a 	mov	r19,r2
    2178:	103fe01e 	bne	r2,zero,20fc <__alt_data_end+0xf80020fc>
    217c:	81400717 	ldw	r5,28(r16)
    2180:	900f883a 	mov	r7,r18
    2184:	a80d883a 	mov	r6,r21
    2188:	8809883a 	mov	r4,r17
    218c:	a03ee83a 	callr	r20
    2190:	00ffffc4 	movi	r3,-1
    2194:	10ffd926 	beq	r2,r3,20fc <__alt_data_end+0xf80020fc>
    2198:	81400c17 	ldw	r5,48(r16)
    219c:	28000526 	beq	r5,zero,21b4 <_fseeko_r+0x130>
    21a0:	80801004 	addi	r2,r16,64
    21a4:	28800226 	beq	r5,r2,21b0 <_fseeko_r+0x12c>
    21a8:	8809883a 	mov	r4,r17
    21ac:	0001d540 	call	1d54 <_free_r>
    21b0:	80000c15 	stw	zero,48(r16)
    21b4:	8080030b 	ldhu	r2,12(r16)
    21b8:	80c00417 	ldw	r3,16(r16)
    21bc:	80000115 	stw	zero,4(r16)
    21c0:	10bdf7cc 	andi	r2,r2,63455
    21c4:	80c00015 	stw	r3,0(r16)
    21c8:	8080030d 	sth	r2,12(r16)
    21cc:	01800204 	movi	r6,8
    21d0:	000b883a 	mov	r5,zero
    21d4:	81001704 	addi	r4,r16,92
    21d8:	00031a00 	call	31a0 <memset>
    21dc:	003fc806 	br	2100 <__alt_data_end+0xf8002100>
    21e0:	800b883a 	mov	r5,r16
    21e4:	8809883a 	mov	r4,r17
    21e8:	000169c0 	call	169c <_fflush_r>
    21ec:	8080030b 	ldhu	r2,12(r16)
    21f0:	10c4000c 	andi	r3,r2,4096
    21f4:	18008726 	beq	r3,zero,2414 <_fseeko_r+0x390>
    21f8:	84c01417 	ldw	r19,80(r16)
    21fc:	10c0010c 	andi	r3,r2,4
    2200:	1800431e 	bne	r3,zero,2310 <_fseeko_r+0x28c>
    2204:	1080020c 	andi	r2,r2,8
    2208:	10008026 	beq	r2,zero,240c <_fseeko_r+0x388>
    220c:	80c00017 	ldw	r3,0(r16)
    2210:	80800417 	ldw	r2,16(r16)
    2214:	18000226 	beq	r3,zero,2220 <_fseeko_r+0x19c>
    2218:	1887c83a 	sub	r3,r3,r2
    221c:	98e7883a 	add	r19,r19,r3
    2220:	aceb883a 	add	r21,r21,r19
    2224:	05c00044 	movi	r23,1
    2228:	0025883a 	mov	r18,zero
    222c:	003fc306 	br	213c <__alt_data_end+0xf800213c>
    2230:	0001a880 	call	1a88 <__sinit>
    2234:	8080030b 	ldhu	r2,12(r16)
    2238:	00c04204 	movi	r3,264
    223c:	1080420c 	andi	r2,r2,264
    2240:	10ffa51e 	bne	r2,r3,20d8 <__alt_data_end+0xf80020d8>
    2244:	800b883a 	mov	r5,r16
    2248:	8809883a 	mov	r4,r17
    224c:	000169c0 	call	169c <_fflush_r>
    2250:	003fa106 	br	20d8 <__alt_data_end+0xf80020d8>
    2254:	8080030b 	ldhu	r2,12(r16)
    2258:	00c10004 	movi	r3,1024
    225c:	80c01315 	stw	r3,76(r16)
    2260:	10c4b03a 	or	r2,r2,r3
    2264:	8080030d 	sth	r2,12(r16)
    2268:	9000311e 	bne	r18,zero,2330 <_fseeko_r+0x2ac>
    226c:	a82d883a 	mov	r22,r21
    2270:	b800371e 	bne	r23,zero,2350 <_fseeko_r+0x2cc>
    2274:	8080030b 	ldhu	r2,12(r16)
    2278:	1084000c 	andi	r2,r2,4096
    227c:	10007f26 	beq	r2,zero,247c <_fseeko_r+0x3f8>
    2280:	80801417 	ldw	r2,80(r16)
    2284:	81800117 	ldw	r6,4(r16)
    2288:	81400c17 	ldw	r5,48(r16)
    228c:	11a7c83a 	sub	r19,r2,r6
    2290:	28008226 	beq	r5,zero,249c <_fseeko_r+0x418>
    2294:	81c00f17 	ldw	r7,60(r16)
    2298:	99e7c83a 	sub	r19,r19,r7
    229c:	81000e17 	ldw	r4,56(r16)
    22a0:	80800417 	ldw	r2,16(r16)
    22a4:	99a7883a 	add	r19,r19,r6
    22a8:	2087c83a 	sub	r3,r4,r2
    22ac:	98e7c83a 	sub	r19,r19,r3
    22b0:	38c7883a 	add	r3,r7,r3
    22b4:	b4c02b16 	blt	r22,r19,2364 <_fseeko_r+0x2e0>
    22b8:	98c9883a 	add	r4,r19,r3
    22bc:	b100292e 	bgeu	r22,r4,2364 <_fseeko_r+0x2e0>
    22c0:	b4e7c83a 	sub	r19,r22,r19
    22c4:	14c5883a 	add	r2,r2,r19
    22c8:	1ce7c83a 	sub	r19,r3,r19
    22cc:	80800015 	stw	r2,0(r16)
    22d0:	84c00115 	stw	r19,4(r16)
    22d4:	28000526 	beq	r5,zero,22ec <_fseeko_r+0x268>
    22d8:	80801004 	addi	r2,r16,64
    22dc:	28800226 	beq	r5,r2,22e8 <_fseeko_r+0x264>
    22e0:	8809883a 	mov	r4,r17
    22e4:	0001d540 	call	1d54 <_free_r>
    22e8:	80000c15 	stw	zero,48(r16)
    22ec:	8080030b 	ldhu	r2,12(r16)
    22f0:	01800204 	movi	r6,8
    22f4:	000b883a 	mov	r5,zero
    22f8:	10bff7cc 	andi	r2,r2,65503
    22fc:	8080030d 	sth	r2,12(r16)
    2300:	81001704 	addi	r4,r16,92
    2304:	00031a00 	call	31a0 <memset>
    2308:	0027883a 	mov	r19,zero
    230c:	003f7c06 	br	2100 <__alt_data_end+0xf8002100>
    2310:	80c00117 	ldw	r3,4(r16)
    2314:	80800c17 	ldw	r2,48(r16)
    2318:	98e7c83a 	sub	r19,r19,r3
    231c:	10003b26 	beq	r2,zero,240c <_fseeko_r+0x388>
    2320:	80c00f17 	ldw	r3,60(r16)
    2324:	80800417 	ldw	r2,16(r16)
    2328:	98e7c83a 	sub	r19,r19,r3
    232c:	003fbc06 	br	2220 <__alt_data_end+0xf8002220>
    2330:	8140038f 	ldh	r5,14(r16)
    2334:	d80d883a 	mov	r6,sp
    2338:	8809883a 	mov	r4,r17
    233c:	00024e40 	call	24e4 <_fstat_r>
    2340:	103f891e 	bne	r2,zero,2168 <__alt_data_end+0xf8002168>
    2344:	dd800417 	ldw	r22,16(sp)
    2348:	adad883a 	add	r22,r21,r22
    234c:	b83fc926 	beq	r23,zero,2274 <__alt_data_end+0xf8002274>
    2350:	81400c17 	ldw	r5,48(r16)
    2354:	81800117 	ldw	r6,4(r16)
    2358:	28005026 	beq	r5,zero,249c <_fseeko_r+0x418>
    235c:	81c00f17 	ldw	r7,60(r16)
    2360:	003fce06 	br	229c <__alt_data_end+0xf800229c>
    2364:	84c01317 	ldw	r19,76(r16)
    2368:	81400717 	ldw	r5,28(r16)
    236c:	000f883a 	mov	r7,zero
    2370:	04e7c83a 	sub	r19,zero,r19
    2374:	9da6703a 	and	r19,r19,r22
    2378:	980d883a 	mov	r6,r19
    237c:	8809883a 	mov	r4,r17
    2380:	a03ee83a 	callr	r20
    2384:	00ffffc4 	movi	r3,-1
    2388:	10ff7726 	beq	r2,r3,2168 <__alt_data_end+0xf8002168>
    238c:	80800417 	ldw	r2,16(r16)
    2390:	81400c17 	ldw	r5,48(r16)
    2394:	80000115 	stw	zero,4(r16)
    2398:	80800015 	stw	r2,0(r16)
    239c:	28000526 	beq	r5,zero,23b4 <_fseeko_r+0x330>
    23a0:	80801004 	addi	r2,r16,64
    23a4:	28800226 	beq	r5,r2,23b0 <_fseeko_r+0x32c>
    23a8:	8809883a 	mov	r4,r17
    23ac:	0001d540 	call	1d54 <_free_r>
    23b0:	80000c15 	stw	zero,48(r16)
    23b4:	8080030b 	ldhu	r2,12(r16)
    23b8:	b4e7c83a 	sub	r19,r22,r19
    23bc:	10bff7cc 	andi	r2,r2,65503
    23c0:	8080030d 	sth	r2,12(r16)
    23c4:	98000b26 	beq	r19,zero,23f4 <_fseeko_r+0x370>
    23c8:	800b883a 	mov	r5,r16
    23cc:	8809883a 	mov	r4,r17
    23d0:	00034840 	call	3484 <__srefill_r>
    23d4:	103f641e 	bne	r2,zero,2168 <__alt_data_end+0xf8002168>
    23d8:	80800117 	ldw	r2,4(r16)
    23dc:	14ff6236 	bltu	r2,r19,2168 <__alt_data_end+0xf8002168>
    23e0:	80c00017 	ldw	r3,0(r16)
    23e4:	14c5c83a 	sub	r2,r2,r19
    23e8:	80800115 	stw	r2,4(r16)
    23ec:	1ce7883a 	add	r19,r3,r19
    23f0:	84c00015 	stw	r19,0(r16)
    23f4:	01800204 	movi	r6,8
    23f8:	000b883a 	mov	r5,zero
    23fc:	81001704 	addi	r4,r16,92
    2400:	00031a00 	call	31a0 <memset>
    2404:	0027883a 	mov	r19,zero
    2408:	003f3d06 	br	2100 <__alt_data_end+0xf8002100>
    240c:	80800417 	ldw	r2,16(r16)
    2410:	003f8306 	br	2220 <__alt_data_end+0xf8002220>
    2414:	81400717 	ldw	r5,28(r16)
    2418:	900f883a 	mov	r7,r18
    241c:	000d883a 	mov	r6,zero
    2420:	8809883a 	mov	r4,r17
    2424:	a03ee83a 	callr	r20
    2428:	1027883a 	mov	r19,r2
    242c:	00bfffc4 	movi	r2,-1
    2430:	98bf3226 	beq	r19,r2,20fc <__alt_data_end+0xf80020fc>
    2434:	8080030b 	ldhu	r2,12(r16)
    2438:	003f7006 	br	21fc <__alt_data_end+0xf80021fc>
    243c:	8140038f 	ldh	r5,14(r16)
    2440:	283f4716 	blt	r5,zero,2160 <__alt_data_end+0xf8002160>
    2444:	d80d883a 	mov	r6,sp
    2448:	8809883a 	mov	r4,r17
    244c:	00024e40 	call	24e4 <_fstat_r>
    2450:	1000041e 	bne	r2,zero,2464 <_fseeko_r+0x3e0>
    2454:	d8800117 	ldw	r2,4(sp)
    2458:	00e00014 	movui	r3,32768
    245c:	10bc000c 	andi	r2,r2,61440
    2460:	10ff7c26 	beq	r2,r3,2254 <__alt_data_end+0xf8002254>
    2464:	8080030b 	ldhu	r2,12(r16)
    2468:	003f3d06 	br	2160 <__alt_data_end+0xf8002160>
    246c:	800b883a 	mov	r5,r16
    2470:	8809883a 	mov	r4,r17
    2474:	00027d80 	call	27d8 <__smakebuf_r>
    2478:	003f3106 	br	2140 <__alt_data_end+0xf8002140>
    247c:	81400717 	ldw	r5,28(r16)
    2480:	01c00044 	movi	r7,1
    2484:	000d883a 	mov	r6,zero
    2488:	8809883a 	mov	r4,r17
    248c:	a03ee83a 	callr	r20
    2490:	00ffffc4 	movi	r3,-1
    2494:	10ff7b1e 	bne	r2,r3,2284 <__alt_data_end+0xf8002284>
    2498:	003f3306 	br	2168 <__alt_data_end+0xf8002168>
    249c:	80c00017 	ldw	r3,0(r16)
    24a0:	80800417 	ldw	r2,16(r16)
    24a4:	000b883a 	mov	r5,zero
    24a8:	1887c83a 	sub	r3,r3,r2
    24ac:	98e7c83a 	sub	r19,r19,r3
    24b0:	30c7883a 	add	r3,r6,r3
    24b4:	003f7f06 	br	22b4 <__alt_data_end+0xf80022b4>
    24b8:	00800744 	movi	r2,29
    24bc:	88800015 	stw	r2,0(r17)
    24c0:	04ffffc4 	movi	r19,-1
    24c4:	003f0e06 	br	2100 <__alt_data_end+0xf8002100>

000024c8 <fseeko>:
    24c8:	008000b4 	movhi	r2,2
    24cc:	10a01704 	addi	r2,r2,-32676
    24d0:	300f883a 	mov	r7,r6
    24d4:	280d883a 	mov	r6,r5
    24d8:	200b883a 	mov	r5,r4
    24dc:	11000017 	ldw	r4,0(r2)
    24e0:	00020841 	jmpi	2084 <_fseeko_r>

000024e4 <_fstat_r>:
    24e4:	defffd04 	addi	sp,sp,-12
    24e8:	2805883a 	mov	r2,r5
    24ec:	dc000015 	stw	r16,0(sp)
    24f0:	040000b4 	movhi	r16,2
    24f4:	dc400115 	stw	r17,4(sp)
    24f8:	84274604 	addi	r16,r16,-25320
    24fc:	2023883a 	mov	r17,r4
    2500:	300b883a 	mov	r5,r6
    2504:	1009883a 	mov	r4,r2
    2508:	dfc00215 	stw	ra,8(sp)
    250c:	80000015 	stw	zero,0(r16)
    2510:	001265c0 	call	1265c <fstat>
    2514:	00ffffc4 	movi	r3,-1
    2518:	10c00526 	beq	r2,r3,2530 <_fstat_r+0x4c>
    251c:	dfc00217 	ldw	ra,8(sp)
    2520:	dc400117 	ldw	r17,4(sp)
    2524:	dc000017 	ldw	r16,0(sp)
    2528:	dec00304 	addi	sp,sp,12
    252c:	f800283a 	ret
    2530:	80c00017 	ldw	r3,0(r16)
    2534:	183ff926 	beq	r3,zero,251c <__alt_data_end+0xf800251c>
    2538:	88c00015 	stw	r3,0(r17)
    253c:	003ff706 	br	251c <__alt_data_end+0xf800251c>

00002540 <_fwalk>:
    2540:	defff704 	addi	sp,sp,-36
    2544:	dd000415 	stw	r20,16(sp)
    2548:	dfc00815 	stw	ra,32(sp)
    254c:	ddc00715 	stw	r23,28(sp)
    2550:	dd800615 	stw	r22,24(sp)
    2554:	dd400515 	stw	r21,20(sp)
    2558:	dcc00315 	stw	r19,12(sp)
    255c:	dc800215 	stw	r18,8(sp)
    2560:	dc400115 	stw	r17,4(sp)
    2564:	dc000015 	stw	r16,0(sp)
    2568:	2500b804 	addi	r20,r4,736
    256c:	a0002326 	beq	r20,zero,25fc <_fwalk+0xbc>
    2570:	282b883a 	mov	r21,r5
    2574:	002f883a 	mov	r23,zero
    2578:	05800044 	movi	r22,1
    257c:	04ffffc4 	movi	r19,-1
    2580:	a4400117 	ldw	r17,4(r20)
    2584:	a4800217 	ldw	r18,8(r20)
    2588:	8c7fffc4 	addi	r17,r17,-1
    258c:	88000d16 	blt	r17,zero,25c4 <_fwalk+0x84>
    2590:	94000304 	addi	r16,r18,12
    2594:	94800384 	addi	r18,r18,14
    2598:	8080000b 	ldhu	r2,0(r16)
    259c:	8c7fffc4 	addi	r17,r17,-1
    25a0:	813ffd04 	addi	r4,r16,-12
    25a4:	b080042e 	bgeu	r22,r2,25b8 <_fwalk+0x78>
    25a8:	9080000f 	ldh	r2,0(r18)
    25ac:	14c00226 	beq	r2,r19,25b8 <_fwalk+0x78>
    25b0:	a83ee83a 	callr	r21
    25b4:	b8aeb03a 	or	r23,r23,r2
    25b8:	84001a04 	addi	r16,r16,104
    25bc:	94801a04 	addi	r18,r18,104
    25c0:	8cfff51e 	bne	r17,r19,2598 <__alt_data_end+0xf8002598>
    25c4:	a5000017 	ldw	r20,0(r20)
    25c8:	a03fed1e 	bne	r20,zero,2580 <__alt_data_end+0xf8002580>
    25cc:	b805883a 	mov	r2,r23
    25d0:	dfc00817 	ldw	ra,32(sp)
    25d4:	ddc00717 	ldw	r23,28(sp)
    25d8:	dd800617 	ldw	r22,24(sp)
    25dc:	dd400517 	ldw	r21,20(sp)
    25e0:	dd000417 	ldw	r20,16(sp)
    25e4:	dcc00317 	ldw	r19,12(sp)
    25e8:	dc800217 	ldw	r18,8(sp)
    25ec:	dc400117 	ldw	r17,4(sp)
    25f0:	dc000017 	ldw	r16,0(sp)
    25f4:	dec00904 	addi	sp,sp,36
    25f8:	f800283a 	ret
    25fc:	002f883a 	mov	r23,zero
    2600:	003ff206 	br	25cc <__alt_data_end+0xf80025cc>

00002604 <_fwalk_reent>:
    2604:	defff704 	addi	sp,sp,-36
    2608:	dd000415 	stw	r20,16(sp)
    260c:	dfc00815 	stw	ra,32(sp)
    2610:	ddc00715 	stw	r23,28(sp)
    2614:	dd800615 	stw	r22,24(sp)
    2618:	dd400515 	stw	r21,20(sp)
    261c:	dcc00315 	stw	r19,12(sp)
    2620:	dc800215 	stw	r18,8(sp)
    2624:	dc400115 	stw	r17,4(sp)
    2628:	dc000015 	stw	r16,0(sp)
    262c:	2500b804 	addi	r20,r4,736
    2630:	a0002326 	beq	r20,zero,26c0 <_fwalk_reent+0xbc>
    2634:	282b883a 	mov	r21,r5
    2638:	2027883a 	mov	r19,r4
    263c:	002f883a 	mov	r23,zero
    2640:	05800044 	movi	r22,1
    2644:	04bfffc4 	movi	r18,-1
    2648:	a4400117 	ldw	r17,4(r20)
    264c:	a4000217 	ldw	r16,8(r20)
    2650:	8c7fffc4 	addi	r17,r17,-1
    2654:	88000c16 	blt	r17,zero,2688 <_fwalk_reent+0x84>
    2658:	84000304 	addi	r16,r16,12
    265c:	8080000b 	ldhu	r2,0(r16)
    2660:	8c7fffc4 	addi	r17,r17,-1
    2664:	817ffd04 	addi	r5,r16,-12
    2668:	b080052e 	bgeu	r22,r2,2680 <_fwalk_reent+0x7c>
    266c:	8080008f 	ldh	r2,2(r16)
    2670:	9809883a 	mov	r4,r19
    2674:	14800226 	beq	r2,r18,2680 <_fwalk_reent+0x7c>
    2678:	a83ee83a 	callr	r21
    267c:	b8aeb03a 	or	r23,r23,r2
    2680:	84001a04 	addi	r16,r16,104
    2684:	8cbff51e 	bne	r17,r18,265c <__alt_data_end+0xf800265c>
    2688:	a5000017 	ldw	r20,0(r20)
    268c:	a03fee1e 	bne	r20,zero,2648 <__alt_data_end+0xf8002648>
    2690:	b805883a 	mov	r2,r23
    2694:	dfc00817 	ldw	ra,32(sp)
    2698:	ddc00717 	ldw	r23,28(sp)
    269c:	dd800617 	ldw	r22,24(sp)
    26a0:	dd400517 	ldw	r21,20(sp)
    26a4:	dd000417 	ldw	r20,16(sp)
    26a8:	dcc00317 	ldw	r19,12(sp)
    26ac:	dc800217 	ldw	r18,8(sp)
    26b0:	dc400117 	ldw	r17,4(sp)
    26b4:	dc000017 	ldw	r16,0(sp)
    26b8:	dec00904 	addi	sp,sp,36
    26bc:	f800283a 	ret
    26c0:	002f883a 	mov	r23,zero
    26c4:	003ff206 	br	2690 <__alt_data_end+0xf8002690>

000026c8 <_fwrite_r>:
    26c8:	defff504 	addi	sp,sp,-44
    26cc:	dc400715 	stw	r17,28(sp)
    26d0:	d9400315 	stw	r5,12(sp)
    26d4:	2023883a 	mov	r17,r4
    26d8:	300b883a 	mov	r5,r6
    26dc:	3809883a 	mov	r4,r7
    26e0:	dcc00915 	stw	r19,36(sp)
    26e4:	dc800815 	stw	r18,32(sp)
    26e8:	dc000615 	stw	r16,24(sp)
    26ec:	dfc00a15 	stw	ra,40(sp)
    26f0:	3027883a 	mov	r19,r6
    26f4:	3821883a 	mov	r16,r7
    26f8:	000fc140 	call	fc14 <__mulsi3>
    26fc:	1025883a 	mov	r18,r2
    2700:	d8800415 	stw	r2,16(sp)
    2704:	d8800215 	stw	r2,8(sp)
    2708:	d8800304 	addi	r2,sp,12
    270c:	d8800015 	stw	r2,0(sp)
    2710:	00800044 	movi	r2,1
    2714:	d8800115 	stw	r2,4(sp)
    2718:	d9400b17 	ldw	r5,44(sp)
    271c:	88000226 	beq	r17,zero,2728 <_fwrite_r+0x60>
    2720:	88800e17 	ldw	r2,56(r17)
    2724:	10001a26 	beq	r2,zero,2790 <_fwrite_r+0xc8>
    2728:	2880030b 	ldhu	r2,12(r5)
    272c:	10c8000c 	andi	r3,r2,8192
    2730:	1800061e 	bne	r3,zero,274c <_fwrite_r+0x84>
    2734:	29001917 	ldw	r4,100(r5)
    2738:	00f7ffc4 	movi	r3,-8193
    273c:	10880014 	ori	r2,r2,8192
    2740:	20c6703a 	and	r3,r4,r3
    2744:	2880030d 	sth	r2,12(r5)
    2748:	28c01915 	stw	r3,100(r5)
    274c:	d80d883a 	mov	r6,sp
    2750:	8809883a 	mov	r4,r17
    2754:	0009c1c0 	call	9c1c <__sfvwrite_r>
    2758:	10000b26 	beq	r2,zero,2788 <_fwrite_r+0xc0>
    275c:	d9000217 	ldw	r4,8(sp)
    2760:	980b883a 	mov	r5,r19
    2764:	9109c83a 	sub	r4,r18,r4
    2768:	00013c40 	call	13c4 <__udivsi3>
    276c:	dfc00a17 	ldw	ra,40(sp)
    2770:	dcc00917 	ldw	r19,36(sp)
    2774:	dc800817 	ldw	r18,32(sp)
    2778:	dc400717 	ldw	r17,28(sp)
    277c:	dc000617 	ldw	r16,24(sp)
    2780:	dec00b04 	addi	sp,sp,44
    2784:	f800283a 	ret
    2788:	8005883a 	mov	r2,r16
    278c:	003ff706 	br	276c <__alt_data_end+0xf800276c>
    2790:	8809883a 	mov	r4,r17
    2794:	d9400515 	stw	r5,20(sp)
    2798:	0001a880 	call	1a88 <__sinit>
    279c:	d9400517 	ldw	r5,20(sp)
    27a0:	003fe106 	br	2728 <__alt_data_end+0xf8002728>

000027a4 <fwrite>:
    27a4:	defffe04 	addi	sp,sp,-8
    27a8:	008000b4 	movhi	r2,2
    27ac:	d9c00015 	stw	r7,0(sp)
    27b0:	10a01704 	addi	r2,r2,-32676
    27b4:	300f883a 	mov	r7,r6
    27b8:	280d883a 	mov	r6,r5
    27bc:	200b883a 	mov	r5,r4
    27c0:	11000017 	ldw	r4,0(r2)
    27c4:	dfc00115 	stw	ra,4(sp)
    27c8:	00026c80 	call	26c8 <_fwrite_r>
    27cc:	dfc00117 	ldw	ra,4(sp)
    27d0:	dec00204 	addi	sp,sp,8
    27d4:	f800283a 	ret

000027d8 <__smakebuf_r>:
    27d8:	2880030b 	ldhu	r2,12(r5)
    27dc:	10c0008c 	andi	r3,r2,2
    27e0:	1800411e 	bne	r3,zero,28e8 <__smakebuf_r+0x110>
    27e4:	deffec04 	addi	sp,sp,-80
    27e8:	dc000f15 	stw	r16,60(sp)
    27ec:	2821883a 	mov	r16,r5
    27f0:	2940038f 	ldh	r5,14(r5)
    27f4:	dc401015 	stw	r17,64(sp)
    27f8:	dfc01315 	stw	ra,76(sp)
    27fc:	dcc01215 	stw	r19,72(sp)
    2800:	dc801115 	stw	r18,68(sp)
    2804:	2023883a 	mov	r17,r4
    2808:	28001c16 	blt	r5,zero,287c <__smakebuf_r+0xa4>
    280c:	d80d883a 	mov	r6,sp
    2810:	00024e40 	call	24e4 <_fstat_r>
    2814:	10001816 	blt	r2,zero,2878 <__smakebuf_r+0xa0>
    2818:	d8800117 	ldw	r2,4(sp)
    281c:	00e00014 	movui	r3,32768
    2820:	10bc000c 	andi	r2,r2,61440
    2824:	14c80020 	cmpeqi	r19,r2,8192
    2828:	10c03726 	beq	r2,r3,2908 <__smakebuf_r+0x130>
    282c:	80c0030b 	ldhu	r3,12(r16)
    2830:	18c20014 	ori	r3,r3,2048
    2834:	80c0030d 	sth	r3,12(r16)
    2838:	00c80004 	movi	r3,8192
    283c:	10c0521e 	bne	r2,r3,2988 <__smakebuf_r+0x1b0>
    2840:	8140038f 	ldh	r5,14(r16)
    2844:	8809883a 	mov	r4,r17
    2848:	000a0e40 	call	a0e4 <_isatty_r>
    284c:	10004c26 	beq	r2,zero,2980 <__smakebuf_r+0x1a8>
    2850:	8080030b 	ldhu	r2,12(r16)
    2854:	80c010c4 	addi	r3,r16,67
    2858:	80c00015 	stw	r3,0(r16)
    285c:	10800054 	ori	r2,r2,1
    2860:	8080030d 	sth	r2,12(r16)
    2864:	00800044 	movi	r2,1
    2868:	80c00415 	stw	r3,16(r16)
    286c:	80800515 	stw	r2,20(r16)
    2870:	04810004 	movi	r18,1024
    2874:	00000706 	br	2894 <__smakebuf_r+0xbc>
    2878:	8080030b 	ldhu	r2,12(r16)
    287c:	10c0200c 	andi	r3,r2,128
    2880:	18001f1e 	bne	r3,zero,2900 <__smakebuf_r+0x128>
    2884:	04810004 	movi	r18,1024
    2888:	10820014 	ori	r2,r2,2048
    288c:	8080030d 	sth	r2,12(r16)
    2890:	0027883a 	mov	r19,zero
    2894:	900b883a 	mov	r5,r18
    2898:	8809883a 	mov	r4,r17
    289c:	00029940 	call	2994 <_malloc_r>
    28a0:	10002c26 	beq	r2,zero,2954 <__smakebuf_r+0x17c>
    28a4:	80c0030b 	ldhu	r3,12(r16)
    28a8:	01000034 	movhi	r4,0
    28ac:	2105cc04 	addi	r4,r4,5936
    28b0:	89000f15 	stw	r4,60(r17)
    28b4:	18c02014 	ori	r3,r3,128
    28b8:	80c0030d 	sth	r3,12(r16)
    28bc:	80800015 	stw	r2,0(r16)
    28c0:	80800415 	stw	r2,16(r16)
    28c4:	84800515 	stw	r18,20(r16)
    28c8:	98001a1e 	bne	r19,zero,2934 <__smakebuf_r+0x15c>
    28cc:	dfc01317 	ldw	ra,76(sp)
    28d0:	dcc01217 	ldw	r19,72(sp)
    28d4:	dc801117 	ldw	r18,68(sp)
    28d8:	dc401017 	ldw	r17,64(sp)
    28dc:	dc000f17 	ldw	r16,60(sp)
    28e0:	dec01404 	addi	sp,sp,80
    28e4:	f800283a 	ret
    28e8:	288010c4 	addi	r2,r5,67
    28ec:	28800015 	stw	r2,0(r5)
    28f0:	28800415 	stw	r2,16(r5)
    28f4:	00800044 	movi	r2,1
    28f8:	28800515 	stw	r2,20(r5)
    28fc:	f800283a 	ret
    2900:	04801004 	movi	r18,64
    2904:	003fe006 	br	2888 <__alt_data_end+0xf8002888>
    2908:	81000a17 	ldw	r4,40(r16)
    290c:	00c00034 	movhi	r3,0
    2910:	18ce1204 	addi	r3,r3,14408
    2914:	20ffc51e 	bne	r4,r3,282c <__alt_data_end+0xf800282c>
    2918:	8080030b 	ldhu	r2,12(r16)
    291c:	04810004 	movi	r18,1024
    2920:	84801315 	stw	r18,76(r16)
    2924:	1484b03a 	or	r2,r2,r18
    2928:	8080030d 	sth	r2,12(r16)
    292c:	0027883a 	mov	r19,zero
    2930:	003fd806 	br	2894 <__alt_data_end+0xf8002894>
    2934:	8140038f 	ldh	r5,14(r16)
    2938:	8809883a 	mov	r4,r17
    293c:	000a0e40 	call	a0e4 <_isatty_r>
    2940:	103fe226 	beq	r2,zero,28cc <__alt_data_end+0xf80028cc>
    2944:	8080030b 	ldhu	r2,12(r16)
    2948:	10800054 	ori	r2,r2,1
    294c:	8080030d 	sth	r2,12(r16)
    2950:	003fde06 	br	28cc <__alt_data_end+0xf80028cc>
    2954:	8080030b 	ldhu	r2,12(r16)
    2958:	10c0800c 	andi	r3,r2,512
    295c:	183fdb1e 	bne	r3,zero,28cc <__alt_data_end+0xf80028cc>
    2960:	10800094 	ori	r2,r2,2
    2964:	80c010c4 	addi	r3,r16,67
    2968:	8080030d 	sth	r2,12(r16)
    296c:	00800044 	movi	r2,1
    2970:	80c00015 	stw	r3,0(r16)
    2974:	80c00415 	stw	r3,16(r16)
    2978:	80800515 	stw	r2,20(r16)
    297c:	003fd306 	br	28cc <__alt_data_end+0xf80028cc>
    2980:	04810004 	movi	r18,1024
    2984:	003fc306 	br	2894 <__alt_data_end+0xf8002894>
    2988:	0027883a 	mov	r19,zero
    298c:	04810004 	movi	r18,1024
    2990:	003fc006 	br	2894 <__alt_data_end+0xf8002894>

00002994 <_malloc_r>:
    2994:	defff504 	addi	sp,sp,-44
    2998:	dc800315 	stw	r18,12(sp)
    299c:	dfc00a15 	stw	ra,40(sp)
    29a0:	df000915 	stw	fp,36(sp)
    29a4:	ddc00815 	stw	r23,32(sp)
    29a8:	dd800715 	stw	r22,28(sp)
    29ac:	dd400615 	stw	r21,24(sp)
    29b0:	dd000515 	stw	r20,20(sp)
    29b4:	dcc00415 	stw	r19,16(sp)
    29b8:	dc400215 	stw	r17,8(sp)
    29bc:	dc000115 	stw	r16,4(sp)
    29c0:	288002c4 	addi	r2,r5,11
    29c4:	00c00584 	movi	r3,22
    29c8:	2025883a 	mov	r18,r4
    29cc:	18807f2e 	bgeu	r3,r2,2bcc <_malloc_r+0x238>
    29d0:	047ffe04 	movi	r17,-8
    29d4:	1462703a 	and	r17,r2,r17
    29d8:	8800a316 	blt	r17,zero,2c68 <_malloc_r+0x2d4>
    29dc:	8940a236 	bltu	r17,r5,2c68 <_malloc_r+0x2d4>
    29e0:	0012d1c0 	call	12d1c <__malloc_lock>
    29e4:	00807dc4 	movi	r2,503
    29e8:	1441e92e 	bgeu	r2,r17,3190 <_malloc_r+0x7fc>
    29ec:	8804d27a 	srli	r2,r17,9
    29f0:	1000a126 	beq	r2,zero,2c78 <_malloc_r+0x2e4>
    29f4:	00c00104 	movi	r3,4
    29f8:	18811e36 	bltu	r3,r2,2e74 <_malloc_r+0x4e0>
    29fc:	8804d1ba 	srli	r2,r17,6
    2a00:	12000e44 	addi	r8,r2,57
    2a04:	11c00e04 	addi	r7,r2,56
    2a08:	4209883a 	add	r4,r8,r8
    2a0c:	04c00074 	movhi	r19,1
    2a10:	2109883a 	add	r4,r4,r4
    2a14:	9cda2b04 	addi	r19,r19,26796
    2a18:	2109883a 	add	r4,r4,r4
    2a1c:	9909883a 	add	r4,r19,r4
    2a20:	24000117 	ldw	r16,4(r4)
    2a24:	213ffe04 	addi	r4,r4,-8
    2a28:	24009726 	beq	r4,r16,2c88 <_malloc_r+0x2f4>
    2a2c:	80800117 	ldw	r2,4(r16)
    2a30:	01bfff04 	movi	r6,-4
    2a34:	014003c4 	movi	r5,15
    2a38:	1184703a 	and	r2,r2,r6
    2a3c:	1447c83a 	sub	r3,r2,r17
    2a40:	28c00716 	blt	r5,r3,2a60 <_malloc_r+0xcc>
    2a44:	1800920e 	bge	r3,zero,2c90 <_malloc_r+0x2fc>
    2a48:	84000317 	ldw	r16,12(r16)
    2a4c:	24008e26 	beq	r4,r16,2c88 <_malloc_r+0x2f4>
    2a50:	80800117 	ldw	r2,4(r16)
    2a54:	1184703a 	and	r2,r2,r6
    2a58:	1447c83a 	sub	r3,r2,r17
    2a5c:	28fff90e 	bge	r5,r3,2a44 <__alt_data_end+0xf8002a44>
    2a60:	3809883a 	mov	r4,r7
    2a64:	01800074 	movhi	r6,1
    2a68:	9c000417 	ldw	r16,16(r19)
    2a6c:	319a2b04 	addi	r6,r6,26796
    2a70:	32000204 	addi	r8,r6,8
    2a74:	82013426 	beq	r16,r8,2f48 <_malloc_r+0x5b4>
    2a78:	80c00117 	ldw	r3,4(r16)
    2a7c:	00bfff04 	movi	r2,-4
    2a80:	188e703a 	and	r7,r3,r2
    2a84:	3c45c83a 	sub	r2,r7,r17
    2a88:	00c003c4 	movi	r3,15
    2a8c:	18811f16 	blt	r3,r2,2f0c <_malloc_r+0x578>
    2a90:	32000515 	stw	r8,20(r6)
    2a94:	32000415 	stw	r8,16(r6)
    2a98:	10007f0e 	bge	r2,zero,2c98 <_malloc_r+0x304>
    2a9c:	00807fc4 	movi	r2,511
    2aa0:	11c0fd36 	bltu	r2,r7,2e98 <_malloc_r+0x504>
    2aa4:	3806d0fa 	srli	r3,r7,3
    2aa8:	01c00044 	movi	r7,1
    2aac:	30800117 	ldw	r2,4(r6)
    2ab0:	19400044 	addi	r5,r3,1
    2ab4:	294b883a 	add	r5,r5,r5
    2ab8:	1807d0ba 	srai	r3,r3,2
    2abc:	294b883a 	add	r5,r5,r5
    2ac0:	294b883a 	add	r5,r5,r5
    2ac4:	298b883a 	add	r5,r5,r6
    2ac8:	38c6983a 	sll	r3,r7,r3
    2acc:	29c00017 	ldw	r7,0(r5)
    2ad0:	2a7ffe04 	addi	r9,r5,-8
    2ad4:	1886b03a 	or	r3,r3,r2
    2ad8:	82400315 	stw	r9,12(r16)
    2adc:	81c00215 	stw	r7,8(r16)
    2ae0:	30c00115 	stw	r3,4(r6)
    2ae4:	2c000015 	stw	r16,0(r5)
    2ae8:	3c000315 	stw	r16,12(r7)
    2aec:	2005d0ba 	srai	r2,r4,2
    2af0:	01400044 	movi	r5,1
    2af4:	288a983a 	sll	r5,r5,r2
    2af8:	19406f36 	bltu	r3,r5,2cb8 <_malloc_r+0x324>
    2afc:	28c4703a 	and	r2,r5,r3
    2b00:	10000a1e 	bne	r2,zero,2b2c <_malloc_r+0x198>
    2b04:	00bfff04 	movi	r2,-4
    2b08:	294b883a 	add	r5,r5,r5
    2b0c:	2088703a 	and	r4,r4,r2
    2b10:	28c4703a 	and	r2,r5,r3
    2b14:	21000104 	addi	r4,r4,4
    2b18:	1000041e 	bne	r2,zero,2b2c <_malloc_r+0x198>
    2b1c:	294b883a 	add	r5,r5,r5
    2b20:	28c4703a 	and	r2,r5,r3
    2b24:	21000104 	addi	r4,r4,4
    2b28:	103ffc26 	beq	r2,zero,2b1c <__alt_data_end+0xf8002b1c>
    2b2c:	02bfff04 	movi	r10,-4
    2b30:	024003c4 	movi	r9,15
    2b34:	21800044 	addi	r6,r4,1
    2b38:	318d883a 	add	r6,r6,r6
    2b3c:	318d883a 	add	r6,r6,r6
    2b40:	318d883a 	add	r6,r6,r6
    2b44:	998d883a 	add	r6,r19,r6
    2b48:	333ffe04 	addi	r12,r6,-8
    2b4c:	2017883a 	mov	r11,r4
    2b50:	31800104 	addi	r6,r6,4
    2b54:	34000017 	ldw	r16,0(r6)
    2b58:	31fffd04 	addi	r7,r6,-12
    2b5c:	81c0041e 	bne	r16,r7,2b70 <_malloc_r+0x1dc>
    2b60:	0000fb06 	br	2f50 <_malloc_r+0x5bc>
    2b64:	1801030e 	bge	r3,zero,2f74 <_malloc_r+0x5e0>
    2b68:	84000317 	ldw	r16,12(r16)
    2b6c:	81c0f826 	beq	r16,r7,2f50 <_malloc_r+0x5bc>
    2b70:	80800117 	ldw	r2,4(r16)
    2b74:	1284703a 	and	r2,r2,r10
    2b78:	1447c83a 	sub	r3,r2,r17
    2b7c:	48fff90e 	bge	r9,r3,2b64 <__alt_data_end+0xf8002b64>
    2b80:	80800317 	ldw	r2,12(r16)
    2b84:	81000217 	ldw	r4,8(r16)
    2b88:	89400054 	ori	r5,r17,1
    2b8c:	81400115 	stw	r5,4(r16)
    2b90:	20800315 	stw	r2,12(r4)
    2b94:	11000215 	stw	r4,8(r2)
    2b98:	8463883a 	add	r17,r16,r17
    2b9c:	9c400515 	stw	r17,20(r19)
    2ba0:	9c400415 	stw	r17,16(r19)
    2ba4:	18800054 	ori	r2,r3,1
    2ba8:	88800115 	stw	r2,4(r17)
    2bac:	8a000315 	stw	r8,12(r17)
    2bb0:	8a000215 	stw	r8,8(r17)
    2bb4:	88e3883a 	add	r17,r17,r3
    2bb8:	88c00015 	stw	r3,0(r17)
    2bbc:	9009883a 	mov	r4,r18
    2bc0:	0012d400 	call	12d40 <__malloc_unlock>
    2bc4:	80800204 	addi	r2,r16,8
    2bc8:	00001b06 	br	2c38 <_malloc_r+0x2a4>
    2bcc:	04400404 	movi	r17,16
    2bd0:	89402536 	bltu	r17,r5,2c68 <_malloc_r+0x2d4>
    2bd4:	0012d1c0 	call	12d1c <__malloc_lock>
    2bd8:	00800184 	movi	r2,6
    2bdc:	01000084 	movi	r4,2
    2be0:	04c00074 	movhi	r19,1
    2be4:	1085883a 	add	r2,r2,r2
    2be8:	9cda2b04 	addi	r19,r19,26796
    2bec:	1085883a 	add	r2,r2,r2
    2bf0:	9885883a 	add	r2,r19,r2
    2bf4:	14000117 	ldw	r16,4(r2)
    2bf8:	10fffe04 	addi	r3,r2,-8
    2bfc:	80c0d926 	beq	r16,r3,2f64 <_malloc_r+0x5d0>
    2c00:	80c00117 	ldw	r3,4(r16)
    2c04:	81000317 	ldw	r4,12(r16)
    2c08:	00bfff04 	movi	r2,-4
    2c0c:	1884703a 	and	r2,r3,r2
    2c10:	81400217 	ldw	r5,8(r16)
    2c14:	8085883a 	add	r2,r16,r2
    2c18:	10c00117 	ldw	r3,4(r2)
    2c1c:	29000315 	stw	r4,12(r5)
    2c20:	21400215 	stw	r5,8(r4)
    2c24:	18c00054 	ori	r3,r3,1
    2c28:	10c00115 	stw	r3,4(r2)
    2c2c:	9009883a 	mov	r4,r18
    2c30:	0012d400 	call	12d40 <__malloc_unlock>
    2c34:	80800204 	addi	r2,r16,8
    2c38:	dfc00a17 	ldw	ra,40(sp)
    2c3c:	df000917 	ldw	fp,36(sp)
    2c40:	ddc00817 	ldw	r23,32(sp)
    2c44:	dd800717 	ldw	r22,28(sp)
    2c48:	dd400617 	ldw	r21,24(sp)
    2c4c:	dd000517 	ldw	r20,20(sp)
    2c50:	dcc00417 	ldw	r19,16(sp)
    2c54:	dc800317 	ldw	r18,12(sp)
    2c58:	dc400217 	ldw	r17,8(sp)
    2c5c:	dc000117 	ldw	r16,4(sp)
    2c60:	dec00b04 	addi	sp,sp,44
    2c64:	f800283a 	ret
    2c68:	00800304 	movi	r2,12
    2c6c:	90800015 	stw	r2,0(r18)
    2c70:	0005883a 	mov	r2,zero
    2c74:	003ff006 	br	2c38 <__alt_data_end+0xf8002c38>
    2c78:	01002004 	movi	r4,128
    2c7c:	02001004 	movi	r8,64
    2c80:	01c00fc4 	movi	r7,63
    2c84:	003f6106 	br	2a0c <__alt_data_end+0xf8002a0c>
    2c88:	4009883a 	mov	r4,r8
    2c8c:	003f7506 	br	2a64 <__alt_data_end+0xf8002a64>
    2c90:	81000317 	ldw	r4,12(r16)
    2c94:	003fde06 	br	2c10 <__alt_data_end+0xf8002c10>
    2c98:	81c5883a 	add	r2,r16,r7
    2c9c:	11400117 	ldw	r5,4(r2)
    2ca0:	9009883a 	mov	r4,r18
    2ca4:	29400054 	ori	r5,r5,1
    2ca8:	11400115 	stw	r5,4(r2)
    2cac:	0012d400 	call	12d40 <__malloc_unlock>
    2cb0:	80800204 	addi	r2,r16,8
    2cb4:	003fe006 	br	2c38 <__alt_data_end+0xf8002c38>
    2cb8:	9c000217 	ldw	r16,8(r19)
    2cbc:	00bfff04 	movi	r2,-4
    2cc0:	85800117 	ldw	r22,4(r16)
    2cc4:	b0ac703a 	and	r22,r22,r2
    2cc8:	b4400336 	bltu	r22,r17,2cd8 <_malloc_r+0x344>
    2ccc:	b445c83a 	sub	r2,r22,r17
    2cd0:	00c003c4 	movi	r3,15
    2cd4:	18805d16 	blt	r3,r2,2e4c <_malloc_r+0x4b8>
    2cd8:	05c000b4 	movhi	r23,2
    2cdc:	008000b4 	movhi	r2,2
    2ce0:	10a74904 	addi	r2,r2,-25308
    2ce4:	bde01804 	addi	r23,r23,-32672
    2ce8:	15400017 	ldw	r21,0(r2)
    2cec:	b8c00017 	ldw	r3,0(r23)
    2cf0:	00bfffc4 	movi	r2,-1
    2cf4:	858d883a 	add	r6,r16,r22
    2cf8:	8d6b883a 	add	r21,r17,r21
    2cfc:	1880ea26 	beq	r3,r2,30a8 <_malloc_r+0x714>
    2d00:	ad4403c4 	addi	r21,r21,4111
    2d04:	00bc0004 	movi	r2,-4096
    2d08:	a8aa703a 	and	r21,r21,r2
    2d0c:	a80b883a 	mov	r5,r21
    2d10:	9009883a 	mov	r4,r18
    2d14:	d9800015 	stw	r6,0(sp)
    2d18:	00036580 	call	3658 <_sbrk_r>
    2d1c:	1029883a 	mov	r20,r2
    2d20:	00bfffc4 	movi	r2,-1
    2d24:	d9800017 	ldw	r6,0(sp)
    2d28:	a080e826 	beq	r20,r2,30cc <_malloc_r+0x738>
    2d2c:	a180a636 	bltu	r20,r6,2fc8 <_malloc_r+0x634>
    2d30:	070000b4 	movhi	fp,2
    2d34:	e7275604 	addi	fp,fp,-25256
    2d38:	e0800017 	ldw	r2,0(fp)
    2d3c:	a887883a 	add	r3,r21,r2
    2d40:	e0c00015 	stw	r3,0(fp)
    2d44:	3500e626 	beq	r6,r20,30e0 <_malloc_r+0x74c>
    2d48:	b9000017 	ldw	r4,0(r23)
    2d4c:	00bfffc4 	movi	r2,-1
    2d50:	2080ee26 	beq	r4,r2,310c <_malloc_r+0x778>
    2d54:	a185c83a 	sub	r2,r20,r6
    2d58:	10c5883a 	add	r2,r2,r3
    2d5c:	e0800015 	stw	r2,0(fp)
    2d60:	a0c001cc 	andi	r3,r20,7
    2d64:	1800bc26 	beq	r3,zero,3058 <_malloc_r+0x6c4>
    2d68:	a0e9c83a 	sub	r20,r20,r3
    2d6c:	00840204 	movi	r2,4104
    2d70:	a5000204 	addi	r20,r20,8
    2d74:	10c7c83a 	sub	r3,r2,r3
    2d78:	a545883a 	add	r2,r20,r21
    2d7c:	1083ffcc 	andi	r2,r2,4095
    2d80:	18abc83a 	sub	r21,r3,r2
    2d84:	a80b883a 	mov	r5,r21
    2d88:	9009883a 	mov	r4,r18
    2d8c:	00036580 	call	3658 <_sbrk_r>
    2d90:	00ffffc4 	movi	r3,-1
    2d94:	10c0e126 	beq	r2,r3,311c <_malloc_r+0x788>
    2d98:	1505c83a 	sub	r2,r2,r20
    2d9c:	1545883a 	add	r2,r2,r21
    2da0:	10800054 	ori	r2,r2,1
    2da4:	e0c00017 	ldw	r3,0(fp)
    2da8:	9d000215 	stw	r20,8(r19)
    2dac:	a0800115 	stw	r2,4(r20)
    2db0:	a8c7883a 	add	r3,r21,r3
    2db4:	e0c00015 	stw	r3,0(fp)
    2db8:	84c00e26 	beq	r16,r19,2df4 <_malloc_r+0x460>
    2dbc:	018003c4 	movi	r6,15
    2dc0:	3580a72e 	bgeu	r6,r22,3060 <_malloc_r+0x6cc>
    2dc4:	81400117 	ldw	r5,4(r16)
    2dc8:	013ffe04 	movi	r4,-8
    2dcc:	b0bffd04 	addi	r2,r22,-12
    2dd0:	1104703a 	and	r2,r2,r4
    2dd4:	2900004c 	andi	r4,r5,1
    2dd8:	2088b03a 	or	r4,r4,r2
    2ddc:	81000115 	stw	r4,4(r16)
    2de0:	01400144 	movi	r5,5
    2de4:	8089883a 	add	r4,r16,r2
    2de8:	21400115 	stw	r5,4(r4)
    2dec:	21400215 	stw	r5,8(r4)
    2df0:	3080cd36 	bltu	r6,r2,3128 <_malloc_r+0x794>
    2df4:	008000b4 	movhi	r2,2
    2df8:	10a74804 	addi	r2,r2,-25312
    2dfc:	11000017 	ldw	r4,0(r2)
    2e00:	20c0012e 	bgeu	r4,r3,2e08 <_malloc_r+0x474>
    2e04:	10c00015 	stw	r3,0(r2)
    2e08:	008000b4 	movhi	r2,2
    2e0c:	10a74704 	addi	r2,r2,-25316
    2e10:	11000017 	ldw	r4,0(r2)
    2e14:	9c000217 	ldw	r16,8(r19)
    2e18:	20c0012e 	bgeu	r4,r3,2e20 <_malloc_r+0x48c>
    2e1c:	10c00015 	stw	r3,0(r2)
    2e20:	80c00117 	ldw	r3,4(r16)
    2e24:	00bfff04 	movi	r2,-4
    2e28:	1886703a 	and	r3,r3,r2
    2e2c:	1c45c83a 	sub	r2,r3,r17
    2e30:	1c400236 	bltu	r3,r17,2e3c <_malloc_r+0x4a8>
    2e34:	00c003c4 	movi	r3,15
    2e38:	18800416 	blt	r3,r2,2e4c <_malloc_r+0x4b8>
    2e3c:	9009883a 	mov	r4,r18
    2e40:	0012d400 	call	12d40 <__malloc_unlock>
    2e44:	0005883a 	mov	r2,zero
    2e48:	003f7b06 	br	2c38 <__alt_data_end+0xf8002c38>
    2e4c:	88c00054 	ori	r3,r17,1
    2e50:	80c00115 	stw	r3,4(r16)
    2e54:	8463883a 	add	r17,r16,r17
    2e58:	10800054 	ori	r2,r2,1
    2e5c:	9c400215 	stw	r17,8(r19)
    2e60:	88800115 	stw	r2,4(r17)
    2e64:	9009883a 	mov	r4,r18
    2e68:	0012d400 	call	12d40 <__malloc_unlock>
    2e6c:	80800204 	addi	r2,r16,8
    2e70:	003f7106 	br	2c38 <__alt_data_end+0xf8002c38>
    2e74:	00c00504 	movi	r3,20
    2e78:	18804a2e 	bgeu	r3,r2,2fa4 <_malloc_r+0x610>
    2e7c:	00c01504 	movi	r3,84
    2e80:	18806e36 	bltu	r3,r2,303c <_malloc_r+0x6a8>
    2e84:	8804d33a 	srli	r2,r17,12
    2e88:	12001bc4 	addi	r8,r2,111
    2e8c:	11c01b84 	addi	r7,r2,110
    2e90:	4209883a 	add	r4,r8,r8
    2e94:	003edd06 	br	2a0c <__alt_data_end+0xf8002a0c>
    2e98:	3804d27a 	srli	r2,r7,9
    2e9c:	00c00104 	movi	r3,4
    2ea0:	1880442e 	bgeu	r3,r2,2fb4 <_malloc_r+0x620>
    2ea4:	00c00504 	movi	r3,20
    2ea8:	18808136 	bltu	r3,r2,30b0 <_malloc_r+0x71c>
    2eac:	11401704 	addi	r5,r2,92
    2eb0:	10c016c4 	addi	r3,r2,91
    2eb4:	294b883a 	add	r5,r5,r5
    2eb8:	294b883a 	add	r5,r5,r5
    2ebc:	294b883a 	add	r5,r5,r5
    2ec0:	994b883a 	add	r5,r19,r5
    2ec4:	28800017 	ldw	r2,0(r5)
    2ec8:	01800074 	movhi	r6,1
    2ecc:	297ffe04 	addi	r5,r5,-8
    2ed0:	319a2b04 	addi	r6,r6,26796
    2ed4:	28806526 	beq	r5,r2,306c <_malloc_r+0x6d8>
    2ed8:	01bfff04 	movi	r6,-4
    2edc:	10c00117 	ldw	r3,4(r2)
    2ee0:	1986703a 	and	r3,r3,r6
    2ee4:	38c0022e 	bgeu	r7,r3,2ef0 <_malloc_r+0x55c>
    2ee8:	10800217 	ldw	r2,8(r2)
    2eec:	28bffb1e 	bne	r5,r2,2edc <__alt_data_end+0xf8002edc>
    2ef0:	11400317 	ldw	r5,12(r2)
    2ef4:	98c00117 	ldw	r3,4(r19)
    2ef8:	81400315 	stw	r5,12(r16)
    2efc:	80800215 	stw	r2,8(r16)
    2f00:	2c000215 	stw	r16,8(r5)
    2f04:	14000315 	stw	r16,12(r2)
    2f08:	003ef806 	br	2aec <__alt_data_end+0xf8002aec>
    2f0c:	88c00054 	ori	r3,r17,1
    2f10:	80c00115 	stw	r3,4(r16)
    2f14:	8463883a 	add	r17,r16,r17
    2f18:	34400515 	stw	r17,20(r6)
    2f1c:	34400415 	stw	r17,16(r6)
    2f20:	10c00054 	ori	r3,r2,1
    2f24:	8a000315 	stw	r8,12(r17)
    2f28:	8a000215 	stw	r8,8(r17)
    2f2c:	88c00115 	stw	r3,4(r17)
    2f30:	88a3883a 	add	r17,r17,r2
    2f34:	88800015 	stw	r2,0(r17)
    2f38:	9009883a 	mov	r4,r18
    2f3c:	0012d400 	call	12d40 <__malloc_unlock>
    2f40:	80800204 	addi	r2,r16,8
    2f44:	003f3c06 	br	2c38 <__alt_data_end+0xf8002c38>
    2f48:	30c00117 	ldw	r3,4(r6)
    2f4c:	003ee706 	br	2aec <__alt_data_end+0xf8002aec>
    2f50:	5ac00044 	addi	r11,r11,1
    2f54:	588000cc 	andi	r2,r11,3
    2f58:	31800204 	addi	r6,r6,8
    2f5c:	103efd1e 	bne	r2,zero,2b54 <__alt_data_end+0xf8002b54>
    2f60:	00002406 	br	2ff4 <_malloc_r+0x660>
    2f64:	14000317 	ldw	r16,12(r2)
    2f68:	143f251e 	bne	r2,r16,2c00 <__alt_data_end+0xf8002c00>
    2f6c:	21000084 	addi	r4,r4,2
    2f70:	003ebc06 	br	2a64 <__alt_data_end+0xf8002a64>
    2f74:	8085883a 	add	r2,r16,r2
    2f78:	10c00117 	ldw	r3,4(r2)
    2f7c:	81000317 	ldw	r4,12(r16)
    2f80:	81400217 	ldw	r5,8(r16)
    2f84:	18c00054 	ori	r3,r3,1
    2f88:	10c00115 	stw	r3,4(r2)
    2f8c:	29000315 	stw	r4,12(r5)
    2f90:	21400215 	stw	r5,8(r4)
    2f94:	9009883a 	mov	r4,r18
    2f98:	0012d400 	call	12d40 <__malloc_unlock>
    2f9c:	80800204 	addi	r2,r16,8
    2fa0:	003f2506 	br	2c38 <__alt_data_end+0xf8002c38>
    2fa4:	12001704 	addi	r8,r2,92
    2fa8:	11c016c4 	addi	r7,r2,91
    2fac:	4209883a 	add	r4,r8,r8
    2fb0:	003e9606 	br	2a0c <__alt_data_end+0xf8002a0c>
    2fb4:	3804d1ba 	srli	r2,r7,6
    2fb8:	11400e44 	addi	r5,r2,57
    2fbc:	10c00e04 	addi	r3,r2,56
    2fc0:	294b883a 	add	r5,r5,r5
    2fc4:	003fbc06 	br	2eb8 <__alt_data_end+0xf8002eb8>
    2fc8:	84ff5926 	beq	r16,r19,2d30 <__alt_data_end+0xf8002d30>
    2fcc:	00800074 	movhi	r2,1
    2fd0:	109a2b04 	addi	r2,r2,26796
    2fd4:	14000217 	ldw	r16,8(r2)
    2fd8:	00bfff04 	movi	r2,-4
    2fdc:	80c00117 	ldw	r3,4(r16)
    2fe0:	1886703a 	and	r3,r3,r2
    2fe4:	003f9106 	br	2e2c <__alt_data_end+0xf8002e2c>
    2fe8:	60800217 	ldw	r2,8(r12)
    2fec:	213fffc4 	addi	r4,r4,-1
    2ff0:	1300651e 	bne	r2,r12,3188 <_malloc_r+0x7f4>
    2ff4:	208000cc 	andi	r2,r4,3
    2ff8:	633ffe04 	addi	r12,r12,-8
    2ffc:	103ffa1e 	bne	r2,zero,2fe8 <__alt_data_end+0xf8002fe8>
    3000:	98800117 	ldw	r2,4(r19)
    3004:	0146303a 	nor	r3,zero,r5
    3008:	1884703a 	and	r2,r3,r2
    300c:	98800115 	stw	r2,4(r19)
    3010:	294b883a 	add	r5,r5,r5
    3014:	117f2836 	bltu	r2,r5,2cb8 <__alt_data_end+0xf8002cb8>
    3018:	283f2726 	beq	r5,zero,2cb8 <__alt_data_end+0xf8002cb8>
    301c:	2886703a 	and	r3,r5,r2
    3020:	5809883a 	mov	r4,r11
    3024:	183ec31e 	bne	r3,zero,2b34 <__alt_data_end+0xf8002b34>
    3028:	294b883a 	add	r5,r5,r5
    302c:	2886703a 	and	r3,r5,r2
    3030:	21000104 	addi	r4,r4,4
    3034:	183ffc26 	beq	r3,zero,3028 <__alt_data_end+0xf8003028>
    3038:	003ebe06 	br	2b34 <__alt_data_end+0xf8002b34>
    303c:	00c05504 	movi	r3,340
    3040:	18801236 	bltu	r3,r2,308c <_malloc_r+0x6f8>
    3044:	8804d3fa 	srli	r2,r17,15
    3048:	12001e04 	addi	r8,r2,120
    304c:	11c01dc4 	addi	r7,r2,119
    3050:	4209883a 	add	r4,r8,r8
    3054:	003e6d06 	br	2a0c <__alt_data_end+0xf8002a0c>
    3058:	00c40004 	movi	r3,4096
    305c:	003f4606 	br	2d78 <__alt_data_end+0xf8002d78>
    3060:	00800044 	movi	r2,1
    3064:	a0800115 	stw	r2,4(r20)
    3068:	003f7406 	br	2e3c <__alt_data_end+0xf8002e3c>
    306c:	1805d0ba 	srai	r2,r3,2
    3070:	01c00044 	movi	r7,1
    3074:	30c00117 	ldw	r3,4(r6)
    3078:	388e983a 	sll	r7,r7,r2
    307c:	2805883a 	mov	r2,r5
    3080:	38c6b03a 	or	r3,r7,r3
    3084:	30c00115 	stw	r3,4(r6)
    3088:	003f9b06 	br	2ef8 <__alt_data_end+0xf8002ef8>
    308c:	00c15504 	movi	r3,1364
    3090:	18801a36 	bltu	r3,r2,30fc <_malloc_r+0x768>
    3094:	8804d4ba 	srli	r2,r17,18
    3098:	12001f44 	addi	r8,r2,125
    309c:	11c01f04 	addi	r7,r2,124
    30a0:	4209883a 	add	r4,r8,r8
    30a4:	003e5906 	br	2a0c <__alt_data_end+0xf8002a0c>
    30a8:	ad400404 	addi	r21,r21,16
    30ac:	003f1706 	br	2d0c <__alt_data_end+0xf8002d0c>
    30b0:	00c01504 	movi	r3,84
    30b4:	18802336 	bltu	r3,r2,3144 <_malloc_r+0x7b0>
    30b8:	3804d33a 	srli	r2,r7,12
    30bc:	11401bc4 	addi	r5,r2,111
    30c0:	10c01b84 	addi	r3,r2,110
    30c4:	294b883a 	add	r5,r5,r5
    30c8:	003f7b06 	br	2eb8 <__alt_data_end+0xf8002eb8>
    30cc:	9c000217 	ldw	r16,8(r19)
    30d0:	00bfff04 	movi	r2,-4
    30d4:	80c00117 	ldw	r3,4(r16)
    30d8:	1886703a 	and	r3,r3,r2
    30dc:	003f5306 	br	2e2c <__alt_data_end+0xf8002e2c>
    30e0:	3083ffcc 	andi	r2,r6,4095
    30e4:	103f181e 	bne	r2,zero,2d48 <__alt_data_end+0xf8002d48>
    30e8:	99000217 	ldw	r4,8(r19)
    30ec:	b545883a 	add	r2,r22,r21
    30f0:	10800054 	ori	r2,r2,1
    30f4:	20800115 	stw	r2,4(r4)
    30f8:	003f3e06 	br	2df4 <__alt_data_end+0xf8002df4>
    30fc:	01003f84 	movi	r4,254
    3100:	02001fc4 	movi	r8,127
    3104:	01c01f84 	movi	r7,126
    3108:	003e4006 	br	2a0c <__alt_data_end+0xf8002a0c>
    310c:	008000b4 	movhi	r2,2
    3110:	10a01804 	addi	r2,r2,-32672
    3114:	15000015 	stw	r20,0(r2)
    3118:	003f1106 	br	2d60 <__alt_data_end+0xf8002d60>
    311c:	00800044 	movi	r2,1
    3120:	002b883a 	mov	r21,zero
    3124:	003f1f06 	br	2da4 <__alt_data_end+0xf8002da4>
    3128:	81400204 	addi	r5,r16,8
    312c:	9009883a 	mov	r4,r18
    3130:	0001d540 	call	1d54 <_free_r>
    3134:	008000b4 	movhi	r2,2
    3138:	10a75604 	addi	r2,r2,-25256
    313c:	10c00017 	ldw	r3,0(r2)
    3140:	003f2c06 	br	2df4 <__alt_data_end+0xf8002df4>
    3144:	00c05504 	movi	r3,340
    3148:	18800536 	bltu	r3,r2,3160 <_malloc_r+0x7cc>
    314c:	3804d3fa 	srli	r2,r7,15
    3150:	11401e04 	addi	r5,r2,120
    3154:	10c01dc4 	addi	r3,r2,119
    3158:	294b883a 	add	r5,r5,r5
    315c:	003f5606 	br	2eb8 <__alt_data_end+0xf8002eb8>
    3160:	00c15504 	movi	r3,1364
    3164:	18800536 	bltu	r3,r2,317c <_malloc_r+0x7e8>
    3168:	3804d4ba 	srli	r2,r7,18
    316c:	11401f44 	addi	r5,r2,125
    3170:	10c01f04 	addi	r3,r2,124
    3174:	294b883a 	add	r5,r5,r5
    3178:	003f4f06 	br	2eb8 <__alt_data_end+0xf8002eb8>
    317c:	01403f84 	movi	r5,254
    3180:	00c01f84 	movi	r3,126
    3184:	003f4c06 	br	2eb8 <__alt_data_end+0xf8002eb8>
    3188:	98800117 	ldw	r2,4(r19)
    318c:	003fa006 	br	3010 <__alt_data_end+0xf8003010>
    3190:	8808d0fa 	srli	r4,r17,3
    3194:	20800044 	addi	r2,r4,1
    3198:	1085883a 	add	r2,r2,r2
    319c:	003e9006 	br	2be0 <__alt_data_end+0xf8002be0>

000031a0 <memset>:
    31a0:	20c000cc 	andi	r3,r4,3
    31a4:	2005883a 	mov	r2,r4
    31a8:	18004426 	beq	r3,zero,32bc <memset+0x11c>
    31ac:	31ffffc4 	addi	r7,r6,-1
    31b0:	30004026 	beq	r6,zero,32b4 <memset+0x114>
    31b4:	2813883a 	mov	r9,r5
    31b8:	200d883a 	mov	r6,r4
    31bc:	2007883a 	mov	r3,r4
    31c0:	00000406 	br	31d4 <memset+0x34>
    31c4:	3a3fffc4 	addi	r8,r7,-1
    31c8:	31800044 	addi	r6,r6,1
    31cc:	38003926 	beq	r7,zero,32b4 <memset+0x114>
    31d0:	400f883a 	mov	r7,r8
    31d4:	18c00044 	addi	r3,r3,1
    31d8:	32400005 	stb	r9,0(r6)
    31dc:	1a0000cc 	andi	r8,r3,3
    31e0:	403ff81e 	bne	r8,zero,31c4 <__alt_data_end+0xf80031c4>
    31e4:	010000c4 	movi	r4,3
    31e8:	21c02d2e 	bgeu	r4,r7,32a0 <memset+0x100>
    31ec:	29003fcc 	andi	r4,r5,255
    31f0:	200c923a 	slli	r6,r4,8
    31f4:	3108b03a 	or	r4,r6,r4
    31f8:	200c943a 	slli	r6,r4,16
    31fc:	218cb03a 	or	r6,r4,r6
    3200:	010003c4 	movi	r4,15
    3204:	21c0182e 	bgeu	r4,r7,3268 <memset+0xc8>
    3208:	3b3ffc04 	addi	r12,r7,-16
    320c:	6018d13a 	srli	r12,r12,4
    3210:	1a000104 	addi	r8,r3,4
    3214:	1ac00204 	addi	r11,r3,8
    3218:	6008913a 	slli	r4,r12,4
    321c:	1a800304 	addi	r10,r3,12
    3220:	1813883a 	mov	r9,r3
    3224:	21000504 	addi	r4,r4,20
    3228:	1909883a 	add	r4,r3,r4
    322c:	49800015 	stw	r6,0(r9)
    3230:	41800015 	stw	r6,0(r8)
    3234:	59800015 	stw	r6,0(r11)
    3238:	51800015 	stw	r6,0(r10)
    323c:	42000404 	addi	r8,r8,16
    3240:	4a400404 	addi	r9,r9,16
    3244:	5ac00404 	addi	r11,r11,16
    3248:	52800404 	addi	r10,r10,16
    324c:	413ff71e 	bne	r8,r4,322c <__alt_data_end+0xf800322c>
    3250:	63000044 	addi	r12,r12,1
    3254:	6018913a 	slli	r12,r12,4
    3258:	39c003cc 	andi	r7,r7,15
    325c:	010000c4 	movi	r4,3
    3260:	1b07883a 	add	r3,r3,r12
    3264:	21c00e2e 	bgeu	r4,r7,32a0 <memset+0x100>
    3268:	1813883a 	mov	r9,r3
    326c:	3811883a 	mov	r8,r7
    3270:	010000c4 	movi	r4,3
    3274:	49800015 	stw	r6,0(r9)
    3278:	423fff04 	addi	r8,r8,-4
    327c:	4a400104 	addi	r9,r9,4
    3280:	223ffc36 	bltu	r4,r8,3274 <__alt_data_end+0xf8003274>
    3284:	393fff04 	addi	r4,r7,-4
    3288:	2008d0ba 	srli	r4,r4,2
    328c:	39c000cc 	andi	r7,r7,3
    3290:	21000044 	addi	r4,r4,1
    3294:	2109883a 	add	r4,r4,r4
    3298:	2109883a 	add	r4,r4,r4
    329c:	1907883a 	add	r3,r3,r4
    32a0:	38000526 	beq	r7,zero,32b8 <memset+0x118>
    32a4:	19cf883a 	add	r7,r3,r7
    32a8:	19400005 	stb	r5,0(r3)
    32ac:	18c00044 	addi	r3,r3,1
    32b0:	38fffd1e 	bne	r7,r3,32a8 <__alt_data_end+0xf80032a8>
    32b4:	f800283a 	ret
    32b8:	f800283a 	ret
    32bc:	2007883a 	mov	r3,r4
    32c0:	300f883a 	mov	r7,r6
    32c4:	003fc706 	br	31e4 <__alt_data_end+0xf80031e4>

000032c8 <_open_r>:
    32c8:	defffd04 	addi	sp,sp,-12
    32cc:	2805883a 	mov	r2,r5
    32d0:	dc000015 	stw	r16,0(sp)
    32d4:	040000b4 	movhi	r16,2
    32d8:	dc400115 	stw	r17,4(sp)
    32dc:	300b883a 	mov	r5,r6
    32e0:	84274604 	addi	r16,r16,-25320
    32e4:	2023883a 	mov	r17,r4
    32e8:	380d883a 	mov	r6,r7
    32ec:	1009883a 	mov	r4,r2
    32f0:	dfc00215 	stw	ra,8(sp)
    32f4:	80000015 	stw	zero,0(r16)
    32f8:	0012e8c0 	call	12e8c <open>
    32fc:	00ffffc4 	movi	r3,-1
    3300:	10c00526 	beq	r2,r3,3318 <_open_r+0x50>
    3304:	dfc00217 	ldw	ra,8(sp)
    3308:	dc400117 	ldw	r17,4(sp)
    330c:	dc000017 	ldw	r16,0(sp)
    3310:	dec00304 	addi	sp,sp,12
    3314:	f800283a 	ret
    3318:	80c00017 	ldw	r3,0(r16)
    331c:	183ff926 	beq	r3,zero,3304 <__alt_data_end+0xf8003304>
    3320:	88c00015 	stw	r3,0(r17)
    3324:	003ff706 	br	3304 <__alt_data_end+0xf8003304>

00003328 <_printf_r>:
    3328:	defffd04 	addi	sp,sp,-12
    332c:	2805883a 	mov	r2,r5
    3330:	dfc00015 	stw	ra,0(sp)
    3334:	d9800115 	stw	r6,4(sp)
    3338:	d9c00215 	stw	r7,8(sp)
    333c:	21400217 	ldw	r5,8(r4)
    3340:	d9c00104 	addi	r7,sp,4
    3344:	100d883a 	mov	r6,r2
    3348:	0005c000 	call	5c00 <___vfprintf_internal_r>
    334c:	dfc00017 	ldw	ra,0(sp)
    3350:	dec00304 	addi	sp,sp,12
    3354:	f800283a 	ret

00003358 <printf>:
    3358:	defffc04 	addi	sp,sp,-16
    335c:	dfc00015 	stw	ra,0(sp)
    3360:	d9400115 	stw	r5,4(sp)
    3364:	d9800215 	stw	r6,8(sp)
    3368:	d9c00315 	stw	r7,12(sp)
    336c:	008000b4 	movhi	r2,2
    3370:	10a01704 	addi	r2,r2,-32676
    3374:	10800017 	ldw	r2,0(r2)
    3378:	200b883a 	mov	r5,r4
    337c:	d9800104 	addi	r6,sp,4
    3380:	11000217 	ldw	r4,8(r2)
    3384:	0007edc0 	call	7edc <__vfprintf_internal>
    3388:	dfc00017 	ldw	ra,0(sp)
    338c:	dec00404 	addi	sp,sp,16
    3390:	f800283a 	ret

00003394 <_puts_r>:
    3394:	defff604 	addi	sp,sp,-40
    3398:	dc000715 	stw	r16,28(sp)
    339c:	2021883a 	mov	r16,r4
    33a0:	2809883a 	mov	r4,r5
    33a4:	dc400815 	stw	r17,32(sp)
    33a8:	dfc00915 	stw	ra,36(sp)
    33ac:	2823883a 	mov	r17,r5
    33b0:	00038ac0 	call	38ac <strlen>
    33b4:	10c00044 	addi	r3,r2,1
    33b8:	d8800115 	stw	r2,4(sp)
    33bc:	00800074 	movhi	r2,1
    33c0:	10979c04 	addi	r2,r2,24176
    33c4:	d8800215 	stw	r2,8(sp)
    33c8:	00800044 	movi	r2,1
    33cc:	d8800315 	stw	r2,12(sp)
    33d0:	00800084 	movi	r2,2
    33d4:	dc400015 	stw	r17,0(sp)
    33d8:	d8c00615 	stw	r3,24(sp)
    33dc:	dec00415 	stw	sp,16(sp)
    33e0:	d8800515 	stw	r2,20(sp)
    33e4:	80000226 	beq	r16,zero,33f0 <_puts_r+0x5c>
    33e8:	80800e17 	ldw	r2,56(r16)
    33ec:	10001426 	beq	r2,zero,3440 <_puts_r+0xac>
    33f0:	81400217 	ldw	r5,8(r16)
    33f4:	2880030b 	ldhu	r2,12(r5)
    33f8:	10c8000c 	andi	r3,r2,8192
    33fc:	1800061e 	bne	r3,zero,3418 <_puts_r+0x84>
    3400:	29001917 	ldw	r4,100(r5)
    3404:	00f7ffc4 	movi	r3,-8193
    3408:	10880014 	ori	r2,r2,8192
    340c:	20c6703a 	and	r3,r4,r3
    3410:	2880030d 	sth	r2,12(r5)
    3414:	28c01915 	stw	r3,100(r5)
    3418:	d9800404 	addi	r6,sp,16
    341c:	8009883a 	mov	r4,r16
    3420:	0009c1c0 	call	9c1c <__sfvwrite_r>
    3424:	1000091e 	bne	r2,zero,344c <_puts_r+0xb8>
    3428:	00800284 	movi	r2,10
    342c:	dfc00917 	ldw	ra,36(sp)
    3430:	dc400817 	ldw	r17,32(sp)
    3434:	dc000717 	ldw	r16,28(sp)
    3438:	dec00a04 	addi	sp,sp,40
    343c:	f800283a 	ret
    3440:	8009883a 	mov	r4,r16
    3444:	0001a880 	call	1a88 <__sinit>
    3448:	003fe906 	br	33f0 <__alt_data_end+0xf80033f0>
    344c:	00bfffc4 	movi	r2,-1
    3450:	003ff606 	br	342c <__alt_data_end+0xf800342c>

00003454 <puts>:
    3454:	008000b4 	movhi	r2,2
    3458:	10a01704 	addi	r2,r2,-32676
    345c:	200b883a 	mov	r5,r4
    3460:	11000017 	ldw	r4,0(r2)
    3464:	00033941 	jmpi	3394 <_puts_r>

00003468 <lflush>:
    3468:	2080030b 	ldhu	r2,12(r4)
    346c:	00c00244 	movi	r3,9
    3470:	1080024c 	andi	r2,r2,9
    3474:	10c00226 	beq	r2,r3,3480 <lflush+0x18>
    3478:	0005883a 	mov	r2,zero
    347c:	f800283a 	ret
    3480:	00016f81 	jmpi	16f8 <fflush>

00003484 <__srefill_r>:
    3484:	defffc04 	addi	sp,sp,-16
    3488:	dc400115 	stw	r17,4(sp)
    348c:	dc000015 	stw	r16,0(sp)
    3490:	dfc00315 	stw	ra,12(sp)
    3494:	dc800215 	stw	r18,8(sp)
    3498:	2023883a 	mov	r17,r4
    349c:	2821883a 	mov	r16,r5
    34a0:	20000226 	beq	r4,zero,34ac <__srefill_r+0x28>
    34a4:	20800e17 	ldw	r2,56(r4)
    34a8:	10003c26 	beq	r2,zero,359c <__srefill_r+0x118>
    34ac:	80c0030b 	ldhu	r3,12(r16)
    34b0:	1908000c 	andi	r4,r3,8192
    34b4:	1805883a 	mov	r2,r3
    34b8:	2000071e 	bne	r4,zero,34d8 <__srefill_r+0x54>
    34bc:	81001917 	ldw	r4,100(r16)
    34c0:	18880014 	ori	r2,r3,8192
    34c4:	00f7ffc4 	movi	r3,-8193
    34c8:	20c8703a 	and	r4,r4,r3
    34cc:	8080030d 	sth	r2,12(r16)
    34d0:	1007883a 	mov	r3,r2
    34d4:	81001915 	stw	r4,100(r16)
    34d8:	80000115 	stw	zero,4(r16)
    34dc:	1100080c 	andi	r4,r2,32
    34e0:	2000571e 	bne	r4,zero,3640 <__srefill_r+0x1bc>
    34e4:	1100010c 	andi	r4,r2,4
    34e8:	20001f26 	beq	r4,zero,3568 <__srefill_r+0xe4>
    34ec:	81400c17 	ldw	r5,48(r16)
    34f0:	28000826 	beq	r5,zero,3514 <__srefill_r+0x90>
    34f4:	80801004 	addi	r2,r16,64
    34f8:	28800226 	beq	r5,r2,3504 <__srefill_r+0x80>
    34fc:	8809883a 	mov	r4,r17
    3500:	0001d540 	call	1d54 <_free_r>
    3504:	80800f17 	ldw	r2,60(r16)
    3508:	80000c15 	stw	zero,48(r16)
    350c:	80800115 	stw	r2,4(r16)
    3510:	1000391e 	bne	r2,zero,35f8 <__srefill_r+0x174>
    3514:	80800417 	ldw	r2,16(r16)
    3518:	10004b26 	beq	r2,zero,3648 <__srefill_r+0x1c4>
    351c:	8480030b 	ldhu	r18,12(r16)
    3520:	908000cc 	andi	r2,r18,3
    3524:	10001f1e 	bne	r2,zero,35a4 <__srefill_r+0x120>
    3528:	81800417 	ldw	r6,16(r16)
    352c:	80800817 	ldw	r2,32(r16)
    3530:	81c00517 	ldw	r7,20(r16)
    3534:	81400717 	ldw	r5,28(r16)
    3538:	81800015 	stw	r6,0(r16)
    353c:	8809883a 	mov	r4,r17
    3540:	103ee83a 	callr	r2
    3544:	80800115 	stw	r2,4(r16)
    3548:	00800e0e 	bge	zero,r2,3584 <__srefill_r+0x100>
    354c:	0005883a 	mov	r2,zero
    3550:	dfc00317 	ldw	ra,12(sp)
    3554:	dc800217 	ldw	r18,8(sp)
    3558:	dc400117 	ldw	r17,4(sp)
    355c:	dc000017 	ldw	r16,0(sp)
    3560:	dec00404 	addi	sp,sp,16
    3564:	f800283a 	ret
    3568:	1100040c 	andi	r4,r2,16
    356c:	20003026 	beq	r4,zero,3630 <__srefill_r+0x1ac>
    3570:	1080020c 	andi	r2,r2,8
    3574:	1000241e 	bne	r2,zero,3608 <__srefill_r+0x184>
    3578:	18c00114 	ori	r3,r3,4
    357c:	80c0030d 	sth	r3,12(r16)
    3580:	003fe406 	br	3514 <__alt_data_end+0xf8003514>
    3584:	80c0030b 	ldhu	r3,12(r16)
    3588:	1000161e 	bne	r2,zero,35e4 <__srefill_r+0x160>
    358c:	18c00814 	ori	r3,r3,32
    3590:	00bfffc4 	movi	r2,-1
    3594:	80c0030d 	sth	r3,12(r16)
    3598:	003fed06 	br	3550 <__alt_data_end+0xf8003550>
    359c:	0001a880 	call	1a88 <__sinit>
    35a0:	003fc206 	br	34ac <__alt_data_end+0xf80034ac>
    35a4:	008000b4 	movhi	r2,2
    35a8:	10a01604 	addi	r2,r2,-32680
    35ac:	11000017 	ldw	r4,0(r2)
    35b0:	01400034 	movhi	r5,0
    35b4:	00800044 	movi	r2,1
    35b8:	294d1a04 	addi	r5,r5,13416
    35bc:	8080030d 	sth	r2,12(r16)
    35c0:	00025400 	call	2540 <_fwalk>
    35c4:	00800244 	movi	r2,9
    35c8:	8480030d 	sth	r18,12(r16)
    35cc:	9480024c 	andi	r18,r18,9
    35d0:	90bfd51e 	bne	r18,r2,3528 <__alt_data_end+0xf8003528>
    35d4:	800b883a 	mov	r5,r16
    35d8:	8809883a 	mov	r4,r17
    35dc:	00014800 	call	1480 <__sflush_r>
    35e0:	003fd106 	br	3528 <__alt_data_end+0xf8003528>
    35e4:	18c01014 	ori	r3,r3,64
    35e8:	80000115 	stw	zero,4(r16)
    35ec:	00bfffc4 	movi	r2,-1
    35f0:	80c0030d 	sth	r3,12(r16)
    35f4:	003fd606 	br	3550 <__alt_data_end+0xf8003550>
    35f8:	80c00e17 	ldw	r3,56(r16)
    35fc:	0005883a 	mov	r2,zero
    3600:	80c00015 	stw	r3,0(r16)
    3604:	003fd206 	br	3550 <__alt_data_end+0xf8003550>
    3608:	800b883a 	mov	r5,r16
    360c:	8809883a 	mov	r4,r17
    3610:	000169c0 	call	169c <_fflush_r>
    3614:	10000a1e 	bne	r2,zero,3640 <__srefill_r+0x1bc>
    3618:	8080030b 	ldhu	r2,12(r16)
    361c:	00fffdc4 	movi	r3,-9
    3620:	80000215 	stw	zero,8(r16)
    3624:	1886703a 	and	r3,r3,r2
    3628:	80000615 	stw	zero,24(r16)
    362c:	003fd206 	br	3578 <__alt_data_end+0xf8003578>
    3630:	00800244 	movi	r2,9
    3634:	88800015 	stw	r2,0(r17)
    3638:	18c01014 	ori	r3,r3,64
    363c:	80c0030d 	sth	r3,12(r16)
    3640:	00bfffc4 	movi	r2,-1
    3644:	003fc206 	br	3550 <__alt_data_end+0xf8003550>
    3648:	800b883a 	mov	r5,r16
    364c:	8809883a 	mov	r4,r17
    3650:	00027d80 	call	27d8 <__smakebuf_r>
    3654:	003fb106 	br	351c <__alt_data_end+0xf800351c>

00003658 <_sbrk_r>:
    3658:	defffd04 	addi	sp,sp,-12
    365c:	dc000015 	stw	r16,0(sp)
    3660:	040000b4 	movhi	r16,2
    3664:	dc400115 	stw	r17,4(sp)
    3668:	84274604 	addi	r16,r16,-25320
    366c:	2023883a 	mov	r17,r4
    3670:	2809883a 	mov	r4,r5
    3674:	dfc00215 	stw	ra,8(sp)
    3678:	80000015 	stw	zero,0(r16)
    367c:	00131ac0 	call	131ac <sbrk>
    3680:	00ffffc4 	movi	r3,-1
    3684:	10c00526 	beq	r2,r3,369c <_sbrk_r+0x44>
    3688:	dfc00217 	ldw	ra,8(sp)
    368c:	dc400117 	ldw	r17,4(sp)
    3690:	dc000017 	ldw	r16,0(sp)
    3694:	dec00304 	addi	sp,sp,12
    3698:	f800283a 	ret
    369c:	80c00017 	ldw	r3,0(r16)
    36a0:	183ff926 	beq	r3,zero,3688 <__alt_data_end+0xf8003688>
    36a4:	88c00015 	stw	r3,0(r17)
    36a8:	003ff706 	br	3688 <__alt_data_end+0xf8003688>

000036ac <_sprintf_r>:
    36ac:	deffe404 	addi	sp,sp,-112
    36b0:	2807883a 	mov	r3,r5
    36b4:	dfc01a15 	stw	ra,104(sp)
    36b8:	d9c01b15 	stw	r7,108(sp)
    36bc:	00a00034 	movhi	r2,32768
    36c0:	10bfffc4 	addi	r2,r2,-1
    36c4:	02008204 	movi	r8,520
    36c8:	d8800215 	stw	r2,8(sp)
    36cc:	d8800515 	stw	r2,20(sp)
    36d0:	d9c01b04 	addi	r7,sp,108
    36d4:	d80b883a 	mov	r5,sp
    36d8:	00bfffc4 	movi	r2,-1
    36dc:	d8c00015 	stw	r3,0(sp)
    36e0:	d8c00415 	stw	r3,16(sp)
    36e4:	da00030d 	sth	r8,12(sp)
    36e8:	d880038d 	sth	r2,14(sp)
    36ec:	00039440 	call	3944 <___svfprintf_internal_r>
    36f0:	d8c00017 	ldw	r3,0(sp)
    36f4:	18000005 	stb	zero,0(r3)
    36f8:	dfc01a17 	ldw	ra,104(sp)
    36fc:	dec01c04 	addi	sp,sp,112
    3700:	f800283a 	ret

00003704 <sprintf>:
    3704:	deffe304 	addi	sp,sp,-116
    3708:	2007883a 	mov	r3,r4
    370c:	dfc01a15 	stw	ra,104(sp)
    3710:	d9801b15 	stw	r6,108(sp)
    3714:	d9c01c15 	stw	r7,112(sp)
    3718:	010000b4 	movhi	r4,2
    371c:	21201704 	addi	r4,r4,-32676
    3720:	21000017 	ldw	r4,0(r4)
    3724:	00a00034 	movhi	r2,32768
    3728:	10bfffc4 	addi	r2,r2,-1
    372c:	280d883a 	mov	r6,r5
    3730:	02008204 	movi	r8,520
    3734:	d8800215 	stw	r2,8(sp)
    3738:	d8800515 	stw	r2,20(sp)
    373c:	d9c01b04 	addi	r7,sp,108
    3740:	d80b883a 	mov	r5,sp
    3744:	00bfffc4 	movi	r2,-1
    3748:	d8c00015 	stw	r3,0(sp)
    374c:	d8c00415 	stw	r3,16(sp)
    3750:	da00030d 	sth	r8,12(sp)
    3754:	d880038d 	sth	r2,14(sp)
    3758:	00039440 	call	3944 <___svfprintf_internal_r>
    375c:	d8c00017 	ldw	r3,0(sp)
    3760:	18000005 	stb	zero,0(r3)
    3764:	dfc01a17 	ldw	ra,104(sp)
    3768:	dec01d04 	addi	sp,sp,116
    376c:	f800283a 	ret

00003770 <__sread>:
    3770:	defffe04 	addi	sp,sp,-8
    3774:	dc000015 	stw	r16,0(sp)
    3778:	2821883a 	mov	r16,r5
    377c:	2940038f 	ldh	r5,14(r5)
    3780:	dfc00115 	stw	ra,4(sp)
    3784:	000b6b40 	call	b6b4 <_read_r>
    3788:	10000716 	blt	r2,zero,37a8 <__sread+0x38>
    378c:	80c01417 	ldw	r3,80(r16)
    3790:	1887883a 	add	r3,r3,r2
    3794:	80c01415 	stw	r3,80(r16)
    3798:	dfc00117 	ldw	ra,4(sp)
    379c:	dc000017 	ldw	r16,0(sp)
    37a0:	dec00204 	addi	sp,sp,8
    37a4:	f800283a 	ret
    37a8:	80c0030b 	ldhu	r3,12(r16)
    37ac:	18fbffcc 	andi	r3,r3,61439
    37b0:	80c0030d 	sth	r3,12(r16)
    37b4:	dfc00117 	ldw	ra,4(sp)
    37b8:	dc000017 	ldw	r16,0(sp)
    37bc:	dec00204 	addi	sp,sp,8
    37c0:	f800283a 	ret

000037c4 <__seofread>:
    37c4:	0005883a 	mov	r2,zero
    37c8:	f800283a 	ret

000037cc <__swrite>:
    37cc:	2880030b 	ldhu	r2,12(r5)
    37d0:	defffb04 	addi	sp,sp,-20
    37d4:	dcc00315 	stw	r19,12(sp)
    37d8:	dc800215 	stw	r18,8(sp)
    37dc:	dc400115 	stw	r17,4(sp)
    37e0:	dc000015 	stw	r16,0(sp)
    37e4:	dfc00415 	stw	ra,16(sp)
    37e8:	10c0400c 	andi	r3,r2,256
    37ec:	2821883a 	mov	r16,r5
    37f0:	2023883a 	mov	r17,r4
    37f4:	3025883a 	mov	r18,r6
    37f8:	3827883a 	mov	r19,r7
    37fc:	18000526 	beq	r3,zero,3814 <__swrite+0x48>
    3800:	2940038f 	ldh	r5,14(r5)
    3804:	01c00084 	movi	r7,2
    3808:	000d883a 	mov	r6,zero
    380c:	000a2140 	call	a214 <_lseek_r>
    3810:	8080030b 	ldhu	r2,12(r16)
    3814:	8140038f 	ldh	r5,14(r16)
    3818:	10bbffcc 	andi	r2,r2,61439
    381c:	980f883a 	mov	r7,r19
    3820:	900d883a 	mov	r6,r18
    3824:	8809883a 	mov	r4,r17
    3828:	8080030d 	sth	r2,12(r16)
    382c:	dfc00417 	ldw	ra,16(sp)
    3830:	dcc00317 	ldw	r19,12(sp)
    3834:	dc800217 	ldw	r18,8(sp)
    3838:	dc400117 	ldw	r17,4(sp)
    383c:	dc000017 	ldw	r16,0(sp)
    3840:	dec00504 	addi	sp,sp,20
    3844:	0007fb41 	jmpi	7fb4 <_write_r>

00003848 <__sseek>:
    3848:	defffe04 	addi	sp,sp,-8
    384c:	dc000015 	stw	r16,0(sp)
    3850:	2821883a 	mov	r16,r5
    3854:	2940038f 	ldh	r5,14(r5)
    3858:	dfc00115 	stw	ra,4(sp)
    385c:	000a2140 	call	a214 <_lseek_r>
    3860:	00ffffc4 	movi	r3,-1
    3864:	10c00826 	beq	r2,r3,3888 <__sseek+0x40>
    3868:	80c0030b 	ldhu	r3,12(r16)
    386c:	80801415 	stw	r2,80(r16)
    3870:	18c40014 	ori	r3,r3,4096
    3874:	80c0030d 	sth	r3,12(r16)
    3878:	dfc00117 	ldw	ra,4(sp)
    387c:	dc000017 	ldw	r16,0(sp)
    3880:	dec00204 	addi	sp,sp,8
    3884:	f800283a 	ret
    3888:	80c0030b 	ldhu	r3,12(r16)
    388c:	18fbffcc 	andi	r3,r3,61439
    3890:	80c0030d 	sth	r3,12(r16)
    3894:	dfc00117 	ldw	ra,4(sp)
    3898:	dc000017 	ldw	r16,0(sp)
    389c:	dec00204 	addi	sp,sp,8
    38a0:	f800283a 	ret

000038a4 <__sclose>:
    38a4:	2940038f 	ldh	r5,14(r5)
    38a8:	00081681 	jmpi	8168 <_close_r>

000038ac <strlen>:
    38ac:	208000cc 	andi	r2,r4,3
    38b0:	10002026 	beq	r2,zero,3934 <strlen+0x88>
    38b4:	20800007 	ldb	r2,0(r4)
    38b8:	10002026 	beq	r2,zero,393c <strlen+0x90>
    38bc:	2005883a 	mov	r2,r4
    38c0:	00000206 	br	38cc <strlen+0x20>
    38c4:	10c00007 	ldb	r3,0(r2)
    38c8:	18001826 	beq	r3,zero,392c <strlen+0x80>
    38cc:	10800044 	addi	r2,r2,1
    38d0:	10c000cc 	andi	r3,r2,3
    38d4:	183ffb1e 	bne	r3,zero,38c4 <__alt_data_end+0xf80038c4>
    38d8:	10c00017 	ldw	r3,0(r2)
    38dc:	01ffbff4 	movhi	r7,65279
    38e0:	39ffbfc4 	addi	r7,r7,-257
    38e4:	00ca303a 	nor	r5,zero,r3
    38e8:	01a02074 	movhi	r6,32897
    38ec:	19c7883a 	add	r3,r3,r7
    38f0:	31a02004 	addi	r6,r6,-32640
    38f4:	1946703a 	and	r3,r3,r5
    38f8:	1986703a 	and	r3,r3,r6
    38fc:	1800091e 	bne	r3,zero,3924 <strlen+0x78>
    3900:	10800104 	addi	r2,r2,4
    3904:	10c00017 	ldw	r3,0(r2)
    3908:	19cb883a 	add	r5,r3,r7
    390c:	00c6303a 	nor	r3,zero,r3
    3910:	28c6703a 	and	r3,r5,r3
    3914:	1986703a 	and	r3,r3,r6
    3918:	183ff926 	beq	r3,zero,3900 <__alt_data_end+0xf8003900>
    391c:	00000106 	br	3924 <strlen+0x78>
    3920:	10800044 	addi	r2,r2,1
    3924:	10c00007 	ldb	r3,0(r2)
    3928:	183ffd1e 	bne	r3,zero,3920 <__alt_data_end+0xf8003920>
    392c:	1105c83a 	sub	r2,r2,r4
    3930:	f800283a 	ret
    3934:	2005883a 	mov	r2,r4
    3938:	003fe706 	br	38d8 <__alt_data_end+0xf80038d8>
    393c:	0005883a 	mov	r2,zero
    3940:	f800283a 	ret

00003944 <___svfprintf_internal_r>:
    3944:	deffb704 	addi	sp,sp,-292
    3948:	dfc04815 	stw	ra,288(sp)
    394c:	ddc04615 	stw	r23,280(sp)
    3950:	d9402d15 	stw	r5,180(sp)
    3954:	d9003915 	stw	r4,228(sp)
    3958:	302f883a 	mov	r23,r6
    395c:	d9c02e15 	stw	r7,184(sp)
    3960:	df004715 	stw	fp,284(sp)
    3964:	dd804515 	stw	r22,276(sp)
    3968:	dd404415 	stw	r21,272(sp)
    396c:	dd004315 	stw	r20,268(sp)
    3970:	dcc04215 	stw	r19,264(sp)
    3974:	dc804115 	stw	r18,260(sp)
    3978:	dc404015 	stw	r17,256(sp)
    397c:	dc003f15 	stw	r16,252(sp)
    3980:	000a1e40 	call	a1e4 <_localeconv_r>
    3984:	10800017 	ldw	r2,0(r2)
    3988:	1009883a 	mov	r4,r2
    398c:	d8803415 	stw	r2,208(sp)
    3990:	00038ac0 	call	38ac <strlen>
    3994:	d8c02d17 	ldw	r3,180(sp)
    3998:	d8803815 	stw	r2,224(sp)
    399c:	1880030b 	ldhu	r2,12(r3)
    39a0:	1080200c 	andi	r2,r2,128
    39a4:	10000226 	beq	r2,zero,39b0 <___svfprintf_internal_r+0x6c>
    39a8:	18800417 	ldw	r2,16(r3)
    39ac:	1006b126 	beq	r2,zero,5474 <___svfprintf_internal_r+0x1b30>
    39b0:	dcc03917 	ldw	r19,228(sp)
    39b4:	d8c00404 	addi	r3,sp,16
    39b8:	05400074 	movhi	r21,1
    39bc:	d9001e04 	addi	r4,sp,120
    39c0:	ad57ad84 	addi	r21,r21,24246
    39c4:	d8c01e15 	stw	r3,120(sp)
    39c8:	d8002015 	stw	zero,128(sp)
    39cc:	d8001f15 	stw	zero,124(sp)
    39d0:	d8003315 	stw	zero,204(sp)
    39d4:	d8003615 	stw	zero,216(sp)
    39d8:	d8003715 	stw	zero,220(sp)
    39dc:	1811883a 	mov	r8,r3
    39e0:	d8003a15 	stw	zero,232(sp)
    39e4:	d8003b15 	stw	zero,236(sp)
    39e8:	d8002f15 	stw	zero,188(sp)
    39ec:	d9002815 	stw	r4,160(sp)
    39f0:	b8800007 	ldb	r2,0(r23)
    39f4:	10027726 	beq	r2,zero,43d4 <___svfprintf_internal_r+0xa90>
    39f8:	00c00944 	movi	r3,37
    39fc:	b823883a 	mov	r17,r23
    3a00:	10c0021e 	bne	r2,r3,3a0c <___svfprintf_internal_r+0xc8>
    3a04:	00001406 	br	3a58 <___svfprintf_internal_r+0x114>
    3a08:	10c00326 	beq	r2,r3,3a18 <___svfprintf_internal_r+0xd4>
    3a0c:	8c400044 	addi	r17,r17,1
    3a10:	88800007 	ldb	r2,0(r17)
    3a14:	103ffc1e 	bne	r2,zero,3a08 <__alt_data_end+0xf8003a08>
    3a18:	8de1c83a 	sub	r16,r17,r23
    3a1c:	80000e26 	beq	r16,zero,3a58 <___svfprintf_internal_r+0x114>
    3a20:	d8c02017 	ldw	r3,128(sp)
    3a24:	d8801f17 	ldw	r2,124(sp)
    3a28:	45c00015 	stw	r23,0(r8)
    3a2c:	1c07883a 	add	r3,r3,r16
    3a30:	10800044 	addi	r2,r2,1
    3a34:	d8c02015 	stw	r3,128(sp)
    3a38:	44000115 	stw	r16,4(r8)
    3a3c:	d8801f15 	stw	r2,124(sp)
    3a40:	00c001c4 	movi	r3,7
    3a44:	18809916 	blt	r3,r2,3cac <___svfprintf_internal_r+0x368>
    3a48:	42000204 	addi	r8,r8,8
    3a4c:	d9402f17 	ldw	r5,188(sp)
    3a50:	2c0b883a 	add	r5,r5,r16
    3a54:	d9402f15 	stw	r5,188(sp)
    3a58:	88800007 	ldb	r2,0(r17)
    3a5c:	10009a26 	beq	r2,zero,3cc8 <___svfprintf_internal_r+0x384>
    3a60:	8dc00044 	addi	r23,r17,1
    3a64:	8c400047 	ldb	r17,1(r17)
    3a68:	0021883a 	mov	r16,zero
    3a6c:	00bfffc4 	movi	r2,-1
    3a70:	0025883a 	mov	r18,zero
    3a74:	dc002905 	stb	r16,164(sp)
    3a78:	d8002785 	stb	zero,158(sp)
    3a7c:	d8002b05 	stb	zero,172(sp)
    3a80:	d8802a15 	stw	r2,168(sp)
    3a84:	d8003115 	stw	zero,196(sp)
    3a88:	05001604 	movi	r20,88
    3a8c:	05800244 	movi	r22,9
    3a90:	4039883a 	mov	fp,r8
    3a94:	9021883a 	mov	r16,r18
    3a98:	bdc00044 	addi	r23,r23,1
    3a9c:	88bff804 	addi	r2,r17,-32
    3aa0:	a0831e36 	bltu	r20,r2,471c <___svfprintf_internal_r+0xdd8>
    3aa4:	100490ba 	slli	r2,r2,2
    3aa8:	00c00034 	movhi	r3,0
    3aac:	18ceaf04 	addi	r3,r3,15036
    3ab0:	10c5883a 	add	r2,r2,r3
    3ab4:	10800017 	ldw	r2,0(r2)
    3ab8:	1000683a 	jmp	r2
    3abc:	00004664 	muli	zero,zero,281
    3ac0:	0000471c 	xori	zero,zero,284
    3ac4:	0000471c 	xori	zero,zero,284
    3ac8:	00004658 	cmpnei	zero,zero,281
    3acc:	0000471c 	xori	zero,zero,284
    3ad0:	0000471c 	xori	zero,zero,284
    3ad4:	0000471c 	xori	zero,zero,284
    3ad8:	0000471c 	xori	zero,zero,284
    3adc:	0000471c 	xori	zero,zero,284
    3ae0:	0000471c 	xori	zero,zero,284
    3ae4:	00003d24 	muli	zero,zero,244
    3ae8:	00004568 	cmpgeui	zero,zero,277
    3aec:	0000471c 	xori	zero,zero,284
    3af0:	00003c30 	cmpltui	zero,zero,240
    3af4:	00003d48 	cmpgei	zero,zero,245
    3af8:	0000471c 	xori	zero,zero,284
    3afc:	00003dd4 	movui	zero,247
    3b00:	00003d98 	cmpnei	zero,zero,246
    3b04:	00003d98 	cmpnei	zero,zero,246
    3b08:	00003d98 	cmpnei	zero,zero,246
    3b0c:	00003d98 	cmpnei	zero,zero,246
    3b10:	00003d98 	cmpnei	zero,zero,246
    3b14:	00003d98 	cmpnei	zero,zero,246
    3b18:	00003d98 	cmpnei	zero,zero,246
    3b1c:	00003d98 	cmpnei	zero,zero,246
    3b20:	00003d98 	cmpnei	zero,zero,246
    3b24:	0000471c 	xori	zero,zero,284
    3b28:	0000471c 	xori	zero,zero,284
    3b2c:	0000471c 	xori	zero,zero,284
    3b30:	0000471c 	xori	zero,zero,284
    3b34:	0000471c 	xori	zero,zero,284
    3b38:	0000471c 	xori	zero,zero,284
    3b3c:	0000471c 	xori	zero,zero,284
    3b40:	0000471c 	xori	zero,zero,284
    3b44:	0000471c 	xori	zero,zero,284
    3b48:	0000471c 	xori	zero,zero,284
    3b4c:	00003e98 	cmpnei	zero,zero,250
    3b50:	00003de0 	cmpeqi	zero,zero,247
    3b54:	0000471c 	xori	zero,zero,284
    3b58:	00003de0 	cmpeqi	zero,zero,247
    3b5c:	0000471c 	xori	zero,zero,284
    3b60:	0000471c 	xori	zero,zero,284
    3b64:	0000471c 	xori	zero,zero,284
    3b68:	0000471c 	xori	zero,zero,284
    3b6c:	00003e8c 	andi	zero,zero,250
    3b70:	0000471c 	xori	zero,zero,284
    3b74:	0000471c 	xori	zero,zero,284
    3b78:	00003f60 	cmpeqi	zero,zero,253
    3b7c:	0000471c 	xori	zero,zero,284
    3b80:	0000471c 	xori	zero,zero,284
    3b84:	0000471c 	xori	zero,zero,284
    3b88:	0000471c 	xori	zero,zero,284
    3b8c:	0000471c 	xori	zero,zero,284
    3b90:	000043dc 	xori	zero,zero,271
    3b94:	0000471c 	xori	zero,zero,284
    3b98:	0000471c 	xori	zero,zero,284
    3b9c:	00004448 	cmpgei	zero,zero,273
    3ba0:	0000471c 	xori	zero,zero,284
    3ba4:	0000471c 	xori	zero,zero,284
    3ba8:	0000471c 	xori	zero,zero,284
    3bac:	0000471c 	xori	zero,zero,284
    3bb0:	0000471c 	xori	zero,zero,284
    3bb4:	0000471c 	xori	zero,zero,284
    3bb8:	0000471c 	xori	zero,zero,284
    3bbc:	0000471c 	xori	zero,zero,284
    3bc0:	0000471c 	xori	zero,zero,284
    3bc4:	0000471c 	xori	zero,zero,284
    3bc8:	00004504 	movi	zero,276
    3bcc:	00004684 	movi	zero,282
    3bd0:	00003de0 	cmpeqi	zero,zero,247
    3bd4:	00003de0 	cmpeqi	zero,zero,247
    3bd8:	00003de0 	cmpeqi	zero,zero,247
    3bdc:	000046f8 	rdprs	zero,zero,283
    3be0:	00004684 	movi	zero,282
    3be4:	0000471c 	xori	zero,zero,284
    3be8:	0000471c 	xori	zero,zero,284
    3bec:	000046a4 	muli	zero,zero,282
    3bf0:	0000471c 	xori	zero,zero,284
    3bf4:	000046b8 	rdprs	zero,zero,282
    3bf8:	00004548 	cmpgei	zero,zero,277
    3bfc:	00003c3c 	xorhi	zero,zero,240
    3c00:	00004580 	call	458 <writeCanal+0x50>
    3c04:	0000471c 	xori	zero,zero,284
    3c08:	0000458c 	andi	zero,zero,278
    3c0c:	0000471c 	xori	zero,zero,284
    3c10:	000045f0 	cmpltui	zero,zero,279
    3c14:	0000471c 	xori	zero,zero,284
    3c18:	0000471c 	xori	zero,zero,284
    3c1c:	00004610 	cmplti	zero,zero,280
    3c20:	d8c03117 	ldw	r3,196(sp)
    3c24:	d8802e15 	stw	r2,184(sp)
    3c28:	00c7c83a 	sub	r3,zero,r3
    3c2c:	d8c03115 	stw	r3,196(sp)
    3c30:	84000114 	ori	r16,r16,4
    3c34:	bc400007 	ldb	r17,0(r23)
    3c38:	003f9706 	br	3a98 <__alt_data_end+0xf8003a98>
    3c3c:	00800c04 	movi	r2,48
    3c40:	d8802705 	stb	r2,156(sp)
    3c44:	00801e04 	movi	r2,120
    3c48:	d8802745 	stb	r2,157(sp)
    3c4c:	d9002a17 	ldw	r4,168(sp)
    3c50:	d8802e17 	ldw	r2,184(sp)
    3c54:	d8002785 	stb	zero,158(sp)
    3c58:	e011883a 	mov	r8,fp
    3c5c:	10c00104 	addi	r3,r2,4
    3c60:	15000017 	ldw	r20,0(r2)
    3c64:	002d883a 	mov	r22,zero
    3c68:	80800094 	ori	r2,r16,2
    3c6c:	2002b616 	blt	r4,zero,4748 <___svfprintf_internal_r+0xe04>
    3c70:	00bfdfc4 	movi	r2,-129
    3c74:	80a4703a 	and	r18,r16,r2
    3c78:	d8c02e15 	stw	r3,184(sp)
    3c7c:	94800094 	ori	r18,r18,2
    3c80:	a002a01e 	bne	r20,zero,4704 <___svfprintf_internal_r+0xdc0>
    3c84:	01400074 	movhi	r5,1
    3c88:	2957a604 	addi	r5,r5,24216
    3c8c:	d9403a15 	stw	r5,232(sp)
    3c90:	04401e04 	movi	r17,120
    3c94:	d8c02a17 	ldw	r3,168(sp)
    3c98:	0039883a 	mov	fp,zero
    3c9c:	1801e626 	beq	r3,zero,4438 <___svfprintf_internal_r+0xaf4>
    3ca0:	0029883a 	mov	r20,zero
    3ca4:	002d883a 	mov	r22,zero
    3ca8:	00020506 	br	44c0 <___svfprintf_internal_r+0xb7c>
    3cac:	d9402d17 	ldw	r5,180(sp)
    3cb0:	d9801e04 	addi	r6,sp,120
    3cb4:	9809883a 	mov	r4,r19
    3cb8:	000bdc80 	call	bdc8 <__ssprint_r>
    3cbc:	1000081e 	bne	r2,zero,3ce0 <___svfprintf_internal_r+0x39c>
    3cc0:	da000404 	addi	r8,sp,16
    3cc4:	003f6106 	br	3a4c <__alt_data_end+0xf8003a4c>
    3cc8:	d8802017 	ldw	r2,128(sp)
    3ccc:	10000426 	beq	r2,zero,3ce0 <___svfprintf_internal_r+0x39c>
    3cd0:	d9402d17 	ldw	r5,180(sp)
    3cd4:	d9003917 	ldw	r4,228(sp)
    3cd8:	d9801e04 	addi	r6,sp,120
    3cdc:	000bdc80 	call	bdc8 <__ssprint_r>
    3ce0:	d8802d17 	ldw	r2,180(sp)
    3ce4:	10c0030b 	ldhu	r3,12(r2)
    3ce8:	d8802f17 	ldw	r2,188(sp)
    3cec:	18c0100c 	andi	r3,r3,64
    3cf0:	1806251e 	bne	r3,zero,5588 <___svfprintf_internal_r+0x1c44>
    3cf4:	dfc04817 	ldw	ra,288(sp)
    3cf8:	df004717 	ldw	fp,284(sp)
    3cfc:	ddc04617 	ldw	r23,280(sp)
    3d00:	dd804517 	ldw	r22,276(sp)
    3d04:	dd404417 	ldw	r21,272(sp)
    3d08:	dd004317 	ldw	r20,268(sp)
    3d0c:	dcc04217 	ldw	r19,264(sp)
    3d10:	dc804117 	ldw	r18,260(sp)
    3d14:	dc404017 	ldw	r17,256(sp)
    3d18:	dc003f17 	ldw	r16,252(sp)
    3d1c:	dec04904 	addi	sp,sp,292
    3d20:	f800283a 	ret
    3d24:	d9002e17 	ldw	r4,184(sp)
    3d28:	d9402e17 	ldw	r5,184(sp)
    3d2c:	21000017 	ldw	r4,0(r4)
    3d30:	28800104 	addi	r2,r5,4
    3d34:	d9003115 	stw	r4,196(sp)
    3d38:	203fb916 	blt	r4,zero,3c20 <__alt_data_end+0xf8003c20>
    3d3c:	d8802e15 	stw	r2,184(sp)
    3d40:	bc400007 	ldb	r17,0(r23)
    3d44:	003f5406 	br	3a98 <__alt_data_end+0xf8003a98>
    3d48:	bc400007 	ldb	r17,0(r23)
    3d4c:	01000a84 	movi	r4,42
    3d50:	b8c00044 	addi	r3,r23,1
    3d54:	89076926 	beq	r17,r4,5afc <___svfprintf_internal_r+0x21b8>
    3d58:	8cbff404 	addi	r18,r17,-48
    3d5c:	b486b936 	bltu	r22,r18,5844 <___svfprintf_internal_r+0x1f00>
    3d60:	0009883a 	mov	r4,zero
    3d64:	1823883a 	mov	r17,r3
    3d68:	01400284 	movi	r5,10
    3d6c:	000fc140 	call	fc14 <__mulsi3>
    3d70:	88c00007 	ldb	r3,0(r17)
    3d74:	1489883a 	add	r4,r2,r18
    3d78:	8dc00044 	addi	r23,r17,1
    3d7c:	1cbff404 	addi	r18,r3,-48
    3d80:	b823883a 	mov	r17,r23
    3d84:	b4bff82e 	bgeu	r22,r18,3d68 <__alt_data_end+0xf8003d68>
    3d88:	1823883a 	mov	r17,r3
    3d8c:	20060416 	blt	r4,zero,55a0 <___svfprintf_internal_r+0x1c5c>
    3d90:	d9002a15 	stw	r4,168(sp)
    3d94:	003f4106 	br	3a9c <__alt_data_end+0xf8003a9c>
    3d98:	8cbff404 	addi	r18,r17,-48
    3d9c:	d8003115 	stw	zero,196(sp)
    3da0:	0009883a 	mov	r4,zero
    3da4:	b823883a 	mov	r17,r23
    3da8:	01400284 	movi	r5,10
    3dac:	000fc140 	call	fc14 <__mulsi3>
    3db0:	88c00007 	ldb	r3,0(r17)
    3db4:	9089883a 	add	r4,r18,r2
    3db8:	bdc00044 	addi	r23,r23,1
    3dbc:	1cbff404 	addi	r18,r3,-48
    3dc0:	b823883a 	mov	r17,r23
    3dc4:	b4bff82e 	bgeu	r22,r18,3da8 <__alt_data_end+0xf8003da8>
    3dc8:	1823883a 	mov	r17,r3
    3dcc:	d9003115 	stw	r4,196(sp)
    3dd0:	003f3206 	br	3a9c <__alt_data_end+0xf8003a9c>
    3dd4:	84002014 	ori	r16,r16,128
    3dd8:	bc400007 	ldb	r17,0(r23)
    3ddc:	003f2e06 	br	3a98 <__alt_data_end+0xf8003a98>
    3de0:	8025883a 	mov	r18,r16
    3de4:	dc002903 	ldbu	r16,164(sp)
    3de8:	e011883a 	mov	r8,fp
    3dec:	84003fcc 	andi	r16,r16,255
    3df0:	8007721e 	bne	r16,zero,5bbc <___svfprintf_internal_r+0x2278>
    3df4:	9080020c 	andi	r2,r18,8
    3df8:	1004a526 	beq	r2,zero,5090 <___svfprintf_internal_r+0x174c>
    3dfc:	d9002e17 	ldw	r4,184(sp)
    3e00:	d9402e17 	ldw	r5,184(sp)
    3e04:	d8802e17 	ldw	r2,184(sp)
    3e08:	21000017 	ldw	r4,0(r4)
    3e0c:	29400117 	ldw	r5,4(r5)
    3e10:	10800204 	addi	r2,r2,8
    3e14:	d9003615 	stw	r4,216(sp)
    3e18:	d9403715 	stw	r5,220(sp)
    3e1c:	d8802e15 	stw	r2,184(sp)
    3e20:	d9003617 	ldw	r4,216(sp)
    3e24:	d9403717 	ldw	r5,220(sp)
    3e28:	da003e15 	stw	r8,248(sp)
    3e2c:	04000044 	movi	r16,1
    3e30:	000bc780 	call	bc78 <__fpclassifyd>
    3e34:	da003e17 	ldw	r8,248(sp)
    3e38:	1404731e 	bne	r2,r16,5008 <___svfprintf_internal_r+0x16c4>
    3e3c:	d9003617 	ldw	r4,216(sp)
    3e40:	d9403717 	ldw	r5,220(sp)
    3e44:	000d883a 	mov	r6,zero
    3e48:	000f883a 	mov	r7,zero
    3e4c:	001101c0 	call	1101c <__ledf2>
    3e50:	da003e17 	ldw	r8,248(sp)
    3e54:	10061b16 	blt	r2,zero,56c4 <___svfprintf_internal_r+0x1d80>
    3e58:	df002783 	ldbu	fp,158(sp)
    3e5c:	008011c4 	movi	r2,71
    3e60:	1445810e 	bge	r2,r17,5468 <___svfprintf_internal_r+0x1b24>
    3e64:	04000074 	movhi	r16,1
    3e68:	84179e04 	addi	r16,r16,24184
    3e6c:	00c000c4 	movi	r3,3
    3e70:	00bfdfc4 	movi	r2,-129
    3e74:	d8c02915 	stw	r3,164(sp)
    3e78:	90a4703a 	and	r18,r18,r2
    3e7c:	d8c02b15 	stw	r3,172(sp)
    3e80:	d8002a15 	stw	zero,168(sp)
    3e84:	d8003215 	stw	zero,200(sp)
    3e88:	00006c06 	br	403c <___svfprintf_internal_r+0x6f8>
    3e8c:	84000214 	ori	r16,r16,8
    3e90:	bc400007 	ldb	r17,0(r23)
    3e94:	003f0006 	br	3a98 <__alt_data_end+0xf8003a98>
    3e98:	8025883a 	mov	r18,r16
    3e9c:	dc002903 	ldbu	r16,164(sp)
    3ea0:	e011883a 	mov	r8,fp
    3ea4:	84003fcc 	andi	r16,r16,255
    3ea8:	80073f1e 	bne	r16,zero,5ba8 <___svfprintf_internal_r+0x2264>
    3eac:	94800414 	ori	r18,r18,16
    3eb0:	9080080c 	andi	r2,r18,32
    3eb4:	1003bb26 	beq	r2,zero,4da4 <___svfprintf_internal_r+0x1460>
    3eb8:	d9002e17 	ldw	r4,184(sp)
    3ebc:	20800117 	ldw	r2,4(r4)
    3ec0:	25000017 	ldw	r20,0(r4)
    3ec4:	21000204 	addi	r4,r4,8
    3ec8:	d9002e15 	stw	r4,184(sp)
    3ecc:	102d883a 	mov	r22,r2
    3ed0:	1003bd16 	blt	r2,zero,4dc8 <___svfprintf_internal_r+0x1484>
    3ed4:	d9002a17 	ldw	r4,168(sp)
    3ed8:	df002783 	ldbu	fp,158(sp)
    3edc:	2003d016 	blt	r4,zero,4e20 <___svfprintf_internal_r+0x14dc>
    3ee0:	00ffdfc4 	movi	r3,-129
    3ee4:	a584b03a 	or	r2,r20,r22
    3ee8:	90e4703a 	and	r18,r18,r3
    3eec:	10015026 	beq	r2,zero,4430 <___svfprintf_internal_r+0xaec>
    3ef0:	b0037026 	beq	r22,zero,4cb4 <___svfprintf_internal_r+0x1370>
    3ef4:	dc402915 	stw	r17,164(sp)
    3ef8:	dc001e04 	addi	r16,sp,120
    3efc:	b023883a 	mov	r17,r22
    3f00:	402d883a 	mov	r22,r8
    3f04:	a009883a 	mov	r4,r20
    3f08:	880b883a 	mov	r5,r17
    3f0c:	01800284 	movi	r6,10
    3f10:	000f883a 	mov	r7,zero
    3f14:	000f6500 	call	f650 <__umoddi3>
    3f18:	10800c04 	addi	r2,r2,48
    3f1c:	843fffc4 	addi	r16,r16,-1
    3f20:	a009883a 	mov	r4,r20
    3f24:	880b883a 	mov	r5,r17
    3f28:	80800005 	stb	r2,0(r16)
    3f2c:	01800284 	movi	r6,10
    3f30:	000f883a 	mov	r7,zero
    3f34:	000f0540 	call	f054 <__udivdi3>
    3f38:	1029883a 	mov	r20,r2
    3f3c:	10c4b03a 	or	r2,r2,r3
    3f40:	1823883a 	mov	r17,r3
    3f44:	103fef1e 	bne	r2,zero,3f04 <__alt_data_end+0xf8003f04>
    3f48:	d8c02817 	ldw	r3,160(sp)
    3f4c:	dc402917 	ldw	r17,164(sp)
    3f50:	b011883a 	mov	r8,r22
    3f54:	1c07c83a 	sub	r3,r3,r16
    3f58:	d8c02b15 	stw	r3,172(sp)
    3f5c:	00003106 	br	4024 <___svfprintf_internal_r+0x6e0>
    3f60:	8025883a 	mov	r18,r16
    3f64:	dc002903 	ldbu	r16,164(sp)
    3f68:	e011883a 	mov	r8,fp
    3f6c:	84003fcc 	andi	r16,r16,255
    3f70:	80070a1e 	bne	r16,zero,5b9c <___svfprintf_internal_r+0x2258>
    3f74:	94800414 	ori	r18,r18,16
    3f78:	9080080c 	andi	r2,r18,32
    3f7c:	1002f626 	beq	r2,zero,4b58 <___svfprintf_internal_r+0x1214>
    3f80:	d9002e17 	ldw	r4,184(sp)
    3f84:	d9402a17 	ldw	r5,168(sp)
    3f88:	d8002785 	stb	zero,158(sp)
    3f8c:	20800204 	addi	r2,r4,8
    3f90:	25000017 	ldw	r20,0(r4)
    3f94:	25800117 	ldw	r22,4(r4)
    3f98:	28043716 	blt	r5,zero,5078 <___svfprintf_internal_r+0x1734>
    3f9c:	013fdfc4 	movi	r4,-129
    3fa0:	a586b03a 	or	r3,r20,r22
    3fa4:	d8802e15 	stw	r2,184(sp)
    3fa8:	9124703a 	and	r18,r18,r4
    3fac:	1802f71e 	bne	r3,zero,4b8c <___svfprintf_internal_r+0x1248>
    3fb0:	d9402a17 	ldw	r5,168(sp)
    3fb4:	0039883a 	mov	fp,zero
    3fb8:	2806df26 	beq	r5,zero,5b38 <___svfprintf_internal_r+0x21f4>
    3fbc:	0029883a 	mov	r20,zero
    3fc0:	002d883a 	mov	r22,zero
    3fc4:	dc001e04 	addi	r16,sp,120
    3fc8:	a006d0fa 	srli	r3,r20,3
    3fcc:	b008977a 	slli	r4,r22,29
    3fd0:	b02cd0fa 	srli	r22,r22,3
    3fd4:	a50001cc 	andi	r20,r20,7
    3fd8:	a0800c04 	addi	r2,r20,48
    3fdc:	843fffc4 	addi	r16,r16,-1
    3fe0:	20e8b03a 	or	r20,r4,r3
    3fe4:	80800005 	stb	r2,0(r16)
    3fe8:	a586b03a 	or	r3,r20,r22
    3fec:	183ff61e 	bne	r3,zero,3fc8 <__alt_data_end+0xf8003fc8>
    3ff0:	90c0004c 	andi	r3,r18,1
    3ff4:	18013f26 	beq	r3,zero,44f4 <___svfprintf_internal_r+0xbb0>
    3ff8:	10803fcc 	andi	r2,r2,255
    3ffc:	1080201c 	xori	r2,r2,128
    4000:	10bfe004 	addi	r2,r2,-128
    4004:	00c00c04 	movi	r3,48
    4008:	10c13a26 	beq	r2,r3,44f4 <___svfprintf_internal_r+0xbb0>
    400c:	80ffffc5 	stb	r3,-1(r16)
    4010:	d8c02817 	ldw	r3,160(sp)
    4014:	80bfffc4 	addi	r2,r16,-1
    4018:	1021883a 	mov	r16,r2
    401c:	1887c83a 	sub	r3,r3,r2
    4020:	d8c02b15 	stw	r3,172(sp)
    4024:	d8802b17 	ldw	r2,172(sp)
    4028:	d9002a17 	ldw	r4,168(sp)
    402c:	1100010e 	bge	r2,r4,4034 <___svfprintf_internal_r+0x6f0>
    4030:	2005883a 	mov	r2,r4
    4034:	d8802915 	stw	r2,164(sp)
    4038:	d8003215 	stw	zero,200(sp)
    403c:	e7003fcc 	andi	fp,fp,255
    4040:	e700201c 	xori	fp,fp,128
    4044:	e73fe004 	addi	fp,fp,-128
    4048:	e0000326 	beq	fp,zero,4058 <___svfprintf_internal_r+0x714>
    404c:	d8c02917 	ldw	r3,164(sp)
    4050:	18c00044 	addi	r3,r3,1
    4054:	d8c02915 	stw	r3,164(sp)
    4058:	90c0008c 	andi	r3,r18,2
    405c:	d8c02c15 	stw	r3,176(sp)
    4060:	18000326 	beq	r3,zero,4070 <___svfprintf_internal_r+0x72c>
    4064:	d8c02917 	ldw	r3,164(sp)
    4068:	18c00084 	addi	r3,r3,2
    406c:	d8c02915 	stw	r3,164(sp)
    4070:	90c0210c 	andi	r3,r18,132
    4074:	d8c03015 	stw	r3,192(sp)
    4078:	1801c31e 	bne	r3,zero,4788 <___svfprintf_internal_r+0xe44>
    407c:	d9003117 	ldw	r4,196(sp)
    4080:	d8c02917 	ldw	r3,164(sp)
    4084:	20e9c83a 	sub	r20,r4,r3
    4088:	0501bf0e 	bge	zero,r20,4788 <___svfprintf_internal_r+0xe44>
    408c:	02400404 	movi	r9,16
    4090:	d8c02017 	ldw	r3,128(sp)
    4094:	d8801f17 	ldw	r2,124(sp)
    4098:	4d053d0e 	bge	r9,r20,5590 <___svfprintf_internal_r+0x1c4c>
    409c:	01400074 	movhi	r5,1
    40a0:	2957b184 	addi	r5,r5,24262
    40a4:	dc403c15 	stw	r17,240(sp)
    40a8:	d9403515 	stw	r5,212(sp)
    40ac:	a023883a 	mov	r17,r20
    40b0:	482d883a 	mov	r22,r9
    40b4:	9029883a 	mov	r20,r18
    40b8:	070001c4 	movi	fp,7
    40bc:	8025883a 	mov	r18,r16
    40c0:	dc002d17 	ldw	r16,180(sp)
    40c4:	00000306 	br	40d4 <___svfprintf_internal_r+0x790>
    40c8:	8c7ffc04 	addi	r17,r17,-16
    40cc:	42000204 	addi	r8,r8,8
    40d0:	b440130e 	bge	r22,r17,4120 <___svfprintf_internal_r+0x7dc>
    40d4:	01000074 	movhi	r4,1
    40d8:	18c00404 	addi	r3,r3,16
    40dc:	10800044 	addi	r2,r2,1
    40e0:	2117b184 	addi	r4,r4,24262
    40e4:	41000015 	stw	r4,0(r8)
    40e8:	45800115 	stw	r22,4(r8)
    40ec:	d8c02015 	stw	r3,128(sp)
    40f0:	d8801f15 	stw	r2,124(sp)
    40f4:	e0bff40e 	bge	fp,r2,40c8 <__alt_data_end+0xf80040c8>
    40f8:	d9801e04 	addi	r6,sp,120
    40fc:	800b883a 	mov	r5,r16
    4100:	9809883a 	mov	r4,r19
    4104:	000bdc80 	call	bdc8 <__ssprint_r>
    4108:	103ef51e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    410c:	8c7ffc04 	addi	r17,r17,-16
    4110:	d8c02017 	ldw	r3,128(sp)
    4114:	d8801f17 	ldw	r2,124(sp)
    4118:	da000404 	addi	r8,sp,16
    411c:	b47fed16 	blt	r22,r17,40d4 <__alt_data_end+0xf80040d4>
    4120:	9021883a 	mov	r16,r18
    4124:	a025883a 	mov	r18,r20
    4128:	8829883a 	mov	r20,r17
    412c:	dc403c17 	ldw	r17,240(sp)
    4130:	d9403517 	ldw	r5,212(sp)
    4134:	a0c7883a 	add	r3,r20,r3
    4138:	10800044 	addi	r2,r2,1
    413c:	41400015 	stw	r5,0(r8)
    4140:	45000115 	stw	r20,4(r8)
    4144:	d8c02015 	stw	r3,128(sp)
    4148:	d8801f15 	stw	r2,124(sp)
    414c:	010001c4 	movi	r4,7
    4150:	2082c116 	blt	r4,r2,4c58 <___svfprintf_internal_r+0x1314>
    4154:	df002787 	ldb	fp,158(sp)
    4158:	42000204 	addi	r8,r8,8
    415c:	e0000c26 	beq	fp,zero,4190 <___svfprintf_internal_r+0x84c>
    4160:	d8801f17 	ldw	r2,124(sp)
    4164:	d9002784 	addi	r4,sp,158
    4168:	18c00044 	addi	r3,r3,1
    416c:	10800044 	addi	r2,r2,1
    4170:	41000015 	stw	r4,0(r8)
    4174:	01000044 	movi	r4,1
    4178:	41000115 	stw	r4,4(r8)
    417c:	d8c02015 	stw	r3,128(sp)
    4180:	d8801f15 	stw	r2,124(sp)
    4184:	010001c4 	movi	r4,7
    4188:	20825a16 	blt	r4,r2,4af4 <___svfprintf_internal_r+0x11b0>
    418c:	42000204 	addi	r8,r8,8
    4190:	d8802c17 	ldw	r2,176(sp)
    4194:	10000c26 	beq	r2,zero,41c8 <___svfprintf_internal_r+0x884>
    4198:	d8801f17 	ldw	r2,124(sp)
    419c:	d9002704 	addi	r4,sp,156
    41a0:	18c00084 	addi	r3,r3,2
    41a4:	10800044 	addi	r2,r2,1
    41a8:	41000015 	stw	r4,0(r8)
    41ac:	01000084 	movi	r4,2
    41b0:	41000115 	stw	r4,4(r8)
    41b4:	d8c02015 	stw	r3,128(sp)
    41b8:	d8801f15 	stw	r2,124(sp)
    41bc:	010001c4 	movi	r4,7
    41c0:	20825416 	blt	r4,r2,4b14 <___svfprintf_internal_r+0x11d0>
    41c4:	42000204 	addi	r8,r8,8
    41c8:	d9003017 	ldw	r4,192(sp)
    41cc:	00802004 	movi	r2,128
    41d0:	2081b926 	beq	r4,r2,48b8 <___svfprintf_internal_r+0xf74>
    41d4:	d9402a17 	ldw	r5,168(sp)
    41d8:	d8802b17 	ldw	r2,172(sp)
    41dc:	28adc83a 	sub	r22,r5,r2
    41e0:	05802f0e 	bge	zero,r22,42a0 <___svfprintf_internal_r+0x95c>
    41e4:	07000404 	movi	fp,16
    41e8:	d8801f17 	ldw	r2,124(sp)
    41ec:	e583e20e 	bge	fp,r22,5178 <___svfprintf_internal_r+0x1834>
    41f0:	01400074 	movhi	r5,1
    41f4:	2957ad84 	addi	r5,r5,24246
    41f8:	dc402a15 	stw	r17,168(sp)
    41fc:	d9402c15 	stw	r5,176(sp)
    4200:	b023883a 	mov	r17,r22
    4204:	050001c4 	movi	r20,7
    4208:	902d883a 	mov	r22,r18
    420c:	8025883a 	mov	r18,r16
    4210:	dc002d17 	ldw	r16,180(sp)
    4214:	00000306 	br	4224 <___svfprintf_internal_r+0x8e0>
    4218:	8c7ffc04 	addi	r17,r17,-16
    421c:	42000204 	addi	r8,r8,8
    4220:	e440110e 	bge	fp,r17,4268 <___svfprintf_internal_r+0x924>
    4224:	18c00404 	addi	r3,r3,16
    4228:	10800044 	addi	r2,r2,1
    422c:	45400015 	stw	r21,0(r8)
    4230:	47000115 	stw	fp,4(r8)
    4234:	d8c02015 	stw	r3,128(sp)
    4238:	d8801f15 	stw	r2,124(sp)
    423c:	a0bff60e 	bge	r20,r2,4218 <__alt_data_end+0xf8004218>
    4240:	d9801e04 	addi	r6,sp,120
    4244:	800b883a 	mov	r5,r16
    4248:	9809883a 	mov	r4,r19
    424c:	000bdc80 	call	bdc8 <__ssprint_r>
    4250:	103ea31e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4254:	8c7ffc04 	addi	r17,r17,-16
    4258:	d8c02017 	ldw	r3,128(sp)
    425c:	d8801f17 	ldw	r2,124(sp)
    4260:	da000404 	addi	r8,sp,16
    4264:	e47fef16 	blt	fp,r17,4224 <__alt_data_end+0xf8004224>
    4268:	9021883a 	mov	r16,r18
    426c:	b025883a 	mov	r18,r22
    4270:	882d883a 	mov	r22,r17
    4274:	dc402a17 	ldw	r17,168(sp)
    4278:	d9002c17 	ldw	r4,176(sp)
    427c:	1d87883a 	add	r3,r3,r22
    4280:	10800044 	addi	r2,r2,1
    4284:	41000015 	stw	r4,0(r8)
    4288:	45800115 	stw	r22,4(r8)
    428c:	d8c02015 	stw	r3,128(sp)
    4290:	d8801f15 	stw	r2,124(sp)
    4294:	010001c4 	movi	r4,7
    4298:	20820e16 	blt	r4,r2,4ad4 <___svfprintf_internal_r+0x1190>
    429c:	42000204 	addi	r8,r8,8
    42a0:	9080400c 	andi	r2,r18,256
    42a4:	10013a1e 	bne	r2,zero,4790 <___svfprintf_internal_r+0xe4c>
    42a8:	d9402b17 	ldw	r5,172(sp)
    42ac:	d8801f17 	ldw	r2,124(sp)
    42b0:	44000015 	stw	r16,0(r8)
    42b4:	1947883a 	add	r3,r3,r5
    42b8:	10800044 	addi	r2,r2,1
    42bc:	41400115 	stw	r5,4(r8)
    42c0:	d8c02015 	stw	r3,128(sp)
    42c4:	d8801f15 	stw	r2,124(sp)
    42c8:	010001c4 	movi	r4,7
    42cc:	2081f316 	blt	r4,r2,4a9c <___svfprintf_internal_r+0x1158>
    42d0:	42000204 	addi	r8,r8,8
    42d4:	9480010c 	andi	r18,r18,4
    42d8:	90003226 	beq	r18,zero,43a4 <___svfprintf_internal_r+0xa60>
    42dc:	d9403117 	ldw	r5,196(sp)
    42e0:	d8802917 	ldw	r2,164(sp)
    42e4:	28a1c83a 	sub	r16,r5,r2
    42e8:	04002e0e 	bge	zero,r16,43a4 <___svfprintf_internal_r+0xa60>
    42ec:	04400404 	movi	r17,16
    42f0:	d8801f17 	ldw	r2,124(sp)
    42f4:	8c04db0e 	bge	r17,r16,5664 <___svfprintf_internal_r+0x1d20>
    42f8:	01400074 	movhi	r5,1
    42fc:	2957b184 	addi	r5,r5,24262
    4300:	d9403515 	stw	r5,212(sp)
    4304:	048001c4 	movi	r18,7
    4308:	dd002d17 	ldw	r20,180(sp)
    430c:	00000306 	br	431c <___svfprintf_internal_r+0x9d8>
    4310:	843ffc04 	addi	r16,r16,-16
    4314:	42000204 	addi	r8,r8,8
    4318:	8c00130e 	bge	r17,r16,4368 <___svfprintf_internal_r+0xa24>
    431c:	01000074 	movhi	r4,1
    4320:	18c00404 	addi	r3,r3,16
    4324:	10800044 	addi	r2,r2,1
    4328:	2117b184 	addi	r4,r4,24262
    432c:	41000015 	stw	r4,0(r8)
    4330:	44400115 	stw	r17,4(r8)
    4334:	d8c02015 	stw	r3,128(sp)
    4338:	d8801f15 	stw	r2,124(sp)
    433c:	90bff40e 	bge	r18,r2,4310 <__alt_data_end+0xf8004310>
    4340:	d9801e04 	addi	r6,sp,120
    4344:	a00b883a 	mov	r5,r20
    4348:	9809883a 	mov	r4,r19
    434c:	000bdc80 	call	bdc8 <__ssprint_r>
    4350:	103e631e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4354:	843ffc04 	addi	r16,r16,-16
    4358:	d8c02017 	ldw	r3,128(sp)
    435c:	d8801f17 	ldw	r2,124(sp)
    4360:	da000404 	addi	r8,sp,16
    4364:	8c3fed16 	blt	r17,r16,431c <__alt_data_end+0xf800431c>
    4368:	d9403517 	ldw	r5,212(sp)
    436c:	1c07883a 	add	r3,r3,r16
    4370:	10800044 	addi	r2,r2,1
    4374:	41400015 	stw	r5,0(r8)
    4378:	44000115 	stw	r16,4(r8)
    437c:	d8c02015 	stw	r3,128(sp)
    4380:	d8801f15 	stw	r2,124(sp)
    4384:	010001c4 	movi	r4,7
    4388:	2080060e 	bge	r4,r2,43a4 <___svfprintf_internal_r+0xa60>
    438c:	d9402d17 	ldw	r5,180(sp)
    4390:	d9801e04 	addi	r6,sp,120
    4394:	9809883a 	mov	r4,r19
    4398:	000bdc80 	call	bdc8 <__ssprint_r>
    439c:	103e501e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    43a0:	d8c02017 	ldw	r3,128(sp)
    43a4:	d8803117 	ldw	r2,196(sp)
    43a8:	d9002917 	ldw	r4,164(sp)
    43ac:	1100010e 	bge	r2,r4,43b4 <___svfprintf_internal_r+0xa70>
    43b0:	2005883a 	mov	r2,r4
    43b4:	d9402f17 	ldw	r5,188(sp)
    43b8:	288b883a 	add	r5,r5,r2
    43bc:	d9402f15 	stw	r5,188(sp)
    43c0:	1801be1e 	bne	r3,zero,4abc <___svfprintf_internal_r+0x1178>
    43c4:	b8800007 	ldb	r2,0(r23)
    43c8:	d8001f15 	stw	zero,124(sp)
    43cc:	da000404 	addi	r8,sp,16
    43d0:	103d891e 	bne	r2,zero,39f8 <__alt_data_end+0xf80039f8>
    43d4:	b823883a 	mov	r17,r23
    43d8:	003d9f06 	br	3a58 <__alt_data_end+0xf8003a58>
    43dc:	8025883a 	mov	r18,r16
    43e0:	dc002903 	ldbu	r16,164(sp)
    43e4:	e011883a 	mov	r8,fp
    43e8:	84003fcc 	andi	r16,r16,255
    43ec:	8005e61e 	bne	r16,zero,5b88 <___svfprintf_internal_r+0x2244>
    43f0:	94800414 	ori	r18,r18,16
    43f4:	9080080c 	andi	r2,r18,32
    43f8:	10022026 	beq	r2,zero,4c7c <___svfprintf_internal_r+0x1338>
    43fc:	d9002e17 	ldw	r4,184(sp)
    4400:	d9402a17 	ldw	r5,168(sp)
    4404:	d8002785 	stb	zero,158(sp)
    4408:	20c00204 	addi	r3,r4,8
    440c:	25000017 	ldw	r20,0(r4)
    4410:	25800117 	ldw	r22,4(r4)
    4414:	2803ad16 	blt	r5,zero,52cc <___svfprintf_internal_r+0x1988>
    4418:	013fdfc4 	movi	r4,-129
    441c:	a584b03a 	or	r2,r20,r22
    4420:	d8c02e15 	stw	r3,184(sp)
    4424:	9124703a 	and	r18,r18,r4
    4428:	0039883a 	mov	fp,zero
    442c:	103eb01e 	bne	r2,zero,3ef0 <__alt_data_end+0xf8003ef0>
    4430:	d8802a17 	ldw	r2,168(sp)
    4434:	1002e71e 	bne	r2,zero,4fd4 <___svfprintf_internal_r+0x1690>
    4438:	d8002a15 	stw	zero,168(sp)
    443c:	d8002b15 	stw	zero,172(sp)
    4440:	dc001e04 	addi	r16,sp,120
    4444:	003ef706 	br	4024 <__alt_data_end+0xf8004024>
    4448:	8025883a 	mov	r18,r16
    444c:	dc002903 	ldbu	r16,164(sp)
    4450:	e011883a 	mov	r8,fp
    4454:	84003fcc 	andi	r16,r16,255
    4458:	8005c81e 	bne	r16,zero,5b7c <___svfprintf_internal_r+0x2238>
    445c:	01000074 	movhi	r4,1
    4460:	2117a104 	addi	r4,r4,24196
    4464:	d9003a15 	stw	r4,232(sp)
    4468:	9080080c 	andi	r2,r18,32
    446c:	10007226 	beq	r2,zero,4638 <___svfprintf_internal_r+0xcf4>
    4470:	d9402e17 	ldw	r5,184(sp)
    4474:	2d000017 	ldw	r20,0(r5)
    4478:	2d800117 	ldw	r22,4(r5)
    447c:	29400204 	addi	r5,r5,8
    4480:	d9402e15 	stw	r5,184(sp)
    4484:	9080004c 	andi	r2,r18,1
    4488:	1001aa26 	beq	r2,zero,4b34 <___svfprintf_internal_r+0x11f0>
    448c:	a584b03a 	or	r2,r20,r22
    4490:	10032526 	beq	r2,zero,5128 <___svfprintf_internal_r+0x17e4>
    4494:	d8c02a17 	ldw	r3,168(sp)
    4498:	00800c04 	movi	r2,48
    449c:	d8802705 	stb	r2,156(sp)
    44a0:	dc402745 	stb	r17,157(sp)
    44a4:	d8002785 	stb	zero,158(sp)
    44a8:	90800094 	ori	r2,r18,2
    44ac:	1804a316 	blt	r3,zero,573c <___svfprintf_internal_r+0x1df8>
    44b0:	00bfdfc4 	movi	r2,-129
    44b4:	90a4703a 	and	r18,r18,r2
    44b8:	94800094 	ori	r18,r18,2
    44bc:	0039883a 	mov	fp,zero
    44c0:	d9003a17 	ldw	r4,232(sp)
    44c4:	dc001e04 	addi	r16,sp,120
    44c8:	a08003cc 	andi	r2,r20,15
    44cc:	b006973a 	slli	r3,r22,28
    44d0:	2085883a 	add	r2,r4,r2
    44d4:	a028d13a 	srli	r20,r20,4
    44d8:	10800003 	ldbu	r2,0(r2)
    44dc:	b02cd13a 	srli	r22,r22,4
    44e0:	843fffc4 	addi	r16,r16,-1
    44e4:	1d28b03a 	or	r20,r3,r20
    44e8:	80800005 	stb	r2,0(r16)
    44ec:	a584b03a 	or	r2,r20,r22
    44f0:	103ff51e 	bne	r2,zero,44c8 <__alt_data_end+0xf80044c8>
    44f4:	d8c02817 	ldw	r3,160(sp)
    44f8:	1c07c83a 	sub	r3,r3,r16
    44fc:	d8c02b15 	stw	r3,172(sp)
    4500:	003ec806 	br	4024 <__alt_data_end+0xf8004024>
    4504:	d8c02e17 	ldw	r3,184(sp)
    4508:	d9002e17 	ldw	r4,184(sp)
    450c:	8025883a 	mov	r18,r16
    4510:	18800017 	ldw	r2,0(r3)
    4514:	21000104 	addi	r4,r4,4
    4518:	00c00044 	movi	r3,1
    451c:	e011883a 	mov	r8,fp
    4520:	d8c02915 	stw	r3,164(sp)
    4524:	d8002785 	stb	zero,158(sp)
    4528:	d8801405 	stb	r2,80(sp)
    452c:	d9002e15 	stw	r4,184(sp)
    4530:	d8c02b15 	stw	r3,172(sp)
    4534:	d8002a15 	stw	zero,168(sp)
    4538:	d8003215 	stw	zero,200(sp)
    453c:	dc001404 	addi	r16,sp,80
    4540:	0039883a 	mov	fp,zero
    4544:	003ec406 	br	4058 <__alt_data_end+0xf8004058>
    4548:	8025883a 	mov	r18,r16
    454c:	dc002903 	ldbu	r16,164(sp)
    4550:	e011883a 	mov	r8,fp
    4554:	84003fcc 	andi	r16,r16,255
    4558:	803e8726 	beq	r16,zero,3f78 <__alt_data_end+0xf8003f78>
    455c:	d8c02b03 	ldbu	r3,172(sp)
    4560:	d8c02785 	stb	r3,158(sp)
    4564:	003e8406 	br	3f78 <__alt_data_end+0xf8003f78>
    4568:	00c00044 	movi	r3,1
    456c:	d8c02905 	stb	r3,164(sp)
    4570:	00c00ac4 	movi	r3,43
    4574:	d8c02b05 	stb	r3,172(sp)
    4578:	bc400007 	ldb	r17,0(r23)
    457c:	003d4606 	br	3a98 <__alt_data_end+0xf8003a98>
    4580:	84000814 	ori	r16,r16,32
    4584:	bc400007 	ldb	r17,0(r23)
    4588:	003d4306 	br	3a98 <__alt_data_end+0xf8003a98>
    458c:	d8802e17 	ldw	r2,184(sp)
    4590:	8025883a 	mov	r18,r16
    4594:	d8002785 	stb	zero,158(sp)
    4598:	14000017 	ldw	r16,0(r2)
    459c:	e011883a 	mov	r8,fp
    45a0:	15000104 	addi	r20,r2,4
    45a4:	80042126 	beq	r16,zero,562c <___svfprintf_internal_r+0x1ce8>
    45a8:	d8c02a17 	ldw	r3,168(sp)
    45ac:	1803ee16 	blt	r3,zero,5568 <___svfprintf_internal_r+0x1c24>
    45b0:	180d883a 	mov	r6,r3
    45b4:	000b883a 	mov	r5,zero
    45b8:	8009883a 	mov	r4,r16
    45bc:	df003e15 	stw	fp,248(sp)
    45c0:	000a2740 	call	a274 <memchr>
    45c4:	da003e17 	ldw	r8,248(sp)
    45c8:	10046a26 	beq	r2,zero,5774 <___svfprintf_internal_r+0x1e30>
    45cc:	1405c83a 	sub	r2,r2,r16
    45d0:	d8802b15 	stw	r2,172(sp)
    45d4:	1003ea16 	blt	r2,zero,5580 <___svfprintf_internal_r+0x1c3c>
    45d8:	df002783 	ldbu	fp,158(sp)
    45dc:	d8802915 	stw	r2,164(sp)
    45e0:	dd002e15 	stw	r20,184(sp)
    45e4:	d8002a15 	stw	zero,168(sp)
    45e8:	d8003215 	stw	zero,200(sp)
    45ec:	003e9306 	br	403c <__alt_data_end+0xf800403c>
    45f0:	8025883a 	mov	r18,r16
    45f4:	dc002903 	ldbu	r16,164(sp)
    45f8:	e011883a 	mov	r8,fp
    45fc:	84003fcc 	andi	r16,r16,255
    4600:	803f7c26 	beq	r16,zero,43f4 <__alt_data_end+0xf80043f4>
    4604:	d8c02b03 	ldbu	r3,172(sp)
    4608:	d8c02785 	stb	r3,158(sp)
    460c:	003f7906 	br	43f4 <__alt_data_end+0xf80043f4>
    4610:	8025883a 	mov	r18,r16
    4614:	dc002903 	ldbu	r16,164(sp)
    4618:	e011883a 	mov	r8,fp
    461c:	84003fcc 	andi	r16,r16,255
    4620:	8005741e 	bne	r16,zero,5bf4 <___svfprintf_internal_r+0x22b0>
    4624:	01000074 	movhi	r4,1
    4628:	2117a604 	addi	r4,r4,24216
    462c:	d9003a15 	stw	r4,232(sp)
    4630:	9080080c 	andi	r2,r18,32
    4634:	103f8e1e 	bne	r2,zero,4470 <__alt_data_end+0xf8004470>
    4638:	9080040c 	andi	r2,r18,16
    463c:	1002a726 	beq	r2,zero,50dc <___svfprintf_internal_r+0x1798>
    4640:	d8802e17 	ldw	r2,184(sp)
    4644:	002d883a 	mov	r22,zero
    4648:	15000017 	ldw	r20,0(r2)
    464c:	10800104 	addi	r2,r2,4
    4650:	d8802e15 	stw	r2,184(sp)
    4654:	003f8b06 	br	4484 <__alt_data_end+0xf8004484>
    4658:	84000054 	ori	r16,r16,1
    465c:	bc400007 	ldb	r17,0(r23)
    4660:	003d0d06 	br	3a98 <__alt_data_end+0xf8003a98>
    4664:	d8802b07 	ldb	r2,172(sp)
    4668:	1002a41e 	bne	r2,zero,50fc <___svfprintf_internal_r+0x17b8>
    466c:	00c00044 	movi	r3,1
    4670:	d8c02905 	stb	r3,164(sp)
    4674:	00c00804 	movi	r3,32
    4678:	d8c02b05 	stb	r3,172(sp)
    467c:	bc400007 	ldb	r17,0(r23)
    4680:	003d0506 	br	3a98 <__alt_data_end+0xf8003a98>
    4684:	8025883a 	mov	r18,r16
    4688:	dc002903 	ldbu	r16,164(sp)
    468c:	e011883a 	mov	r8,fp
    4690:	84003fcc 	andi	r16,r16,255
    4694:	803e0626 	beq	r16,zero,3eb0 <__alt_data_end+0xf8003eb0>
    4698:	d8c02b03 	ldbu	r3,172(sp)
    469c:	d8c02785 	stb	r3,158(sp)
    46a0:	003e0306 	br	3eb0 <__alt_data_end+0xf8003eb0>
    46a4:	bc400007 	ldb	r17,0(r23)
    46a8:	00801b04 	movi	r2,108
    46ac:	88830a26 	beq	r17,r2,52d8 <___svfprintf_internal_r+0x1994>
    46b0:	84000414 	ori	r16,r16,16
    46b4:	003cf806 	br	3a98 <__alt_data_end+0xf8003a98>
    46b8:	8025883a 	mov	r18,r16
    46bc:	dc002903 	ldbu	r16,164(sp)
    46c0:	e011883a 	mov	r8,fp
    46c4:	84003fcc 	andi	r16,r16,255
    46c8:	8005471e 	bne	r16,zero,5be8 <___svfprintf_internal_r+0x22a4>
    46cc:	9080080c 	andi	r2,r18,32
    46d0:	10028c26 	beq	r2,zero,5104 <___svfprintf_internal_r+0x17c0>
    46d4:	d9002e17 	ldw	r4,184(sp)
    46d8:	d9402f17 	ldw	r5,188(sp)
    46dc:	20800017 	ldw	r2,0(r4)
    46e0:	2807d7fa 	srai	r3,r5,31
    46e4:	21000104 	addi	r4,r4,4
    46e8:	d9002e15 	stw	r4,184(sp)
    46ec:	11400015 	stw	r5,0(r2)
    46f0:	10c00115 	stw	r3,4(r2)
    46f4:	003cbe06 	br	39f0 <__alt_data_end+0xf80039f0>
    46f8:	84001014 	ori	r16,r16,64
    46fc:	bc400007 	ldb	r17,0(r23)
    4700:	003ce506 	br	3a98 <__alt_data_end+0xf8003a98>
    4704:	01000074 	movhi	r4,1
    4708:	2117a604 	addi	r4,r4,24216
    470c:	0039883a 	mov	fp,zero
    4710:	d9003a15 	stw	r4,232(sp)
    4714:	04401e04 	movi	r17,120
    4718:	003f6906 	br	44c0 <__alt_data_end+0xf80044c0>
    471c:	8025883a 	mov	r18,r16
    4720:	dc002903 	ldbu	r16,164(sp)
    4724:	e011883a 	mov	r8,fp
    4728:	84003fcc 	andi	r16,r16,255
    472c:	8005261e 	bne	r16,zero,5bc8 <___svfprintf_internal_r+0x2284>
    4730:	883d6526 	beq	r17,zero,3cc8 <__alt_data_end+0xf8003cc8>
    4734:	00c00044 	movi	r3,1
    4738:	d8c02915 	stw	r3,164(sp)
    473c:	dc401405 	stb	r17,80(sp)
    4740:	d8002785 	stb	zero,158(sp)
    4744:	003f7a06 	br	4530 <__alt_data_end+0xf8004530>
    4748:	01000074 	movhi	r4,1
    474c:	2117a604 	addi	r4,r4,24216
    4750:	d9003a15 	stw	r4,232(sp)
    4754:	d8c02e15 	stw	r3,184(sp)
    4758:	1025883a 	mov	r18,r2
    475c:	04401e04 	movi	r17,120
    4760:	a584b03a 	or	r2,r20,r22
    4764:	1000fa1e 	bne	r2,zero,4b50 <___svfprintf_internal_r+0x120c>
    4768:	0039883a 	mov	fp,zero
    476c:	00800084 	movi	r2,2
    4770:	10803fcc 	andi	r2,r2,255
    4774:	00c00044 	movi	r3,1
    4778:	10c21626 	beq	r2,r3,4fd4 <___svfprintf_internal_r+0x1690>
    477c:	00c00084 	movi	r3,2
    4780:	10fe0e1e 	bne	r2,r3,3fbc <__alt_data_end+0xf8003fbc>
    4784:	003d4606 	br	3ca0 <__alt_data_end+0xf8003ca0>
    4788:	d8c02017 	ldw	r3,128(sp)
    478c:	003e7306 	br	415c <__alt_data_end+0xf800415c>
    4790:	00801944 	movi	r2,101
    4794:	14407c0e 	bge	r2,r17,4988 <___svfprintf_internal_r+0x1044>
    4798:	d9003617 	ldw	r4,216(sp)
    479c:	d9403717 	ldw	r5,220(sp)
    47a0:	000d883a 	mov	r6,zero
    47a4:	000f883a 	mov	r7,zero
    47a8:	d8c03d15 	stw	r3,244(sp)
    47ac:	da003e15 	stw	r8,248(sp)
    47b0:	0010eb80 	call	10eb8 <__eqdf2>
    47b4:	d8c03d17 	ldw	r3,244(sp)
    47b8:	da003e17 	ldw	r8,248(sp)
    47bc:	1000f51e 	bne	r2,zero,4b94 <___svfprintf_internal_r+0x1250>
    47c0:	d8801f17 	ldw	r2,124(sp)
    47c4:	01000074 	movhi	r4,1
    47c8:	2117ad04 	addi	r4,r4,24244
    47cc:	18c00044 	addi	r3,r3,1
    47d0:	10800044 	addi	r2,r2,1
    47d4:	41000015 	stw	r4,0(r8)
    47d8:	01000044 	movi	r4,1
    47dc:	41000115 	stw	r4,4(r8)
    47e0:	d8c02015 	stw	r3,128(sp)
    47e4:	d8801f15 	stw	r2,124(sp)
    47e8:	010001c4 	movi	r4,7
    47ec:	20826616 	blt	r4,r2,5188 <___svfprintf_internal_r+0x1844>
    47f0:	42000204 	addi	r8,r8,8
    47f4:	d8802617 	ldw	r2,152(sp)
    47f8:	d9403317 	ldw	r5,204(sp)
    47fc:	11400216 	blt	r2,r5,4808 <___svfprintf_internal_r+0xec4>
    4800:	9080004c 	andi	r2,r18,1
    4804:	103eb326 	beq	r2,zero,42d4 <__alt_data_end+0xf80042d4>
    4808:	d8803817 	ldw	r2,224(sp)
    480c:	d9003417 	ldw	r4,208(sp)
    4810:	d9403817 	ldw	r5,224(sp)
    4814:	1887883a 	add	r3,r3,r2
    4818:	d8801f17 	ldw	r2,124(sp)
    481c:	41000015 	stw	r4,0(r8)
    4820:	41400115 	stw	r5,4(r8)
    4824:	10800044 	addi	r2,r2,1
    4828:	d8c02015 	stw	r3,128(sp)
    482c:	d8801f15 	stw	r2,124(sp)
    4830:	010001c4 	movi	r4,7
    4834:	2082af16 	blt	r4,r2,52f4 <___svfprintf_internal_r+0x19b0>
    4838:	42000204 	addi	r8,r8,8
    483c:	d8803317 	ldw	r2,204(sp)
    4840:	143fffc4 	addi	r16,r2,-1
    4844:	043ea30e 	bge	zero,r16,42d4 <__alt_data_end+0xf80042d4>
    4848:	04400404 	movi	r17,16
    484c:	d8801f17 	ldw	r2,124(sp)
    4850:	8c00860e 	bge	r17,r16,4a6c <___svfprintf_internal_r+0x1128>
    4854:	01400074 	movhi	r5,1
    4858:	2957ad84 	addi	r5,r5,24246
    485c:	d9402c15 	stw	r5,176(sp)
    4860:	058001c4 	movi	r22,7
    4864:	dd002d17 	ldw	r20,180(sp)
    4868:	00000306 	br	4878 <___svfprintf_internal_r+0xf34>
    486c:	42000204 	addi	r8,r8,8
    4870:	843ffc04 	addi	r16,r16,-16
    4874:	8c00800e 	bge	r17,r16,4a78 <___svfprintf_internal_r+0x1134>
    4878:	18c00404 	addi	r3,r3,16
    487c:	10800044 	addi	r2,r2,1
    4880:	45400015 	stw	r21,0(r8)
    4884:	44400115 	stw	r17,4(r8)
    4888:	d8c02015 	stw	r3,128(sp)
    488c:	d8801f15 	stw	r2,124(sp)
    4890:	b0bff60e 	bge	r22,r2,486c <__alt_data_end+0xf800486c>
    4894:	d9801e04 	addi	r6,sp,120
    4898:	a00b883a 	mov	r5,r20
    489c:	9809883a 	mov	r4,r19
    48a0:	000bdc80 	call	bdc8 <__ssprint_r>
    48a4:	103d0e1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    48a8:	d8c02017 	ldw	r3,128(sp)
    48ac:	d8801f17 	ldw	r2,124(sp)
    48b0:	da000404 	addi	r8,sp,16
    48b4:	003fee06 	br	4870 <__alt_data_end+0xf8004870>
    48b8:	d9403117 	ldw	r5,196(sp)
    48bc:	d8802917 	ldw	r2,164(sp)
    48c0:	28adc83a 	sub	r22,r5,r2
    48c4:	05be430e 	bge	zero,r22,41d4 <__alt_data_end+0xf80041d4>
    48c8:	07000404 	movi	fp,16
    48cc:	d8801f17 	ldw	r2,124(sp)
    48d0:	e583a20e 	bge	fp,r22,575c <___svfprintf_internal_r+0x1e18>
    48d4:	01400074 	movhi	r5,1
    48d8:	2957ad84 	addi	r5,r5,24246
    48dc:	dc403015 	stw	r17,192(sp)
    48e0:	d9402c15 	stw	r5,176(sp)
    48e4:	b023883a 	mov	r17,r22
    48e8:	050001c4 	movi	r20,7
    48ec:	902d883a 	mov	r22,r18
    48f0:	8025883a 	mov	r18,r16
    48f4:	dc002d17 	ldw	r16,180(sp)
    48f8:	00000306 	br	4908 <___svfprintf_internal_r+0xfc4>
    48fc:	8c7ffc04 	addi	r17,r17,-16
    4900:	42000204 	addi	r8,r8,8
    4904:	e440110e 	bge	fp,r17,494c <___svfprintf_internal_r+0x1008>
    4908:	18c00404 	addi	r3,r3,16
    490c:	10800044 	addi	r2,r2,1
    4910:	45400015 	stw	r21,0(r8)
    4914:	47000115 	stw	fp,4(r8)
    4918:	d8c02015 	stw	r3,128(sp)
    491c:	d8801f15 	stw	r2,124(sp)
    4920:	a0bff60e 	bge	r20,r2,48fc <__alt_data_end+0xf80048fc>
    4924:	d9801e04 	addi	r6,sp,120
    4928:	800b883a 	mov	r5,r16
    492c:	9809883a 	mov	r4,r19
    4930:	000bdc80 	call	bdc8 <__ssprint_r>
    4934:	103cea1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4938:	8c7ffc04 	addi	r17,r17,-16
    493c:	d8c02017 	ldw	r3,128(sp)
    4940:	d8801f17 	ldw	r2,124(sp)
    4944:	da000404 	addi	r8,sp,16
    4948:	e47fef16 	blt	fp,r17,4908 <__alt_data_end+0xf8004908>
    494c:	9021883a 	mov	r16,r18
    4950:	b025883a 	mov	r18,r22
    4954:	882d883a 	mov	r22,r17
    4958:	dc403017 	ldw	r17,192(sp)
    495c:	d9002c17 	ldw	r4,176(sp)
    4960:	1d87883a 	add	r3,r3,r22
    4964:	10800044 	addi	r2,r2,1
    4968:	41000015 	stw	r4,0(r8)
    496c:	45800115 	stw	r22,4(r8)
    4970:	d8c02015 	stw	r3,128(sp)
    4974:	d8801f15 	stw	r2,124(sp)
    4978:	010001c4 	movi	r4,7
    497c:	20819a16 	blt	r4,r2,4fe8 <___svfprintf_internal_r+0x16a4>
    4980:	42000204 	addi	r8,r8,8
    4984:	003e1306 	br	41d4 <__alt_data_end+0xf80041d4>
    4988:	d9403317 	ldw	r5,204(sp)
    498c:	00800044 	movi	r2,1
    4990:	18c00044 	addi	r3,r3,1
    4994:	1141710e 	bge	r2,r5,4f5c <___svfprintf_internal_r+0x1618>
    4998:	dc401f17 	ldw	r17,124(sp)
    499c:	00800044 	movi	r2,1
    49a0:	40800115 	stw	r2,4(r8)
    49a4:	8c400044 	addi	r17,r17,1
    49a8:	44000015 	stw	r16,0(r8)
    49ac:	d8c02015 	stw	r3,128(sp)
    49b0:	dc401f15 	stw	r17,124(sp)
    49b4:	008001c4 	movi	r2,7
    49b8:	14417416 	blt	r2,r17,4f8c <___svfprintf_internal_r+0x1648>
    49bc:	42000204 	addi	r8,r8,8
    49c0:	d8803817 	ldw	r2,224(sp)
    49c4:	d9003417 	ldw	r4,208(sp)
    49c8:	8c400044 	addi	r17,r17,1
    49cc:	10c7883a 	add	r3,r2,r3
    49d0:	40800115 	stw	r2,4(r8)
    49d4:	41000015 	stw	r4,0(r8)
    49d8:	d8c02015 	stw	r3,128(sp)
    49dc:	dc401f15 	stw	r17,124(sp)
    49e0:	008001c4 	movi	r2,7
    49e4:	14417216 	blt	r2,r17,4fb0 <___svfprintf_internal_r+0x166c>
    49e8:	45800204 	addi	r22,r8,8
    49ec:	d9003617 	ldw	r4,216(sp)
    49f0:	d9403717 	ldw	r5,220(sp)
    49f4:	000d883a 	mov	r6,zero
    49f8:	000f883a 	mov	r7,zero
    49fc:	d8c03d15 	stw	r3,244(sp)
    4a00:	0010eb80 	call	10eb8 <__eqdf2>
    4a04:	d8c03d17 	ldw	r3,244(sp)
    4a08:	1000b326 	beq	r2,zero,4cd8 <___svfprintf_internal_r+0x1394>
    4a0c:	d9403317 	ldw	r5,204(sp)
    4a10:	84000044 	addi	r16,r16,1
    4a14:	8c400044 	addi	r17,r17,1
    4a18:	28bfffc4 	addi	r2,r5,-1
    4a1c:	1887883a 	add	r3,r3,r2
    4a20:	b0800115 	stw	r2,4(r22)
    4a24:	b4000015 	stw	r16,0(r22)
    4a28:	d8c02015 	stw	r3,128(sp)
    4a2c:	dc401f15 	stw	r17,124(sp)
    4a30:	008001c4 	movi	r2,7
    4a34:	1440d216 	blt	r2,r17,4d80 <___svfprintf_internal_r+0x143c>
    4a38:	b5800204 	addi	r22,r22,8
    4a3c:	d9003b17 	ldw	r4,236(sp)
    4a40:	df0022c4 	addi	fp,sp,139
    4a44:	8c400044 	addi	r17,r17,1
    4a48:	20c7883a 	add	r3,r4,r3
    4a4c:	b7000015 	stw	fp,0(r22)
    4a50:	b1000115 	stw	r4,4(r22)
    4a54:	d8c02015 	stw	r3,128(sp)
    4a58:	dc401f15 	stw	r17,124(sp)
    4a5c:	008001c4 	movi	r2,7
    4a60:	14400e16 	blt	r2,r17,4a9c <___svfprintf_internal_r+0x1158>
    4a64:	b2000204 	addi	r8,r22,8
    4a68:	003e1a06 	br	42d4 <__alt_data_end+0xf80042d4>
    4a6c:	01000074 	movhi	r4,1
    4a70:	2117ad84 	addi	r4,r4,24246
    4a74:	d9002c15 	stw	r4,176(sp)
    4a78:	d9002c17 	ldw	r4,176(sp)
    4a7c:	1c07883a 	add	r3,r3,r16
    4a80:	44000115 	stw	r16,4(r8)
    4a84:	41000015 	stw	r4,0(r8)
    4a88:	10800044 	addi	r2,r2,1
    4a8c:	d8c02015 	stw	r3,128(sp)
    4a90:	d8801f15 	stw	r2,124(sp)
    4a94:	010001c4 	movi	r4,7
    4a98:	20be0d0e 	bge	r4,r2,42d0 <__alt_data_end+0xf80042d0>
    4a9c:	d9402d17 	ldw	r5,180(sp)
    4aa0:	d9801e04 	addi	r6,sp,120
    4aa4:	9809883a 	mov	r4,r19
    4aa8:	000bdc80 	call	bdc8 <__ssprint_r>
    4aac:	103c8c1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4ab0:	d8c02017 	ldw	r3,128(sp)
    4ab4:	da000404 	addi	r8,sp,16
    4ab8:	003e0606 	br	42d4 <__alt_data_end+0xf80042d4>
    4abc:	d9402d17 	ldw	r5,180(sp)
    4ac0:	d9801e04 	addi	r6,sp,120
    4ac4:	9809883a 	mov	r4,r19
    4ac8:	000bdc80 	call	bdc8 <__ssprint_r>
    4acc:	103e3d26 	beq	r2,zero,43c4 <__alt_data_end+0xf80043c4>
    4ad0:	003c8306 	br	3ce0 <__alt_data_end+0xf8003ce0>
    4ad4:	d9402d17 	ldw	r5,180(sp)
    4ad8:	d9801e04 	addi	r6,sp,120
    4adc:	9809883a 	mov	r4,r19
    4ae0:	000bdc80 	call	bdc8 <__ssprint_r>
    4ae4:	103c7e1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4ae8:	d8c02017 	ldw	r3,128(sp)
    4aec:	da000404 	addi	r8,sp,16
    4af0:	003deb06 	br	42a0 <__alt_data_end+0xf80042a0>
    4af4:	d9402d17 	ldw	r5,180(sp)
    4af8:	d9801e04 	addi	r6,sp,120
    4afc:	9809883a 	mov	r4,r19
    4b00:	000bdc80 	call	bdc8 <__ssprint_r>
    4b04:	103c761e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4b08:	d8c02017 	ldw	r3,128(sp)
    4b0c:	da000404 	addi	r8,sp,16
    4b10:	003d9f06 	br	4190 <__alt_data_end+0xf8004190>
    4b14:	d9402d17 	ldw	r5,180(sp)
    4b18:	d9801e04 	addi	r6,sp,120
    4b1c:	9809883a 	mov	r4,r19
    4b20:	000bdc80 	call	bdc8 <__ssprint_r>
    4b24:	103c6e1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4b28:	d8c02017 	ldw	r3,128(sp)
    4b2c:	da000404 	addi	r8,sp,16
    4b30:	003da506 	br	41c8 <__alt_data_end+0xf80041c8>
    4b34:	d9402a17 	ldw	r5,168(sp)
    4b38:	d8002785 	stb	zero,158(sp)
    4b3c:	283f0816 	blt	r5,zero,4760 <__alt_data_end+0xf8004760>
    4b40:	00ffdfc4 	movi	r3,-129
    4b44:	a584b03a 	or	r2,r20,r22
    4b48:	90e4703a 	and	r18,r18,r3
    4b4c:	103c5126 	beq	r2,zero,3c94 <__alt_data_end+0xf8003c94>
    4b50:	0039883a 	mov	fp,zero
    4b54:	003e5a06 	br	44c0 <__alt_data_end+0xf80044c0>
    4b58:	9080040c 	andi	r2,r18,16
    4b5c:	10013d26 	beq	r2,zero,5054 <___svfprintf_internal_r+0x1710>
    4b60:	d8c02e17 	ldw	r3,184(sp)
    4b64:	d9002a17 	ldw	r4,168(sp)
    4b68:	d8002785 	stb	zero,158(sp)
    4b6c:	18800104 	addi	r2,r3,4
    4b70:	1d000017 	ldw	r20,0(r3)
    4b74:	002d883a 	mov	r22,zero
    4b78:	20013f16 	blt	r4,zero,5078 <___svfprintf_internal_r+0x1734>
    4b7c:	00ffdfc4 	movi	r3,-129
    4b80:	d8802e15 	stw	r2,184(sp)
    4b84:	90e4703a 	and	r18,r18,r3
    4b88:	a03d0926 	beq	r20,zero,3fb0 <__alt_data_end+0xf8003fb0>
    4b8c:	0039883a 	mov	fp,zero
    4b90:	003d0c06 	br	3fc4 <__alt_data_end+0xf8003fc4>
    4b94:	dc402617 	ldw	r17,152(sp)
    4b98:	0441830e 	bge	zero,r17,51a8 <___svfprintf_internal_r+0x1864>
    4b9c:	dc403217 	ldw	r17,200(sp)
    4ba0:	d8803317 	ldw	r2,204(sp)
    4ba4:	1440010e 	bge	r2,r17,4bac <___svfprintf_internal_r+0x1268>
    4ba8:	1023883a 	mov	r17,r2
    4bac:	04400a0e 	bge	zero,r17,4bd8 <___svfprintf_internal_r+0x1294>
    4bb0:	d8801f17 	ldw	r2,124(sp)
    4bb4:	1c47883a 	add	r3,r3,r17
    4bb8:	44000015 	stw	r16,0(r8)
    4bbc:	10800044 	addi	r2,r2,1
    4bc0:	44400115 	stw	r17,4(r8)
    4bc4:	d8c02015 	stw	r3,128(sp)
    4bc8:	d8801f15 	stw	r2,124(sp)
    4bcc:	010001c4 	movi	r4,7
    4bd0:	20827516 	blt	r4,r2,55a8 <___svfprintf_internal_r+0x1c64>
    4bd4:	42000204 	addi	r8,r8,8
    4bd8:	88027b16 	blt	r17,zero,55c8 <___svfprintf_internal_r+0x1c84>
    4bdc:	d9003217 	ldw	r4,200(sp)
    4be0:	2463c83a 	sub	r17,r4,r17
    4be4:	0440990e 	bge	zero,r17,4e4c <___svfprintf_internal_r+0x1508>
    4be8:	05800404 	movi	r22,16
    4bec:	d8801f17 	ldw	r2,124(sp)
    4bf0:	b441530e 	bge	r22,r17,5140 <___svfprintf_internal_r+0x17fc>
    4bf4:	01000074 	movhi	r4,1
    4bf8:	2117ad84 	addi	r4,r4,24246
    4bfc:	d9002c15 	stw	r4,176(sp)
    4c00:	070001c4 	movi	fp,7
    4c04:	dd002d17 	ldw	r20,180(sp)
    4c08:	00000306 	br	4c18 <___svfprintf_internal_r+0x12d4>
    4c0c:	42000204 	addi	r8,r8,8
    4c10:	8c7ffc04 	addi	r17,r17,-16
    4c14:	b4414d0e 	bge	r22,r17,514c <___svfprintf_internal_r+0x1808>
    4c18:	18c00404 	addi	r3,r3,16
    4c1c:	10800044 	addi	r2,r2,1
    4c20:	45400015 	stw	r21,0(r8)
    4c24:	45800115 	stw	r22,4(r8)
    4c28:	d8c02015 	stw	r3,128(sp)
    4c2c:	d8801f15 	stw	r2,124(sp)
    4c30:	e0bff60e 	bge	fp,r2,4c0c <__alt_data_end+0xf8004c0c>
    4c34:	d9801e04 	addi	r6,sp,120
    4c38:	a00b883a 	mov	r5,r20
    4c3c:	9809883a 	mov	r4,r19
    4c40:	000bdc80 	call	bdc8 <__ssprint_r>
    4c44:	103c261e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4c48:	d8c02017 	ldw	r3,128(sp)
    4c4c:	d8801f17 	ldw	r2,124(sp)
    4c50:	da000404 	addi	r8,sp,16
    4c54:	003fee06 	br	4c10 <__alt_data_end+0xf8004c10>
    4c58:	d9402d17 	ldw	r5,180(sp)
    4c5c:	d9801e04 	addi	r6,sp,120
    4c60:	9809883a 	mov	r4,r19
    4c64:	000bdc80 	call	bdc8 <__ssprint_r>
    4c68:	103c1d1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4c6c:	d8c02017 	ldw	r3,128(sp)
    4c70:	df002787 	ldb	fp,158(sp)
    4c74:	da000404 	addi	r8,sp,16
    4c78:	003d3806 	br	415c <__alt_data_end+0xf800415c>
    4c7c:	9080040c 	andi	r2,r18,16
    4c80:	10005c26 	beq	r2,zero,4df4 <___svfprintf_internal_r+0x14b0>
    4c84:	d8c02e17 	ldw	r3,184(sp)
    4c88:	d9002a17 	ldw	r4,168(sp)
    4c8c:	d8002785 	stb	zero,158(sp)
    4c90:	18800104 	addi	r2,r3,4
    4c94:	1d000017 	ldw	r20,0(r3)
    4c98:	002d883a 	mov	r22,zero
    4c9c:	20005e16 	blt	r4,zero,4e18 <___svfprintf_internal_r+0x14d4>
    4ca0:	00ffdfc4 	movi	r3,-129
    4ca4:	d8802e15 	stw	r2,184(sp)
    4ca8:	90e4703a 	and	r18,r18,r3
    4cac:	0039883a 	mov	fp,zero
    4cb0:	a03ddf26 	beq	r20,zero,4430 <__alt_data_end+0xf8004430>
    4cb4:	00800244 	movi	r2,9
    4cb8:	153c8e36 	bltu	r2,r20,3ef4 <__alt_data_end+0xf8003ef4>
    4cbc:	a5000c04 	addi	r20,r20,48
    4cc0:	dc001dc4 	addi	r16,sp,119
    4cc4:	dd001dc5 	stb	r20,119(sp)
    4cc8:	d8c02817 	ldw	r3,160(sp)
    4ccc:	1c07c83a 	sub	r3,r3,r16
    4cd0:	d8c02b15 	stw	r3,172(sp)
    4cd4:	003cd306 	br	4024 <__alt_data_end+0xf8004024>
    4cd8:	d8803317 	ldw	r2,204(sp)
    4cdc:	143fffc4 	addi	r16,r2,-1
    4ce0:	043f560e 	bge	zero,r16,4a3c <__alt_data_end+0xf8004a3c>
    4ce4:	07000404 	movi	fp,16
    4ce8:	e403530e 	bge	fp,r16,5a38 <___svfprintf_internal_r+0x20f4>
    4cec:	01400074 	movhi	r5,1
    4cf0:	2957ad84 	addi	r5,r5,24246
    4cf4:	d9402c15 	stw	r5,176(sp)
    4cf8:	01c001c4 	movi	r7,7
    4cfc:	dd002d17 	ldw	r20,180(sp)
    4d00:	00000306 	br	4d10 <___svfprintf_internal_r+0x13cc>
    4d04:	843ffc04 	addi	r16,r16,-16
    4d08:	b5800204 	addi	r22,r22,8
    4d0c:	e400130e 	bge	fp,r16,4d5c <___svfprintf_internal_r+0x1418>
    4d10:	18c00404 	addi	r3,r3,16
    4d14:	8c400044 	addi	r17,r17,1
    4d18:	b5400015 	stw	r21,0(r22)
    4d1c:	b7000115 	stw	fp,4(r22)
    4d20:	d8c02015 	stw	r3,128(sp)
    4d24:	dc401f15 	stw	r17,124(sp)
    4d28:	3c7ff60e 	bge	r7,r17,4d04 <__alt_data_end+0xf8004d04>
    4d2c:	d9801e04 	addi	r6,sp,120
    4d30:	a00b883a 	mov	r5,r20
    4d34:	9809883a 	mov	r4,r19
    4d38:	d9c03d15 	stw	r7,244(sp)
    4d3c:	000bdc80 	call	bdc8 <__ssprint_r>
    4d40:	d9c03d17 	ldw	r7,244(sp)
    4d44:	103be61e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4d48:	843ffc04 	addi	r16,r16,-16
    4d4c:	d8c02017 	ldw	r3,128(sp)
    4d50:	dc401f17 	ldw	r17,124(sp)
    4d54:	dd800404 	addi	r22,sp,16
    4d58:	e43fed16 	blt	fp,r16,4d10 <__alt_data_end+0xf8004d10>
    4d5c:	d8802c17 	ldw	r2,176(sp)
    4d60:	1c07883a 	add	r3,r3,r16
    4d64:	8c400044 	addi	r17,r17,1
    4d68:	b0800015 	stw	r2,0(r22)
    4d6c:	b4000115 	stw	r16,4(r22)
    4d70:	d8c02015 	stw	r3,128(sp)
    4d74:	dc401f15 	stw	r17,124(sp)
    4d78:	008001c4 	movi	r2,7
    4d7c:	147f2e0e 	bge	r2,r17,4a38 <__alt_data_end+0xf8004a38>
    4d80:	d9402d17 	ldw	r5,180(sp)
    4d84:	d9801e04 	addi	r6,sp,120
    4d88:	9809883a 	mov	r4,r19
    4d8c:	000bdc80 	call	bdc8 <__ssprint_r>
    4d90:	103bd31e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4d94:	d8c02017 	ldw	r3,128(sp)
    4d98:	dc401f17 	ldw	r17,124(sp)
    4d9c:	dd800404 	addi	r22,sp,16
    4da0:	003f2606 	br	4a3c <__alt_data_end+0xf8004a3c>
    4da4:	9080040c 	andi	r2,r18,16
    4da8:	1000c326 	beq	r2,zero,50b8 <___svfprintf_internal_r+0x1774>
    4dac:	d9402e17 	ldw	r5,184(sp)
    4db0:	2d000017 	ldw	r20,0(r5)
    4db4:	29400104 	addi	r5,r5,4
    4db8:	d9402e15 	stw	r5,184(sp)
    4dbc:	a02dd7fa 	srai	r22,r20,31
    4dc0:	b005883a 	mov	r2,r22
    4dc4:	103c430e 	bge	r2,zero,3ed4 <__alt_data_end+0xf8003ed4>
    4dc8:	d9402a17 	ldw	r5,168(sp)
    4dcc:	0529c83a 	sub	r20,zero,r20
    4dd0:	07000b44 	movi	fp,45
    4dd4:	a004c03a 	cmpne	r2,r20,zero
    4dd8:	05adc83a 	sub	r22,zero,r22
    4ddc:	df002785 	stb	fp,158(sp)
    4de0:	b0adc83a 	sub	r22,r22,r2
    4de4:	28022e16 	blt	r5,zero,56a0 <___svfprintf_internal_r+0x1d5c>
    4de8:	00bfdfc4 	movi	r2,-129
    4dec:	90a4703a 	and	r18,r18,r2
    4df0:	003c3f06 	br	3ef0 <__alt_data_end+0xf8003ef0>
    4df4:	9080100c 	andi	r2,r18,64
    4df8:	d8002785 	stb	zero,158(sp)
    4dfc:	10012526 	beq	r2,zero,5294 <___svfprintf_internal_r+0x1950>
    4e00:	d9402e17 	ldw	r5,184(sp)
    4e04:	d8c02a17 	ldw	r3,168(sp)
    4e08:	002d883a 	mov	r22,zero
    4e0c:	28800104 	addi	r2,r5,4
    4e10:	2d00000b 	ldhu	r20,0(r5)
    4e14:	183fa20e 	bge	r3,zero,4ca0 <__alt_data_end+0xf8004ca0>
    4e18:	d8802e15 	stw	r2,184(sp)
    4e1c:	0039883a 	mov	fp,zero
    4e20:	a584b03a 	or	r2,r20,r22
    4e24:	103c321e 	bne	r2,zero,3ef0 <__alt_data_end+0xf8003ef0>
    4e28:	00800044 	movi	r2,1
    4e2c:	003e5006 	br	4770 <__alt_data_end+0xf8004770>
    4e30:	d9402d17 	ldw	r5,180(sp)
    4e34:	d9801e04 	addi	r6,sp,120
    4e38:	9809883a 	mov	r4,r19
    4e3c:	000bdc80 	call	bdc8 <__ssprint_r>
    4e40:	103ba71e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4e44:	d8c02017 	ldw	r3,128(sp)
    4e48:	da000404 	addi	r8,sp,16
    4e4c:	d9003217 	ldw	r4,200(sp)
    4e50:	d8802617 	ldw	r2,152(sp)
    4e54:	d9403317 	ldw	r5,204(sp)
    4e58:	8123883a 	add	r17,r16,r4
    4e5c:	11400216 	blt	r2,r5,4e68 <___svfprintf_internal_r+0x1524>
    4e60:	9100004c 	andi	r4,r18,1
    4e64:	20000d26 	beq	r4,zero,4e9c <___svfprintf_internal_r+0x1558>
    4e68:	d9003817 	ldw	r4,224(sp)
    4e6c:	d9403417 	ldw	r5,208(sp)
    4e70:	1907883a 	add	r3,r3,r4
    4e74:	d9001f17 	ldw	r4,124(sp)
    4e78:	41400015 	stw	r5,0(r8)
    4e7c:	d9403817 	ldw	r5,224(sp)
    4e80:	21000044 	addi	r4,r4,1
    4e84:	d8c02015 	stw	r3,128(sp)
    4e88:	41400115 	stw	r5,4(r8)
    4e8c:	d9001f15 	stw	r4,124(sp)
    4e90:	014001c4 	movi	r5,7
    4e94:	2901dc16 	blt	r5,r4,5608 <___svfprintf_internal_r+0x1cc4>
    4e98:	42000204 	addi	r8,r8,8
    4e9c:	d9003317 	ldw	r4,204(sp)
    4ea0:	8121883a 	add	r16,r16,r4
    4ea4:	2085c83a 	sub	r2,r4,r2
    4ea8:	8461c83a 	sub	r16,r16,r17
    4eac:	1400010e 	bge	r2,r16,4eb4 <___svfprintf_internal_r+0x1570>
    4eb0:	1021883a 	mov	r16,r2
    4eb4:	04000a0e 	bge	zero,r16,4ee0 <___svfprintf_internal_r+0x159c>
    4eb8:	d9001f17 	ldw	r4,124(sp)
    4ebc:	1c07883a 	add	r3,r3,r16
    4ec0:	44400015 	stw	r17,0(r8)
    4ec4:	21000044 	addi	r4,r4,1
    4ec8:	44000115 	stw	r16,4(r8)
    4ecc:	d8c02015 	stw	r3,128(sp)
    4ed0:	d9001f15 	stw	r4,124(sp)
    4ed4:	014001c4 	movi	r5,7
    4ed8:	2901e616 	blt	r5,r4,5674 <___svfprintf_internal_r+0x1d30>
    4edc:	42000204 	addi	r8,r8,8
    4ee0:	8001f616 	blt	r16,zero,56bc <___svfprintf_internal_r+0x1d78>
    4ee4:	1421c83a 	sub	r16,r2,r16
    4ee8:	043cfa0e 	bge	zero,r16,42d4 <__alt_data_end+0xf80042d4>
    4eec:	04400404 	movi	r17,16
    4ef0:	d8801f17 	ldw	r2,124(sp)
    4ef4:	8c3edd0e 	bge	r17,r16,4a6c <__alt_data_end+0xf8004a6c>
    4ef8:	01400074 	movhi	r5,1
    4efc:	2957ad84 	addi	r5,r5,24246
    4f00:	d9402c15 	stw	r5,176(sp)
    4f04:	058001c4 	movi	r22,7
    4f08:	dd002d17 	ldw	r20,180(sp)
    4f0c:	00000306 	br	4f1c <___svfprintf_internal_r+0x15d8>
    4f10:	42000204 	addi	r8,r8,8
    4f14:	843ffc04 	addi	r16,r16,-16
    4f18:	8c3ed70e 	bge	r17,r16,4a78 <__alt_data_end+0xf8004a78>
    4f1c:	18c00404 	addi	r3,r3,16
    4f20:	10800044 	addi	r2,r2,1
    4f24:	45400015 	stw	r21,0(r8)
    4f28:	44400115 	stw	r17,4(r8)
    4f2c:	d8c02015 	stw	r3,128(sp)
    4f30:	d8801f15 	stw	r2,124(sp)
    4f34:	b0bff60e 	bge	r22,r2,4f10 <__alt_data_end+0xf8004f10>
    4f38:	d9801e04 	addi	r6,sp,120
    4f3c:	a00b883a 	mov	r5,r20
    4f40:	9809883a 	mov	r4,r19
    4f44:	000bdc80 	call	bdc8 <__ssprint_r>
    4f48:	103b651e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4f4c:	d8c02017 	ldw	r3,128(sp)
    4f50:	d8801f17 	ldw	r2,124(sp)
    4f54:	da000404 	addi	r8,sp,16
    4f58:	003fee06 	br	4f14 <__alt_data_end+0xf8004f14>
    4f5c:	9088703a 	and	r4,r18,r2
    4f60:	203e8d1e 	bne	r4,zero,4998 <__alt_data_end+0xf8004998>
    4f64:	dc401f17 	ldw	r17,124(sp)
    4f68:	40800115 	stw	r2,4(r8)
    4f6c:	44000015 	stw	r16,0(r8)
    4f70:	8c400044 	addi	r17,r17,1
    4f74:	d8c02015 	stw	r3,128(sp)
    4f78:	dc401f15 	stw	r17,124(sp)
    4f7c:	008001c4 	movi	r2,7
    4f80:	147f7f16 	blt	r2,r17,4d80 <__alt_data_end+0xf8004d80>
    4f84:	45800204 	addi	r22,r8,8
    4f88:	003eac06 	br	4a3c <__alt_data_end+0xf8004a3c>
    4f8c:	d9402d17 	ldw	r5,180(sp)
    4f90:	d9801e04 	addi	r6,sp,120
    4f94:	9809883a 	mov	r4,r19
    4f98:	000bdc80 	call	bdc8 <__ssprint_r>
    4f9c:	103b501e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4fa0:	d8c02017 	ldw	r3,128(sp)
    4fa4:	dc401f17 	ldw	r17,124(sp)
    4fa8:	da000404 	addi	r8,sp,16
    4fac:	003e8406 	br	49c0 <__alt_data_end+0xf80049c0>
    4fb0:	d9402d17 	ldw	r5,180(sp)
    4fb4:	d9801e04 	addi	r6,sp,120
    4fb8:	9809883a 	mov	r4,r19
    4fbc:	000bdc80 	call	bdc8 <__ssprint_r>
    4fc0:	103b471e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4fc4:	d8c02017 	ldw	r3,128(sp)
    4fc8:	dc401f17 	ldw	r17,124(sp)
    4fcc:	dd800404 	addi	r22,sp,16
    4fd0:	003e8606 	br	49ec <__alt_data_end+0xf80049ec>
    4fd4:	0029883a 	mov	r20,zero
    4fd8:	a5000c04 	addi	r20,r20,48
    4fdc:	dc001dc4 	addi	r16,sp,119
    4fe0:	dd001dc5 	stb	r20,119(sp)
    4fe4:	003f3806 	br	4cc8 <__alt_data_end+0xf8004cc8>
    4fe8:	d9402d17 	ldw	r5,180(sp)
    4fec:	d9801e04 	addi	r6,sp,120
    4ff0:	9809883a 	mov	r4,r19
    4ff4:	000bdc80 	call	bdc8 <__ssprint_r>
    4ff8:	103b391e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    4ffc:	d8c02017 	ldw	r3,128(sp)
    5000:	da000404 	addi	r8,sp,16
    5004:	003c7306 	br	41d4 <__alt_data_end+0xf80041d4>
    5008:	d9003617 	ldw	r4,216(sp)
    500c:	d9403717 	ldw	r5,220(sp)
    5010:	da003e15 	stw	r8,248(sp)
    5014:	000bc780 	call	bc78 <__fpclassifyd>
    5018:	da003e17 	ldw	r8,248(sp)
    501c:	1000bd1e 	bne	r2,zero,5314 <___svfprintf_internal_r+0x19d0>
    5020:	008011c4 	movi	r2,71
    5024:	14411e0e 	bge	r2,r17,54a0 <___svfprintf_internal_r+0x1b5c>
    5028:	04000074 	movhi	r16,1
    502c:	8417a004 	addi	r16,r16,24192
    5030:	00c000c4 	movi	r3,3
    5034:	00bfdfc4 	movi	r2,-129
    5038:	d8c02915 	stw	r3,164(sp)
    503c:	90a4703a 	and	r18,r18,r2
    5040:	df002783 	ldbu	fp,158(sp)
    5044:	d8c02b15 	stw	r3,172(sp)
    5048:	d8002a15 	stw	zero,168(sp)
    504c:	d8003215 	stw	zero,200(sp)
    5050:	003bfa06 	br	403c <__alt_data_end+0xf800403c>
    5054:	9080100c 	andi	r2,r18,64
    5058:	d8002785 	stb	zero,158(sp)
    505c:	10009426 	beq	r2,zero,52b0 <___svfprintf_internal_r+0x196c>
    5060:	d9402e17 	ldw	r5,184(sp)
    5064:	d8c02a17 	ldw	r3,168(sp)
    5068:	002d883a 	mov	r22,zero
    506c:	28800104 	addi	r2,r5,4
    5070:	2d00000b 	ldhu	r20,0(r5)
    5074:	183ec10e 	bge	r3,zero,4b7c <__alt_data_end+0xf8004b7c>
    5078:	a586b03a 	or	r3,r20,r22
    507c:	d8802e15 	stw	r2,184(sp)
    5080:	183ec21e 	bne	r3,zero,4b8c <__alt_data_end+0xf8004b8c>
    5084:	0039883a 	mov	fp,zero
    5088:	0005883a 	mov	r2,zero
    508c:	003db806 	br	4770 <__alt_data_end+0xf8004770>
    5090:	d8c02e17 	ldw	r3,184(sp)
    5094:	d9002e17 	ldw	r4,184(sp)
    5098:	d9402e17 	ldw	r5,184(sp)
    509c:	18c00017 	ldw	r3,0(r3)
    50a0:	21000117 	ldw	r4,4(r4)
    50a4:	29400204 	addi	r5,r5,8
    50a8:	d8c03615 	stw	r3,216(sp)
    50ac:	d9003715 	stw	r4,220(sp)
    50b0:	d9402e15 	stw	r5,184(sp)
    50b4:	003b5a06 	br	3e20 <__alt_data_end+0xf8003e20>
    50b8:	9080100c 	andi	r2,r18,64
    50bc:	10010726 	beq	r2,zero,54dc <___svfprintf_internal_r+0x1b98>
    50c0:	d8802e17 	ldw	r2,184(sp)
    50c4:	1500000f 	ldh	r20,0(r2)
    50c8:	10800104 	addi	r2,r2,4
    50cc:	d8802e15 	stw	r2,184(sp)
    50d0:	a02dd7fa 	srai	r22,r20,31
    50d4:	b005883a 	mov	r2,r22
    50d8:	003b7d06 	br	3ed0 <__alt_data_end+0xf8003ed0>
    50dc:	9080100c 	andi	r2,r18,64
    50e0:	10010526 	beq	r2,zero,54f8 <___svfprintf_internal_r+0x1bb4>
    50e4:	d8c02e17 	ldw	r3,184(sp)
    50e8:	002d883a 	mov	r22,zero
    50ec:	1d00000b 	ldhu	r20,0(r3)
    50f0:	18c00104 	addi	r3,r3,4
    50f4:	d8c02e15 	stw	r3,184(sp)
    50f8:	003ce206 	br	4484 <__alt_data_end+0xf8004484>
    50fc:	bc400007 	ldb	r17,0(r23)
    5100:	003a6506 	br	3a98 <__alt_data_end+0xf8003a98>
    5104:	9080040c 	andi	r2,r18,16
    5108:	10010126 	beq	r2,zero,5510 <___svfprintf_internal_r+0x1bcc>
    510c:	d8c02e17 	ldw	r3,184(sp)
    5110:	d9002f17 	ldw	r4,188(sp)
    5114:	18800017 	ldw	r2,0(r3)
    5118:	18c00104 	addi	r3,r3,4
    511c:	d8c02e15 	stw	r3,184(sp)
    5120:	11000015 	stw	r4,0(r2)
    5124:	003a3206 	br	39f0 <__alt_data_end+0xf80039f0>
    5128:	d9002a17 	ldw	r4,168(sp)
    512c:	d8002785 	stb	zero,158(sp)
    5130:	203d8d16 	blt	r4,zero,4768 <__alt_data_end+0xf8004768>
    5134:	00bfdfc4 	movi	r2,-129
    5138:	90a4703a 	and	r18,r18,r2
    513c:	003ad506 	br	3c94 <__alt_data_end+0xf8003c94>
    5140:	01400074 	movhi	r5,1
    5144:	2957ad84 	addi	r5,r5,24246
    5148:	d9402c15 	stw	r5,176(sp)
    514c:	d9402c17 	ldw	r5,176(sp)
    5150:	1c47883a 	add	r3,r3,r17
    5154:	10800044 	addi	r2,r2,1
    5158:	41400015 	stw	r5,0(r8)
    515c:	44400115 	stw	r17,4(r8)
    5160:	d8c02015 	stw	r3,128(sp)
    5164:	d8801f15 	stw	r2,124(sp)
    5168:	010001c4 	movi	r4,7
    516c:	20bf3016 	blt	r4,r2,4e30 <__alt_data_end+0xf8004e30>
    5170:	42000204 	addi	r8,r8,8
    5174:	003f3506 	br	4e4c <__alt_data_end+0xf8004e4c>
    5178:	01000074 	movhi	r4,1
    517c:	2117ad84 	addi	r4,r4,24246
    5180:	d9002c15 	stw	r4,176(sp)
    5184:	003c3c06 	br	4278 <__alt_data_end+0xf8004278>
    5188:	d9402d17 	ldw	r5,180(sp)
    518c:	d9801e04 	addi	r6,sp,120
    5190:	9809883a 	mov	r4,r19
    5194:	000bdc80 	call	bdc8 <__ssprint_r>
    5198:	103ad11e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    519c:	d8c02017 	ldw	r3,128(sp)
    51a0:	da000404 	addi	r8,sp,16
    51a4:	003d9306 	br	47f4 <__alt_data_end+0xf80047f4>
    51a8:	d8801f17 	ldw	r2,124(sp)
    51ac:	01400074 	movhi	r5,1
    51b0:	01000044 	movi	r4,1
    51b4:	18c00044 	addi	r3,r3,1
    51b8:	10800044 	addi	r2,r2,1
    51bc:	2957ad04 	addi	r5,r5,24244
    51c0:	41000115 	stw	r4,4(r8)
    51c4:	41400015 	stw	r5,0(r8)
    51c8:	d8c02015 	stw	r3,128(sp)
    51cc:	d8801f15 	stw	r2,124(sp)
    51d0:	010001c4 	movi	r4,7
    51d4:	2080b516 	blt	r4,r2,54ac <___svfprintf_internal_r+0x1b68>
    51d8:	42000204 	addi	r8,r8,8
    51dc:	8800041e 	bne	r17,zero,51f0 <___svfprintf_internal_r+0x18ac>
    51e0:	d8803317 	ldw	r2,204(sp)
    51e4:	1000021e 	bne	r2,zero,51f0 <___svfprintf_internal_r+0x18ac>
    51e8:	9080004c 	andi	r2,r18,1
    51ec:	103c3926 	beq	r2,zero,42d4 <__alt_data_end+0xf80042d4>
    51f0:	d9003817 	ldw	r4,224(sp)
    51f4:	d8801f17 	ldw	r2,124(sp)
    51f8:	d9403417 	ldw	r5,208(sp)
    51fc:	20c7883a 	add	r3,r4,r3
    5200:	10800044 	addi	r2,r2,1
    5204:	41000115 	stw	r4,4(r8)
    5208:	41400015 	stw	r5,0(r8)
    520c:	d8c02015 	stw	r3,128(sp)
    5210:	d8801f15 	stw	r2,124(sp)
    5214:	010001c4 	movi	r4,7
    5218:	20818016 	blt	r4,r2,581c <___svfprintf_internal_r+0x1ed8>
    521c:	42000204 	addi	r8,r8,8
    5220:	0463c83a 	sub	r17,zero,r17
    5224:	0440cb0e 	bge	zero,r17,5554 <___svfprintf_internal_r+0x1c10>
    5228:	05800404 	movi	r22,16
    522c:	b440e80e 	bge	r22,r17,55d0 <___svfprintf_internal_r+0x1c8c>
    5230:	01400074 	movhi	r5,1
    5234:	2957ad84 	addi	r5,r5,24246
    5238:	d9402c15 	stw	r5,176(sp)
    523c:	070001c4 	movi	fp,7
    5240:	dd002d17 	ldw	r20,180(sp)
    5244:	00000306 	br	5254 <___svfprintf_internal_r+0x1910>
    5248:	42000204 	addi	r8,r8,8
    524c:	8c7ffc04 	addi	r17,r17,-16
    5250:	b440e20e 	bge	r22,r17,55dc <___svfprintf_internal_r+0x1c98>
    5254:	18c00404 	addi	r3,r3,16
    5258:	10800044 	addi	r2,r2,1
    525c:	45400015 	stw	r21,0(r8)
    5260:	45800115 	stw	r22,4(r8)
    5264:	d8c02015 	stw	r3,128(sp)
    5268:	d8801f15 	stw	r2,124(sp)
    526c:	e0bff60e 	bge	fp,r2,5248 <__alt_data_end+0xf8005248>
    5270:	d9801e04 	addi	r6,sp,120
    5274:	a00b883a 	mov	r5,r20
    5278:	9809883a 	mov	r4,r19
    527c:	000bdc80 	call	bdc8 <__ssprint_r>
    5280:	103a971e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    5284:	d8c02017 	ldw	r3,128(sp)
    5288:	d8801f17 	ldw	r2,124(sp)
    528c:	da000404 	addi	r8,sp,16
    5290:	003fee06 	br	524c <__alt_data_end+0xf800524c>
    5294:	d9002e17 	ldw	r4,184(sp)
    5298:	d9402a17 	ldw	r5,168(sp)
    529c:	002d883a 	mov	r22,zero
    52a0:	20800104 	addi	r2,r4,4
    52a4:	25000017 	ldw	r20,0(r4)
    52a8:	283e7d0e 	bge	r5,zero,4ca0 <__alt_data_end+0xf8004ca0>
    52ac:	003eda06 	br	4e18 <__alt_data_end+0xf8004e18>
    52b0:	d9002e17 	ldw	r4,184(sp)
    52b4:	d9402a17 	ldw	r5,168(sp)
    52b8:	002d883a 	mov	r22,zero
    52bc:	20800104 	addi	r2,r4,4
    52c0:	25000017 	ldw	r20,0(r4)
    52c4:	283e2d0e 	bge	r5,zero,4b7c <__alt_data_end+0xf8004b7c>
    52c8:	003f6b06 	br	5078 <__alt_data_end+0xf8005078>
    52cc:	d8c02e15 	stw	r3,184(sp)
    52d0:	0039883a 	mov	fp,zero
    52d4:	003ed206 	br	4e20 <__alt_data_end+0xf8004e20>
    52d8:	bc400043 	ldbu	r17,1(r23)
    52dc:	84000814 	ori	r16,r16,32
    52e0:	bdc00044 	addi	r23,r23,1
    52e4:	8c403fcc 	andi	r17,r17,255
    52e8:	8c40201c 	xori	r17,r17,128
    52ec:	8c7fe004 	addi	r17,r17,-128
    52f0:	0039e906 	br	3a98 <__alt_data_end+0xf8003a98>
    52f4:	d9402d17 	ldw	r5,180(sp)
    52f8:	d9801e04 	addi	r6,sp,120
    52fc:	9809883a 	mov	r4,r19
    5300:	000bdc80 	call	bdc8 <__ssprint_r>
    5304:	103a761e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    5308:	d8c02017 	ldw	r3,128(sp)
    530c:	da000404 	addi	r8,sp,16
    5310:	003d4a06 	br	483c <__alt_data_end+0xf800483c>
    5314:	d9002a17 	ldw	r4,168(sp)
    5318:	05bff7c4 	movi	r22,-33
    531c:	00bfffc4 	movi	r2,-1
    5320:	8dac703a 	and	r22,r17,r22
    5324:	20806a26 	beq	r4,r2,54d0 <___svfprintf_internal_r+0x1b8c>
    5328:	008011c4 	movi	r2,71
    532c:	b0813726 	beq	r22,r2,580c <___svfprintf_internal_r+0x1ec8>
    5330:	d9003717 	ldw	r4,220(sp)
    5334:	90c04014 	ori	r3,r18,256
    5338:	d8c02c15 	stw	r3,176(sp)
    533c:	20015d16 	blt	r4,zero,58b4 <___svfprintf_internal_r+0x1f70>
    5340:	dd003717 	ldw	r20,220(sp)
    5344:	d8002905 	stb	zero,164(sp)
    5348:	00801984 	movi	r2,102
    534c:	88814026 	beq	r17,r2,5850 <___svfprintf_internal_r+0x1f0c>
    5350:	00801184 	movi	r2,70
    5354:	88817126 	beq	r17,r2,591c <___svfprintf_internal_r+0x1fd8>
    5358:	00801144 	movi	r2,69
    535c:	b0816226 	beq	r22,r2,58e8 <___svfprintf_internal_r+0x1fa4>
    5360:	d8c02a17 	ldw	r3,168(sp)
    5364:	d8802104 	addi	r2,sp,132
    5368:	d8800315 	stw	r2,12(sp)
    536c:	d9403617 	ldw	r5,216(sp)
    5370:	d8802504 	addi	r2,sp,148
    5374:	d8800215 	stw	r2,8(sp)
    5378:	d8802604 	addi	r2,sp,152
    537c:	d8c00015 	stw	r3,0(sp)
    5380:	d8800115 	stw	r2,4(sp)
    5384:	01c00084 	movi	r7,2
    5388:	a00d883a 	mov	r6,r20
    538c:	9809883a 	mov	r4,r19
    5390:	d8c03d15 	stw	r3,244(sp)
    5394:	da003e15 	stw	r8,248(sp)
    5398:	00083e40 	call	83e4 <_dtoa_r>
    539c:	1021883a 	mov	r16,r2
    53a0:	008019c4 	movi	r2,103
    53a4:	d8c03d17 	ldw	r3,244(sp)
    53a8:	da003e17 	ldw	r8,248(sp)
    53ac:	8880e726 	beq	r17,r2,574c <___svfprintf_internal_r+0x1e08>
    53b0:	008011c4 	movi	r2,71
    53b4:	8880d426 	beq	r17,r2,5708 <___svfprintf_internal_r+0x1dc4>
    53b8:	80f9883a 	add	fp,r16,r3
    53bc:	d9003617 	ldw	r4,216(sp)
    53c0:	000d883a 	mov	r6,zero
    53c4:	000f883a 	mov	r7,zero
    53c8:	a00b883a 	mov	r5,r20
    53cc:	da003e15 	stw	r8,248(sp)
    53d0:	0010eb80 	call	10eb8 <__eqdf2>
    53d4:	da003e17 	ldw	r8,248(sp)
    53d8:	1000e426 	beq	r2,zero,576c <___svfprintf_internal_r+0x1e28>
    53dc:	d8802117 	ldw	r2,132(sp)
    53e0:	1700062e 	bgeu	r2,fp,53fc <___svfprintf_internal_r+0x1ab8>
    53e4:	01000c04 	movi	r4,48
    53e8:	10c00044 	addi	r3,r2,1
    53ec:	d8c02115 	stw	r3,132(sp)
    53f0:	11000005 	stb	r4,0(r2)
    53f4:	d8802117 	ldw	r2,132(sp)
    53f8:	173ffb36 	bltu	r2,fp,53e8 <__alt_data_end+0xf80053e8>
    53fc:	1405c83a 	sub	r2,r2,r16
    5400:	d8803315 	stw	r2,204(sp)
    5404:	008011c4 	movi	r2,71
    5408:	b080c526 	beq	r22,r2,5720 <___svfprintf_internal_r+0x1ddc>
    540c:	00801944 	movi	r2,101
    5410:	1441d80e 	bge	r2,r17,5b74 <___svfprintf_internal_r+0x2230>
    5414:	d8c02617 	ldw	r3,152(sp)
    5418:	00801984 	movi	r2,102
    541c:	d8c03215 	stw	r3,200(sp)
    5420:	88813426 	beq	r17,r2,58f4 <___svfprintf_internal_r+0x1fb0>
    5424:	d8c03217 	ldw	r3,200(sp)
    5428:	d9003317 	ldw	r4,204(sp)
    542c:	19012516 	blt	r3,r4,58c4 <___svfprintf_internal_r+0x1f80>
    5430:	9480004c 	andi	r18,r18,1
    5434:	9001841e 	bne	r18,zero,5a48 <___svfprintf_internal_r+0x2104>
    5438:	1805883a 	mov	r2,r3
    543c:	1801cb16 	blt	r3,zero,5b6c <___svfprintf_internal_r+0x2228>
    5440:	d8c03217 	ldw	r3,200(sp)
    5444:	044019c4 	movi	r17,103
    5448:	d8c02b15 	stw	r3,172(sp)
    544c:	df002907 	ldb	fp,164(sp)
    5450:	e000a61e 	bne	fp,zero,56ec <___svfprintf_internal_r+0x1da8>
    5454:	df002783 	ldbu	fp,158(sp)
    5458:	d8802915 	stw	r2,164(sp)
    545c:	dc802c17 	ldw	r18,176(sp)
    5460:	d8002a15 	stw	zero,168(sp)
    5464:	003af506 	br	403c <__alt_data_end+0xf800403c>
    5468:	04000074 	movhi	r16,1
    546c:	84179d04 	addi	r16,r16,24180
    5470:	003a7e06 	br	3e6c <__alt_data_end+0xf8003e6c>
    5474:	d9003917 	ldw	r4,228(sp)
    5478:	04001004 	movi	r16,64
    547c:	800b883a 	mov	r5,r16
    5480:	00029940 	call	2994 <_malloc_r>
    5484:	d9002d17 	ldw	r4,180(sp)
    5488:	20800015 	stw	r2,0(r4)
    548c:	20800415 	stw	r2,16(r4)
    5490:	1001d026 	beq	r2,zero,5bd4 <___svfprintf_internal_r+0x2290>
    5494:	d8802d17 	ldw	r2,180(sp)
    5498:	14000515 	stw	r16,20(r2)
    549c:	00394406 	br	39b0 <__alt_data_end+0xf80039b0>
    54a0:	04000074 	movhi	r16,1
    54a4:	84179f04 	addi	r16,r16,24188
    54a8:	003ee106 	br	5030 <__alt_data_end+0xf8005030>
    54ac:	d9402d17 	ldw	r5,180(sp)
    54b0:	d9801e04 	addi	r6,sp,120
    54b4:	9809883a 	mov	r4,r19
    54b8:	000bdc80 	call	bdc8 <__ssprint_r>
    54bc:	103a081e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    54c0:	dc402617 	ldw	r17,152(sp)
    54c4:	d8c02017 	ldw	r3,128(sp)
    54c8:	da000404 	addi	r8,sp,16
    54cc:	003f4306 	br	51dc <__alt_data_end+0xf80051dc>
    54d0:	01400184 	movi	r5,6
    54d4:	d9402a15 	stw	r5,168(sp)
    54d8:	003f9506 	br	5330 <__alt_data_end+0xf8005330>
    54dc:	d8c02e17 	ldw	r3,184(sp)
    54e0:	1d000017 	ldw	r20,0(r3)
    54e4:	18c00104 	addi	r3,r3,4
    54e8:	d8c02e15 	stw	r3,184(sp)
    54ec:	a02dd7fa 	srai	r22,r20,31
    54f0:	b005883a 	mov	r2,r22
    54f4:	003a7606 	br	3ed0 <__alt_data_end+0xf8003ed0>
    54f8:	d9002e17 	ldw	r4,184(sp)
    54fc:	002d883a 	mov	r22,zero
    5500:	25000017 	ldw	r20,0(r4)
    5504:	21000104 	addi	r4,r4,4
    5508:	d9002e15 	stw	r4,184(sp)
    550c:	003bdd06 	br	4484 <__alt_data_end+0xf8004484>
    5510:	9480100c 	andi	r18,r18,64
    5514:	90006e26 	beq	r18,zero,56d0 <___svfprintf_internal_r+0x1d8c>
    5518:	d9402e17 	ldw	r5,184(sp)
    551c:	d8c02f17 	ldw	r3,188(sp)
    5520:	28800017 	ldw	r2,0(r5)
    5524:	29400104 	addi	r5,r5,4
    5528:	d9402e15 	stw	r5,184(sp)
    552c:	10c0000d 	sth	r3,0(r2)
    5530:	00392f06 	br	39f0 <__alt_data_end+0xf80039f0>
    5534:	d9402d17 	ldw	r5,180(sp)
    5538:	d9801e04 	addi	r6,sp,120
    553c:	9809883a 	mov	r4,r19
    5540:	000bdc80 	call	bdc8 <__ssprint_r>
    5544:	1039e61e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    5548:	d8c02017 	ldw	r3,128(sp)
    554c:	d8801f17 	ldw	r2,124(sp)
    5550:	da000404 	addi	r8,sp,16
    5554:	d9403317 	ldw	r5,204(sp)
    5558:	10800044 	addi	r2,r2,1
    555c:	44000015 	stw	r16,0(r8)
    5560:	28c7883a 	add	r3,r5,r3
    5564:	003b5506 	br	42bc <__alt_data_end+0xf80042bc>
    5568:	8009883a 	mov	r4,r16
    556c:	df003e15 	stw	fp,248(sp)
    5570:	00038ac0 	call	38ac <strlen>
    5574:	d8802b15 	stw	r2,172(sp)
    5578:	da003e17 	ldw	r8,248(sp)
    557c:	103c160e 	bge	r2,zero,45d8 <__alt_data_end+0xf80045d8>
    5580:	0005883a 	mov	r2,zero
    5584:	003c1406 	br	45d8 <__alt_data_end+0xf80045d8>
    5588:	00bfffc4 	movi	r2,-1
    558c:	0039d906 	br	3cf4 <__alt_data_end+0xf8003cf4>
    5590:	01000074 	movhi	r4,1
    5594:	2117b184 	addi	r4,r4,24262
    5598:	d9003515 	stw	r4,212(sp)
    559c:	003ae406 	br	4130 <__alt_data_end+0xf8004130>
    55a0:	013fffc4 	movi	r4,-1
    55a4:	0039fa06 	br	3d90 <__alt_data_end+0xf8003d90>
    55a8:	d9402d17 	ldw	r5,180(sp)
    55ac:	d9801e04 	addi	r6,sp,120
    55b0:	9809883a 	mov	r4,r19
    55b4:	000bdc80 	call	bdc8 <__ssprint_r>
    55b8:	1039c91e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    55bc:	d8c02017 	ldw	r3,128(sp)
    55c0:	da000404 	addi	r8,sp,16
    55c4:	003d8406 	br	4bd8 <__alt_data_end+0xf8004bd8>
    55c8:	0023883a 	mov	r17,zero
    55cc:	003d8306 	br	4bdc <__alt_data_end+0xf8004bdc>
    55d0:	01000074 	movhi	r4,1
    55d4:	2117ad84 	addi	r4,r4,24246
    55d8:	d9002c15 	stw	r4,176(sp)
    55dc:	d9002c17 	ldw	r4,176(sp)
    55e0:	1c47883a 	add	r3,r3,r17
    55e4:	10800044 	addi	r2,r2,1
    55e8:	41000015 	stw	r4,0(r8)
    55ec:	44400115 	stw	r17,4(r8)
    55f0:	d8c02015 	stw	r3,128(sp)
    55f4:	d8801f15 	stw	r2,124(sp)
    55f8:	010001c4 	movi	r4,7
    55fc:	20bfcd16 	blt	r4,r2,5534 <__alt_data_end+0xf8005534>
    5600:	42000204 	addi	r8,r8,8
    5604:	003fd306 	br	5554 <__alt_data_end+0xf8005554>
    5608:	d9402d17 	ldw	r5,180(sp)
    560c:	d9801e04 	addi	r6,sp,120
    5610:	9809883a 	mov	r4,r19
    5614:	000bdc80 	call	bdc8 <__ssprint_r>
    5618:	1039b11e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    561c:	d8802617 	ldw	r2,152(sp)
    5620:	d8c02017 	ldw	r3,128(sp)
    5624:	da000404 	addi	r8,sp,16
    5628:	003e1c06 	br	4e9c <__alt_data_end+0xf8004e9c>
    562c:	d8802a17 	ldw	r2,168(sp)
    5630:	00c00184 	movi	r3,6
    5634:	1880012e 	bgeu	r3,r2,563c <___svfprintf_internal_r+0x1cf8>
    5638:	1805883a 	mov	r2,r3
    563c:	d8802b15 	stw	r2,172(sp)
    5640:	1000f316 	blt	r2,zero,5a10 <___svfprintf_internal_r+0x20cc>
    5644:	04000074 	movhi	r16,1
    5648:	d8802915 	stw	r2,164(sp)
    564c:	dd002e15 	stw	r20,184(sp)
    5650:	d8002a15 	stw	zero,168(sp)
    5654:	d8003215 	stw	zero,200(sp)
    5658:	8417ab04 	addi	r16,r16,24236
    565c:	0039883a 	mov	fp,zero
    5660:	003a7d06 	br	4058 <__alt_data_end+0xf8004058>
    5664:	01000074 	movhi	r4,1
    5668:	2117b184 	addi	r4,r4,24262
    566c:	d9003515 	stw	r4,212(sp)
    5670:	003b3d06 	br	4368 <__alt_data_end+0xf8004368>
    5674:	d9402d17 	ldw	r5,180(sp)
    5678:	d9801e04 	addi	r6,sp,120
    567c:	9809883a 	mov	r4,r19
    5680:	000bdc80 	call	bdc8 <__ssprint_r>
    5684:	1039961e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    5688:	d8802617 	ldw	r2,152(sp)
    568c:	d9403317 	ldw	r5,204(sp)
    5690:	d8c02017 	ldw	r3,128(sp)
    5694:	da000404 	addi	r8,sp,16
    5698:	2885c83a 	sub	r2,r5,r2
    569c:	003e1006 	br	4ee0 <__alt_data_end+0xf8004ee0>
    56a0:	00800044 	movi	r2,1
    56a4:	10803fcc 	andi	r2,r2,255
    56a8:	00c00044 	movi	r3,1
    56ac:	10fa1026 	beq	r2,r3,3ef0 <__alt_data_end+0xf8003ef0>
    56b0:	00c00084 	movi	r3,2
    56b4:	10fb8226 	beq	r2,r3,44c0 <__alt_data_end+0xf80044c0>
    56b8:	003a4206 	br	3fc4 <__alt_data_end+0xf8003fc4>
    56bc:	0021883a 	mov	r16,zero
    56c0:	003e0806 	br	4ee4 <__alt_data_end+0xf8004ee4>
    56c4:	07000b44 	movi	fp,45
    56c8:	df002785 	stb	fp,158(sp)
    56cc:	0039e306 	br	3e5c <__alt_data_end+0xf8003e5c>
    56d0:	d9002e17 	ldw	r4,184(sp)
    56d4:	d9402f17 	ldw	r5,188(sp)
    56d8:	20800017 	ldw	r2,0(r4)
    56dc:	21000104 	addi	r4,r4,4
    56e0:	d9002e15 	stw	r4,184(sp)
    56e4:	11400015 	stw	r5,0(r2)
    56e8:	0038c106 	br	39f0 <__alt_data_end+0xf80039f0>
    56ec:	00c00b44 	movi	r3,45
    56f0:	d8c02785 	stb	r3,158(sp)
    56f4:	d8802915 	stw	r2,164(sp)
    56f8:	dc802c17 	ldw	r18,176(sp)
    56fc:	d8002a15 	stw	zero,168(sp)
    5700:	07000b44 	movi	fp,45
    5704:	003a5106 	br	404c <__alt_data_end+0xf800404c>
    5708:	9080004c 	andi	r2,r18,1
    570c:	1000941e 	bne	r2,zero,5960 <___svfprintf_internal_r+0x201c>
    5710:	d8802117 	ldw	r2,132(sp)
    5714:	1405c83a 	sub	r2,r2,r16
    5718:	d8803315 	stw	r2,204(sp)
    571c:	b441151e 	bne	r22,r17,5b74 <___svfprintf_internal_r+0x2230>
    5720:	dd802617 	ldw	r22,152(sp)
    5724:	00bfff44 	movi	r2,-3
    5728:	b0801a16 	blt	r22,r2,5794 <___svfprintf_internal_r+0x1e50>
    572c:	d9402a17 	ldw	r5,168(sp)
    5730:	2d801816 	blt	r5,r22,5794 <___svfprintf_internal_r+0x1e50>
    5734:	dd803215 	stw	r22,200(sp)
    5738:	003f3a06 	br	5424 <__alt_data_end+0xf8005424>
    573c:	1025883a 	mov	r18,r2
    5740:	0039883a 	mov	fp,zero
    5744:	00800084 	movi	r2,2
    5748:	003fd606 	br	56a4 <__alt_data_end+0xf80056a4>
    574c:	9080004c 	andi	r2,r18,1
    5750:	103f191e 	bne	r2,zero,53b8 <__alt_data_end+0xf80053b8>
    5754:	d8802117 	ldw	r2,132(sp)
    5758:	003f2806 	br	53fc <__alt_data_end+0xf80053fc>
    575c:	01000074 	movhi	r4,1
    5760:	2117ad84 	addi	r4,r4,24246
    5764:	d9002c15 	stw	r4,176(sp)
    5768:	003c7c06 	br	495c <__alt_data_end+0xf800495c>
    576c:	e005883a 	mov	r2,fp
    5770:	003f2206 	br	53fc <__alt_data_end+0xf80053fc>
    5774:	d9002a17 	ldw	r4,168(sp)
    5778:	df002783 	ldbu	fp,158(sp)
    577c:	dd002e15 	stw	r20,184(sp)
    5780:	d9002915 	stw	r4,164(sp)
    5784:	d9002b15 	stw	r4,172(sp)
    5788:	d8002a15 	stw	zero,168(sp)
    578c:	d8003215 	stw	zero,200(sp)
    5790:	003a2a06 	br	403c <__alt_data_end+0xf800403c>
    5794:	8c7fff84 	addi	r17,r17,-2
    5798:	b5bfffc4 	addi	r22,r22,-1
    579c:	dd802615 	stw	r22,152(sp)
    57a0:	dc4022c5 	stb	r17,139(sp)
    57a4:	b000c316 	blt	r22,zero,5ab4 <___svfprintf_internal_r+0x2170>
    57a8:	00800ac4 	movi	r2,43
    57ac:	d8802305 	stb	r2,140(sp)
    57b0:	00800244 	movi	r2,9
    57b4:	15806e16 	blt	r2,r22,5970 <___svfprintf_internal_r+0x202c>
    57b8:	00800c04 	movi	r2,48
    57bc:	b5800c04 	addi	r22,r22,48
    57c0:	d8802345 	stb	r2,141(sp)
    57c4:	dd802385 	stb	r22,142(sp)
    57c8:	d88023c4 	addi	r2,sp,143
    57cc:	df0022c4 	addi	fp,sp,139
    57d0:	d8c03317 	ldw	r3,204(sp)
    57d4:	1739c83a 	sub	fp,r2,fp
    57d8:	d9003317 	ldw	r4,204(sp)
    57dc:	e0c7883a 	add	r3,fp,r3
    57e0:	df003b15 	stw	fp,236(sp)
    57e4:	d8c02b15 	stw	r3,172(sp)
    57e8:	00800044 	movi	r2,1
    57ec:	1100b70e 	bge	r2,r4,5acc <___svfprintf_internal_r+0x2188>
    57f0:	d8c02b17 	ldw	r3,172(sp)
    57f4:	18c00044 	addi	r3,r3,1
    57f8:	d8c02b15 	stw	r3,172(sp)
    57fc:	1805883a 	mov	r2,r3
    5800:	1800b016 	blt	r3,zero,5ac4 <___svfprintf_internal_r+0x2180>
    5804:	d8003215 	stw	zero,200(sp)
    5808:	003f1006 	br	544c <__alt_data_end+0xf800544c>
    580c:	d8802a17 	ldw	r2,168(sp)
    5810:	103ec71e 	bne	r2,zero,5330 <__alt_data_end+0xf8005330>
    5814:	dc002a15 	stw	r16,168(sp)
    5818:	003ec506 	br	5330 <__alt_data_end+0xf8005330>
    581c:	d9402d17 	ldw	r5,180(sp)
    5820:	d9801e04 	addi	r6,sp,120
    5824:	9809883a 	mov	r4,r19
    5828:	000bdc80 	call	bdc8 <__ssprint_r>
    582c:	10392c1e 	bne	r2,zero,3ce0 <__alt_data_end+0xf8003ce0>
    5830:	dc402617 	ldw	r17,152(sp)
    5834:	d8c02017 	ldw	r3,128(sp)
    5838:	d8801f17 	ldw	r2,124(sp)
    583c:	da000404 	addi	r8,sp,16
    5840:	003e7706 	br	5220 <__alt_data_end+0xf8005220>
    5844:	182f883a 	mov	r23,r3
    5848:	d8002a15 	stw	zero,168(sp)
    584c:	00389306 	br	3a9c <__alt_data_end+0xf8003a9c>
    5850:	d8c02a17 	ldw	r3,168(sp)
    5854:	d8802104 	addi	r2,sp,132
    5858:	d8800315 	stw	r2,12(sp)
    585c:	d9403617 	ldw	r5,216(sp)
    5860:	d8802504 	addi	r2,sp,148
    5864:	d8800215 	stw	r2,8(sp)
    5868:	d8802604 	addi	r2,sp,152
    586c:	d8c00015 	stw	r3,0(sp)
    5870:	9809883a 	mov	r4,r19
    5874:	d8800115 	stw	r2,4(sp)
    5878:	01c000c4 	movi	r7,3
    587c:	a00d883a 	mov	r6,r20
    5880:	da003e15 	stw	r8,248(sp)
    5884:	00083e40 	call	83e4 <_dtoa_r>
    5888:	d9002a17 	ldw	r4,168(sp)
    588c:	da003e17 	ldw	r8,248(sp)
    5890:	1021883a 	mov	r16,r2
    5894:	1139883a 	add	fp,r2,r4
    5898:	2007883a 	mov	r3,r4
    589c:	81000007 	ldb	r4,0(r16)
    58a0:	00800c04 	movi	r2,48
    58a4:	20806f26 	beq	r4,r2,5a64 <___svfprintf_internal_r+0x2120>
    58a8:	d8c02617 	ldw	r3,152(sp)
    58ac:	e0f9883a 	add	fp,fp,r3
    58b0:	003ec206 	br	53bc <__alt_data_end+0xf80053bc>
    58b4:	00c00b44 	movi	r3,45
    58b8:	2520003c 	xorhi	r20,r4,32768
    58bc:	d8c02905 	stb	r3,164(sp)
    58c0:	003ea106 	br	5348 <__alt_data_end+0xf8005348>
    58c4:	d8c03217 	ldw	r3,200(sp)
    58c8:	00c0890e 	bge	zero,r3,5af0 <___svfprintf_internal_r+0x21ac>
    58cc:	00800044 	movi	r2,1
    58d0:	d9003317 	ldw	r4,204(sp)
    58d4:	1105883a 	add	r2,r2,r4
    58d8:	d8802b15 	stw	r2,172(sp)
    58dc:	10005f16 	blt	r2,zero,5a5c <___svfprintf_internal_r+0x2118>
    58e0:	044019c4 	movi	r17,103
    58e4:	003ed906 	br	544c <__alt_data_end+0xf800544c>
    58e8:	d9002a17 	ldw	r4,168(sp)
    58ec:	20c00044 	addi	r3,r4,1
    58f0:	003e9c06 	br	5364 <__alt_data_end+0xf8005364>
    58f4:	d9002a17 	ldw	r4,168(sp)
    58f8:	00c0680e 	bge	zero,r3,5a9c <___svfprintf_internal_r+0x2158>
    58fc:	2000461e 	bne	r4,zero,5a18 <___svfprintf_internal_r+0x20d4>
    5900:	9480004c 	andi	r18,r18,1
    5904:	9000441e 	bne	r18,zero,5a18 <___svfprintf_internal_r+0x20d4>
    5908:	1805883a 	mov	r2,r3
    590c:	1800a116 	blt	r3,zero,5b94 <___svfprintf_internal_r+0x2250>
    5910:	d8c03217 	ldw	r3,200(sp)
    5914:	d8c02b15 	stw	r3,172(sp)
    5918:	003ecc06 	br	544c <__alt_data_end+0xf800544c>
    591c:	d9402a17 	ldw	r5,168(sp)
    5920:	d8802104 	addi	r2,sp,132
    5924:	d8800315 	stw	r2,12(sp)
    5928:	d9400015 	stw	r5,0(sp)
    592c:	d8802504 	addi	r2,sp,148
    5930:	d9403617 	ldw	r5,216(sp)
    5934:	d8800215 	stw	r2,8(sp)
    5938:	d8802604 	addi	r2,sp,152
    593c:	d8800115 	stw	r2,4(sp)
    5940:	01c000c4 	movi	r7,3
    5944:	a00d883a 	mov	r6,r20
    5948:	9809883a 	mov	r4,r19
    594c:	da003e15 	stw	r8,248(sp)
    5950:	00083e40 	call	83e4 <_dtoa_r>
    5954:	d8c02a17 	ldw	r3,168(sp)
    5958:	da003e17 	ldw	r8,248(sp)
    595c:	1021883a 	mov	r16,r2
    5960:	00801184 	movi	r2,70
    5964:	80f9883a 	add	fp,r16,r3
    5968:	88bfcc26 	beq	r17,r2,589c <__alt_data_end+0xf800589c>
    596c:	003e9306 	br	53bc <__alt_data_end+0xf80053bc>
    5970:	df0022c4 	addi	fp,sp,139
    5974:	dc002a15 	stw	r16,168(sp)
    5978:	9829883a 	mov	r20,r19
    597c:	e021883a 	mov	r16,fp
    5980:	4027883a 	mov	r19,r8
    5984:	b009883a 	mov	r4,r22
    5988:	01400284 	movi	r5,10
    598c:	00013500 	call	1350 <__modsi3>
    5990:	10800c04 	addi	r2,r2,48
    5994:	843fffc4 	addi	r16,r16,-1
    5998:	b009883a 	mov	r4,r22
    599c:	01400284 	movi	r5,10
    59a0:	80800005 	stb	r2,0(r16)
    59a4:	00012cc0 	call	12cc <__divsi3>
    59a8:	102d883a 	mov	r22,r2
    59ac:	00800244 	movi	r2,9
    59b0:	15bff416 	blt	r2,r22,5984 <__alt_data_end+0xf8005984>
    59b4:	9811883a 	mov	r8,r19
    59b8:	b0800c04 	addi	r2,r22,48
    59bc:	a027883a 	mov	r19,r20
    59c0:	8029883a 	mov	r20,r16
    59c4:	a17fffc4 	addi	r5,r20,-1
    59c8:	a0bfffc5 	stb	r2,-1(r20)
    59cc:	dc002a17 	ldw	r16,168(sp)
    59d0:	2f00782e 	bgeu	r5,fp,5bb4 <___svfprintf_internal_r+0x2270>
    59d4:	d9c02384 	addi	r7,sp,142
    59d8:	3d0fc83a 	sub	r7,r7,r20
    59dc:	d9002344 	addi	r4,sp,141
    59e0:	e1cf883a 	add	r7,fp,r7
    59e4:	00000106 	br	59ec <___svfprintf_internal_r+0x20a8>
    59e8:	28800003 	ldbu	r2,0(r5)
    59ec:	20800005 	stb	r2,0(r4)
    59f0:	21000044 	addi	r4,r4,1
    59f4:	29400044 	addi	r5,r5,1
    59f8:	21fffb1e 	bne	r4,r7,59e8 <__alt_data_end+0xf80059e8>
    59fc:	d8802304 	addi	r2,sp,140
    5a00:	1505c83a 	sub	r2,r2,r20
    5a04:	d8c02344 	addi	r3,sp,141
    5a08:	1885883a 	add	r2,r3,r2
    5a0c:	003f7006 	br	57d0 <__alt_data_end+0xf80057d0>
    5a10:	0005883a 	mov	r2,zero
    5a14:	003f0b06 	br	5644 <__alt_data_end+0xf8005644>
    5a18:	d9002a17 	ldw	r4,168(sp)
    5a1c:	d8c03217 	ldw	r3,200(sp)
    5a20:	20800044 	addi	r2,r4,1
    5a24:	1885883a 	add	r2,r3,r2
    5a28:	d8802b15 	stw	r2,172(sp)
    5a2c:	103e870e 	bge	r2,zero,544c <__alt_data_end+0xf800544c>
    5a30:	0005883a 	mov	r2,zero
    5a34:	003e8506 	br	544c <__alt_data_end+0xf800544c>
    5a38:	01000074 	movhi	r4,1
    5a3c:	2117ad84 	addi	r4,r4,24246
    5a40:	d9002c15 	stw	r4,176(sp)
    5a44:	003cc506 	br	4d5c <__alt_data_end+0xf8004d5c>
    5a48:	d8c03217 	ldw	r3,200(sp)
    5a4c:	18c00044 	addi	r3,r3,1
    5a50:	d8c02b15 	stw	r3,172(sp)
    5a54:	1805883a 	mov	r2,r3
    5a58:	183fa10e 	bge	r3,zero,58e0 <__alt_data_end+0xf80058e0>
    5a5c:	0005883a 	mov	r2,zero
    5a60:	003f9f06 	br	58e0 <__alt_data_end+0xf80058e0>
    5a64:	d9003617 	ldw	r4,216(sp)
    5a68:	000d883a 	mov	r6,zero
    5a6c:	000f883a 	mov	r7,zero
    5a70:	a00b883a 	mov	r5,r20
    5a74:	d8c03d15 	stw	r3,244(sp)
    5a78:	da003e15 	stw	r8,248(sp)
    5a7c:	0010eb80 	call	10eb8 <__eqdf2>
    5a80:	d8c03d17 	ldw	r3,244(sp)
    5a84:	da003e17 	ldw	r8,248(sp)
    5a88:	103f8726 	beq	r2,zero,58a8 <__alt_data_end+0xf80058a8>
    5a8c:	00800044 	movi	r2,1
    5a90:	10c7c83a 	sub	r3,r2,r3
    5a94:	d8c02615 	stw	r3,152(sp)
    5a98:	003f8406 	br	58ac <__alt_data_end+0xf80058ac>
    5a9c:	20000e1e 	bne	r4,zero,5ad8 <___svfprintf_internal_r+0x2194>
    5aa0:	9480004c 	andi	r18,r18,1
    5aa4:	90000c1e 	bne	r18,zero,5ad8 <___svfprintf_internal_r+0x2194>
    5aa8:	00800044 	movi	r2,1
    5aac:	d8802b15 	stw	r2,172(sp)
    5ab0:	003e6606 	br	544c <__alt_data_end+0xf800544c>
    5ab4:	00800b44 	movi	r2,45
    5ab8:	05adc83a 	sub	r22,zero,r22
    5abc:	d8802305 	stb	r2,140(sp)
    5ac0:	003f3b06 	br	57b0 <__alt_data_end+0xf80057b0>
    5ac4:	0005883a 	mov	r2,zero
    5ac8:	003f4e06 	br	5804 <__alt_data_end+0xf8005804>
    5acc:	90a4703a 	and	r18,r18,r2
    5ad0:	903f4a26 	beq	r18,zero,57fc <__alt_data_end+0xf80057fc>
    5ad4:	003f4606 	br	57f0 <__alt_data_end+0xf80057f0>
    5ad8:	d8c02a17 	ldw	r3,168(sp)
    5adc:	18c00084 	addi	r3,r3,2
    5ae0:	d8c02b15 	stw	r3,172(sp)
    5ae4:	1805883a 	mov	r2,r3
    5ae8:	183e580e 	bge	r3,zero,544c <__alt_data_end+0xf800544c>
    5aec:	003fd006 	br	5a30 <__alt_data_end+0xf8005a30>
    5af0:	00800084 	movi	r2,2
    5af4:	10c5c83a 	sub	r2,r2,r3
    5af8:	003f7506 	br	58d0 <__alt_data_end+0xf80058d0>
    5afc:	d9402e17 	ldw	r5,184(sp)
    5b00:	d9002e17 	ldw	r4,184(sp)
    5b04:	bc400043 	ldbu	r17,1(r23)
    5b08:	29400017 	ldw	r5,0(r5)
    5b0c:	20800104 	addi	r2,r4,4
    5b10:	d8802e15 	stw	r2,184(sp)
    5b14:	d9402a15 	stw	r5,168(sp)
    5b18:	182f883a 	mov	r23,r3
    5b1c:	283df10e 	bge	r5,zero,52e4 <__alt_data_end+0xf80052e4>
    5b20:	8c403fcc 	andi	r17,r17,255
    5b24:	017fffc4 	movi	r5,-1
    5b28:	8c40201c 	xori	r17,r17,128
    5b2c:	d9402a15 	stw	r5,168(sp)
    5b30:	8c7fe004 	addi	r17,r17,-128
    5b34:	0037d806 	br	3a98 <__alt_data_end+0xf8003a98>
    5b38:	9080004c 	andi	r2,r18,1
    5b3c:	0039883a 	mov	fp,zero
    5b40:	10000726 	beq	r2,zero,5b60 <___svfprintf_internal_r+0x221c>
    5b44:	d8c02817 	ldw	r3,160(sp)
    5b48:	dc001dc4 	addi	r16,sp,119
    5b4c:	00800c04 	movi	r2,48
    5b50:	1c07c83a 	sub	r3,r3,r16
    5b54:	d8801dc5 	stb	r2,119(sp)
    5b58:	d8c02b15 	stw	r3,172(sp)
    5b5c:	00393106 	br	4024 <__alt_data_end+0xf8004024>
    5b60:	d8002b15 	stw	zero,172(sp)
    5b64:	dc001e04 	addi	r16,sp,120
    5b68:	00392e06 	br	4024 <__alt_data_end+0xf8004024>
    5b6c:	0005883a 	mov	r2,zero
    5b70:	003e3306 	br	5440 <__alt_data_end+0xf8005440>
    5b74:	dd802617 	ldw	r22,152(sp)
    5b78:	003f0706 	br	5798 <__alt_data_end+0xf8005798>
    5b7c:	d8c02b03 	ldbu	r3,172(sp)
    5b80:	d8c02785 	stb	r3,158(sp)
    5b84:	003a3506 	br	445c <__alt_data_end+0xf800445c>
    5b88:	d8c02b03 	ldbu	r3,172(sp)
    5b8c:	d8c02785 	stb	r3,158(sp)
    5b90:	003a1706 	br	43f0 <__alt_data_end+0xf80043f0>
    5b94:	0005883a 	mov	r2,zero
    5b98:	003f5d06 	br	5910 <__alt_data_end+0xf8005910>
    5b9c:	d8c02b03 	ldbu	r3,172(sp)
    5ba0:	d8c02785 	stb	r3,158(sp)
    5ba4:	0038f306 	br	3f74 <__alt_data_end+0xf8003f74>
    5ba8:	d8c02b03 	ldbu	r3,172(sp)
    5bac:	d8c02785 	stb	r3,158(sp)
    5bb0:	0038be06 	br	3eac <__alt_data_end+0xf8003eac>
    5bb4:	d8802344 	addi	r2,sp,141
    5bb8:	003f0506 	br	57d0 <__alt_data_end+0xf80057d0>
    5bbc:	d8c02b03 	ldbu	r3,172(sp)
    5bc0:	d8c02785 	stb	r3,158(sp)
    5bc4:	00388b06 	br	3df4 <__alt_data_end+0xf8003df4>
    5bc8:	d8c02b03 	ldbu	r3,172(sp)
    5bcc:	d8c02785 	stb	r3,158(sp)
    5bd0:	003ad706 	br	4730 <__alt_data_end+0xf8004730>
    5bd4:	d9403917 	ldw	r5,228(sp)
    5bd8:	00800304 	movi	r2,12
    5bdc:	28800015 	stw	r2,0(r5)
    5be0:	00bfffc4 	movi	r2,-1
    5be4:	00384306 	br	3cf4 <__alt_data_end+0xf8003cf4>
    5be8:	d8c02b03 	ldbu	r3,172(sp)
    5bec:	d8c02785 	stb	r3,158(sp)
    5bf0:	003ab606 	br	46cc <__alt_data_end+0xf80046cc>
    5bf4:	d8c02b03 	ldbu	r3,172(sp)
    5bf8:	d8c02785 	stb	r3,158(sp)
    5bfc:	003a8906 	br	4624 <__alt_data_end+0xf8004624>

00005c00 <___vfprintf_internal_r>:
    5c00:	deffb804 	addi	sp,sp,-288
    5c04:	dfc04715 	stw	ra,284(sp)
    5c08:	ddc04515 	stw	r23,276(sp)
    5c0c:	dd404315 	stw	r21,268(sp)
    5c10:	d9002d15 	stw	r4,180(sp)
    5c14:	282f883a 	mov	r23,r5
    5c18:	302b883a 	mov	r21,r6
    5c1c:	d9c02e15 	stw	r7,184(sp)
    5c20:	df004615 	stw	fp,280(sp)
    5c24:	dd804415 	stw	r22,272(sp)
    5c28:	dd004215 	stw	r20,264(sp)
    5c2c:	dcc04115 	stw	r19,260(sp)
    5c30:	dc804015 	stw	r18,256(sp)
    5c34:	dc403f15 	stw	r17,252(sp)
    5c38:	dc003e15 	stw	r16,248(sp)
    5c3c:	000a1e40 	call	a1e4 <_localeconv_r>
    5c40:	10800017 	ldw	r2,0(r2)
    5c44:	1009883a 	mov	r4,r2
    5c48:	d8803415 	stw	r2,208(sp)
    5c4c:	00038ac0 	call	38ac <strlen>
    5c50:	d8803715 	stw	r2,220(sp)
    5c54:	d8802d17 	ldw	r2,180(sp)
    5c58:	10000226 	beq	r2,zero,5c64 <___vfprintf_internal_r+0x64>
    5c5c:	10800e17 	ldw	r2,56(r2)
    5c60:	1000fb26 	beq	r2,zero,6050 <___vfprintf_internal_r+0x450>
    5c64:	b880030b 	ldhu	r2,12(r23)
    5c68:	10c8000c 	andi	r3,r2,8192
    5c6c:	1800061e 	bne	r3,zero,5c88 <___vfprintf_internal_r+0x88>
    5c70:	b9001917 	ldw	r4,100(r23)
    5c74:	00f7ffc4 	movi	r3,-8193
    5c78:	10880014 	ori	r2,r2,8192
    5c7c:	20c6703a 	and	r3,r4,r3
    5c80:	b880030d 	sth	r2,12(r23)
    5c84:	b8c01915 	stw	r3,100(r23)
    5c88:	10c0020c 	andi	r3,r2,8
    5c8c:	1800c326 	beq	r3,zero,5f9c <___vfprintf_internal_r+0x39c>
    5c90:	b8c00417 	ldw	r3,16(r23)
    5c94:	1800c126 	beq	r3,zero,5f9c <___vfprintf_internal_r+0x39c>
    5c98:	1080068c 	andi	r2,r2,26
    5c9c:	00c00284 	movi	r3,10
    5ca0:	10c0c626 	beq	r2,r3,5fbc <___vfprintf_internal_r+0x3bc>
    5ca4:	d8c00404 	addi	r3,sp,16
    5ca8:	05000074 	movhi	r20,1
    5cac:	d9001e04 	addi	r4,sp,120
    5cb0:	a517b584 	addi	r20,r20,24278
    5cb4:	d8c01e15 	stw	r3,120(sp)
    5cb8:	d8002015 	stw	zero,128(sp)
    5cbc:	d8001f15 	stw	zero,124(sp)
    5cc0:	d8003315 	stw	zero,204(sp)
    5cc4:	d8003615 	stw	zero,216(sp)
    5cc8:	d8003815 	stw	zero,224(sp)
    5ccc:	1811883a 	mov	r8,r3
    5cd0:	d8003915 	stw	zero,228(sp)
    5cd4:	d8003a15 	stw	zero,232(sp)
    5cd8:	d8002f15 	stw	zero,188(sp)
    5cdc:	d9002815 	stw	r4,160(sp)
    5ce0:	a8800007 	ldb	r2,0(r21)
    5ce4:	10028b26 	beq	r2,zero,6714 <___vfprintf_internal_r+0xb14>
    5ce8:	00c00944 	movi	r3,37
    5cec:	a823883a 	mov	r17,r21
    5cf0:	10c0021e 	bne	r2,r3,5cfc <___vfprintf_internal_r+0xfc>
    5cf4:	00001406 	br	5d48 <___vfprintf_internal_r+0x148>
    5cf8:	10c00326 	beq	r2,r3,5d08 <___vfprintf_internal_r+0x108>
    5cfc:	8c400044 	addi	r17,r17,1
    5d00:	88800007 	ldb	r2,0(r17)
    5d04:	103ffc1e 	bne	r2,zero,5cf8 <__alt_data_end+0xf8005cf8>
    5d08:	8d61c83a 	sub	r16,r17,r21
    5d0c:	80000e26 	beq	r16,zero,5d48 <___vfprintf_internal_r+0x148>
    5d10:	d8c02017 	ldw	r3,128(sp)
    5d14:	d8801f17 	ldw	r2,124(sp)
    5d18:	45400015 	stw	r21,0(r8)
    5d1c:	1c07883a 	add	r3,r3,r16
    5d20:	10800044 	addi	r2,r2,1
    5d24:	d8c02015 	stw	r3,128(sp)
    5d28:	44000115 	stw	r16,4(r8)
    5d2c:	d8801f15 	stw	r2,124(sp)
    5d30:	00c001c4 	movi	r3,7
    5d34:	1880a916 	blt	r3,r2,5fdc <___vfprintf_internal_r+0x3dc>
    5d38:	42000204 	addi	r8,r8,8
    5d3c:	d9402f17 	ldw	r5,188(sp)
    5d40:	2c0b883a 	add	r5,r5,r16
    5d44:	d9402f15 	stw	r5,188(sp)
    5d48:	88800007 	ldb	r2,0(r17)
    5d4c:	1000aa26 	beq	r2,zero,5ff8 <___vfprintf_internal_r+0x3f8>
    5d50:	8d400044 	addi	r21,r17,1
    5d54:	8c400047 	ldb	r17,1(r17)
    5d58:	0021883a 	mov	r16,zero
    5d5c:	00bfffc4 	movi	r2,-1
    5d60:	0025883a 	mov	r18,zero
    5d64:	dc002905 	stb	r16,164(sp)
    5d68:	d8002785 	stb	zero,158(sp)
    5d6c:	d8002b05 	stb	zero,172(sp)
    5d70:	d8802a15 	stw	r2,168(sp)
    5d74:	d8003115 	stw	zero,196(sp)
    5d78:	04c01604 	movi	r19,88
    5d7c:	05800244 	movi	r22,9
    5d80:	9021883a 	mov	r16,r18
    5d84:	4039883a 	mov	fp,r8
    5d88:	ad400044 	addi	r21,r21,1
    5d8c:	88bff804 	addi	r2,r17,-32
    5d90:	98833236 	bltu	r19,r2,6a5c <___vfprintf_internal_r+0xe5c>
    5d94:	100490ba 	slli	r2,r2,2
    5d98:	00c00034 	movhi	r3,0
    5d9c:	18d76b04 	addi	r3,r3,23980
    5da0:	10c5883a 	add	r2,r2,r3
    5da4:	10800017 	ldw	r2,0(r2)
    5da8:	1000683a 	jmp	r2
    5dac:	00006954 	movui	zero,421
    5db0:	00006a5c 	xori	zero,zero,425
    5db4:	00006a5c 	xori	zero,zero,425
    5db8:	00006974 	movhi	zero,421
    5dbc:	00006a5c 	xori	zero,zero,425
    5dc0:	00006a5c 	xori	zero,zero,425
    5dc4:	00006a5c 	xori	zero,zero,425
    5dc8:	00006a5c 	xori	zero,zero,425
    5dcc:	00006a5c 	xori	zero,zero,425
    5dd0:	00006a5c 	xori	zero,zero,425
    5dd4:	0000605c 	xori	zero,zero,385
    5dd8:	00006864 	muli	zero,zero,417
    5ddc:	00006a5c 	xori	zero,zero,425
    5de0:	00005f20 	cmpeqi	zero,zero,380
    5de4:	00006080 	call	608 <main+0xb4>
    5de8:	00006a5c 	xori	zero,zero,425
    5dec:	000060d0 	cmplti	zero,zero,387
    5df0:	000060dc 	xori	zero,zero,387
    5df4:	000060dc 	xori	zero,zero,387
    5df8:	000060dc 	xori	zero,zero,387
    5dfc:	000060dc 	xori	zero,zero,387
    5e00:	000060dc 	xori	zero,zero,387
    5e04:	000060dc 	xori	zero,zero,387
    5e08:	000060dc 	xori	zero,zero,387
    5e0c:	000060dc 	xori	zero,zero,387
    5e10:	000060dc 	xori	zero,zero,387
    5e14:	00006a5c 	xori	zero,zero,425
    5e18:	00006a5c 	xori	zero,zero,425
    5e1c:	00006a5c 	xori	zero,zero,425
    5e20:	00006a5c 	xori	zero,zero,425
    5e24:	00006a5c 	xori	zero,zero,425
    5e28:	00006a5c 	xori	zero,zero,425
    5e2c:	00006a5c 	xori	zero,zero,425
    5e30:	00006a5c 	xori	zero,zero,425
    5e34:	00006a5c 	xori	zero,zero,425
    5e38:	00006a5c 	xori	zero,zero,425
    5e3c:	00006118 	cmpnei	zero,zero,388
    5e40:	000061e0 	cmpeqi	zero,zero,391
    5e44:	00006a5c 	xori	zero,zero,425
    5e48:	000061e0 	cmpeqi	zero,zero,391
    5e4c:	00006a5c 	xori	zero,zero,425
    5e50:	00006a5c 	xori	zero,zero,425
    5e54:	00006a5c 	xori	zero,zero,425
    5e58:	00006a5c 	xori	zero,zero,425
    5e5c:	0000628c 	andi	zero,zero,394
    5e60:	00006a5c 	xori	zero,zero,425
    5e64:	00006a5c 	xori	zero,zero,425
    5e68:	00006298 	cmpnei	zero,zero,394
    5e6c:	00006a5c 	xori	zero,zero,425
    5e70:	00006a5c 	xori	zero,zero,425
    5e74:	00006a5c 	xori	zero,zero,425
    5e78:	00006a5c 	xori	zero,zero,425
    5e7c:	00006a5c 	xori	zero,zero,425
    5e80:	0000671c 	xori	zero,zero,412
    5e84:	00006a5c 	xori	zero,zero,425
    5e88:	00006a5c 	xori	zero,zero,425
    5e8c:	00006788 	cmpgei	zero,zero,414
    5e90:	00006a5c 	xori	zero,zero,425
    5e94:	00006a5c 	xori	zero,zero,425
    5e98:	00006a5c 	xori	zero,zero,425
    5e9c:	00006a5c 	xori	zero,zero,425
    5ea0:	00006a5c 	xori	zero,zero,425
    5ea4:	00006a5c 	xori	zero,zero,425
    5ea8:	00006a5c 	xori	zero,zero,425
    5eac:	00006a5c 	xori	zero,zero,425
    5eb0:	00006a5c 	xori	zero,zero,425
    5eb4:	00006a5c 	xori	zero,zero,425
    5eb8:	00006a00 	call	6a0 <main+0x14c>
    5ebc:	00006980 	call	698 <main+0x144>
    5ec0:	000061e0 	cmpeqi	zero,zero,391
    5ec4:	000061e0 	cmpeqi	zero,zero,391
    5ec8:	000061e0 	cmpeqi	zero,zero,391
    5ecc:	000069a0 	cmpeqi	zero,zero,422
    5ed0:	00006980 	call	698 <main+0x144>
    5ed4:	00006a5c 	xori	zero,zero,425
    5ed8:	00006a5c 	xori	zero,zero,425
    5edc:	000069ac 	andhi	zero,zero,422
    5ee0:	00006a5c 	xori	zero,zero,425
    5ee4:	000069c0 	call	69c <main+0x148>
    5ee8:	00006844 	movi	zero,417
    5eec:	00005f2c 	andhi	zero,zero,380
    5ef0:	0000687c 	xorhi	zero,zero,417
    5ef4:	00006a5c 	xori	zero,zero,425
    5ef8:	00006888 	cmpgei	zero,zero,418
    5efc:	00006a5c 	xori	zero,zero,425
    5f00:	000068ec 	andhi	zero,zero,419
    5f04:	00006a5c 	xori	zero,zero,425
    5f08:	00006a5c 	xori	zero,zero,425
    5f0c:	0000690c 	andi	zero,zero,420
    5f10:	d8c03117 	ldw	r3,196(sp)
    5f14:	d8802e15 	stw	r2,184(sp)
    5f18:	00c7c83a 	sub	r3,zero,r3
    5f1c:	d8c03115 	stw	r3,196(sp)
    5f20:	84000114 	ori	r16,r16,4
    5f24:	ac400007 	ldb	r17,0(r21)
    5f28:	003f9706 	br	5d88 <__alt_data_end+0xf8005d88>
    5f2c:	00800c04 	movi	r2,48
    5f30:	d8802705 	stb	r2,156(sp)
    5f34:	00801e04 	movi	r2,120
    5f38:	d8802745 	stb	r2,157(sp)
    5f3c:	d9002a17 	ldw	r4,168(sp)
    5f40:	d8802e17 	ldw	r2,184(sp)
    5f44:	d8002785 	stb	zero,158(sp)
    5f48:	e011883a 	mov	r8,fp
    5f4c:	10c00104 	addi	r3,r2,4
    5f50:	14c00017 	ldw	r19,0(r2)
    5f54:	002d883a 	mov	r22,zero
    5f58:	80800094 	ori	r2,r16,2
    5f5c:	2002ca16 	blt	r4,zero,6a88 <___vfprintf_internal_r+0xe88>
    5f60:	00bfdfc4 	movi	r2,-129
    5f64:	80a4703a 	and	r18,r16,r2
    5f68:	d8c02e15 	stw	r3,184(sp)
    5f6c:	94800094 	ori	r18,r18,2
    5f70:	9802b41e 	bne	r19,zero,6a44 <___vfprintf_internal_r+0xe44>
    5f74:	01400074 	movhi	r5,1
    5f78:	2957a604 	addi	r5,r5,24216
    5f7c:	d9403915 	stw	r5,228(sp)
    5f80:	04401e04 	movi	r17,120
    5f84:	d8802a17 	ldw	r2,168(sp)
    5f88:	0039883a 	mov	fp,zero
    5f8c:	1001fa26 	beq	r2,zero,6778 <___vfprintf_internal_r+0xb78>
    5f90:	0027883a 	mov	r19,zero
    5f94:	002d883a 	mov	r22,zero
    5f98:	00021906 	br	6800 <___vfprintf_internal_r+0xc00>
    5f9c:	d9002d17 	ldw	r4,180(sp)
    5fa0:	b80b883a 	mov	r5,r23
    5fa4:	00080140 	call	8014 <__swsetup_r>
    5fa8:	1005dc1e 	bne	r2,zero,771c <___vfprintf_internal_r+0x1b1c>
    5fac:	b880030b 	ldhu	r2,12(r23)
    5fb0:	00c00284 	movi	r3,10
    5fb4:	1080068c 	andi	r2,r2,26
    5fb8:	10ff3a1e 	bne	r2,r3,5ca4 <__alt_data_end+0xf8005ca4>
    5fbc:	b880038f 	ldh	r2,14(r23)
    5fc0:	103f3816 	blt	r2,zero,5ca4 <__alt_data_end+0xf8005ca4>
    5fc4:	d9c02e17 	ldw	r7,184(sp)
    5fc8:	d9002d17 	ldw	r4,180(sp)
    5fcc:	a80d883a 	mov	r6,r21
    5fd0:	b80b883a 	mov	r5,r23
    5fd4:	0007ef80 	call	7ef8 <__sbprintf>
    5fd8:	00001106 	br	6020 <___vfprintf_internal_r+0x420>
    5fdc:	d9002d17 	ldw	r4,180(sp)
    5fe0:	d9801e04 	addi	r6,sp,120
    5fe4:	b80b883a 	mov	r5,r23
    5fe8:	000d4340 	call	d434 <__sprint_r>
    5fec:	1000081e 	bne	r2,zero,6010 <___vfprintf_internal_r+0x410>
    5ff0:	da000404 	addi	r8,sp,16
    5ff4:	003f5106 	br	5d3c <__alt_data_end+0xf8005d3c>
    5ff8:	d8802017 	ldw	r2,128(sp)
    5ffc:	10000426 	beq	r2,zero,6010 <___vfprintf_internal_r+0x410>
    6000:	d9002d17 	ldw	r4,180(sp)
    6004:	d9801e04 	addi	r6,sp,120
    6008:	b80b883a 	mov	r5,r23
    600c:	000d4340 	call	d434 <__sprint_r>
    6010:	b880030b 	ldhu	r2,12(r23)
    6014:	1080100c 	andi	r2,r2,64
    6018:	1005c01e 	bne	r2,zero,771c <___vfprintf_internal_r+0x1b1c>
    601c:	d8802f17 	ldw	r2,188(sp)
    6020:	dfc04717 	ldw	ra,284(sp)
    6024:	df004617 	ldw	fp,280(sp)
    6028:	ddc04517 	ldw	r23,276(sp)
    602c:	dd804417 	ldw	r22,272(sp)
    6030:	dd404317 	ldw	r21,268(sp)
    6034:	dd004217 	ldw	r20,264(sp)
    6038:	dcc04117 	ldw	r19,260(sp)
    603c:	dc804017 	ldw	r18,256(sp)
    6040:	dc403f17 	ldw	r17,252(sp)
    6044:	dc003e17 	ldw	r16,248(sp)
    6048:	dec04804 	addi	sp,sp,288
    604c:	f800283a 	ret
    6050:	d9002d17 	ldw	r4,180(sp)
    6054:	0001a880 	call	1a88 <__sinit>
    6058:	003f0206 	br	5c64 <__alt_data_end+0xf8005c64>
    605c:	d9002e17 	ldw	r4,184(sp)
    6060:	d9402e17 	ldw	r5,184(sp)
    6064:	21000017 	ldw	r4,0(r4)
    6068:	28800104 	addi	r2,r5,4
    606c:	d9003115 	stw	r4,196(sp)
    6070:	203fa716 	blt	r4,zero,5f10 <__alt_data_end+0xf8005f10>
    6074:	d8802e15 	stw	r2,184(sp)
    6078:	ac400007 	ldb	r17,0(r21)
    607c:	003f4206 	br	5d88 <__alt_data_end+0xf8005d88>
    6080:	ac400007 	ldb	r17,0(r21)
    6084:	01000a84 	movi	r4,42
    6088:	a8c00044 	addi	r3,r21,1
    608c:	89075826 	beq	r17,r4,7df0 <___vfprintf_internal_r+0x21f0>
    6090:	8cbff404 	addi	r18,r17,-48
    6094:	b486ae36 	bltu	r22,r18,7b50 <___vfprintf_internal_r+0x1f50>
    6098:	0009883a 	mov	r4,zero
    609c:	1823883a 	mov	r17,r3
    60a0:	01400284 	movi	r5,10
    60a4:	000fc140 	call	fc14 <__mulsi3>
    60a8:	88c00007 	ldb	r3,0(r17)
    60ac:	1489883a 	add	r4,r2,r18
    60b0:	8d400044 	addi	r21,r17,1
    60b4:	1cbff404 	addi	r18,r3,-48
    60b8:	a823883a 	mov	r17,r21
    60bc:	b4bff82e 	bgeu	r22,r18,60a0 <__alt_data_end+0xf80060a0>
    60c0:	1823883a 	mov	r17,r3
    60c4:	2005f616 	blt	r4,zero,78a0 <___vfprintf_internal_r+0x1ca0>
    60c8:	d9002a15 	stw	r4,168(sp)
    60cc:	003f2f06 	br	5d8c <__alt_data_end+0xf8005d8c>
    60d0:	84002014 	ori	r16,r16,128
    60d4:	ac400007 	ldb	r17,0(r21)
    60d8:	003f2b06 	br	5d88 <__alt_data_end+0xf8005d88>
    60dc:	8cbff404 	addi	r18,r17,-48
    60e0:	d8003115 	stw	zero,196(sp)
    60e4:	0009883a 	mov	r4,zero
    60e8:	a823883a 	mov	r17,r21
    60ec:	01400284 	movi	r5,10
    60f0:	000fc140 	call	fc14 <__mulsi3>
    60f4:	88c00007 	ldb	r3,0(r17)
    60f8:	9089883a 	add	r4,r18,r2
    60fc:	ad400044 	addi	r21,r21,1
    6100:	1cbff404 	addi	r18,r3,-48
    6104:	a823883a 	mov	r17,r21
    6108:	b4bff82e 	bgeu	r22,r18,60ec <__alt_data_end+0xf80060ec>
    610c:	1823883a 	mov	r17,r3
    6110:	d9003115 	stw	r4,196(sp)
    6114:	003f1d06 	br	5d8c <__alt_data_end+0xf8005d8c>
    6118:	8025883a 	mov	r18,r16
    611c:	dc002903 	ldbu	r16,164(sp)
    6120:	e011883a 	mov	r8,fp
    6124:	84003fcc 	andi	r16,r16,255
    6128:	8007531e 	bne	r16,zero,7e78 <___vfprintf_internal_r+0x2278>
    612c:	94800414 	ori	r18,r18,16
    6130:	9080080c 	andi	r2,r18,32
    6134:	1003a326 	beq	r2,zero,6fc4 <___vfprintf_internal_r+0x13c4>
    6138:	d9002e17 	ldw	r4,184(sp)
    613c:	20800117 	ldw	r2,4(r4)
    6140:	24c00017 	ldw	r19,0(r4)
    6144:	21000204 	addi	r4,r4,8
    6148:	d9002e15 	stw	r4,184(sp)
    614c:	102d883a 	mov	r22,r2
    6150:	10047316 	blt	r2,zero,7320 <___vfprintf_internal_r+0x1720>
    6154:	d9002a17 	ldw	r4,168(sp)
    6158:	df002783 	ldbu	fp,158(sp)
    615c:	2003e416 	blt	r4,zero,70f0 <___vfprintf_internal_r+0x14f0>
    6160:	00ffdfc4 	movi	r3,-129
    6164:	9d84b03a 	or	r2,r19,r22
    6168:	90e4703a 	and	r18,r18,r3
    616c:	10018026 	beq	r2,zero,6770 <___vfprintf_internal_r+0xb70>
    6170:	b003ab26 	beq	r22,zero,7020 <___vfprintf_internal_r+0x1420>
    6174:	dc402915 	stw	r17,164(sp)
    6178:	dc001e04 	addi	r16,sp,120
    617c:	b023883a 	mov	r17,r22
    6180:	402d883a 	mov	r22,r8
    6184:	9809883a 	mov	r4,r19
    6188:	880b883a 	mov	r5,r17
    618c:	01800284 	movi	r6,10
    6190:	000f883a 	mov	r7,zero
    6194:	000f6500 	call	f650 <__umoddi3>
    6198:	10800c04 	addi	r2,r2,48
    619c:	843fffc4 	addi	r16,r16,-1
    61a0:	9809883a 	mov	r4,r19
    61a4:	880b883a 	mov	r5,r17
    61a8:	80800005 	stb	r2,0(r16)
    61ac:	01800284 	movi	r6,10
    61b0:	000f883a 	mov	r7,zero
    61b4:	000f0540 	call	f054 <__udivdi3>
    61b8:	1027883a 	mov	r19,r2
    61bc:	10c4b03a 	or	r2,r2,r3
    61c0:	1823883a 	mov	r17,r3
    61c4:	103fef1e 	bne	r2,zero,6184 <__alt_data_end+0xf8006184>
    61c8:	d8c02817 	ldw	r3,160(sp)
    61cc:	dc402917 	ldw	r17,164(sp)
    61d0:	b011883a 	mov	r8,r22
    61d4:	1c07c83a 	sub	r3,r3,r16
    61d8:	d8c02b15 	stw	r3,172(sp)
    61dc:	00005f06 	br	635c <___vfprintf_internal_r+0x75c>
    61e0:	8025883a 	mov	r18,r16
    61e4:	dc002903 	ldbu	r16,164(sp)
    61e8:	e011883a 	mov	r8,fp
    61ec:	84003fcc 	andi	r16,r16,255
    61f0:	80071e1e 	bne	r16,zero,7e6c <___vfprintf_internal_r+0x226c>
    61f4:	9080020c 	andi	r2,r18,8
    61f8:	1004af26 	beq	r2,zero,74b8 <___vfprintf_internal_r+0x18b8>
    61fc:	d9002e17 	ldw	r4,184(sp)
    6200:	d9402e17 	ldw	r5,184(sp)
    6204:	d8802e17 	ldw	r2,184(sp)
    6208:	21000017 	ldw	r4,0(r4)
    620c:	29400117 	ldw	r5,4(r5)
    6210:	10800204 	addi	r2,r2,8
    6214:	d9003615 	stw	r4,216(sp)
    6218:	d9403815 	stw	r5,224(sp)
    621c:	d8802e15 	stw	r2,184(sp)
    6220:	d9003617 	ldw	r4,216(sp)
    6224:	d9403817 	ldw	r5,224(sp)
    6228:	da003d15 	stw	r8,244(sp)
    622c:	04000044 	movi	r16,1
    6230:	000bc780 	call	bc78 <__fpclassifyd>
    6234:	da003d17 	ldw	r8,244(sp)
    6238:	1404441e 	bne	r2,r16,734c <___vfprintf_internal_r+0x174c>
    623c:	d9003617 	ldw	r4,216(sp)
    6240:	d9403817 	ldw	r5,224(sp)
    6244:	000d883a 	mov	r6,zero
    6248:	000f883a 	mov	r7,zero
    624c:	001101c0 	call	1101c <__ledf2>
    6250:	da003d17 	ldw	r8,244(sp)
    6254:	1005e316 	blt	r2,zero,79e4 <___vfprintf_internal_r+0x1de4>
    6258:	df002783 	ldbu	fp,158(sp)
    625c:	008011c4 	movi	r2,71
    6260:	1445580e 	bge	r2,r17,77c4 <___vfprintf_internal_r+0x1bc4>
    6264:	04000074 	movhi	r16,1
    6268:	84179e04 	addi	r16,r16,24184
    626c:	00c000c4 	movi	r3,3
    6270:	00bfdfc4 	movi	r2,-129
    6274:	d8c02915 	stw	r3,164(sp)
    6278:	90a4703a 	and	r18,r18,r2
    627c:	d8c02b15 	stw	r3,172(sp)
    6280:	d8002a15 	stw	zero,168(sp)
    6284:	d8003215 	stw	zero,200(sp)
    6288:	00003a06 	br	6374 <___vfprintf_internal_r+0x774>
    628c:	84000214 	ori	r16,r16,8
    6290:	ac400007 	ldb	r17,0(r21)
    6294:	003ebc06 	br	5d88 <__alt_data_end+0xf8005d88>
    6298:	8025883a 	mov	r18,r16
    629c:	dc002903 	ldbu	r16,164(sp)
    62a0:	e011883a 	mov	r8,fp
    62a4:	84003fcc 	andi	r16,r16,255
    62a8:	8007001e 	bne	r16,zero,7eac <___vfprintf_internal_r+0x22ac>
    62ac:	94800414 	ori	r18,r18,16
    62b0:	9080080c 	andi	r2,r18,32
    62b4:	1002fa26 	beq	r2,zero,6ea0 <___vfprintf_internal_r+0x12a0>
    62b8:	d9002e17 	ldw	r4,184(sp)
    62bc:	d9402a17 	ldw	r5,168(sp)
    62c0:	d8002785 	stb	zero,158(sp)
    62c4:	20800204 	addi	r2,r4,8
    62c8:	24c00017 	ldw	r19,0(r4)
    62cc:	25800117 	ldw	r22,4(r4)
    62d0:	2804b116 	blt	r5,zero,7598 <___vfprintf_internal_r+0x1998>
    62d4:	013fdfc4 	movi	r4,-129
    62d8:	9d86b03a 	or	r3,r19,r22
    62dc:	d8802e15 	stw	r2,184(sp)
    62e0:	9124703a 	and	r18,r18,r4
    62e4:	1802fb1e 	bne	r3,zero,6ed4 <___vfprintf_internal_r+0x12d4>
    62e8:	d8c02a17 	ldw	r3,168(sp)
    62ec:	0039883a 	mov	fp,zero
    62f0:	1805e526 	beq	r3,zero,7a88 <___vfprintf_internal_r+0x1e88>
    62f4:	0027883a 	mov	r19,zero
    62f8:	002d883a 	mov	r22,zero
    62fc:	dc001e04 	addi	r16,sp,120
    6300:	9806d0fa 	srli	r3,r19,3
    6304:	b008977a 	slli	r4,r22,29
    6308:	b02cd0fa 	srli	r22,r22,3
    630c:	9cc001cc 	andi	r19,r19,7
    6310:	98800c04 	addi	r2,r19,48
    6314:	843fffc4 	addi	r16,r16,-1
    6318:	20e6b03a 	or	r19,r4,r3
    631c:	80800005 	stb	r2,0(r16)
    6320:	9d86b03a 	or	r3,r19,r22
    6324:	183ff61e 	bne	r3,zero,6300 <__alt_data_end+0xf8006300>
    6328:	90c0004c 	andi	r3,r18,1
    632c:	18014126 	beq	r3,zero,6834 <___vfprintf_internal_r+0xc34>
    6330:	10803fcc 	andi	r2,r2,255
    6334:	1080201c 	xori	r2,r2,128
    6338:	10bfe004 	addi	r2,r2,-128
    633c:	00c00c04 	movi	r3,48
    6340:	10c13c26 	beq	r2,r3,6834 <___vfprintf_internal_r+0xc34>
    6344:	80ffffc5 	stb	r3,-1(r16)
    6348:	d8c02817 	ldw	r3,160(sp)
    634c:	80bfffc4 	addi	r2,r16,-1
    6350:	1021883a 	mov	r16,r2
    6354:	1887c83a 	sub	r3,r3,r2
    6358:	d8c02b15 	stw	r3,172(sp)
    635c:	d8802b17 	ldw	r2,172(sp)
    6360:	d9002a17 	ldw	r4,168(sp)
    6364:	1100010e 	bge	r2,r4,636c <___vfprintf_internal_r+0x76c>
    6368:	2005883a 	mov	r2,r4
    636c:	d8802915 	stw	r2,164(sp)
    6370:	d8003215 	stw	zero,200(sp)
    6374:	e7003fcc 	andi	fp,fp,255
    6378:	e700201c 	xori	fp,fp,128
    637c:	e73fe004 	addi	fp,fp,-128
    6380:	e0000326 	beq	fp,zero,6390 <___vfprintf_internal_r+0x790>
    6384:	d8c02917 	ldw	r3,164(sp)
    6388:	18c00044 	addi	r3,r3,1
    638c:	d8c02915 	stw	r3,164(sp)
    6390:	90c0008c 	andi	r3,r18,2
    6394:	d8c02c15 	stw	r3,176(sp)
    6398:	18000326 	beq	r3,zero,63a8 <___vfprintf_internal_r+0x7a8>
    639c:	d8c02917 	ldw	r3,164(sp)
    63a0:	18c00084 	addi	r3,r3,2
    63a4:	d8c02915 	stw	r3,164(sp)
    63a8:	90c0210c 	andi	r3,r18,132
    63ac:	d8c03015 	stw	r3,192(sp)
    63b0:	1801c51e 	bne	r3,zero,6ac8 <___vfprintf_internal_r+0xec8>
    63b4:	d9003117 	ldw	r4,196(sp)
    63b8:	d8c02917 	ldw	r3,164(sp)
    63bc:	20e7c83a 	sub	r19,r4,r3
    63c0:	04c1c10e 	bge	zero,r19,6ac8 <___vfprintf_internal_r+0xec8>
    63c4:	02400404 	movi	r9,16
    63c8:	d8c02017 	ldw	r3,128(sp)
    63cc:	d8801f17 	ldw	r2,124(sp)
    63d0:	4cc52f0e 	bge	r9,r19,7890 <___vfprintf_internal_r+0x1c90>
    63d4:	01400074 	movhi	r5,1
    63d8:	2957b984 	addi	r5,r5,24294
    63dc:	dc403b15 	stw	r17,236(sp)
    63e0:	d9403515 	stw	r5,212(sp)
    63e4:	9823883a 	mov	r17,r19
    63e8:	482d883a 	mov	r22,r9
    63ec:	9027883a 	mov	r19,r18
    63f0:	070001c4 	movi	fp,7
    63f4:	8025883a 	mov	r18,r16
    63f8:	dc002d17 	ldw	r16,180(sp)
    63fc:	00000306 	br	640c <___vfprintf_internal_r+0x80c>
    6400:	8c7ffc04 	addi	r17,r17,-16
    6404:	42000204 	addi	r8,r8,8
    6408:	b440130e 	bge	r22,r17,6458 <___vfprintf_internal_r+0x858>
    640c:	01000074 	movhi	r4,1
    6410:	18c00404 	addi	r3,r3,16
    6414:	10800044 	addi	r2,r2,1
    6418:	2117b984 	addi	r4,r4,24294
    641c:	41000015 	stw	r4,0(r8)
    6420:	45800115 	stw	r22,4(r8)
    6424:	d8c02015 	stw	r3,128(sp)
    6428:	d8801f15 	stw	r2,124(sp)
    642c:	e0bff40e 	bge	fp,r2,6400 <__alt_data_end+0xf8006400>
    6430:	d9801e04 	addi	r6,sp,120
    6434:	b80b883a 	mov	r5,r23
    6438:	8009883a 	mov	r4,r16
    643c:	000d4340 	call	d434 <__sprint_r>
    6440:	103ef31e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6444:	8c7ffc04 	addi	r17,r17,-16
    6448:	d8c02017 	ldw	r3,128(sp)
    644c:	d8801f17 	ldw	r2,124(sp)
    6450:	da000404 	addi	r8,sp,16
    6454:	b47fed16 	blt	r22,r17,640c <__alt_data_end+0xf800640c>
    6458:	9021883a 	mov	r16,r18
    645c:	9825883a 	mov	r18,r19
    6460:	8827883a 	mov	r19,r17
    6464:	dc403b17 	ldw	r17,236(sp)
    6468:	d9403517 	ldw	r5,212(sp)
    646c:	98c7883a 	add	r3,r19,r3
    6470:	10800044 	addi	r2,r2,1
    6474:	41400015 	stw	r5,0(r8)
    6478:	44c00115 	stw	r19,4(r8)
    647c:	d8c02015 	stw	r3,128(sp)
    6480:	d8801f15 	stw	r2,124(sp)
    6484:	010001c4 	movi	r4,7
    6488:	2082c516 	blt	r4,r2,6fa0 <___vfprintf_internal_r+0x13a0>
    648c:	df002787 	ldb	fp,158(sp)
    6490:	42000204 	addi	r8,r8,8
    6494:	e0000c26 	beq	fp,zero,64c8 <___vfprintf_internal_r+0x8c8>
    6498:	d8801f17 	ldw	r2,124(sp)
    649c:	d9002784 	addi	r4,sp,158
    64a0:	18c00044 	addi	r3,r3,1
    64a4:	10800044 	addi	r2,r2,1
    64a8:	41000015 	stw	r4,0(r8)
    64ac:	01000044 	movi	r4,1
    64b0:	41000115 	stw	r4,4(r8)
    64b4:	d8c02015 	stw	r3,128(sp)
    64b8:	d8801f15 	stw	r2,124(sp)
    64bc:	010001c4 	movi	r4,7
    64c0:	20825e16 	blt	r4,r2,6e3c <___vfprintf_internal_r+0x123c>
    64c4:	42000204 	addi	r8,r8,8
    64c8:	d8802c17 	ldw	r2,176(sp)
    64cc:	10000c26 	beq	r2,zero,6500 <___vfprintf_internal_r+0x900>
    64d0:	d8801f17 	ldw	r2,124(sp)
    64d4:	d9002704 	addi	r4,sp,156
    64d8:	18c00084 	addi	r3,r3,2
    64dc:	10800044 	addi	r2,r2,1
    64e0:	41000015 	stw	r4,0(r8)
    64e4:	01000084 	movi	r4,2
    64e8:	41000115 	stw	r4,4(r8)
    64ec:	d8c02015 	stw	r3,128(sp)
    64f0:	d8801f15 	stw	r2,124(sp)
    64f4:	010001c4 	movi	r4,7
    64f8:	20825816 	blt	r4,r2,6e5c <___vfprintf_internal_r+0x125c>
    64fc:	42000204 	addi	r8,r8,8
    6500:	d9003017 	ldw	r4,192(sp)
    6504:	00802004 	movi	r2,128
    6508:	2081bb26 	beq	r4,r2,6bf8 <___vfprintf_internal_r+0xff8>
    650c:	d9402a17 	ldw	r5,168(sp)
    6510:	d8802b17 	ldw	r2,172(sp)
    6514:	28adc83a 	sub	r22,r5,r2
    6518:	0580310e 	bge	zero,r22,65e0 <___vfprintf_internal_r+0x9e0>
    651c:	07000404 	movi	fp,16
    6520:	d8801f17 	ldw	r2,124(sp)
    6524:	e584360e 	bge	fp,r22,7600 <___vfprintf_internal_r+0x1a00>
    6528:	01400074 	movhi	r5,1
    652c:	2957b584 	addi	r5,r5,24278
    6530:	dc402a15 	stw	r17,168(sp)
    6534:	d9402c15 	stw	r5,176(sp)
    6538:	b023883a 	mov	r17,r22
    653c:	04c001c4 	movi	r19,7
    6540:	a82d883a 	mov	r22,r21
    6544:	902b883a 	mov	r21,r18
    6548:	8025883a 	mov	r18,r16
    654c:	dc002d17 	ldw	r16,180(sp)
    6550:	00000306 	br	6560 <___vfprintf_internal_r+0x960>
    6554:	8c7ffc04 	addi	r17,r17,-16
    6558:	42000204 	addi	r8,r8,8
    655c:	e440110e 	bge	fp,r17,65a4 <___vfprintf_internal_r+0x9a4>
    6560:	18c00404 	addi	r3,r3,16
    6564:	10800044 	addi	r2,r2,1
    6568:	45000015 	stw	r20,0(r8)
    656c:	47000115 	stw	fp,4(r8)
    6570:	d8c02015 	stw	r3,128(sp)
    6574:	d8801f15 	stw	r2,124(sp)
    6578:	98bff60e 	bge	r19,r2,6554 <__alt_data_end+0xf8006554>
    657c:	d9801e04 	addi	r6,sp,120
    6580:	b80b883a 	mov	r5,r23
    6584:	8009883a 	mov	r4,r16
    6588:	000d4340 	call	d434 <__sprint_r>
    658c:	103ea01e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6590:	8c7ffc04 	addi	r17,r17,-16
    6594:	d8c02017 	ldw	r3,128(sp)
    6598:	d8801f17 	ldw	r2,124(sp)
    659c:	da000404 	addi	r8,sp,16
    65a0:	e47fef16 	blt	fp,r17,6560 <__alt_data_end+0xf8006560>
    65a4:	9021883a 	mov	r16,r18
    65a8:	a825883a 	mov	r18,r21
    65ac:	b02b883a 	mov	r21,r22
    65b0:	882d883a 	mov	r22,r17
    65b4:	dc402a17 	ldw	r17,168(sp)
    65b8:	d9002c17 	ldw	r4,176(sp)
    65bc:	1d87883a 	add	r3,r3,r22
    65c0:	10800044 	addi	r2,r2,1
    65c4:	41000015 	stw	r4,0(r8)
    65c8:	45800115 	stw	r22,4(r8)
    65cc:	d8c02015 	stw	r3,128(sp)
    65d0:	d8801f15 	stw	r2,124(sp)
    65d4:	010001c4 	movi	r4,7
    65d8:	20821016 	blt	r4,r2,6e1c <___vfprintf_internal_r+0x121c>
    65dc:	42000204 	addi	r8,r8,8
    65e0:	9080400c 	andi	r2,r18,256
    65e4:	10013a1e 	bne	r2,zero,6ad0 <___vfprintf_internal_r+0xed0>
    65e8:	d9402b17 	ldw	r5,172(sp)
    65ec:	d8801f17 	ldw	r2,124(sp)
    65f0:	44000015 	stw	r16,0(r8)
    65f4:	1947883a 	add	r3,r3,r5
    65f8:	10800044 	addi	r2,r2,1
    65fc:	41400115 	stw	r5,4(r8)
    6600:	d8c02015 	stw	r3,128(sp)
    6604:	d8801f15 	stw	r2,124(sp)
    6608:	010001c4 	movi	r4,7
    660c:	2081f516 	blt	r4,r2,6de4 <___vfprintf_internal_r+0x11e4>
    6610:	42000204 	addi	r8,r8,8
    6614:	9480010c 	andi	r18,r18,4
    6618:	90003226 	beq	r18,zero,66e4 <___vfprintf_internal_r+0xae4>
    661c:	d9403117 	ldw	r5,196(sp)
    6620:	d8802917 	ldw	r2,164(sp)
    6624:	28a1c83a 	sub	r16,r5,r2
    6628:	04002e0e 	bge	zero,r16,66e4 <___vfprintf_internal_r+0xae4>
    662c:	04400404 	movi	r17,16
    6630:	d8801f17 	ldw	r2,124(sp)
    6634:	8c04c40e 	bge	r17,r16,7948 <___vfprintf_internal_r+0x1d48>
    6638:	01400074 	movhi	r5,1
    663c:	2957b984 	addi	r5,r5,24294
    6640:	d9403515 	stw	r5,212(sp)
    6644:	048001c4 	movi	r18,7
    6648:	dcc02d17 	ldw	r19,180(sp)
    664c:	00000306 	br	665c <___vfprintf_internal_r+0xa5c>
    6650:	843ffc04 	addi	r16,r16,-16
    6654:	42000204 	addi	r8,r8,8
    6658:	8c00130e 	bge	r17,r16,66a8 <___vfprintf_internal_r+0xaa8>
    665c:	01000074 	movhi	r4,1
    6660:	18c00404 	addi	r3,r3,16
    6664:	10800044 	addi	r2,r2,1
    6668:	2117b984 	addi	r4,r4,24294
    666c:	41000015 	stw	r4,0(r8)
    6670:	44400115 	stw	r17,4(r8)
    6674:	d8c02015 	stw	r3,128(sp)
    6678:	d8801f15 	stw	r2,124(sp)
    667c:	90bff40e 	bge	r18,r2,6650 <__alt_data_end+0xf8006650>
    6680:	d9801e04 	addi	r6,sp,120
    6684:	b80b883a 	mov	r5,r23
    6688:	9809883a 	mov	r4,r19
    668c:	000d4340 	call	d434 <__sprint_r>
    6690:	103e5f1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6694:	843ffc04 	addi	r16,r16,-16
    6698:	d8c02017 	ldw	r3,128(sp)
    669c:	d8801f17 	ldw	r2,124(sp)
    66a0:	da000404 	addi	r8,sp,16
    66a4:	8c3fed16 	blt	r17,r16,665c <__alt_data_end+0xf800665c>
    66a8:	d9403517 	ldw	r5,212(sp)
    66ac:	1c07883a 	add	r3,r3,r16
    66b0:	10800044 	addi	r2,r2,1
    66b4:	41400015 	stw	r5,0(r8)
    66b8:	44000115 	stw	r16,4(r8)
    66bc:	d8c02015 	stw	r3,128(sp)
    66c0:	d8801f15 	stw	r2,124(sp)
    66c4:	010001c4 	movi	r4,7
    66c8:	2080060e 	bge	r4,r2,66e4 <___vfprintf_internal_r+0xae4>
    66cc:	d9002d17 	ldw	r4,180(sp)
    66d0:	d9801e04 	addi	r6,sp,120
    66d4:	b80b883a 	mov	r5,r23
    66d8:	000d4340 	call	d434 <__sprint_r>
    66dc:	103e4c1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    66e0:	d8c02017 	ldw	r3,128(sp)
    66e4:	d8803117 	ldw	r2,196(sp)
    66e8:	d9002917 	ldw	r4,164(sp)
    66ec:	1100010e 	bge	r2,r4,66f4 <___vfprintf_internal_r+0xaf4>
    66f0:	2005883a 	mov	r2,r4
    66f4:	d9402f17 	ldw	r5,188(sp)
    66f8:	288b883a 	add	r5,r5,r2
    66fc:	d9402f15 	stw	r5,188(sp)
    6700:	1801c01e 	bne	r3,zero,6e04 <___vfprintf_internal_r+0x1204>
    6704:	a8800007 	ldb	r2,0(r21)
    6708:	d8001f15 	stw	zero,124(sp)
    670c:	da000404 	addi	r8,sp,16
    6710:	103d751e 	bne	r2,zero,5ce8 <__alt_data_end+0xf8005ce8>
    6714:	a823883a 	mov	r17,r21
    6718:	003d8b06 	br	5d48 <__alt_data_end+0xf8005d48>
    671c:	8025883a 	mov	r18,r16
    6720:	dc002903 	ldbu	r16,164(sp)
    6724:	e011883a 	mov	r8,fp
    6728:	84003fcc 	andi	r16,r16,255
    672c:	8005e51e 	bne	r16,zero,7ec4 <___vfprintf_internal_r+0x22c4>
    6730:	94800414 	ori	r18,r18,16
    6734:	9080080c 	andi	r2,r18,32
    6738:	10022b26 	beq	r2,zero,6fe8 <___vfprintf_internal_r+0x13e8>
    673c:	d9002e17 	ldw	r4,184(sp)
    6740:	d9402a17 	ldw	r5,168(sp)
    6744:	d8002785 	stb	zero,158(sp)
    6748:	20c00204 	addi	r3,r4,8
    674c:	24c00017 	ldw	r19,0(r4)
    6750:	25800117 	ldw	r22,4(r4)
    6754:	28042e16 	blt	r5,zero,7810 <___vfprintf_internal_r+0x1c10>
    6758:	013fdfc4 	movi	r4,-129
    675c:	9d84b03a 	or	r2,r19,r22
    6760:	d8c02e15 	stw	r3,184(sp)
    6764:	9124703a 	and	r18,r18,r4
    6768:	0039883a 	mov	fp,zero
    676c:	103e801e 	bne	r2,zero,6170 <__alt_data_end+0xf8006170>
    6770:	d9002a17 	ldw	r4,168(sp)
    6774:	2002e01e 	bne	r4,zero,72f8 <___vfprintf_internal_r+0x16f8>
    6778:	d8002a15 	stw	zero,168(sp)
    677c:	d8002b15 	stw	zero,172(sp)
    6780:	dc001e04 	addi	r16,sp,120
    6784:	003ef506 	br	635c <__alt_data_end+0xf800635c>
    6788:	8025883a 	mov	r18,r16
    678c:	dc002903 	ldbu	r16,164(sp)
    6790:	e011883a 	mov	r8,fp
    6794:	84003fcc 	andi	r16,r16,255
    6798:	8005ba1e 	bne	r16,zero,7e84 <___vfprintf_internal_r+0x2284>
    679c:	01000074 	movhi	r4,1
    67a0:	2117a104 	addi	r4,r4,24196
    67a4:	d9003915 	stw	r4,228(sp)
    67a8:	9080080c 	andi	r2,r18,32
    67ac:	10006126 	beq	r2,zero,6934 <___vfprintf_internal_r+0xd34>
    67b0:	d9402e17 	ldw	r5,184(sp)
    67b4:	2cc00017 	ldw	r19,0(r5)
    67b8:	2d800117 	ldw	r22,4(r5)
    67bc:	29400204 	addi	r5,r5,8
    67c0:	d9402e15 	stw	r5,184(sp)
    67c4:	9080004c 	andi	r2,r18,1
    67c8:	1001ac26 	beq	r2,zero,6e7c <___vfprintf_internal_r+0x127c>
    67cc:	9d84b03a 	or	r2,r19,r22
    67d0:	10038526 	beq	r2,zero,75e8 <___vfprintf_internal_r+0x19e8>
    67d4:	d8c02a17 	ldw	r3,168(sp)
    67d8:	00800c04 	movi	r2,48
    67dc:	d8802705 	stb	r2,156(sp)
    67e0:	dc402745 	stb	r17,157(sp)
    67e4:	d8002785 	stb	zero,158(sp)
    67e8:	90800094 	ori	r2,r18,2
    67ec:	18047916 	blt	r3,zero,79d4 <___vfprintf_internal_r+0x1dd4>
    67f0:	00bfdfc4 	movi	r2,-129
    67f4:	90a4703a 	and	r18,r18,r2
    67f8:	94800094 	ori	r18,r18,2
    67fc:	0039883a 	mov	fp,zero
    6800:	d9003917 	ldw	r4,228(sp)
    6804:	dc001e04 	addi	r16,sp,120
    6808:	988003cc 	andi	r2,r19,15
    680c:	b006973a 	slli	r3,r22,28
    6810:	2085883a 	add	r2,r4,r2
    6814:	9826d13a 	srli	r19,r19,4
    6818:	10800003 	ldbu	r2,0(r2)
    681c:	b02cd13a 	srli	r22,r22,4
    6820:	843fffc4 	addi	r16,r16,-1
    6824:	1ce6b03a 	or	r19,r3,r19
    6828:	80800005 	stb	r2,0(r16)
    682c:	9d84b03a 	or	r2,r19,r22
    6830:	103ff51e 	bne	r2,zero,6808 <__alt_data_end+0xf8006808>
    6834:	d8c02817 	ldw	r3,160(sp)
    6838:	1c07c83a 	sub	r3,r3,r16
    683c:	d8c02b15 	stw	r3,172(sp)
    6840:	003ec606 	br	635c <__alt_data_end+0xf800635c>
    6844:	8025883a 	mov	r18,r16
    6848:	dc002903 	ldbu	r16,164(sp)
    684c:	e011883a 	mov	r8,fp
    6850:	84003fcc 	andi	r16,r16,255
    6854:	803e9626 	beq	r16,zero,62b0 <__alt_data_end+0xf80062b0>
    6858:	d8c02b03 	ldbu	r3,172(sp)
    685c:	d8c02785 	stb	r3,158(sp)
    6860:	003e9306 	br	62b0 <__alt_data_end+0xf80062b0>
    6864:	00c00044 	movi	r3,1
    6868:	d8c02905 	stb	r3,164(sp)
    686c:	00c00ac4 	movi	r3,43
    6870:	d8c02b05 	stb	r3,172(sp)
    6874:	ac400007 	ldb	r17,0(r21)
    6878:	003d4306 	br	5d88 <__alt_data_end+0xf8005d88>
    687c:	84000814 	ori	r16,r16,32
    6880:	ac400007 	ldb	r17,0(r21)
    6884:	003d4006 	br	5d88 <__alt_data_end+0xf8005d88>
    6888:	d8802e17 	ldw	r2,184(sp)
    688c:	8025883a 	mov	r18,r16
    6890:	d8002785 	stb	zero,158(sp)
    6894:	14000017 	ldw	r16,0(r2)
    6898:	e011883a 	mov	r8,fp
    689c:	14c00104 	addi	r19,r2,4
    68a0:	80042d26 	beq	r16,zero,7958 <___vfprintf_internal_r+0x1d58>
    68a4:	d8c02a17 	ldw	r3,168(sp)
    68a8:	1803e416 	blt	r3,zero,783c <___vfprintf_internal_r+0x1c3c>
    68ac:	180d883a 	mov	r6,r3
    68b0:	000b883a 	mov	r5,zero
    68b4:	8009883a 	mov	r4,r16
    68b8:	df003d15 	stw	fp,244(sp)
    68bc:	000a2740 	call	a274 <memchr>
    68c0:	da003d17 	ldw	r8,244(sp)
    68c4:	10046826 	beq	r2,zero,7a68 <___vfprintf_internal_r+0x1e68>
    68c8:	1405c83a 	sub	r2,r2,r16
    68cc:	d8802b15 	stw	r2,172(sp)
    68d0:	1003e016 	blt	r2,zero,7854 <___vfprintf_internal_r+0x1c54>
    68d4:	df002783 	ldbu	fp,158(sp)
    68d8:	d8802915 	stw	r2,164(sp)
    68dc:	dcc02e15 	stw	r19,184(sp)
    68e0:	d8002a15 	stw	zero,168(sp)
    68e4:	d8003215 	stw	zero,200(sp)
    68e8:	003ea206 	br	6374 <__alt_data_end+0xf8006374>
    68ec:	8025883a 	mov	r18,r16
    68f0:	dc002903 	ldbu	r16,164(sp)
    68f4:	e011883a 	mov	r8,fp
    68f8:	84003fcc 	andi	r16,r16,255
    68fc:	803f8d26 	beq	r16,zero,6734 <__alt_data_end+0xf8006734>
    6900:	d8c02b03 	ldbu	r3,172(sp)
    6904:	d8c02785 	stb	r3,158(sp)
    6908:	003f8a06 	br	6734 <__alt_data_end+0xf8006734>
    690c:	8025883a 	mov	r18,r16
    6910:	dc002903 	ldbu	r16,164(sp)
    6914:	e011883a 	mov	r8,fp
    6918:	84003fcc 	andi	r16,r16,255
    691c:	8005661e 	bne	r16,zero,7eb8 <___vfprintf_internal_r+0x22b8>
    6920:	01000074 	movhi	r4,1
    6924:	2117a604 	addi	r4,r4,24216
    6928:	d9003915 	stw	r4,228(sp)
    692c:	9080080c 	andi	r2,r18,32
    6930:	103f9f1e 	bne	r2,zero,67b0 <__alt_data_end+0xf80067b0>
    6934:	9080040c 	andi	r2,r18,16
    6938:	1002eb26 	beq	r2,zero,74e8 <___vfprintf_internal_r+0x18e8>
    693c:	d8802e17 	ldw	r2,184(sp)
    6940:	002d883a 	mov	r22,zero
    6944:	14c00017 	ldw	r19,0(r2)
    6948:	10800104 	addi	r2,r2,4
    694c:	d8802e15 	stw	r2,184(sp)
    6950:	003f9c06 	br	67c4 <__alt_data_end+0xf80067c4>
    6954:	d8802b07 	ldb	r2,172(sp)
    6958:	1002e11e 	bne	r2,zero,74e0 <___vfprintf_internal_r+0x18e0>
    695c:	00c00044 	movi	r3,1
    6960:	d8c02905 	stb	r3,164(sp)
    6964:	00c00804 	movi	r3,32
    6968:	d8c02b05 	stb	r3,172(sp)
    696c:	ac400007 	ldb	r17,0(r21)
    6970:	003d0506 	br	5d88 <__alt_data_end+0xf8005d88>
    6974:	84000054 	ori	r16,r16,1
    6978:	ac400007 	ldb	r17,0(r21)
    697c:	003d0206 	br	5d88 <__alt_data_end+0xf8005d88>
    6980:	8025883a 	mov	r18,r16
    6984:	dc002903 	ldbu	r16,164(sp)
    6988:	e011883a 	mov	r8,fp
    698c:	84003fcc 	andi	r16,r16,255
    6990:	803de726 	beq	r16,zero,6130 <__alt_data_end+0xf8006130>
    6994:	d8c02b03 	ldbu	r3,172(sp)
    6998:	d8c02785 	stb	r3,158(sp)
    699c:	003de406 	br	6130 <__alt_data_end+0xf8006130>
    69a0:	84001014 	ori	r16,r16,64
    69a4:	ac400007 	ldb	r17,0(r21)
    69a8:	003cf706 	br	5d88 <__alt_data_end+0xf8005d88>
    69ac:	ac400007 	ldb	r17,0(r21)
    69b0:	00801b04 	movi	r2,108
    69b4:	88838f26 	beq	r17,r2,77f4 <___vfprintf_internal_r+0x1bf4>
    69b8:	84000414 	ori	r16,r16,16
    69bc:	003cf206 	br	5d88 <__alt_data_end+0xf8005d88>
    69c0:	8025883a 	mov	r18,r16
    69c4:	dc002903 	ldbu	r16,164(sp)
    69c8:	e011883a 	mov	r8,fp
    69cc:	84003fcc 	andi	r16,r16,255
    69d0:	80053f1e 	bne	r16,zero,7ed0 <___vfprintf_internal_r+0x22d0>
    69d4:	9080080c 	andi	r2,r18,32
    69d8:	1002d226 	beq	r2,zero,7524 <___vfprintf_internal_r+0x1924>
    69dc:	d9002e17 	ldw	r4,184(sp)
    69e0:	d9402f17 	ldw	r5,188(sp)
    69e4:	20800017 	ldw	r2,0(r4)
    69e8:	2807d7fa 	srai	r3,r5,31
    69ec:	21000104 	addi	r4,r4,4
    69f0:	d9002e15 	stw	r4,184(sp)
    69f4:	11400015 	stw	r5,0(r2)
    69f8:	10c00115 	stw	r3,4(r2)
    69fc:	003cb806 	br	5ce0 <__alt_data_end+0xf8005ce0>
    6a00:	d8c02e17 	ldw	r3,184(sp)
    6a04:	d9002e17 	ldw	r4,184(sp)
    6a08:	8025883a 	mov	r18,r16
    6a0c:	18800017 	ldw	r2,0(r3)
    6a10:	21000104 	addi	r4,r4,4
    6a14:	00c00044 	movi	r3,1
    6a18:	e011883a 	mov	r8,fp
    6a1c:	d8c02915 	stw	r3,164(sp)
    6a20:	d8002785 	stb	zero,158(sp)
    6a24:	d8801405 	stb	r2,80(sp)
    6a28:	d9002e15 	stw	r4,184(sp)
    6a2c:	d8c02b15 	stw	r3,172(sp)
    6a30:	d8002a15 	stw	zero,168(sp)
    6a34:	d8003215 	stw	zero,200(sp)
    6a38:	dc001404 	addi	r16,sp,80
    6a3c:	0039883a 	mov	fp,zero
    6a40:	003e5306 	br	6390 <__alt_data_end+0xf8006390>
    6a44:	01000074 	movhi	r4,1
    6a48:	2117a604 	addi	r4,r4,24216
    6a4c:	0039883a 	mov	fp,zero
    6a50:	d9003915 	stw	r4,228(sp)
    6a54:	04401e04 	movi	r17,120
    6a58:	003f6906 	br	6800 <__alt_data_end+0xf8006800>
    6a5c:	8025883a 	mov	r18,r16
    6a60:	dc002903 	ldbu	r16,164(sp)
    6a64:	e011883a 	mov	r8,fp
    6a68:	84003fcc 	andi	r16,r16,255
    6a6c:	8005081e 	bne	r16,zero,7e90 <___vfprintf_internal_r+0x2290>
    6a70:	883d6126 	beq	r17,zero,5ff8 <__alt_data_end+0xf8005ff8>
    6a74:	00c00044 	movi	r3,1
    6a78:	d8c02915 	stw	r3,164(sp)
    6a7c:	dc401405 	stb	r17,80(sp)
    6a80:	d8002785 	stb	zero,158(sp)
    6a84:	003fe906 	br	6a2c <__alt_data_end+0xf8006a2c>
    6a88:	01400074 	movhi	r5,1
    6a8c:	2957a604 	addi	r5,r5,24216
    6a90:	d9403915 	stw	r5,228(sp)
    6a94:	d8c02e15 	stw	r3,184(sp)
    6a98:	1025883a 	mov	r18,r2
    6a9c:	04401e04 	movi	r17,120
    6aa0:	9d84b03a 	or	r2,r19,r22
    6aa4:	1000fc1e 	bne	r2,zero,6e98 <___vfprintf_internal_r+0x1298>
    6aa8:	0039883a 	mov	fp,zero
    6aac:	00800084 	movi	r2,2
    6ab0:	10803fcc 	andi	r2,r2,255
    6ab4:	00c00044 	movi	r3,1
    6ab8:	10c20f26 	beq	r2,r3,72f8 <___vfprintf_internal_r+0x16f8>
    6abc:	00c00084 	movi	r3,2
    6ac0:	10fd3326 	beq	r2,r3,5f90 <__alt_data_end+0xf8005f90>
    6ac4:	003e0b06 	br	62f4 <__alt_data_end+0xf80062f4>
    6ac8:	d8c02017 	ldw	r3,128(sp)
    6acc:	003e7106 	br	6494 <__alt_data_end+0xf8006494>
    6ad0:	00801944 	movi	r2,101
    6ad4:	14407e0e 	bge	r2,r17,6cd0 <___vfprintf_internal_r+0x10d0>
    6ad8:	d9003617 	ldw	r4,216(sp)
    6adc:	d9403817 	ldw	r5,224(sp)
    6ae0:	000d883a 	mov	r6,zero
    6ae4:	000f883a 	mov	r7,zero
    6ae8:	d8c03c15 	stw	r3,240(sp)
    6aec:	da003d15 	stw	r8,244(sp)
    6af0:	0010eb80 	call	10eb8 <__eqdf2>
    6af4:	d8c03c17 	ldw	r3,240(sp)
    6af8:	da003d17 	ldw	r8,244(sp)
    6afc:	1000f71e 	bne	r2,zero,6edc <___vfprintf_internal_r+0x12dc>
    6b00:	d8801f17 	ldw	r2,124(sp)
    6b04:	01000074 	movhi	r4,1
    6b08:	2117ad04 	addi	r4,r4,24244
    6b0c:	18c00044 	addi	r3,r3,1
    6b10:	10800044 	addi	r2,r2,1
    6b14:	41000015 	stw	r4,0(r8)
    6b18:	01000044 	movi	r4,1
    6b1c:	41000115 	stw	r4,4(r8)
    6b20:	d8c02015 	stw	r3,128(sp)
    6b24:	d8801f15 	stw	r2,124(sp)
    6b28:	010001c4 	movi	r4,7
    6b2c:	2082b816 	blt	r4,r2,7610 <___vfprintf_internal_r+0x1a10>
    6b30:	42000204 	addi	r8,r8,8
    6b34:	d8802617 	ldw	r2,152(sp)
    6b38:	d9403317 	ldw	r5,204(sp)
    6b3c:	11400216 	blt	r2,r5,6b48 <___vfprintf_internal_r+0xf48>
    6b40:	9080004c 	andi	r2,r18,1
    6b44:	103eb326 	beq	r2,zero,6614 <__alt_data_end+0xf8006614>
    6b48:	d8803717 	ldw	r2,220(sp)
    6b4c:	d9003417 	ldw	r4,208(sp)
    6b50:	d9403717 	ldw	r5,220(sp)
    6b54:	1887883a 	add	r3,r3,r2
    6b58:	d8801f17 	ldw	r2,124(sp)
    6b5c:	41000015 	stw	r4,0(r8)
    6b60:	41400115 	stw	r5,4(r8)
    6b64:	10800044 	addi	r2,r2,1
    6b68:	d8c02015 	stw	r3,128(sp)
    6b6c:	d8801f15 	stw	r2,124(sp)
    6b70:	010001c4 	movi	r4,7
    6b74:	20832916 	blt	r4,r2,781c <___vfprintf_internal_r+0x1c1c>
    6b78:	42000204 	addi	r8,r8,8
    6b7c:	d8803317 	ldw	r2,204(sp)
    6b80:	143fffc4 	addi	r16,r2,-1
    6b84:	043ea30e 	bge	zero,r16,6614 <__alt_data_end+0xf8006614>
    6b88:	04400404 	movi	r17,16
    6b8c:	d8801f17 	ldw	r2,124(sp)
    6b90:	8c00880e 	bge	r17,r16,6db4 <___vfprintf_internal_r+0x11b4>
    6b94:	01400074 	movhi	r5,1
    6b98:	2957b584 	addi	r5,r5,24278
    6b9c:	d9402c15 	stw	r5,176(sp)
    6ba0:	058001c4 	movi	r22,7
    6ba4:	dcc02d17 	ldw	r19,180(sp)
    6ba8:	00000306 	br	6bb8 <___vfprintf_internal_r+0xfb8>
    6bac:	42000204 	addi	r8,r8,8
    6bb0:	843ffc04 	addi	r16,r16,-16
    6bb4:	8c00820e 	bge	r17,r16,6dc0 <___vfprintf_internal_r+0x11c0>
    6bb8:	18c00404 	addi	r3,r3,16
    6bbc:	10800044 	addi	r2,r2,1
    6bc0:	45000015 	stw	r20,0(r8)
    6bc4:	44400115 	stw	r17,4(r8)
    6bc8:	d8c02015 	stw	r3,128(sp)
    6bcc:	d8801f15 	stw	r2,124(sp)
    6bd0:	b0bff60e 	bge	r22,r2,6bac <__alt_data_end+0xf8006bac>
    6bd4:	d9801e04 	addi	r6,sp,120
    6bd8:	b80b883a 	mov	r5,r23
    6bdc:	9809883a 	mov	r4,r19
    6be0:	000d4340 	call	d434 <__sprint_r>
    6be4:	103d0a1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6be8:	d8c02017 	ldw	r3,128(sp)
    6bec:	d8801f17 	ldw	r2,124(sp)
    6bf0:	da000404 	addi	r8,sp,16
    6bf4:	003fee06 	br	6bb0 <__alt_data_end+0xf8006bb0>
    6bf8:	d9403117 	ldw	r5,196(sp)
    6bfc:	d8802917 	ldw	r2,164(sp)
    6c00:	28adc83a 	sub	r22,r5,r2
    6c04:	05be410e 	bge	zero,r22,650c <__alt_data_end+0xf800650c>
    6c08:	07000404 	movi	fp,16
    6c0c:	d8801f17 	ldw	r2,124(sp)
    6c10:	e5838f0e 	bge	fp,r22,7a50 <___vfprintf_internal_r+0x1e50>
    6c14:	01400074 	movhi	r5,1
    6c18:	2957b584 	addi	r5,r5,24278
    6c1c:	dc403015 	stw	r17,192(sp)
    6c20:	d9402c15 	stw	r5,176(sp)
    6c24:	b023883a 	mov	r17,r22
    6c28:	04c001c4 	movi	r19,7
    6c2c:	a82d883a 	mov	r22,r21
    6c30:	902b883a 	mov	r21,r18
    6c34:	8025883a 	mov	r18,r16
    6c38:	dc002d17 	ldw	r16,180(sp)
    6c3c:	00000306 	br	6c4c <___vfprintf_internal_r+0x104c>
    6c40:	8c7ffc04 	addi	r17,r17,-16
    6c44:	42000204 	addi	r8,r8,8
    6c48:	e440110e 	bge	fp,r17,6c90 <___vfprintf_internal_r+0x1090>
    6c4c:	18c00404 	addi	r3,r3,16
    6c50:	10800044 	addi	r2,r2,1
    6c54:	45000015 	stw	r20,0(r8)
    6c58:	47000115 	stw	fp,4(r8)
    6c5c:	d8c02015 	stw	r3,128(sp)
    6c60:	d8801f15 	stw	r2,124(sp)
    6c64:	98bff60e 	bge	r19,r2,6c40 <__alt_data_end+0xf8006c40>
    6c68:	d9801e04 	addi	r6,sp,120
    6c6c:	b80b883a 	mov	r5,r23
    6c70:	8009883a 	mov	r4,r16
    6c74:	000d4340 	call	d434 <__sprint_r>
    6c78:	103ce51e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6c7c:	8c7ffc04 	addi	r17,r17,-16
    6c80:	d8c02017 	ldw	r3,128(sp)
    6c84:	d8801f17 	ldw	r2,124(sp)
    6c88:	da000404 	addi	r8,sp,16
    6c8c:	e47fef16 	blt	fp,r17,6c4c <__alt_data_end+0xf8006c4c>
    6c90:	9021883a 	mov	r16,r18
    6c94:	a825883a 	mov	r18,r21
    6c98:	b02b883a 	mov	r21,r22
    6c9c:	882d883a 	mov	r22,r17
    6ca0:	dc403017 	ldw	r17,192(sp)
    6ca4:	d9002c17 	ldw	r4,176(sp)
    6ca8:	1d87883a 	add	r3,r3,r22
    6cac:	10800044 	addi	r2,r2,1
    6cb0:	41000015 	stw	r4,0(r8)
    6cb4:	45800115 	stw	r22,4(r8)
    6cb8:	d8c02015 	stw	r3,128(sp)
    6cbc:	d8801f15 	stw	r2,124(sp)
    6cc0:	010001c4 	movi	r4,7
    6cc4:	20818e16 	blt	r4,r2,7300 <___vfprintf_internal_r+0x1700>
    6cc8:	42000204 	addi	r8,r8,8
    6ccc:	003e0f06 	br	650c <__alt_data_end+0xf800650c>
    6cd0:	d9403317 	ldw	r5,204(sp)
    6cd4:	00800044 	movi	r2,1
    6cd8:	18c00044 	addi	r3,r3,1
    6cdc:	1141530e 	bge	r2,r5,722c <___vfprintf_internal_r+0x162c>
    6ce0:	dc401f17 	ldw	r17,124(sp)
    6ce4:	00800044 	movi	r2,1
    6ce8:	40800115 	stw	r2,4(r8)
    6cec:	8c400044 	addi	r17,r17,1
    6cf0:	44000015 	stw	r16,0(r8)
    6cf4:	d8c02015 	stw	r3,128(sp)
    6cf8:	dc401f15 	stw	r17,124(sp)
    6cfc:	008001c4 	movi	r2,7
    6d00:	14416b16 	blt	r2,r17,72b0 <___vfprintf_internal_r+0x16b0>
    6d04:	42000204 	addi	r8,r8,8
    6d08:	d8803717 	ldw	r2,220(sp)
    6d0c:	d9003417 	ldw	r4,208(sp)
    6d10:	8c400044 	addi	r17,r17,1
    6d14:	10c7883a 	add	r3,r2,r3
    6d18:	40800115 	stw	r2,4(r8)
    6d1c:	41000015 	stw	r4,0(r8)
    6d20:	d8c02015 	stw	r3,128(sp)
    6d24:	dc401f15 	stw	r17,124(sp)
    6d28:	008001c4 	movi	r2,7
    6d2c:	14416916 	blt	r2,r17,72d4 <___vfprintf_internal_r+0x16d4>
    6d30:	45800204 	addi	r22,r8,8
    6d34:	d9003617 	ldw	r4,216(sp)
    6d38:	d9403817 	ldw	r5,224(sp)
    6d3c:	000d883a 	mov	r6,zero
    6d40:	000f883a 	mov	r7,zero
    6d44:	d8c03c15 	stw	r3,240(sp)
    6d48:	0010eb80 	call	10eb8 <__eqdf2>
    6d4c:	d8c03c17 	ldw	r3,240(sp)
    6d50:	1000bc26 	beq	r2,zero,7044 <___vfprintf_internal_r+0x1444>
    6d54:	d9403317 	ldw	r5,204(sp)
    6d58:	84000044 	addi	r16,r16,1
    6d5c:	8c400044 	addi	r17,r17,1
    6d60:	28bfffc4 	addi	r2,r5,-1
    6d64:	1887883a 	add	r3,r3,r2
    6d68:	b0800115 	stw	r2,4(r22)
    6d6c:	b4000015 	stw	r16,0(r22)
    6d70:	d8c02015 	stw	r3,128(sp)
    6d74:	dc401f15 	stw	r17,124(sp)
    6d78:	008001c4 	movi	r2,7
    6d7c:	14414316 	blt	r2,r17,728c <___vfprintf_internal_r+0x168c>
    6d80:	b5800204 	addi	r22,r22,8
    6d84:	d9003a17 	ldw	r4,232(sp)
    6d88:	df0022c4 	addi	fp,sp,139
    6d8c:	8c400044 	addi	r17,r17,1
    6d90:	20c7883a 	add	r3,r4,r3
    6d94:	b7000015 	stw	fp,0(r22)
    6d98:	b1000115 	stw	r4,4(r22)
    6d9c:	d8c02015 	stw	r3,128(sp)
    6da0:	dc401f15 	stw	r17,124(sp)
    6da4:	008001c4 	movi	r2,7
    6da8:	14400e16 	blt	r2,r17,6de4 <___vfprintf_internal_r+0x11e4>
    6dac:	b2000204 	addi	r8,r22,8
    6db0:	003e1806 	br	6614 <__alt_data_end+0xf8006614>
    6db4:	01000074 	movhi	r4,1
    6db8:	2117b584 	addi	r4,r4,24278
    6dbc:	d9002c15 	stw	r4,176(sp)
    6dc0:	d9002c17 	ldw	r4,176(sp)
    6dc4:	1c07883a 	add	r3,r3,r16
    6dc8:	44000115 	stw	r16,4(r8)
    6dcc:	41000015 	stw	r4,0(r8)
    6dd0:	10800044 	addi	r2,r2,1
    6dd4:	d8c02015 	stw	r3,128(sp)
    6dd8:	d8801f15 	stw	r2,124(sp)
    6ddc:	010001c4 	movi	r4,7
    6de0:	20be0b0e 	bge	r4,r2,6610 <__alt_data_end+0xf8006610>
    6de4:	d9002d17 	ldw	r4,180(sp)
    6de8:	d9801e04 	addi	r6,sp,120
    6dec:	b80b883a 	mov	r5,r23
    6df0:	000d4340 	call	d434 <__sprint_r>
    6df4:	103c861e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6df8:	d8c02017 	ldw	r3,128(sp)
    6dfc:	da000404 	addi	r8,sp,16
    6e00:	003e0406 	br	6614 <__alt_data_end+0xf8006614>
    6e04:	d9002d17 	ldw	r4,180(sp)
    6e08:	d9801e04 	addi	r6,sp,120
    6e0c:	b80b883a 	mov	r5,r23
    6e10:	000d4340 	call	d434 <__sprint_r>
    6e14:	103e3b26 	beq	r2,zero,6704 <__alt_data_end+0xf8006704>
    6e18:	003c7d06 	br	6010 <__alt_data_end+0xf8006010>
    6e1c:	d9002d17 	ldw	r4,180(sp)
    6e20:	d9801e04 	addi	r6,sp,120
    6e24:	b80b883a 	mov	r5,r23
    6e28:	000d4340 	call	d434 <__sprint_r>
    6e2c:	103c781e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6e30:	d8c02017 	ldw	r3,128(sp)
    6e34:	da000404 	addi	r8,sp,16
    6e38:	003de906 	br	65e0 <__alt_data_end+0xf80065e0>
    6e3c:	d9002d17 	ldw	r4,180(sp)
    6e40:	d9801e04 	addi	r6,sp,120
    6e44:	b80b883a 	mov	r5,r23
    6e48:	000d4340 	call	d434 <__sprint_r>
    6e4c:	103c701e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6e50:	d8c02017 	ldw	r3,128(sp)
    6e54:	da000404 	addi	r8,sp,16
    6e58:	003d9b06 	br	64c8 <__alt_data_end+0xf80064c8>
    6e5c:	d9002d17 	ldw	r4,180(sp)
    6e60:	d9801e04 	addi	r6,sp,120
    6e64:	b80b883a 	mov	r5,r23
    6e68:	000d4340 	call	d434 <__sprint_r>
    6e6c:	103c681e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6e70:	d8c02017 	ldw	r3,128(sp)
    6e74:	da000404 	addi	r8,sp,16
    6e78:	003da106 	br	6500 <__alt_data_end+0xf8006500>
    6e7c:	d9402a17 	ldw	r5,168(sp)
    6e80:	d8002785 	stb	zero,158(sp)
    6e84:	283f0616 	blt	r5,zero,6aa0 <__alt_data_end+0xf8006aa0>
    6e88:	00ffdfc4 	movi	r3,-129
    6e8c:	9d84b03a 	or	r2,r19,r22
    6e90:	90e4703a 	and	r18,r18,r3
    6e94:	103c3b26 	beq	r2,zero,5f84 <__alt_data_end+0xf8005f84>
    6e98:	0039883a 	mov	fp,zero
    6e9c:	003e5806 	br	6800 <__alt_data_end+0xf8006800>
    6ea0:	9080040c 	andi	r2,r18,16
    6ea4:	1001b326 	beq	r2,zero,7574 <___vfprintf_internal_r+0x1974>
    6ea8:	d8c02e17 	ldw	r3,184(sp)
    6eac:	d9002a17 	ldw	r4,168(sp)
    6eb0:	d8002785 	stb	zero,158(sp)
    6eb4:	18800104 	addi	r2,r3,4
    6eb8:	1cc00017 	ldw	r19,0(r3)
    6ebc:	002d883a 	mov	r22,zero
    6ec0:	2001b516 	blt	r4,zero,7598 <___vfprintf_internal_r+0x1998>
    6ec4:	00ffdfc4 	movi	r3,-129
    6ec8:	d8802e15 	stw	r2,184(sp)
    6ecc:	90e4703a 	and	r18,r18,r3
    6ed0:	983d0526 	beq	r19,zero,62e8 <__alt_data_end+0xf80062e8>
    6ed4:	0039883a 	mov	fp,zero
    6ed8:	003d0806 	br	62fc <__alt_data_end+0xf80062fc>
    6edc:	dc402617 	ldw	r17,152(sp)
    6ee0:	0441d30e 	bge	zero,r17,7630 <___vfprintf_internal_r+0x1a30>
    6ee4:	dc403217 	ldw	r17,200(sp)
    6ee8:	d8803317 	ldw	r2,204(sp)
    6eec:	1440010e 	bge	r2,r17,6ef4 <___vfprintf_internal_r+0x12f4>
    6ef0:	1023883a 	mov	r17,r2
    6ef4:	04400a0e 	bge	zero,r17,6f20 <___vfprintf_internal_r+0x1320>
    6ef8:	d8801f17 	ldw	r2,124(sp)
    6efc:	1c47883a 	add	r3,r3,r17
    6f00:	44000015 	stw	r16,0(r8)
    6f04:	10800044 	addi	r2,r2,1
    6f08:	44400115 	stw	r17,4(r8)
    6f0c:	d8c02015 	stw	r3,128(sp)
    6f10:	d8801f15 	stw	r2,124(sp)
    6f14:	010001c4 	movi	r4,7
    6f18:	20826516 	blt	r4,r2,78b0 <___vfprintf_internal_r+0x1cb0>
    6f1c:	42000204 	addi	r8,r8,8
    6f20:	88026116 	blt	r17,zero,78a8 <___vfprintf_internal_r+0x1ca8>
    6f24:	d9003217 	ldw	r4,200(sp)
    6f28:	2463c83a 	sub	r17,r4,r17
    6f2c:	04407b0e 	bge	zero,r17,711c <___vfprintf_internal_r+0x151c>
    6f30:	05800404 	movi	r22,16
    6f34:	d8801f17 	ldw	r2,124(sp)
    6f38:	b4419d0e 	bge	r22,r17,75b0 <___vfprintf_internal_r+0x19b0>
    6f3c:	01000074 	movhi	r4,1
    6f40:	2117b584 	addi	r4,r4,24278
    6f44:	d9002c15 	stw	r4,176(sp)
    6f48:	070001c4 	movi	fp,7
    6f4c:	dcc02d17 	ldw	r19,180(sp)
    6f50:	00000306 	br	6f60 <___vfprintf_internal_r+0x1360>
    6f54:	42000204 	addi	r8,r8,8
    6f58:	8c7ffc04 	addi	r17,r17,-16
    6f5c:	b441970e 	bge	r22,r17,75bc <___vfprintf_internal_r+0x19bc>
    6f60:	18c00404 	addi	r3,r3,16
    6f64:	10800044 	addi	r2,r2,1
    6f68:	45000015 	stw	r20,0(r8)
    6f6c:	45800115 	stw	r22,4(r8)
    6f70:	d8c02015 	stw	r3,128(sp)
    6f74:	d8801f15 	stw	r2,124(sp)
    6f78:	e0bff60e 	bge	fp,r2,6f54 <__alt_data_end+0xf8006f54>
    6f7c:	d9801e04 	addi	r6,sp,120
    6f80:	b80b883a 	mov	r5,r23
    6f84:	9809883a 	mov	r4,r19
    6f88:	000d4340 	call	d434 <__sprint_r>
    6f8c:	103c201e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6f90:	d8c02017 	ldw	r3,128(sp)
    6f94:	d8801f17 	ldw	r2,124(sp)
    6f98:	da000404 	addi	r8,sp,16
    6f9c:	003fee06 	br	6f58 <__alt_data_end+0xf8006f58>
    6fa0:	d9002d17 	ldw	r4,180(sp)
    6fa4:	d9801e04 	addi	r6,sp,120
    6fa8:	b80b883a 	mov	r5,r23
    6fac:	000d4340 	call	d434 <__sprint_r>
    6fb0:	103c171e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    6fb4:	d8c02017 	ldw	r3,128(sp)
    6fb8:	df002787 	ldb	fp,158(sp)
    6fbc:	da000404 	addi	r8,sp,16
    6fc0:	003d3406 	br	6494 <__alt_data_end+0xf8006494>
    6fc4:	9080040c 	andi	r2,r18,16
    6fc8:	10016126 	beq	r2,zero,7550 <___vfprintf_internal_r+0x1950>
    6fcc:	d9402e17 	ldw	r5,184(sp)
    6fd0:	2cc00017 	ldw	r19,0(r5)
    6fd4:	29400104 	addi	r5,r5,4
    6fd8:	d9402e15 	stw	r5,184(sp)
    6fdc:	982dd7fa 	srai	r22,r19,31
    6fe0:	b005883a 	mov	r2,r22
    6fe4:	003c5a06 	br	6150 <__alt_data_end+0xf8006150>
    6fe8:	9080040c 	andi	r2,r18,16
    6fec:	10003526 	beq	r2,zero,70c4 <___vfprintf_internal_r+0x14c4>
    6ff0:	d8c02e17 	ldw	r3,184(sp)
    6ff4:	d9002a17 	ldw	r4,168(sp)
    6ff8:	d8002785 	stb	zero,158(sp)
    6ffc:	18800104 	addi	r2,r3,4
    7000:	1cc00017 	ldw	r19,0(r3)
    7004:	002d883a 	mov	r22,zero
    7008:	20003716 	blt	r4,zero,70e8 <___vfprintf_internal_r+0x14e8>
    700c:	00ffdfc4 	movi	r3,-129
    7010:	d8802e15 	stw	r2,184(sp)
    7014:	90e4703a 	and	r18,r18,r3
    7018:	0039883a 	mov	fp,zero
    701c:	983dd426 	beq	r19,zero,6770 <__alt_data_end+0xf8006770>
    7020:	00800244 	movi	r2,9
    7024:	14fc5336 	bltu	r2,r19,6174 <__alt_data_end+0xf8006174>
    7028:	d8c02817 	ldw	r3,160(sp)
    702c:	dc001dc4 	addi	r16,sp,119
    7030:	9cc00c04 	addi	r19,r19,48
    7034:	1c07c83a 	sub	r3,r3,r16
    7038:	dcc01dc5 	stb	r19,119(sp)
    703c:	d8c02b15 	stw	r3,172(sp)
    7040:	003cc606 	br	635c <__alt_data_end+0xf800635c>
    7044:	d8803317 	ldw	r2,204(sp)
    7048:	143fffc4 	addi	r16,r2,-1
    704c:	043f4d0e 	bge	zero,r16,6d84 <__alt_data_end+0xf8006d84>
    7050:	07000404 	movi	fp,16
    7054:	e400810e 	bge	fp,r16,725c <___vfprintf_internal_r+0x165c>
    7058:	01400074 	movhi	r5,1
    705c:	2957b584 	addi	r5,r5,24278
    7060:	d9402c15 	stw	r5,176(sp)
    7064:	01c001c4 	movi	r7,7
    7068:	dcc02d17 	ldw	r19,180(sp)
    706c:	00000306 	br	707c <___vfprintf_internal_r+0x147c>
    7070:	b5800204 	addi	r22,r22,8
    7074:	843ffc04 	addi	r16,r16,-16
    7078:	e4007b0e 	bge	fp,r16,7268 <___vfprintf_internal_r+0x1668>
    707c:	18c00404 	addi	r3,r3,16
    7080:	8c400044 	addi	r17,r17,1
    7084:	b5000015 	stw	r20,0(r22)
    7088:	b7000115 	stw	fp,4(r22)
    708c:	d8c02015 	stw	r3,128(sp)
    7090:	dc401f15 	stw	r17,124(sp)
    7094:	3c7ff60e 	bge	r7,r17,7070 <__alt_data_end+0xf8007070>
    7098:	d9801e04 	addi	r6,sp,120
    709c:	b80b883a 	mov	r5,r23
    70a0:	9809883a 	mov	r4,r19
    70a4:	d9c03c15 	stw	r7,240(sp)
    70a8:	000d4340 	call	d434 <__sprint_r>
    70ac:	d9c03c17 	ldw	r7,240(sp)
    70b0:	103bd71e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    70b4:	d8c02017 	ldw	r3,128(sp)
    70b8:	dc401f17 	ldw	r17,124(sp)
    70bc:	dd800404 	addi	r22,sp,16
    70c0:	003fec06 	br	7074 <__alt_data_end+0xf8007074>
    70c4:	9080100c 	andi	r2,r18,64
    70c8:	d8002785 	stb	zero,158(sp)
    70cc:	10010e26 	beq	r2,zero,7508 <___vfprintf_internal_r+0x1908>
    70d0:	d9402e17 	ldw	r5,184(sp)
    70d4:	d8c02a17 	ldw	r3,168(sp)
    70d8:	002d883a 	mov	r22,zero
    70dc:	28800104 	addi	r2,r5,4
    70e0:	2cc0000b 	ldhu	r19,0(r5)
    70e4:	183fc90e 	bge	r3,zero,700c <__alt_data_end+0xf800700c>
    70e8:	d8802e15 	stw	r2,184(sp)
    70ec:	0039883a 	mov	fp,zero
    70f0:	9d84b03a 	or	r2,r19,r22
    70f4:	103c1e1e 	bne	r2,zero,6170 <__alt_data_end+0xf8006170>
    70f8:	00800044 	movi	r2,1
    70fc:	003e6c06 	br	6ab0 <__alt_data_end+0xf8006ab0>
    7100:	d9002d17 	ldw	r4,180(sp)
    7104:	d9801e04 	addi	r6,sp,120
    7108:	b80b883a 	mov	r5,r23
    710c:	000d4340 	call	d434 <__sprint_r>
    7110:	103bbf1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    7114:	d8c02017 	ldw	r3,128(sp)
    7118:	da000404 	addi	r8,sp,16
    711c:	d9003217 	ldw	r4,200(sp)
    7120:	d8802617 	ldw	r2,152(sp)
    7124:	d9403317 	ldw	r5,204(sp)
    7128:	8123883a 	add	r17,r16,r4
    712c:	11400216 	blt	r2,r5,7138 <___vfprintf_internal_r+0x1538>
    7130:	9100004c 	andi	r4,r18,1
    7134:	20000d26 	beq	r4,zero,716c <___vfprintf_internal_r+0x156c>
    7138:	d9003717 	ldw	r4,220(sp)
    713c:	d9403417 	ldw	r5,208(sp)
    7140:	1907883a 	add	r3,r3,r4
    7144:	d9001f17 	ldw	r4,124(sp)
    7148:	41400015 	stw	r5,0(r8)
    714c:	d9403717 	ldw	r5,220(sp)
    7150:	21000044 	addi	r4,r4,1
    7154:	d8c02015 	stw	r3,128(sp)
    7158:	41400115 	stw	r5,4(r8)
    715c:	d9001f15 	stw	r4,124(sp)
    7160:	014001c4 	movi	r5,7
    7164:	2901e816 	blt	r5,r4,7908 <___vfprintf_internal_r+0x1d08>
    7168:	42000204 	addi	r8,r8,8
    716c:	d9003317 	ldw	r4,204(sp)
    7170:	8121883a 	add	r16,r16,r4
    7174:	2085c83a 	sub	r2,r4,r2
    7178:	8461c83a 	sub	r16,r16,r17
    717c:	1400010e 	bge	r2,r16,7184 <___vfprintf_internal_r+0x1584>
    7180:	1021883a 	mov	r16,r2
    7184:	04000a0e 	bge	zero,r16,71b0 <___vfprintf_internal_r+0x15b0>
    7188:	d9001f17 	ldw	r4,124(sp)
    718c:	1c07883a 	add	r3,r3,r16
    7190:	44400015 	stw	r17,0(r8)
    7194:	21000044 	addi	r4,r4,1
    7198:	44000115 	stw	r16,4(r8)
    719c:	d8c02015 	stw	r3,128(sp)
    71a0:	d9001f15 	stw	r4,124(sp)
    71a4:	014001c4 	movi	r5,7
    71a8:	2901fb16 	blt	r5,r4,7998 <___vfprintf_internal_r+0x1d98>
    71ac:	42000204 	addi	r8,r8,8
    71b0:	8001f716 	blt	r16,zero,7990 <___vfprintf_internal_r+0x1d90>
    71b4:	1421c83a 	sub	r16,r2,r16
    71b8:	043d160e 	bge	zero,r16,6614 <__alt_data_end+0xf8006614>
    71bc:	04400404 	movi	r17,16
    71c0:	d8801f17 	ldw	r2,124(sp)
    71c4:	8c3efb0e 	bge	r17,r16,6db4 <__alt_data_end+0xf8006db4>
    71c8:	01400074 	movhi	r5,1
    71cc:	2957b584 	addi	r5,r5,24278
    71d0:	d9402c15 	stw	r5,176(sp)
    71d4:	058001c4 	movi	r22,7
    71d8:	dcc02d17 	ldw	r19,180(sp)
    71dc:	00000306 	br	71ec <___vfprintf_internal_r+0x15ec>
    71e0:	42000204 	addi	r8,r8,8
    71e4:	843ffc04 	addi	r16,r16,-16
    71e8:	8c3ef50e 	bge	r17,r16,6dc0 <__alt_data_end+0xf8006dc0>
    71ec:	18c00404 	addi	r3,r3,16
    71f0:	10800044 	addi	r2,r2,1
    71f4:	45000015 	stw	r20,0(r8)
    71f8:	44400115 	stw	r17,4(r8)
    71fc:	d8c02015 	stw	r3,128(sp)
    7200:	d8801f15 	stw	r2,124(sp)
    7204:	b0bff60e 	bge	r22,r2,71e0 <__alt_data_end+0xf80071e0>
    7208:	d9801e04 	addi	r6,sp,120
    720c:	b80b883a 	mov	r5,r23
    7210:	9809883a 	mov	r4,r19
    7214:	000d4340 	call	d434 <__sprint_r>
    7218:	103b7d1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    721c:	d8c02017 	ldw	r3,128(sp)
    7220:	d8801f17 	ldw	r2,124(sp)
    7224:	da000404 	addi	r8,sp,16
    7228:	003fee06 	br	71e4 <__alt_data_end+0xf80071e4>
    722c:	9088703a 	and	r4,r18,r2
    7230:	203eab1e 	bne	r4,zero,6ce0 <__alt_data_end+0xf8006ce0>
    7234:	dc401f17 	ldw	r17,124(sp)
    7238:	40800115 	stw	r2,4(r8)
    723c:	44000015 	stw	r16,0(r8)
    7240:	8c400044 	addi	r17,r17,1
    7244:	d8c02015 	stw	r3,128(sp)
    7248:	dc401f15 	stw	r17,124(sp)
    724c:	008001c4 	movi	r2,7
    7250:	14400e16 	blt	r2,r17,728c <___vfprintf_internal_r+0x168c>
    7254:	45800204 	addi	r22,r8,8
    7258:	003eca06 	br	6d84 <__alt_data_end+0xf8006d84>
    725c:	01000074 	movhi	r4,1
    7260:	2117b584 	addi	r4,r4,24278
    7264:	d9002c15 	stw	r4,176(sp)
    7268:	d8802c17 	ldw	r2,176(sp)
    726c:	1c07883a 	add	r3,r3,r16
    7270:	8c400044 	addi	r17,r17,1
    7274:	b0800015 	stw	r2,0(r22)
    7278:	b4000115 	stw	r16,4(r22)
    727c:	d8c02015 	stw	r3,128(sp)
    7280:	dc401f15 	stw	r17,124(sp)
    7284:	008001c4 	movi	r2,7
    7288:	147ebd0e 	bge	r2,r17,6d80 <__alt_data_end+0xf8006d80>
    728c:	d9002d17 	ldw	r4,180(sp)
    7290:	d9801e04 	addi	r6,sp,120
    7294:	b80b883a 	mov	r5,r23
    7298:	000d4340 	call	d434 <__sprint_r>
    729c:	103b5c1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    72a0:	d8c02017 	ldw	r3,128(sp)
    72a4:	dc401f17 	ldw	r17,124(sp)
    72a8:	dd800404 	addi	r22,sp,16
    72ac:	003eb506 	br	6d84 <__alt_data_end+0xf8006d84>
    72b0:	d9002d17 	ldw	r4,180(sp)
    72b4:	d9801e04 	addi	r6,sp,120
    72b8:	b80b883a 	mov	r5,r23
    72bc:	000d4340 	call	d434 <__sprint_r>
    72c0:	103b531e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    72c4:	d8c02017 	ldw	r3,128(sp)
    72c8:	dc401f17 	ldw	r17,124(sp)
    72cc:	da000404 	addi	r8,sp,16
    72d0:	003e8d06 	br	6d08 <__alt_data_end+0xf8006d08>
    72d4:	d9002d17 	ldw	r4,180(sp)
    72d8:	d9801e04 	addi	r6,sp,120
    72dc:	b80b883a 	mov	r5,r23
    72e0:	000d4340 	call	d434 <__sprint_r>
    72e4:	103b4a1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    72e8:	d8c02017 	ldw	r3,128(sp)
    72ec:	dc401f17 	ldw	r17,124(sp)
    72f0:	dd800404 	addi	r22,sp,16
    72f4:	003e8f06 	br	6d34 <__alt_data_end+0xf8006d34>
    72f8:	0027883a 	mov	r19,zero
    72fc:	003f4a06 	br	7028 <__alt_data_end+0xf8007028>
    7300:	d9002d17 	ldw	r4,180(sp)
    7304:	d9801e04 	addi	r6,sp,120
    7308:	b80b883a 	mov	r5,r23
    730c:	000d4340 	call	d434 <__sprint_r>
    7310:	103b3f1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    7314:	d8c02017 	ldw	r3,128(sp)
    7318:	da000404 	addi	r8,sp,16
    731c:	003c7b06 	br	650c <__alt_data_end+0xf800650c>
    7320:	d9402a17 	ldw	r5,168(sp)
    7324:	04e7c83a 	sub	r19,zero,r19
    7328:	07000b44 	movi	fp,45
    732c:	9804c03a 	cmpne	r2,r19,zero
    7330:	05adc83a 	sub	r22,zero,r22
    7334:	df002785 	stb	fp,158(sp)
    7338:	b0adc83a 	sub	r22,r22,r2
    733c:	28017b16 	blt	r5,zero,792c <___vfprintf_internal_r+0x1d2c>
    7340:	00bfdfc4 	movi	r2,-129
    7344:	90a4703a 	and	r18,r18,r2
    7348:	003b8906 	br	6170 <__alt_data_end+0xf8006170>
    734c:	d9003617 	ldw	r4,216(sp)
    7350:	d9403817 	ldw	r5,224(sp)
    7354:	da003d15 	stw	r8,244(sp)
    7358:	000bc780 	call	bc78 <__fpclassifyd>
    735c:	da003d17 	ldw	r8,244(sp)
    7360:	1000f026 	beq	r2,zero,7724 <___vfprintf_internal_r+0x1b24>
    7364:	d9002a17 	ldw	r4,168(sp)
    7368:	05bff7c4 	movi	r22,-33
    736c:	00bfffc4 	movi	r2,-1
    7370:	8dac703a 	and	r22,r17,r22
    7374:	20820026 	beq	r4,r2,7b78 <___vfprintf_internal_r+0x1f78>
    7378:	008011c4 	movi	r2,71
    737c:	b081f726 	beq	r22,r2,7b5c <___vfprintf_internal_r+0x1f5c>
    7380:	d9003817 	ldw	r4,224(sp)
    7384:	90c04014 	ori	r3,r18,256
    7388:	d8c02c15 	stw	r3,176(sp)
    738c:	20021516 	blt	r4,zero,7be4 <___vfprintf_internal_r+0x1fe4>
    7390:	dcc03817 	ldw	r19,224(sp)
    7394:	d8002905 	stb	zero,164(sp)
    7398:	00801984 	movi	r2,102
    739c:	8881f926 	beq	r17,r2,7b84 <___vfprintf_internal_r+0x1f84>
    73a0:	00801184 	movi	r2,70
    73a4:	88821c26 	beq	r17,r2,7c18 <___vfprintf_internal_r+0x2018>
    73a8:	00801144 	movi	r2,69
    73ac:	b081ef26 	beq	r22,r2,7b6c <___vfprintf_internal_r+0x1f6c>
    73b0:	d8c02a17 	ldw	r3,168(sp)
    73b4:	d8802104 	addi	r2,sp,132
    73b8:	d8800315 	stw	r2,12(sp)
    73bc:	d9403617 	ldw	r5,216(sp)
    73c0:	d8802504 	addi	r2,sp,148
    73c4:	d9002d17 	ldw	r4,180(sp)
    73c8:	d8800215 	stw	r2,8(sp)
    73cc:	d8802604 	addi	r2,sp,152
    73d0:	d8c00015 	stw	r3,0(sp)
    73d4:	d8800115 	stw	r2,4(sp)
    73d8:	01c00084 	movi	r7,2
    73dc:	980d883a 	mov	r6,r19
    73e0:	d8c03c15 	stw	r3,240(sp)
    73e4:	da003d15 	stw	r8,244(sp)
    73e8:	00083e40 	call	83e4 <_dtoa_r>
    73ec:	1021883a 	mov	r16,r2
    73f0:	008019c4 	movi	r2,103
    73f4:	d8c03c17 	ldw	r3,240(sp)
    73f8:	da003d17 	ldw	r8,244(sp)
    73fc:	88817126 	beq	r17,r2,79c4 <___vfprintf_internal_r+0x1dc4>
    7400:	008011c4 	movi	r2,71
    7404:	88829126 	beq	r17,r2,7e4c <___vfprintf_internal_r+0x224c>
    7408:	80f9883a 	add	fp,r16,r3
    740c:	d9003617 	ldw	r4,216(sp)
    7410:	000d883a 	mov	r6,zero
    7414:	000f883a 	mov	r7,zero
    7418:	980b883a 	mov	r5,r19
    741c:	da003d15 	stw	r8,244(sp)
    7420:	0010eb80 	call	10eb8 <__eqdf2>
    7424:	da003d17 	ldw	r8,244(sp)
    7428:	10018d26 	beq	r2,zero,7a60 <___vfprintf_internal_r+0x1e60>
    742c:	d8802117 	ldw	r2,132(sp)
    7430:	1700062e 	bgeu	r2,fp,744c <___vfprintf_internal_r+0x184c>
    7434:	01000c04 	movi	r4,48
    7438:	10c00044 	addi	r3,r2,1
    743c:	d8c02115 	stw	r3,132(sp)
    7440:	11000005 	stb	r4,0(r2)
    7444:	d8802117 	ldw	r2,132(sp)
    7448:	173ffb36 	bltu	r2,fp,7438 <__alt_data_end+0xf8007438>
    744c:	1405c83a 	sub	r2,r2,r16
    7450:	d8803315 	stw	r2,204(sp)
    7454:	008011c4 	movi	r2,71
    7458:	b0817626 	beq	r22,r2,7a34 <___vfprintf_internal_r+0x1e34>
    745c:	00801944 	movi	r2,101
    7460:	1442800e 	bge	r2,r17,7e64 <___vfprintf_internal_r+0x2264>
    7464:	d8c02617 	ldw	r3,152(sp)
    7468:	00801984 	movi	r2,102
    746c:	d8c03215 	stw	r3,200(sp)
    7470:	8881fe26 	beq	r17,r2,7c6c <___vfprintf_internal_r+0x206c>
    7474:	d8c03217 	ldw	r3,200(sp)
    7478:	d9003317 	ldw	r4,204(sp)
    747c:	1901dd16 	blt	r3,r4,7bf4 <___vfprintf_internal_r+0x1ff4>
    7480:	9480004c 	andi	r18,r18,1
    7484:	90022b1e 	bne	r18,zero,7d34 <___vfprintf_internal_r+0x2134>
    7488:	1805883a 	mov	r2,r3
    748c:	18028316 	blt	r3,zero,7e9c <___vfprintf_internal_r+0x229c>
    7490:	d8c03217 	ldw	r3,200(sp)
    7494:	044019c4 	movi	r17,103
    7498:	d8c02b15 	stw	r3,172(sp)
    749c:	df002907 	ldb	fp,164(sp)
    74a0:	e001531e 	bne	fp,zero,79f0 <___vfprintf_internal_r+0x1df0>
    74a4:	df002783 	ldbu	fp,158(sp)
    74a8:	d8802915 	stw	r2,164(sp)
    74ac:	dc802c17 	ldw	r18,176(sp)
    74b0:	d8002a15 	stw	zero,168(sp)
    74b4:	003baf06 	br	6374 <__alt_data_end+0xf8006374>
    74b8:	d8c02e17 	ldw	r3,184(sp)
    74bc:	d9002e17 	ldw	r4,184(sp)
    74c0:	d9402e17 	ldw	r5,184(sp)
    74c4:	18c00017 	ldw	r3,0(r3)
    74c8:	21000117 	ldw	r4,4(r4)
    74cc:	29400204 	addi	r5,r5,8
    74d0:	d8c03615 	stw	r3,216(sp)
    74d4:	d9003815 	stw	r4,224(sp)
    74d8:	d9402e15 	stw	r5,184(sp)
    74dc:	003b5006 	br	6220 <__alt_data_end+0xf8006220>
    74e0:	ac400007 	ldb	r17,0(r21)
    74e4:	003a2806 	br	5d88 <__alt_data_end+0xf8005d88>
    74e8:	9080100c 	andi	r2,r18,64
    74ec:	1000a826 	beq	r2,zero,7790 <___vfprintf_internal_r+0x1b90>
    74f0:	d8c02e17 	ldw	r3,184(sp)
    74f4:	002d883a 	mov	r22,zero
    74f8:	1cc0000b 	ldhu	r19,0(r3)
    74fc:	18c00104 	addi	r3,r3,4
    7500:	d8c02e15 	stw	r3,184(sp)
    7504:	003caf06 	br	67c4 <__alt_data_end+0xf80067c4>
    7508:	d9002e17 	ldw	r4,184(sp)
    750c:	d9402a17 	ldw	r5,168(sp)
    7510:	002d883a 	mov	r22,zero
    7514:	20800104 	addi	r2,r4,4
    7518:	24c00017 	ldw	r19,0(r4)
    751c:	283ebb0e 	bge	r5,zero,700c <__alt_data_end+0xf800700c>
    7520:	003ef106 	br	70e8 <__alt_data_end+0xf80070e8>
    7524:	9080040c 	andi	r2,r18,16
    7528:	1000921e 	bne	r2,zero,7774 <___vfprintf_internal_r+0x1b74>
    752c:	9480100c 	andi	r18,r18,64
    7530:	90013926 	beq	r18,zero,7a18 <___vfprintf_internal_r+0x1e18>
    7534:	d9402e17 	ldw	r5,184(sp)
    7538:	d8c02f17 	ldw	r3,188(sp)
    753c:	28800017 	ldw	r2,0(r5)
    7540:	29400104 	addi	r5,r5,4
    7544:	d9402e15 	stw	r5,184(sp)
    7548:	10c0000d 	sth	r3,0(r2)
    754c:	0039e406 	br	5ce0 <__alt_data_end+0xf8005ce0>
    7550:	9080100c 	andi	r2,r18,64
    7554:	10008026 	beq	r2,zero,7758 <___vfprintf_internal_r+0x1b58>
    7558:	d8802e17 	ldw	r2,184(sp)
    755c:	14c0000f 	ldh	r19,0(r2)
    7560:	10800104 	addi	r2,r2,4
    7564:	d8802e15 	stw	r2,184(sp)
    7568:	982dd7fa 	srai	r22,r19,31
    756c:	b005883a 	mov	r2,r22
    7570:	003af706 	br	6150 <__alt_data_end+0xf8006150>
    7574:	9080100c 	andi	r2,r18,64
    7578:	d8002785 	stb	zero,158(sp)
    757c:	10008a1e 	bne	r2,zero,77a8 <___vfprintf_internal_r+0x1ba8>
    7580:	d9002e17 	ldw	r4,184(sp)
    7584:	d9402a17 	ldw	r5,168(sp)
    7588:	002d883a 	mov	r22,zero
    758c:	20800104 	addi	r2,r4,4
    7590:	24c00017 	ldw	r19,0(r4)
    7594:	283e4b0e 	bge	r5,zero,6ec4 <__alt_data_end+0xf8006ec4>
    7598:	9d86b03a 	or	r3,r19,r22
    759c:	d8802e15 	stw	r2,184(sp)
    75a0:	183e4c1e 	bne	r3,zero,6ed4 <__alt_data_end+0xf8006ed4>
    75a4:	0039883a 	mov	fp,zero
    75a8:	0005883a 	mov	r2,zero
    75ac:	003d4006 	br	6ab0 <__alt_data_end+0xf8006ab0>
    75b0:	01400074 	movhi	r5,1
    75b4:	2957b584 	addi	r5,r5,24278
    75b8:	d9402c15 	stw	r5,176(sp)
    75bc:	d9402c17 	ldw	r5,176(sp)
    75c0:	1c47883a 	add	r3,r3,r17
    75c4:	10800044 	addi	r2,r2,1
    75c8:	41400015 	stw	r5,0(r8)
    75cc:	44400115 	stw	r17,4(r8)
    75d0:	d8c02015 	stw	r3,128(sp)
    75d4:	d8801f15 	stw	r2,124(sp)
    75d8:	010001c4 	movi	r4,7
    75dc:	20bec816 	blt	r4,r2,7100 <__alt_data_end+0xf8007100>
    75e0:	42000204 	addi	r8,r8,8
    75e4:	003ecd06 	br	711c <__alt_data_end+0xf800711c>
    75e8:	d9002a17 	ldw	r4,168(sp)
    75ec:	d8002785 	stb	zero,158(sp)
    75f0:	203d2d16 	blt	r4,zero,6aa8 <__alt_data_end+0xf8006aa8>
    75f4:	00bfdfc4 	movi	r2,-129
    75f8:	90a4703a 	and	r18,r18,r2
    75fc:	003a6106 	br	5f84 <__alt_data_end+0xf8005f84>
    7600:	01000074 	movhi	r4,1
    7604:	2117b584 	addi	r4,r4,24278
    7608:	d9002c15 	stw	r4,176(sp)
    760c:	003bea06 	br	65b8 <__alt_data_end+0xf80065b8>
    7610:	d9002d17 	ldw	r4,180(sp)
    7614:	d9801e04 	addi	r6,sp,120
    7618:	b80b883a 	mov	r5,r23
    761c:	000d4340 	call	d434 <__sprint_r>
    7620:	103a7b1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    7624:	d8c02017 	ldw	r3,128(sp)
    7628:	da000404 	addi	r8,sp,16
    762c:	003d4106 	br	6b34 <__alt_data_end+0xf8006b34>
    7630:	d8801f17 	ldw	r2,124(sp)
    7634:	01400074 	movhi	r5,1
    7638:	01000044 	movi	r4,1
    763c:	18c00044 	addi	r3,r3,1
    7640:	10800044 	addi	r2,r2,1
    7644:	2957ad04 	addi	r5,r5,24244
    7648:	41000115 	stw	r4,4(r8)
    764c:	41400015 	stw	r5,0(r8)
    7650:	d8c02015 	stw	r3,128(sp)
    7654:	d8801f15 	stw	r2,124(sp)
    7658:	010001c4 	movi	r4,7
    765c:	20805c16 	blt	r4,r2,77d0 <___vfprintf_internal_r+0x1bd0>
    7660:	42000204 	addi	r8,r8,8
    7664:	8800041e 	bne	r17,zero,7678 <___vfprintf_internal_r+0x1a78>
    7668:	d8803317 	ldw	r2,204(sp)
    766c:	1000021e 	bne	r2,zero,7678 <___vfprintf_internal_r+0x1a78>
    7670:	9080004c 	andi	r2,r18,1
    7674:	103be726 	beq	r2,zero,6614 <__alt_data_end+0xf8006614>
    7678:	d9003717 	ldw	r4,220(sp)
    767c:	d8801f17 	ldw	r2,124(sp)
    7680:	d9403417 	ldw	r5,208(sp)
    7684:	20c7883a 	add	r3,r4,r3
    7688:	10800044 	addi	r2,r2,1
    768c:	41000115 	stw	r4,4(r8)
    7690:	41400015 	stw	r5,0(r8)
    7694:	d8c02015 	stw	r3,128(sp)
    7698:	d8801f15 	stw	r2,124(sp)
    769c:	010001c4 	movi	r4,7
    76a0:	20812116 	blt	r4,r2,7b28 <___vfprintf_internal_r+0x1f28>
    76a4:	42000204 	addi	r8,r8,8
    76a8:	0463c83a 	sub	r17,zero,r17
    76ac:	0440730e 	bge	zero,r17,787c <___vfprintf_internal_r+0x1c7c>
    76b0:	05800404 	movi	r22,16
    76b4:	b440860e 	bge	r22,r17,78d0 <___vfprintf_internal_r+0x1cd0>
    76b8:	01400074 	movhi	r5,1
    76bc:	2957b584 	addi	r5,r5,24278
    76c0:	d9402c15 	stw	r5,176(sp)
    76c4:	070001c4 	movi	fp,7
    76c8:	dcc02d17 	ldw	r19,180(sp)
    76cc:	00000306 	br	76dc <___vfprintf_internal_r+0x1adc>
    76d0:	42000204 	addi	r8,r8,8
    76d4:	8c7ffc04 	addi	r17,r17,-16
    76d8:	b440800e 	bge	r22,r17,78dc <___vfprintf_internal_r+0x1cdc>
    76dc:	18c00404 	addi	r3,r3,16
    76e0:	10800044 	addi	r2,r2,1
    76e4:	45000015 	stw	r20,0(r8)
    76e8:	45800115 	stw	r22,4(r8)
    76ec:	d8c02015 	stw	r3,128(sp)
    76f0:	d8801f15 	stw	r2,124(sp)
    76f4:	e0bff60e 	bge	fp,r2,76d0 <__alt_data_end+0xf80076d0>
    76f8:	d9801e04 	addi	r6,sp,120
    76fc:	b80b883a 	mov	r5,r23
    7700:	9809883a 	mov	r4,r19
    7704:	000d4340 	call	d434 <__sprint_r>
    7708:	103a411e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    770c:	d8c02017 	ldw	r3,128(sp)
    7710:	d8801f17 	ldw	r2,124(sp)
    7714:	da000404 	addi	r8,sp,16
    7718:	003fee06 	br	76d4 <__alt_data_end+0xf80076d4>
    771c:	00bfffc4 	movi	r2,-1
    7720:	003a3f06 	br	6020 <__alt_data_end+0xf8006020>
    7724:	008011c4 	movi	r2,71
    7728:	1440b816 	blt	r2,r17,7a0c <___vfprintf_internal_r+0x1e0c>
    772c:	04000074 	movhi	r16,1
    7730:	84179f04 	addi	r16,r16,24188
    7734:	00c000c4 	movi	r3,3
    7738:	00bfdfc4 	movi	r2,-129
    773c:	d8c02915 	stw	r3,164(sp)
    7740:	90a4703a 	and	r18,r18,r2
    7744:	df002783 	ldbu	fp,158(sp)
    7748:	d8c02b15 	stw	r3,172(sp)
    774c:	d8002a15 	stw	zero,168(sp)
    7750:	d8003215 	stw	zero,200(sp)
    7754:	003b0706 	br	6374 <__alt_data_end+0xf8006374>
    7758:	d8c02e17 	ldw	r3,184(sp)
    775c:	1cc00017 	ldw	r19,0(r3)
    7760:	18c00104 	addi	r3,r3,4
    7764:	d8c02e15 	stw	r3,184(sp)
    7768:	982dd7fa 	srai	r22,r19,31
    776c:	b005883a 	mov	r2,r22
    7770:	003a7706 	br	6150 <__alt_data_end+0xf8006150>
    7774:	d8c02e17 	ldw	r3,184(sp)
    7778:	d9002f17 	ldw	r4,188(sp)
    777c:	18800017 	ldw	r2,0(r3)
    7780:	18c00104 	addi	r3,r3,4
    7784:	d8c02e15 	stw	r3,184(sp)
    7788:	11000015 	stw	r4,0(r2)
    778c:	00395406 	br	5ce0 <__alt_data_end+0xf8005ce0>
    7790:	d9002e17 	ldw	r4,184(sp)
    7794:	002d883a 	mov	r22,zero
    7798:	24c00017 	ldw	r19,0(r4)
    779c:	21000104 	addi	r4,r4,4
    77a0:	d9002e15 	stw	r4,184(sp)
    77a4:	003c0706 	br	67c4 <__alt_data_end+0xf80067c4>
    77a8:	d9402e17 	ldw	r5,184(sp)
    77ac:	d8c02a17 	ldw	r3,168(sp)
    77b0:	002d883a 	mov	r22,zero
    77b4:	28800104 	addi	r2,r5,4
    77b8:	2cc0000b 	ldhu	r19,0(r5)
    77bc:	183dc10e 	bge	r3,zero,6ec4 <__alt_data_end+0xf8006ec4>
    77c0:	003f7506 	br	7598 <__alt_data_end+0xf8007598>
    77c4:	04000074 	movhi	r16,1
    77c8:	84179d04 	addi	r16,r16,24180
    77cc:	003aa706 	br	626c <__alt_data_end+0xf800626c>
    77d0:	d9002d17 	ldw	r4,180(sp)
    77d4:	d9801e04 	addi	r6,sp,120
    77d8:	b80b883a 	mov	r5,r23
    77dc:	000d4340 	call	d434 <__sprint_r>
    77e0:	103a0b1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    77e4:	dc402617 	ldw	r17,152(sp)
    77e8:	d8c02017 	ldw	r3,128(sp)
    77ec:	da000404 	addi	r8,sp,16
    77f0:	003f9c06 	br	7664 <__alt_data_end+0xf8007664>
    77f4:	ac400043 	ldbu	r17,1(r21)
    77f8:	84000814 	ori	r16,r16,32
    77fc:	ad400044 	addi	r21,r21,1
    7800:	8c403fcc 	andi	r17,r17,255
    7804:	8c40201c 	xori	r17,r17,128
    7808:	8c7fe004 	addi	r17,r17,-128
    780c:	00395e06 	br	5d88 <__alt_data_end+0xf8005d88>
    7810:	d8c02e15 	stw	r3,184(sp)
    7814:	0039883a 	mov	fp,zero
    7818:	003e3506 	br	70f0 <__alt_data_end+0xf80070f0>
    781c:	d9002d17 	ldw	r4,180(sp)
    7820:	d9801e04 	addi	r6,sp,120
    7824:	b80b883a 	mov	r5,r23
    7828:	000d4340 	call	d434 <__sprint_r>
    782c:	1039f81e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    7830:	d8c02017 	ldw	r3,128(sp)
    7834:	da000404 	addi	r8,sp,16
    7838:	003cd006 	br	6b7c <__alt_data_end+0xf8006b7c>
    783c:	8009883a 	mov	r4,r16
    7840:	df003d15 	stw	fp,244(sp)
    7844:	00038ac0 	call	38ac <strlen>
    7848:	d8802b15 	stw	r2,172(sp)
    784c:	da003d17 	ldw	r8,244(sp)
    7850:	103c200e 	bge	r2,zero,68d4 <__alt_data_end+0xf80068d4>
    7854:	0005883a 	mov	r2,zero
    7858:	003c1e06 	br	68d4 <__alt_data_end+0xf80068d4>
    785c:	d9002d17 	ldw	r4,180(sp)
    7860:	d9801e04 	addi	r6,sp,120
    7864:	b80b883a 	mov	r5,r23
    7868:	000d4340 	call	d434 <__sprint_r>
    786c:	1039e81e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    7870:	d8c02017 	ldw	r3,128(sp)
    7874:	d8801f17 	ldw	r2,124(sp)
    7878:	da000404 	addi	r8,sp,16
    787c:	d9403317 	ldw	r5,204(sp)
    7880:	10800044 	addi	r2,r2,1
    7884:	44000015 	stw	r16,0(r8)
    7888:	28c7883a 	add	r3,r5,r3
    788c:	003b5b06 	br	65fc <__alt_data_end+0xf80065fc>
    7890:	01000074 	movhi	r4,1
    7894:	2117b984 	addi	r4,r4,24294
    7898:	d9003515 	stw	r4,212(sp)
    789c:	003af206 	br	6468 <__alt_data_end+0xf8006468>
    78a0:	013fffc4 	movi	r4,-1
    78a4:	003a0806 	br	60c8 <__alt_data_end+0xf80060c8>
    78a8:	0023883a 	mov	r17,zero
    78ac:	003d9d06 	br	6f24 <__alt_data_end+0xf8006f24>
    78b0:	d9002d17 	ldw	r4,180(sp)
    78b4:	d9801e04 	addi	r6,sp,120
    78b8:	b80b883a 	mov	r5,r23
    78bc:	000d4340 	call	d434 <__sprint_r>
    78c0:	1039d31e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    78c4:	d8c02017 	ldw	r3,128(sp)
    78c8:	da000404 	addi	r8,sp,16
    78cc:	003d9406 	br	6f20 <__alt_data_end+0xf8006f20>
    78d0:	01000074 	movhi	r4,1
    78d4:	2117b584 	addi	r4,r4,24278
    78d8:	d9002c15 	stw	r4,176(sp)
    78dc:	d9002c17 	ldw	r4,176(sp)
    78e0:	1c47883a 	add	r3,r3,r17
    78e4:	10800044 	addi	r2,r2,1
    78e8:	41000015 	stw	r4,0(r8)
    78ec:	44400115 	stw	r17,4(r8)
    78f0:	d8c02015 	stw	r3,128(sp)
    78f4:	d8801f15 	stw	r2,124(sp)
    78f8:	010001c4 	movi	r4,7
    78fc:	20bfd716 	blt	r4,r2,785c <__alt_data_end+0xf800785c>
    7900:	42000204 	addi	r8,r8,8
    7904:	003fdd06 	br	787c <__alt_data_end+0xf800787c>
    7908:	d9002d17 	ldw	r4,180(sp)
    790c:	d9801e04 	addi	r6,sp,120
    7910:	b80b883a 	mov	r5,r23
    7914:	000d4340 	call	d434 <__sprint_r>
    7918:	1039bd1e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    791c:	d8802617 	ldw	r2,152(sp)
    7920:	d8c02017 	ldw	r3,128(sp)
    7924:	da000404 	addi	r8,sp,16
    7928:	003e1006 	br	716c <__alt_data_end+0xf800716c>
    792c:	00800044 	movi	r2,1
    7930:	10803fcc 	andi	r2,r2,255
    7934:	00c00044 	movi	r3,1
    7938:	10fa0d26 	beq	r2,r3,6170 <__alt_data_end+0xf8006170>
    793c:	00c00084 	movi	r3,2
    7940:	10fbaf26 	beq	r2,r3,6800 <__alt_data_end+0xf8006800>
    7944:	003a6d06 	br	62fc <__alt_data_end+0xf80062fc>
    7948:	01000074 	movhi	r4,1
    794c:	2117b984 	addi	r4,r4,24294
    7950:	d9003515 	stw	r4,212(sp)
    7954:	003b5406 	br	66a8 <__alt_data_end+0xf80066a8>
    7958:	d8802a17 	ldw	r2,168(sp)
    795c:	00c00184 	movi	r3,6
    7960:	1880012e 	bgeu	r3,r2,7968 <___vfprintf_internal_r+0x1d68>
    7964:	1805883a 	mov	r2,r3
    7968:	d8802b15 	stw	r2,172(sp)
    796c:	1000ef16 	blt	r2,zero,7d2c <___vfprintf_internal_r+0x212c>
    7970:	04000074 	movhi	r16,1
    7974:	d8802915 	stw	r2,164(sp)
    7978:	dcc02e15 	stw	r19,184(sp)
    797c:	d8002a15 	stw	zero,168(sp)
    7980:	d8003215 	stw	zero,200(sp)
    7984:	8417ab04 	addi	r16,r16,24236
    7988:	0039883a 	mov	fp,zero
    798c:	003a8006 	br	6390 <__alt_data_end+0xf8006390>
    7990:	0021883a 	mov	r16,zero
    7994:	003e0706 	br	71b4 <__alt_data_end+0xf80071b4>
    7998:	d9002d17 	ldw	r4,180(sp)
    799c:	d9801e04 	addi	r6,sp,120
    79a0:	b80b883a 	mov	r5,r23
    79a4:	000d4340 	call	d434 <__sprint_r>
    79a8:	1039991e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    79ac:	d8802617 	ldw	r2,152(sp)
    79b0:	d9403317 	ldw	r5,204(sp)
    79b4:	d8c02017 	ldw	r3,128(sp)
    79b8:	da000404 	addi	r8,sp,16
    79bc:	2885c83a 	sub	r2,r5,r2
    79c0:	003dfb06 	br	71b0 <__alt_data_end+0xf80071b0>
    79c4:	9080004c 	andi	r2,r18,1
    79c8:	103e8f1e 	bne	r2,zero,7408 <__alt_data_end+0xf8007408>
    79cc:	d8802117 	ldw	r2,132(sp)
    79d0:	003e9e06 	br	744c <__alt_data_end+0xf800744c>
    79d4:	1025883a 	mov	r18,r2
    79d8:	0039883a 	mov	fp,zero
    79dc:	00800084 	movi	r2,2
    79e0:	003fd306 	br	7930 <__alt_data_end+0xf8007930>
    79e4:	07000b44 	movi	fp,45
    79e8:	df002785 	stb	fp,158(sp)
    79ec:	003a1b06 	br	625c <__alt_data_end+0xf800625c>
    79f0:	00c00b44 	movi	r3,45
    79f4:	d8c02785 	stb	r3,158(sp)
    79f8:	d8802915 	stw	r2,164(sp)
    79fc:	dc802c17 	ldw	r18,176(sp)
    7a00:	d8002a15 	stw	zero,168(sp)
    7a04:	07000b44 	movi	fp,45
    7a08:	003a5e06 	br	6384 <__alt_data_end+0xf8006384>
    7a0c:	04000074 	movhi	r16,1
    7a10:	8417a004 	addi	r16,r16,24192
    7a14:	003f4706 	br	7734 <__alt_data_end+0xf8007734>
    7a18:	d9002e17 	ldw	r4,184(sp)
    7a1c:	d9402f17 	ldw	r5,188(sp)
    7a20:	20800017 	ldw	r2,0(r4)
    7a24:	21000104 	addi	r4,r4,4
    7a28:	d9002e15 	stw	r4,184(sp)
    7a2c:	11400015 	stw	r5,0(r2)
    7a30:	0038ab06 	br	5ce0 <__alt_data_end+0xf8005ce0>
    7a34:	dd802617 	ldw	r22,152(sp)
    7a38:	00bfff44 	movi	r2,-3
    7a3c:	b0801c16 	blt	r22,r2,7ab0 <___vfprintf_internal_r+0x1eb0>
    7a40:	d9402a17 	ldw	r5,168(sp)
    7a44:	2d801a16 	blt	r5,r22,7ab0 <___vfprintf_internal_r+0x1eb0>
    7a48:	dd803215 	stw	r22,200(sp)
    7a4c:	003e8906 	br	7474 <__alt_data_end+0xf8007474>
    7a50:	01000074 	movhi	r4,1
    7a54:	2117b584 	addi	r4,r4,24278
    7a58:	d9002c15 	stw	r4,176(sp)
    7a5c:	003c9106 	br	6ca4 <__alt_data_end+0xf8006ca4>
    7a60:	e005883a 	mov	r2,fp
    7a64:	003e7906 	br	744c <__alt_data_end+0xf800744c>
    7a68:	d9002a17 	ldw	r4,168(sp)
    7a6c:	df002783 	ldbu	fp,158(sp)
    7a70:	dcc02e15 	stw	r19,184(sp)
    7a74:	d9002915 	stw	r4,164(sp)
    7a78:	d9002b15 	stw	r4,172(sp)
    7a7c:	d8002a15 	stw	zero,168(sp)
    7a80:	d8003215 	stw	zero,200(sp)
    7a84:	003a3b06 	br	6374 <__alt_data_end+0xf8006374>
    7a88:	9080004c 	andi	r2,r18,1
    7a8c:	0039883a 	mov	fp,zero
    7a90:	10000426 	beq	r2,zero,7aa4 <___vfprintf_internal_r+0x1ea4>
    7a94:	00800c04 	movi	r2,48
    7a98:	dc001dc4 	addi	r16,sp,119
    7a9c:	d8801dc5 	stb	r2,119(sp)
    7aa0:	003b6406 	br	6834 <__alt_data_end+0xf8006834>
    7aa4:	d8002b15 	stw	zero,172(sp)
    7aa8:	dc001e04 	addi	r16,sp,120
    7aac:	003a2b06 	br	635c <__alt_data_end+0xf800635c>
    7ab0:	8c7fff84 	addi	r17,r17,-2
    7ab4:	b5bfffc4 	addi	r22,r22,-1
    7ab8:	dd802615 	stw	r22,152(sp)
    7abc:	dc4022c5 	stb	r17,139(sp)
    7ac0:	b000bf16 	blt	r22,zero,7dc0 <___vfprintf_internal_r+0x21c0>
    7ac4:	00800ac4 	movi	r2,43
    7ac8:	d8802305 	stb	r2,140(sp)
    7acc:	00800244 	movi	r2,9
    7ad0:	15807016 	blt	r2,r22,7c94 <___vfprintf_internal_r+0x2094>
    7ad4:	00800c04 	movi	r2,48
    7ad8:	b5800c04 	addi	r22,r22,48
    7adc:	d8802345 	stb	r2,141(sp)
    7ae0:	dd802385 	stb	r22,142(sp)
    7ae4:	d88023c4 	addi	r2,sp,143
    7ae8:	df0022c4 	addi	fp,sp,139
    7aec:	d8c03317 	ldw	r3,204(sp)
    7af0:	1739c83a 	sub	fp,r2,fp
    7af4:	d9003317 	ldw	r4,204(sp)
    7af8:	e0c7883a 	add	r3,fp,r3
    7afc:	df003a15 	stw	fp,232(sp)
    7b00:	d8c02b15 	stw	r3,172(sp)
    7b04:	00800044 	movi	r2,1
    7b08:	1100b30e 	bge	r2,r4,7dd8 <___vfprintf_internal_r+0x21d8>
    7b0c:	d8c02b17 	ldw	r3,172(sp)
    7b10:	18c00044 	addi	r3,r3,1
    7b14:	d8c02b15 	stw	r3,172(sp)
    7b18:	1805883a 	mov	r2,r3
    7b1c:	1800ac16 	blt	r3,zero,7dd0 <___vfprintf_internal_r+0x21d0>
    7b20:	d8003215 	stw	zero,200(sp)
    7b24:	003e5d06 	br	749c <__alt_data_end+0xf800749c>
    7b28:	d9002d17 	ldw	r4,180(sp)
    7b2c:	d9801e04 	addi	r6,sp,120
    7b30:	b80b883a 	mov	r5,r23
    7b34:	000d4340 	call	d434 <__sprint_r>
    7b38:	1039351e 	bne	r2,zero,6010 <__alt_data_end+0xf8006010>
    7b3c:	dc402617 	ldw	r17,152(sp)
    7b40:	d8c02017 	ldw	r3,128(sp)
    7b44:	d8801f17 	ldw	r2,124(sp)
    7b48:	da000404 	addi	r8,sp,16
    7b4c:	003ed606 	br	76a8 <__alt_data_end+0xf80076a8>
    7b50:	182b883a 	mov	r21,r3
    7b54:	d8002a15 	stw	zero,168(sp)
    7b58:	00388c06 	br	5d8c <__alt_data_end+0xf8005d8c>
    7b5c:	d8802a17 	ldw	r2,168(sp)
    7b60:	103e071e 	bne	r2,zero,7380 <__alt_data_end+0xf8007380>
    7b64:	dc002a15 	stw	r16,168(sp)
    7b68:	003e0506 	br	7380 <__alt_data_end+0xf8007380>
    7b6c:	d9002a17 	ldw	r4,168(sp)
    7b70:	20c00044 	addi	r3,r4,1
    7b74:	003e0f06 	br	73b4 <__alt_data_end+0xf80073b4>
    7b78:	01400184 	movi	r5,6
    7b7c:	d9402a15 	stw	r5,168(sp)
    7b80:	003dff06 	br	7380 <__alt_data_end+0xf8007380>
    7b84:	d8802104 	addi	r2,sp,132
    7b88:	d8800315 	stw	r2,12(sp)
    7b8c:	d8802504 	addi	r2,sp,148
    7b90:	d8800215 	stw	r2,8(sp)
    7b94:	d8802604 	addi	r2,sp,152
    7b98:	d8800115 	stw	r2,4(sp)
    7b9c:	d8802a17 	ldw	r2,168(sp)
    7ba0:	d9403617 	ldw	r5,216(sp)
    7ba4:	d9002d17 	ldw	r4,180(sp)
    7ba8:	d8800015 	stw	r2,0(sp)
    7bac:	01c000c4 	movi	r7,3
    7bb0:	980d883a 	mov	r6,r19
    7bb4:	da003d15 	stw	r8,244(sp)
    7bb8:	00083e40 	call	83e4 <_dtoa_r>
    7bbc:	d8c02a17 	ldw	r3,168(sp)
    7bc0:	da003d17 	ldw	r8,244(sp)
    7bc4:	1021883a 	mov	r16,r2
    7bc8:	10f9883a 	add	fp,r2,r3
    7bcc:	81000007 	ldb	r4,0(r16)
    7bd0:	00800c04 	movi	r2,48
    7bd4:	20805e26 	beq	r4,r2,7d50 <___vfprintf_internal_r+0x2150>
    7bd8:	d8c02617 	ldw	r3,152(sp)
    7bdc:	e0f9883a 	add	fp,fp,r3
    7be0:	003e0a06 	br	740c <__alt_data_end+0xf800740c>
    7be4:	00c00b44 	movi	r3,45
    7be8:	24e0003c 	xorhi	r19,r4,32768
    7bec:	d8c02905 	stb	r3,164(sp)
    7bf0:	003de906 	br	7398 <__alt_data_end+0xf8007398>
    7bf4:	d8c03217 	ldw	r3,200(sp)
    7bf8:	00c07a0e 	bge	zero,r3,7de4 <___vfprintf_internal_r+0x21e4>
    7bfc:	00800044 	movi	r2,1
    7c00:	d9003317 	ldw	r4,204(sp)
    7c04:	1105883a 	add	r2,r2,r4
    7c08:	d8802b15 	stw	r2,172(sp)
    7c0c:	10004e16 	blt	r2,zero,7d48 <___vfprintf_internal_r+0x2148>
    7c10:	044019c4 	movi	r17,103
    7c14:	003e2106 	br	749c <__alt_data_end+0xf800749c>
    7c18:	d9002a17 	ldw	r4,168(sp)
    7c1c:	d8802104 	addi	r2,sp,132
    7c20:	d8800315 	stw	r2,12(sp)
    7c24:	d9000015 	stw	r4,0(sp)
    7c28:	d8802504 	addi	r2,sp,148
    7c2c:	d9403617 	ldw	r5,216(sp)
    7c30:	d9002d17 	ldw	r4,180(sp)
    7c34:	d8800215 	stw	r2,8(sp)
    7c38:	d8802604 	addi	r2,sp,152
    7c3c:	d8800115 	stw	r2,4(sp)
    7c40:	01c000c4 	movi	r7,3
    7c44:	980d883a 	mov	r6,r19
    7c48:	da003d15 	stw	r8,244(sp)
    7c4c:	00083e40 	call	83e4 <_dtoa_r>
    7c50:	d8c02a17 	ldw	r3,168(sp)
    7c54:	da003d17 	ldw	r8,244(sp)
    7c58:	1021883a 	mov	r16,r2
    7c5c:	00801184 	movi	r2,70
    7c60:	80f9883a 	add	fp,r16,r3
    7c64:	88bfd926 	beq	r17,r2,7bcc <__alt_data_end+0xf8007bcc>
    7c68:	003de806 	br	740c <__alt_data_end+0xf800740c>
    7c6c:	d9002a17 	ldw	r4,168(sp)
    7c70:	00c04d0e 	bge	zero,r3,7da8 <___vfprintf_internal_r+0x21a8>
    7c74:	2000441e 	bne	r4,zero,7d88 <___vfprintf_internal_r+0x2188>
    7c78:	9480004c 	andi	r18,r18,1
    7c7c:	9000421e 	bne	r18,zero,7d88 <___vfprintf_internal_r+0x2188>
    7c80:	1805883a 	mov	r2,r3
    7c84:	18006f16 	blt	r3,zero,7e44 <___vfprintf_internal_r+0x2244>
    7c88:	d8c03217 	ldw	r3,200(sp)
    7c8c:	d8c02b15 	stw	r3,172(sp)
    7c90:	003e0206 	br	749c <__alt_data_end+0xf800749c>
    7c94:	df0022c4 	addi	fp,sp,139
    7c98:	dc002a15 	stw	r16,168(sp)
    7c9c:	4027883a 	mov	r19,r8
    7ca0:	e021883a 	mov	r16,fp
    7ca4:	b009883a 	mov	r4,r22
    7ca8:	01400284 	movi	r5,10
    7cac:	00013500 	call	1350 <__modsi3>
    7cb0:	10800c04 	addi	r2,r2,48
    7cb4:	843fffc4 	addi	r16,r16,-1
    7cb8:	b009883a 	mov	r4,r22
    7cbc:	01400284 	movi	r5,10
    7cc0:	80800005 	stb	r2,0(r16)
    7cc4:	00012cc0 	call	12cc <__divsi3>
    7cc8:	102d883a 	mov	r22,r2
    7ccc:	00800244 	movi	r2,9
    7cd0:	15bff416 	blt	r2,r22,7ca4 <__alt_data_end+0xf8007ca4>
    7cd4:	9811883a 	mov	r8,r19
    7cd8:	b0800c04 	addi	r2,r22,48
    7cdc:	8027883a 	mov	r19,r16
    7ce0:	997fffc4 	addi	r5,r19,-1
    7ce4:	98bfffc5 	stb	r2,-1(r19)
    7ce8:	dc002a17 	ldw	r16,168(sp)
    7cec:	2f006d2e 	bgeu	r5,fp,7ea4 <___vfprintf_internal_r+0x22a4>
    7cf0:	d9c02384 	addi	r7,sp,142
    7cf4:	3ccfc83a 	sub	r7,r7,r19
    7cf8:	d9002344 	addi	r4,sp,141
    7cfc:	e1cf883a 	add	r7,fp,r7
    7d00:	00000106 	br	7d08 <___vfprintf_internal_r+0x2108>
    7d04:	28800003 	ldbu	r2,0(r5)
    7d08:	20800005 	stb	r2,0(r4)
    7d0c:	21000044 	addi	r4,r4,1
    7d10:	29400044 	addi	r5,r5,1
    7d14:	393ffb1e 	bne	r7,r4,7d04 <__alt_data_end+0xf8007d04>
    7d18:	d8802304 	addi	r2,sp,140
    7d1c:	14c5c83a 	sub	r2,r2,r19
    7d20:	d8c02344 	addi	r3,sp,141
    7d24:	1885883a 	add	r2,r3,r2
    7d28:	003f7006 	br	7aec <__alt_data_end+0xf8007aec>
    7d2c:	0005883a 	mov	r2,zero
    7d30:	003f0f06 	br	7970 <__alt_data_end+0xf8007970>
    7d34:	d8c03217 	ldw	r3,200(sp)
    7d38:	18c00044 	addi	r3,r3,1
    7d3c:	d8c02b15 	stw	r3,172(sp)
    7d40:	1805883a 	mov	r2,r3
    7d44:	183fb20e 	bge	r3,zero,7c10 <__alt_data_end+0xf8007c10>
    7d48:	0005883a 	mov	r2,zero
    7d4c:	003fb006 	br	7c10 <__alt_data_end+0xf8007c10>
    7d50:	d9003617 	ldw	r4,216(sp)
    7d54:	000d883a 	mov	r6,zero
    7d58:	000f883a 	mov	r7,zero
    7d5c:	980b883a 	mov	r5,r19
    7d60:	d8c03c15 	stw	r3,240(sp)
    7d64:	da003d15 	stw	r8,244(sp)
    7d68:	0010eb80 	call	10eb8 <__eqdf2>
    7d6c:	d8c03c17 	ldw	r3,240(sp)
    7d70:	da003d17 	ldw	r8,244(sp)
    7d74:	103f9826 	beq	r2,zero,7bd8 <__alt_data_end+0xf8007bd8>
    7d78:	00800044 	movi	r2,1
    7d7c:	10c7c83a 	sub	r3,r2,r3
    7d80:	d8c02615 	stw	r3,152(sp)
    7d84:	003f9506 	br	7bdc <__alt_data_end+0xf8007bdc>
    7d88:	d9002a17 	ldw	r4,168(sp)
    7d8c:	d8c03217 	ldw	r3,200(sp)
    7d90:	20800044 	addi	r2,r4,1
    7d94:	1885883a 	add	r2,r3,r2
    7d98:	d8802b15 	stw	r2,172(sp)
    7d9c:	103dbf0e 	bge	r2,zero,749c <__alt_data_end+0xf800749c>
    7da0:	0005883a 	mov	r2,zero
    7da4:	003dbd06 	br	749c <__alt_data_end+0xf800749c>
    7da8:	2000201e 	bne	r4,zero,7e2c <___vfprintf_internal_r+0x222c>
    7dac:	9480004c 	andi	r18,r18,1
    7db0:	90001e1e 	bne	r18,zero,7e2c <___vfprintf_internal_r+0x222c>
    7db4:	00800044 	movi	r2,1
    7db8:	d8802b15 	stw	r2,172(sp)
    7dbc:	003db706 	br	749c <__alt_data_end+0xf800749c>
    7dc0:	00800b44 	movi	r2,45
    7dc4:	05adc83a 	sub	r22,zero,r22
    7dc8:	d8802305 	stb	r2,140(sp)
    7dcc:	003f3f06 	br	7acc <__alt_data_end+0xf8007acc>
    7dd0:	0005883a 	mov	r2,zero
    7dd4:	003f5206 	br	7b20 <__alt_data_end+0xf8007b20>
    7dd8:	90a4703a 	and	r18,r18,r2
    7ddc:	903f4e26 	beq	r18,zero,7b18 <__alt_data_end+0xf8007b18>
    7de0:	003f4a06 	br	7b0c <__alt_data_end+0xf8007b0c>
    7de4:	00800084 	movi	r2,2
    7de8:	10c5c83a 	sub	r2,r2,r3
    7dec:	003f8406 	br	7c00 <__alt_data_end+0xf8007c00>
    7df0:	d9402e17 	ldw	r5,184(sp)
    7df4:	d9002e17 	ldw	r4,184(sp)
    7df8:	ac400043 	ldbu	r17,1(r21)
    7dfc:	29400017 	ldw	r5,0(r5)
    7e00:	20800104 	addi	r2,r4,4
    7e04:	d8802e15 	stw	r2,184(sp)
    7e08:	d9402a15 	stw	r5,168(sp)
    7e0c:	182b883a 	mov	r21,r3
    7e10:	283e7b0e 	bge	r5,zero,7800 <__alt_data_end+0xf8007800>
    7e14:	8c403fcc 	andi	r17,r17,255
    7e18:	017fffc4 	movi	r5,-1
    7e1c:	8c40201c 	xori	r17,r17,128
    7e20:	d9402a15 	stw	r5,168(sp)
    7e24:	8c7fe004 	addi	r17,r17,-128
    7e28:	0037d706 	br	5d88 <__alt_data_end+0xf8005d88>
    7e2c:	d8c02a17 	ldw	r3,168(sp)
    7e30:	18c00084 	addi	r3,r3,2
    7e34:	d8c02b15 	stw	r3,172(sp)
    7e38:	1805883a 	mov	r2,r3
    7e3c:	183d970e 	bge	r3,zero,749c <__alt_data_end+0xf800749c>
    7e40:	003fd706 	br	7da0 <__alt_data_end+0xf8007da0>
    7e44:	0005883a 	mov	r2,zero
    7e48:	003f8f06 	br	7c88 <__alt_data_end+0xf8007c88>
    7e4c:	9080004c 	andi	r2,r18,1
    7e50:	103f821e 	bne	r2,zero,7c5c <__alt_data_end+0xf8007c5c>
    7e54:	d8802117 	ldw	r2,132(sp)
    7e58:	1405c83a 	sub	r2,r2,r16
    7e5c:	d8803315 	stw	r2,204(sp)
    7e60:	b47ef426 	beq	r22,r17,7a34 <__alt_data_end+0xf8007a34>
    7e64:	dd802617 	ldw	r22,152(sp)
    7e68:	003f1206 	br	7ab4 <__alt_data_end+0xf8007ab4>
    7e6c:	d8c02b03 	ldbu	r3,172(sp)
    7e70:	d8c02785 	stb	r3,158(sp)
    7e74:	0038df06 	br	61f4 <__alt_data_end+0xf80061f4>
    7e78:	d8c02b03 	ldbu	r3,172(sp)
    7e7c:	d8c02785 	stb	r3,158(sp)
    7e80:	0038aa06 	br	612c <__alt_data_end+0xf800612c>
    7e84:	d8c02b03 	ldbu	r3,172(sp)
    7e88:	d8c02785 	stb	r3,158(sp)
    7e8c:	003a4306 	br	679c <__alt_data_end+0xf800679c>
    7e90:	d8c02b03 	ldbu	r3,172(sp)
    7e94:	d8c02785 	stb	r3,158(sp)
    7e98:	003af506 	br	6a70 <__alt_data_end+0xf8006a70>
    7e9c:	0005883a 	mov	r2,zero
    7ea0:	003d7b06 	br	7490 <__alt_data_end+0xf8007490>
    7ea4:	d8802344 	addi	r2,sp,141
    7ea8:	003f1006 	br	7aec <__alt_data_end+0xf8007aec>
    7eac:	d8c02b03 	ldbu	r3,172(sp)
    7eb0:	d8c02785 	stb	r3,158(sp)
    7eb4:	0038fd06 	br	62ac <__alt_data_end+0xf80062ac>
    7eb8:	d8c02b03 	ldbu	r3,172(sp)
    7ebc:	d8c02785 	stb	r3,158(sp)
    7ec0:	003a9706 	br	6920 <__alt_data_end+0xf8006920>
    7ec4:	d8c02b03 	ldbu	r3,172(sp)
    7ec8:	d8c02785 	stb	r3,158(sp)
    7ecc:	003a1806 	br	6730 <__alt_data_end+0xf8006730>
    7ed0:	d8c02b03 	ldbu	r3,172(sp)
    7ed4:	d8c02785 	stb	r3,158(sp)
    7ed8:	003abe06 	br	69d4 <__alt_data_end+0xf80069d4>

00007edc <__vfprintf_internal>:
    7edc:	008000b4 	movhi	r2,2
    7ee0:	10a01704 	addi	r2,r2,-32676
    7ee4:	300f883a 	mov	r7,r6
    7ee8:	280d883a 	mov	r6,r5
    7eec:	200b883a 	mov	r5,r4
    7ef0:	11000017 	ldw	r4,0(r2)
    7ef4:	0005c001 	jmpi	5c00 <___vfprintf_internal_r>

00007ef8 <__sbprintf>:
    7ef8:	2880030b 	ldhu	r2,12(r5)
    7efc:	2ac01917 	ldw	r11,100(r5)
    7f00:	2a80038b 	ldhu	r10,14(r5)
    7f04:	2a400717 	ldw	r9,28(r5)
    7f08:	2a000917 	ldw	r8,36(r5)
    7f0c:	defee204 	addi	sp,sp,-1144
    7f10:	00c10004 	movi	r3,1024
    7f14:	dc011a15 	stw	r16,1128(sp)
    7f18:	10bfff4c 	andi	r2,r2,65533
    7f1c:	2821883a 	mov	r16,r5
    7f20:	d8cb883a 	add	r5,sp,r3
    7f24:	dc811c15 	stw	r18,1136(sp)
    7f28:	dc411b15 	stw	r17,1132(sp)
    7f2c:	dfc11d15 	stw	ra,1140(sp)
    7f30:	2025883a 	mov	r18,r4
    7f34:	d881030d 	sth	r2,1036(sp)
    7f38:	dac11915 	stw	r11,1124(sp)
    7f3c:	da81038d 	sth	r10,1038(sp)
    7f40:	da410715 	stw	r9,1052(sp)
    7f44:	da010915 	stw	r8,1060(sp)
    7f48:	dec10015 	stw	sp,1024(sp)
    7f4c:	dec10415 	stw	sp,1040(sp)
    7f50:	d8c10215 	stw	r3,1032(sp)
    7f54:	d8c10515 	stw	r3,1044(sp)
    7f58:	d8010615 	stw	zero,1048(sp)
    7f5c:	0005c000 	call	5c00 <___vfprintf_internal_r>
    7f60:	1023883a 	mov	r17,r2
    7f64:	10000416 	blt	r2,zero,7f78 <__sbprintf+0x80>
    7f68:	d9410004 	addi	r5,sp,1024
    7f6c:	9009883a 	mov	r4,r18
    7f70:	000169c0 	call	169c <_fflush_r>
    7f74:	10000d1e 	bne	r2,zero,7fac <__sbprintf+0xb4>
    7f78:	d881030b 	ldhu	r2,1036(sp)
    7f7c:	1080100c 	andi	r2,r2,64
    7f80:	10000326 	beq	r2,zero,7f90 <__sbprintf+0x98>
    7f84:	8080030b 	ldhu	r2,12(r16)
    7f88:	10801014 	ori	r2,r2,64
    7f8c:	8080030d 	sth	r2,12(r16)
    7f90:	8805883a 	mov	r2,r17
    7f94:	dfc11d17 	ldw	ra,1140(sp)
    7f98:	dc811c17 	ldw	r18,1136(sp)
    7f9c:	dc411b17 	ldw	r17,1132(sp)
    7fa0:	dc011a17 	ldw	r16,1128(sp)
    7fa4:	dec11e04 	addi	sp,sp,1144
    7fa8:	f800283a 	ret
    7fac:	047fffc4 	movi	r17,-1
    7fb0:	003ff106 	br	7f78 <__alt_data_end+0xf8007f78>

00007fb4 <_write_r>:
    7fb4:	defffd04 	addi	sp,sp,-12
    7fb8:	2805883a 	mov	r2,r5
    7fbc:	dc000015 	stw	r16,0(sp)
    7fc0:	040000b4 	movhi	r16,2
    7fc4:	dc400115 	stw	r17,4(sp)
    7fc8:	300b883a 	mov	r5,r6
    7fcc:	84274604 	addi	r16,r16,-25320
    7fd0:	2023883a 	mov	r17,r4
    7fd4:	380d883a 	mov	r6,r7
    7fd8:	1009883a 	mov	r4,r2
    7fdc:	dfc00215 	stw	ra,8(sp)
    7fe0:	80000015 	stw	zero,0(r16)
    7fe4:	00132c80 	call	132c8 <write>
    7fe8:	00ffffc4 	movi	r3,-1
    7fec:	10c00526 	beq	r2,r3,8004 <_write_r+0x50>
    7ff0:	dfc00217 	ldw	ra,8(sp)
    7ff4:	dc400117 	ldw	r17,4(sp)
    7ff8:	dc000017 	ldw	r16,0(sp)
    7ffc:	dec00304 	addi	sp,sp,12
    8000:	f800283a 	ret
    8004:	80c00017 	ldw	r3,0(r16)
    8008:	183ff926 	beq	r3,zero,7ff0 <__alt_data_end+0xf8007ff0>
    800c:	88c00015 	stw	r3,0(r17)
    8010:	003ff706 	br	7ff0 <__alt_data_end+0xf8007ff0>

00008014 <__swsetup_r>:
    8014:	008000b4 	movhi	r2,2
    8018:	defffd04 	addi	sp,sp,-12
    801c:	10a01704 	addi	r2,r2,-32676
    8020:	dc400115 	stw	r17,4(sp)
    8024:	2023883a 	mov	r17,r4
    8028:	11000017 	ldw	r4,0(r2)
    802c:	dc000015 	stw	r16,0(sp)
    8030:	dfc00215 	stw	ra,8(sp)
    8034:	2821883a 	mov	r16,r5
    8038:	20000226 	beq	r4,zero,8044 <__swsetup_r+0x30>
    803c:	20800e17 	ldw	r2,56(r4)
    8040:	10003126 	beq	r2,zero,8108 <__swsetup_r+0xf4>
    8044:	8080030b 	ldhu	r2,12(r16)
    8048:	10c0020c 	andi	r3,r2,8
    804c:	1009883a 	mov	r4,r2
    8050:	18000f26 	beq	r3,zero,8090 <__swsetup_r+0x7c>
    8054:	80c00417 	ldw	r3,16(r16)
    8058:	18001526 	beq	r3,zero,80b0 <__swsetup_r+0x9c>
    805c:	1100004c 	andi	r4,r2,1
    8060:	20001c1e 	bne	r4,zero,80d4 <__swsetup_r+0xc0>
    8064:	1080008c 	andi	r2,r2,2
    8068:	1000291e 	bne	r2,zero,8110 <__swsetup_r+0xfc>
    806c:	80800517 	ldw	r2,20(r16)
    8070:	80800215 	stw	r2,8(r16)
    8074:	18001c26 	beq	r3,zero,80e8 <__swsetup_r+0xd4>
    8078:	0005883a 	mov	r2,zero
    807c:	dfc00217 	ldw	ra,8(sp)
    8080:	dc400117 	ldw	r17,4(sp)
    8084:	dc000017 	ldw	r16,0(sp)
    8088:	dec00304 	addi	sp,sp,12
    808c:	f800283a 	ret
    8090:	2080040c 	andi	r2,r4,16
    8094:	10002e26 	beq	r2,zero,8150 <__swsetup_r+0x13c>
    8098:	2080010c 	andi	r2,r4,4
    809c:	10001e1e 	bne	r2,zero,8118 <__swsetup_r+0x104>
    80a0:	80c00417 	ldw	r3,16(r16)
    80a4:	20800214 	ori	r2,r4,8
    80a8:	8080030d 	sth	r2,12(r16)
    80ac:	183feb1e 	bne	r3,zero,805c <__alt_data_end+0xf800805c>
    80b0:	1100a00c 	andi	r4,r2,640
    80b4:	01408004 	movi	r5,512
    80b8:	217fe826 	beq	r4,r5,805c <__alt_data_end+0xf800805c>
    80bc:	800b883a 	mov	r5,r16
    80c0:	8809883a 	mov	r4,r17
    80c4:	00027d80 	call	27d8 <__smakebuf_r>
    80c8:	8080030b 	ldhu	r2,12(r16)
    80cc:	80c00417 	ldw	r3,16(r16)
    80d0:	003fe206 	br	805c <__alt_data_end+0xf800805c>
    80d4:	80800517 	ldw	r2,20(r16)
    80d8:	80000215 	stw	zero,8(r16)
    80dc:	0085c83a 	sub	r2,zero,r2
    80e0:	80800615 	stw	r2,24(r16)
    80e4:	183fe41e 	bne	r3,zero,8078 <__alt_data_end+0xf8008078>
    80e8:	80c0030b 	ldhu	r3,12(r16)
    80ec:	0005883a 	mov	r2,zero
    80f0:	1900200c 	andi	r4,r3,128
    80f4:	203fe126 	beq	r4,zero,807c <__alt_data_end+0xf800807c>
    80f8:	18c01014 	ori	r3,r3,64
    80fc:	80c0030d 	sth	r3,12(r16)
    8100:	00bfffc4 	movi	r2,-1
    8104:	003fdd06 	br	807c <__alt_data_end+0xf800807c>
    8108:	0001a880 	call	1a88 <__sinit>
    810c:	003fcd06 	br	8044 <__alt_data_end+0xf8008044>
    8110:	0005883a 	mov	r2,zero
    8114:	003fd606 	br	8070 <__alt_data_end+0xf8008070>
    8118:	81400c17 	ldw	r5,48(r16)
    811c:	28000626 	beq	r5,zero,8138 <__swsetup_r+0x124>
    8120:	80801004 	addi	r2,r16,64
    8124:	28800326 	beq	r5,r2,8134 <__swsetup_r+0x120>
    8128:	8809883a 	mov	r4,r17
    812c:	0001d540 	call	1d54 <_free_r>
    8130:	8100030b 	ldhu	r4,12(r16)
    8134:	80000c15 	stw	zero,48(r16)
    8138:	80c00417 	ldw	r3,16(r16)
    813c:	00bff6c4 	movi	r2,-37
    8140:	1108703a 	and	r4,r2,r4
    8144:	80000115 	stw	zero,4(r16)
    8148:	80c00015 	stw	r3,0(r16)
    814c:	003fd506 	br	80a4 <__alt_data_end+0xf80080a4>
    8150:	00800244 	movi	r2,9
    8154:	88800015 	stw	r2,0(r17)
    8158:	20801014 	ori	r2,r4,64
    815c:	8080030d 	sth	r2,12(r16)
    8160:	00bfffc4 	movi	r2,-1
    8164:	003fc506 	br	807c <__alt_data_end+0xf800807c>

00008168 <_close_r>:
    8168:	defffd04 	addi	sp,sp,-12
    816c:	dc000015 	stw	r16,0(sp)
    8170:	040000b4 	movhi	r16,2
    8174:	dc400115 	stw	r17,4(sp)
    8178:	84274604 	addi	r16,r16,-25320
    817c:	2023883a 	mov	r17,r4
    8180:	2809883a 	mov	r4,r5
    8184:	dfc00215 	stw	ra,8(sp)
    8188:	80000015 	stw	zero,0(r16)
    818c:	001251c0 	call	1251c <close>
    8190:	00ffffc4 	movi	r3,-1
    8194:	10c00526 	beq	r2,r3,81ac <_close_r+0x44>
    8198:	dfc00217 	ldw	ra,8(sp)
    819c:	dc400117 	ldw	r17,4(sp)
    81a0:	dc000017 	ldw	r16,0(sp)
    81a4:	dec00304 	addi	sp,sp,12
    81a8:	f800283a 	ret
    81ac:	80c00017 	ldw	r3,0(r16)
    81b0:	183ff926 	beq	r3,zero,8198 <__alt_data_end+0xf8008198>
    81b4:	88c00015 	stw	r3,0(r17)
    81b8:	003ff706 	br	8198 <__alt_data_end+0xf8008198>

000081bc <quorem>:
    81bc:	defff204 	addi	sp,sp,-56
    81c0:	ddc00b15 	stw	r23,44(sp)
    81c4:	20800417 	ldw	r2,16(r4)
    81c8:	2dc00417 	ldw	r23,16(r5)
    81cc:	dfc00d15 	stw	ra,52(sp)
    81d0:	df000c15 	stw	fp,48(sp)
    81d4:	dd800a15 	stw	r22,40(sp)
    81d8:	dd400915 	stw	r21,36(sp)
    81dc:	dd000815 	stw	r20,32(sp)
    81e0:	dcc00715 	stw	r19,28(sp)
    81e4:	dc800615 	stw	r18,24(sp)
    81e8:	dc400515 	stw	r17,20(sp)
    81ec:	dc000415 	stw	r16,16(sp)
    81f0:	15c07a16 	blt	r2,r23,83dc <quorem+0x220>
    81f4:	bdffffc4 	addi	r23,r23,-1
    81f8:	bde9883a 	add	r20,r23,r23
    81fc:	28c00504 	addi	r3,r5,20
    8200:	a529883a 	add	r20,r20,r20
    8204:	1d39883a 	add	fp,r3,r20
    8208:	24c00504 	addi	r19,r4,20
    820c:	d9400215 	stw	r5,8(sp)
    8210:	9d29883a 	add	r20,r19,r20
    8214:	e1400017 	ldw	r5,0(fp)
    8218:	d9000015 	stw	r4,0(sp)
    821c:	a1000017 	ldw	r4,0(r20)
    8220:	29400044 	addi	r5,r5,1
    8224:	d8c00115 	stw	r3,4(sp)
    8228:	dd000315 	stw	r20,12(sp)
    822c:	00013c40 	call	13c4 <__udivsi3>
    8230:	1025883a 	mov	r18,r2
    8234:	10003026 	beq	r2,zero,82f8 <quorem+0x13c>
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	9829883a 	mov	r20,r19
    8240:	002d883a 	mov	r22,zero
    8244:	0021883a 	mov	r16,zero
    8248:	8d400017 	ldw	r21,0(r17)
    824c:	900b883a 	mov	r5,r18
    8250:	8c400104 	addi	r17,r17,4
    8254:	a93fffcc 	andi	r4,r21,65535
    8258:	000fc140 	call	fc14 <__mulsi3>
    825c:	a808d43a 	srli	r4,r21,16
    8260:	900b883a 	mov	r5,r18
    8264:	15ad883a 	add	r22,r2,r22
    8268:	000fc140 	call	fc14 <__mulsi3>
    826c:	a1000017 	ldw	r4,0(r20)
    8270:	b00cd43a 	srli	r6,r22,16
    8274:	b0ffffcc 	andi	r3,r22,65535
    8278:	217fffcc 	andi	r5,r4,65535
    827c:	2c21883a 	add	r16,r5,r16
    8280:	80c7c83a 	sub	r3,r16,r3
    8284:	2008d43a 	srli	r4,r4,16
    8288:	1185883a 	add	r2,r2,r6
    828c:	1821d43a 	srai	r16,r3,16
    8290:	117fffcc 	andi	r5,r2,65535
    8294:	2149c83a 	sub	r4,r4,r5
    8298:	2421883a 	add	r16,r4,r16
    829c:	8008943a 	slli	r4,r16,16
    82a0:	18ffffcc 	andi	r3,r3,65535
    82a4:	102cd43a 	srli	r22,r2,16
    82a8:	20c8b03a 	or	r4,r4,r3
    82ac:	a1000015 	stw	r4,0(r20)
    82b0:	8021d43a 	srai	r16,r16,16
    82b4:	a5000104 	addi	r20,r20,4
    82b8:	e47fe32e 	bgeu	fp,r17,8248 <__alt_data_end+0xf8008248>
    82bc:	d8c00317 	ldw	r3,12(sp)
    82c0:	18800017 	ldw	r2,0(r3)
    82c4:	10000c1e 	bne	r2,zero,82f8 <quorem+0x13c>
    82c8:	18bfff04 	addi	r2,r3,-4
    82cc:	9880082e 	bgeu	r19,r2,82f0 <quorem+0x134>
    82d0:	18ffff17 	ldw	r3,-4(r3)
    82d4:	18000326 	beq	r3,zero,82e4 <quorem+0x128>
    82d8:	00000506 	br	82f0 <quorem+0x134>
    82dc:	10c00017 	ldw	r3,0(r2)
    82e0:	1800031e 	bne	r3,zero,82f0 <quorem+0x134>
    82e4:	10bfff04 	addi	r2,r2,-4
    82e8:	bdffffc4 	addi	r23,r23,-1
    82ec:	98bffb36 	bltu	r19,r2,82dc <__alt_data_end+0xf80082dc>
    82f0:	d8c00017 	ldw	r3,0(sp)
    82f4:	1dc00415 	stw	r23,16(r3)
    82f8:	d9400217 	ldw	r5,8(sp)
    82fc:	d9000017 	ldw	r4,0(sp)
    8300:	000af800 	call	af80 <__mcmp>
    8304:	10002816 	blt	r2,zero,83a8 <quorem+0x1ec>
    8308:	dc400117 	ldw	r17,4(sp)
    830c:	94800044 	addi	r18,r18,1
    8310:	980d883a 	mov	r6,r19
    8314:	0007883a 	mov	r3,zero
    8318:	31000017 	ldw	r4,0(r6)
    831c:	89400017 	ldw	r5,0(r17)
    8320:	31800104 	addi	r6,r6,4
    8324:	20bfffcc 	andi	r2,r4,65535
    8328:	10c7883a 	add	r3,r2,r3
    832c:	28bfffcc 	andi	r2,r5,65535
    8330:	1885c83a 	sub	r2,r3,r2
    8334:	280ad43a 	srli	r5,r5,16
    8338:	2008d43a 	srli	r4,r4,16
    833c:	1007d43a 	srai	r3,r2,16
    8340:	10bfffcc 	andi	r2,r2,65535
    8344:	2149c83a 	sub	r4,r4,r5
    8348:	20c9883a 	add	r4,r4,r3
    834c:	200a943a 	slli	r5,r4,16
    8350:	8c400104 	addi	r17,r17,4
    8354:	2007d43a 	srai	r3,r4,16
    8358:	2884b03a 	or	r2,r5,r2
    835c:	30bfff15 	stw	r2,-4(r6)
    8360:	e47fed2e 	bgeu	fp,r17,8318 <__alt_data_end+0xf8008318>
    8364:	bdc5883a 	add	r2,r23,r23
    8368:	1085883a 	add	r2,r2,r2
    836c:	9887883a 	add	r3,r19,r2
    8370:	18800017 	ldw	r2,0(r3)
    8374:	10000c1e 	bne	r2,zero,83a8 <quorem+0x1ec>
    8378:	18bfff04 	addi	r2,r3,-4
    837c:	9880082e 	bgeu	r19,r2,83a0 <quorem+0x1e4>
    8380:	18ffff17 	ldw	r3,-4(r3)
    8384:	18000326 	beq	r3,zero,8394 <quorem+0x1d8>
    8388:	00000506 	br	83a0 <quorem+0x1e4>
    838c:	10c00017 	ldw	r3,0(r2)
    8390:	1800031e 	bne	r3,zero,83a0 <quorem+0x1e4>
    8394:	10bfff04 	addi	r2,r2,-4
    8398:	bdffffc4 	addi	r23,r23,-1
    839c:	98bffb36 	bltu	r19,r2,838c <__alt_data_end+0xf800838c>
    83a0:	d8c00017 	ldw	r3,0(sp)
    83a4:	1dc00415 	stw	r23,16(r3)
    83a8:	9005883a 	mov	r2,r18
    83ac:	dfc00d17 	ldw	ra,52(sp)
    83b0:	df000c17 	ldw	fp,48(sp)
    83b4:	ddc00b17 	ldw	r23,44(sp)
    83b8:	dd800a17 	ldw	r22,40(sp)
    83bc:	dd400917 	ldw	r21,36(sp)
    83c0:	dd000817 	ldw	r20,32(sp)
    83c4:	dcc00717 	ldw	r19,28(sp)
    83c8:	dc800617 	ldw	r18,24(sp)
    83cc:	dc400517 	ldw	r17,20(sp)
    83d0:	dc000417 	ldw	r16,16(sp)
    83d4:	dec00e04 	addi	sp,sp,56
    83d8:	f800283a 	ret
    83dc:	0005883a 	mov	r2,zero
    83e0:	003ff206 	br	83ac <__alt_data_end+0xf80083ac>

000083e4 <_dtoa_r>:
    83e4:	20801017 	ldw	r2,64(r4)
    83e8:	deffde04 	addi	sp,sp,-136
    83ec:	df002015 	stw	fp,128(sp)
    83f0:	dcc01b15 	stw	r19,108(sp)
    83f4:	dc801a15 	stw	r18,104(sp)
    83f8:	dc401915 	stw	r17,100(sp)
    83fc:	dc001815 	stw	r16,96(sp)
    8400:	dfc02115 	stw	ra,132(sp)
    8404:	ddc01f15 	stw	r23,124(sp)
    8408:	dd801e15 	stw	r22,120(sp)
    840c:	dd401d15 	stw	r21,116(sp)
    8410:	dd001c15 	stw	r20,112(sp)
    8414:	d9c00315 	stw	r7,12(sp)
    8418:	2039883a 	mov	fp,r4
    841c:	3023883a 	mov	r17,r6
    8420:	2825883a 	mov	r18,r5
    8424:	dc002417 	ldw	r16,144(sp)
    8428:	3027883a 	mov	r19,r6
    842c:	10000826 	beq	r2,zero,8450 <_dtoa_r+0x6c>
    8430:	21801117 	ldw	r6,68(r4)
    8434:	00c00044 	movi	r3,1
    8438:	100b883a 	mov	r5,r2
    843c:	1986983a 	sll	r3,r3,r6
    8440:	11800115 	stw	r6,4(r2)
    8444:	10c00215 	stw	r3,8(r2)
    8448:	000a6a40 	call	a6a4 <_Bfree>
    844c:	e0001015 	stw	zero,64(fp)
    8450:	88002e16 	blt	r17,zero,850c <_dtoa_r+0x128>
    8454:	80000015 	stw	zero,0(r16)
    8458:	889ffc2c 	andhi	r2,r17,32752
    845c:	00dffc34 	movhi	r3,32752
    8460:	10c01c26 	beq	r2,r3,84d4 <_dtoa_r+0xf0>
    8464:	000d883a 	mov	r6,zero
    8468:	000f883a 	mov	r7,zero
    846c:	9009883a 	mov	r4,r18
    8470:	980b883a 	mov	r5,r19
    8474:	0010eb80 	call	10eb8 <__eqdf2>
    8478:	10002b1e 	bne	r2,zero,8528 <_dtoa_r+0x144>
    847c:	d9c02317 	ldw	r7,140(sp)
    8480:	00800044 	movi	r2,1
    8484:	38800015 	stw	r2,0(r7)
    8488:	d8802517 	ldw	r2,148(sp)
    848c:	10019e26 	beq	r2,zero,8b08 <_dtoa_r+0x724>
    8490:	d8c02517 	ldw	r3,148(sp)
    8494:	00800074 	movhi	r2,1
    8498:	1097ad44 	addi	r2,r2,24245
    849c:	18800015 	stw	r2,0(r3)
    84a0:	10bfffc4 	addi	r2,r2,-1
    84a4:	dfc02117 	ldw	ra,132(sp)
    84a8:	df002017 	ldw	fp,128(sp)
    84ac:	ddc01f17 	ldw	r23,124(sp)
    84b0:	dd801e17 	ldw	r22,120(sp)
    84b4:	dd401d17 	ldw	r21,116(sp)
    84b8:	dd001c17 	ldw	r20,112(sp)
    84bc:	dcc01b17 	ldw	r19,108(sp)
    84c0:	dc801a17 	ldw	r18,104(sp)
    84c4:	dc401917 	ldw	r17,100(sp)
    84c8:	dc001817 	ldw	r16,96(sp)
    84cc:	dec02204 	addi	sp,sp,136
    84d0:	f800283a 	ret
    84d4:	d8c02317 	ldw	r3,140(sp)
    84d8:	0089c3c4 	movi	r2,9999
    84dc:	18800015 	stw	r2,0(r3)
    84e0:	90017726 	beq	r18,zero,8ac0 <_dtoa_r+0x6dc>
    84e4:	00800074 	movhi	r2,1
    84e8:	1097c104 	addi	r2,r2,24324
    84ec:	d9002517 	ldw	r4,148(sp)
    84f0:	203fec26 	beq	r4,zero,84a4 <__alt_data_end+0xf80084a4>
    84f4:	10c000c7 	ldb	r3,3(r2)
    84f8:	1801781e 	bne	r3,zero,8adc <_dtoa_r+0x6f8>
    84fc:	10c000c4 	addi	r3,r2,3
    8500:	d9802517 	ldw	r6,148(sp)
    8504:	30c00015 	stw	r3,0(r6)
    8508:	003fe606 	br	84a4 <__alt_data_end+0xf80084a4>
    850c:	04e00034 	movhi	r19,32768
    8510:	9cffffc4 	addi	r19,r19,-1
    8514:	00800044 	movi	r2,1
    8518:	8ce6703a 	and	r19,r17,r19
    851c:	80800015 	stw	r2,0(r16)
    8520:	9823883a 	mov	r17,r19
    8524:	003fcc06 	br	8458 <__alt_data_end+0xf8008458>
    8528:	d8800204 	addi	r2,sp,8
    852c:	d8800015 	stw	r2,0(sp)
    8530:	d9c00104 	addi	r7,sp,4
    8534:	900b883a 	mov	r5,r18
    8538:	980d883a 	mov	r6,r19
    853c:	e009883a 	mov	r4,fp
    8540:	8820d53a 	srli	r16,r17,20
    8544:	000b34c0 	call	b34c <__d2b>
    8548:	d8800915 	stw	r2,36(sp)
    854c:	8001651e 	bne	r16,zero,8ae4 <_dtoa_r+0x700>
    8550:	dd800217 	ldw	r22,8(sp)
    8554:	dc000117 	ldw	r16,4(sp)
    8558:	00800804 	movi	r2,32
    855c:	b421883a 	add	r16,r22,r16
    8560:	80c10c84 	addi	r3,r16,1074
    8564:	10c2d10e 	bge	r2,r3,90ac <_dtoa_r+0xcc8>
    8568:	00801004 	movi	r2,64
    856c:	81010484 	addi	r4,r16,1042
    8570:	10c7c83a 	sub	r3,r2,r3
    8574:	9108d83a 	srl	r4,r18,r4
    8578:	88e2983a 	sll	r17,r17,r3
    857c:	2448b03a 	or	r4,r4,r17
    8580:	00123d40 	call	123d4 <__floatunsidf>
    8584:	017f8434 	movhi	r5,65040
    8588:	01800044 	movi	r6,1
    858c:	1009883a 	mov	r4,r2
    8590:	194b883a 	add	r5,r3,r5
    8594:	843fffc4 	addi	r16,r16,-1
    8598:	d9801115 	stw	r6,68(sp)
    859c:	000d883a 	mov	r6,zero
    85a0:	01cffe34 	movhi	r7,16376
    85a4:	001197c0 	call	1197c <__subdf3>
    85a8:	0198dbf4 	movhi	r6,25455
    85ac:	01cff4f4 	movhi	r7,16339
    85b0:	3190d844 	addi	r6,r6,17249
    85b4:	39e1e9c4 	addi	r7,r7,-30809
    85b8:	1009883a 	mov	r4,r2
    85bc:	180b883a 	mov	r5,r3
    85c0:	00111100 	call	11110 <__muldf3>
    85c4:	01a2d874 	movhi	r6,35681
    85c8:	01cff1f4 	movhi	r7,16327
    85cc:	31b22cc4 	addi	r6,r6,-14157
    85d0:	39e28a04 	addi	r7,r7,-30168
    85d4:	180b883a 	mov	r5,r3
    85d8:	1009883a 	mov	r4,r2
    85dc:	000fc3c0 	call	fc3c <__adddf3>
    85e0:	8009883a 	mov	r4,r16
    85e4:	1029883a 	mov	r20,r2
    85e8:	1823883a 	mov	r17,r3
    85ec:	00122f80 	call	122f8 <__floatsidf>
    85f0:	019427f4 	movhi	r6,20639
    85f4:	01cff4f4 	movhi	r7,16339
    85f8:	319e7ec4 	addi	r6,r6,31227
    85fc:	39d104c4 	addi	r7,r7,17427
    8600:	1009883a 	mov	r4,r2
    8604:	180b883a 	mov	r5,r3
    8608:	00111100 	call	11110 <__muldf3>
    860c:	100d883a 	mov	r6,r2
    8610:	180f883a 	mov	r7,r3
    8614:	a009883a 	mov	r4,r20
    8618:	880b883a 	mov	r5,r17
    861c:	000fc3c0 	call	fc3c <__adddf3>
    8620:	1009883a 	mov	r4,r2
    8624:	180b883a 	mov	r5,r3
    8628:	1029883a 	mov	r20,r2
    862c:	1823883a 	mov	r17,r3
    8630:	00122780 	call	12278 <__fixdfsi>
    8634:	000d883a 	mov	r6,zero
    8638:	000f883a 	mov	r7,zero
    863c:	a009883a 	mov	r4,r20
    8640:	880b883a 	mov	r5,r17
    8644:	d8800515 	stw	r2,20(sp)
    8648:	001101c0 	call	1101c <__ledf2>
    864c:	10028716 	blt	r2,zero,906c <_dtoa_r+0xc88>
    8650:	d8c00517 	ldw	r3,20(sp)
    8654:	00800584 	movi	r2,22
    8658:	10c27536 	bltu	r2,r3,9030 <_dtoa_r+0xc4c>
    865c:	180490fa 	slli	r2,r3,3
    8660:	00c00074 	movhi	r3,1
    8664:	18d7dc04 	addi	r3,r3,24432
    8668:	1885883a 	add	r2,r3,r2
    866c:	11000017 	ldw	r4,0(r2)
    8670:	11400117 	ldw	r5,4(r2)
    8674:	900d883a 	mov	r6,r18
    8678:	980f883a 	mov	r7,r19
    867c:	0010f400 	call	10f40 <__gedf2>
    8680:	00828d0e 	bge	zero,r2,90b8 <_dtoa_r+0xcd4>
    8684:	d9000517 	ldw	r4,20(sp)
    8688:	d8000e15 	stw	zero,56(sp)
    868c:	213fffc4 	addi	r4,r4,-1
    8690:	d9000515 	stw	r4,20(sp)
    8694:	b42dc83a 	sub	r22,r22,r16
    8698:	b5bfffc4 	addi	r22,r22,-1
    869c:	b0026f16 	blt	r22,zero,905c <_dtoa_r+0xc78>
    86a0:	d8000815 	stw	zero,32(sp)
    86a4:	d9c00517 	ldw	r7,20(sp)
    86a8:	38026416 	blt	r7,zero,903c <_dtoa_r+0xc58>
    86ac:	b1ed883a 	add	r22,r22,r7
    86b0:	d9c00d15 	stw	r7,52(sp)
    86b4:	d8000a15 	stw	zero,40(sp)
    86b8:	d9800317 	ldw	r6,12(sp)
    86bc:	00800244 	movi	r2,9
    86c0:	11811436 	bltu	r2,r6,8b14 <_dtoa_r+0x730>
    86c4:	00800144 	movi	r2,5
    86c8:	1184e10e 	bge	r2,r6,9a50 <_dtoa_r+0x166c>
    86cc:	31bfff04 	addi	r6,r6,-4
    86d0:	d9800315 	stw	r6,12(sp)
    86d4:	0023883a 	mov	r17,zero
    86d8:	d9800317 	ldw	r6,12(sp)
    86dc:	008000c4 	movi	r2,3
    86e0:	30836726 	beq	r6,r2,9480 <_dtoa_r+0x109c>
    86e4:	1183410e 	bge	r2,r6,93ec <_dtoa_r+0x1008>
    86e8:	d9c00317 	ldw	r7,12(sp)
    86ec:	00800104 	movi	r2,4
    86f0:	38827c26 	beq	r7,r2,90e4 <_dtoa_r+0xd00>
    86f4:	00800144 	movi	r2,5
    86f8:	3884c41e 	bne	r7,r2,9a0c <_dtoa_r+0x1628>
    86fc:	00800044 	movi	r2,1
    8700:	d8800b15 	stw	r2,44(sp)
    8704:	d8c00517 	ldw	r3,20(sp)
    8708:	d9002217 	ldw	r4,136(sp)
    870c:	1907883a 	add	r3,r3,r4
    8710:	19800044 	addi	r6,r3,1
    8714:	d8c00c15 	stw	r3,48(sp)
    8718:	d9800615 	stw	r6,24(sp)
    871c:	0183a40e 	bge	zero,r6,95b0 <_dtoa_r+0x11cc>
    8720:	d9800617 	ldw	r6,24(sp)
    8724:	3021883a 	mov	r16,r6
    8728:	e0001115 	stw	zero,68(fp)
    872c:	008005c4 	movi	r2,23
    8730:	1184c92e 	bgeu	r2,r6,9a58 <_dtoa_r+0x1674>
    8734:	00c00044 	movi	r3,1
    8738:	00800104 	movi	r2,4
    873c:	1085883a 	add	r2,r2,r2
    8740:	11000504 	addi	r4,r2,20
    8744:	180b883a 	mov	r5,r3
    8748:	18c00044 	addi	r3,r3,1
    874c:	313ffb2e 	bgeu	r6,r4,873c <__alt_data_end+0xf800873c>
    8750:	e1401115 	stw	r5,68(fp)
    8754:	e009883a 	mov	r4,fp
    8758:	000a5fc0 	call	a5fc <_Balloc>
    875c:	d8800715 	stw	r2,28(sp)
    8760:	e0801015 	stw	r2,64(fp)
    8764:	00800384 	movi	r2,14
    8768:	1400f736 	bltu	r2,r16,8b48 <_dtoa_r+0x764>
    876c:	8800f626 	beq	r17,zero,8b48 <_dtoa_r+0x764>
    8770:	d9c00517 	ldw	r7,20(sp)
    8774:	01c39a0e 	bge	zero,r7,95e0 <_dtoa_r+0x11fc>
    8778:	388003cc 	andi	r2,r7,15
    877c:	100490fa 	slli	r2,r2,3
    8780:	382bd13a 	srai	r21,r7,4
    8784:	00c00074 	movhi	r3,1
    8788:	18d7dc04 	addi	r3,r3,24432
    878c:	1885883a 	add	r2,r3,r2
    8790:	a8c0040c 	andi	r3,r21,16
    8794:	12400017 	ldw	r9,0(r2)
    8798:	12000117 	ldw	r8,4(r2)
    879c:	18037926 	beq	r3,zero,9584 <_dtoa_r+0x11a0>
    87a0:	00800074 	movhi	r2,1
    87a4:	1097d204 	addi	r2,r2,24392
    87a8:	11800817 	ldw	r6,32(r2)
    87ac:	11c00917 	ldw	r7,36(r2)
    87b0:	9009883a 	mov	r4,r18
    87b4:	980b883a 	mov	r5,r19
    87b8:	da001715 	stw	r8,92(sp)
    87bc:	da401615 	stw	r9,88(sp)
    87c0:	00104e80 	call	104e8 <__divdf3>
    87c4:	da001717 	ldw	r8,92(sp)
    87c8:	da401617 	ldw	r9,88(sp)
    87cc:	ad4003cc 	andi	r21,r21,15
    87d0:	040000c4 	movi	r16,3
    87d4:	1023883a 	mov	r17,r2
    87d8:	1829883a 	mov	r20,r3
    87dc:	a8001126 	beq	r21,zero,8824 <_dtoa_r+0x440>
    87e0:	05c00074 	movhi	r23,1
    87e4:	bdd7d204 	addi	r23,r23,24392
    87e8:	4805883a 	mov	r2,r9
    87ec:	4007883a 	mov	r3,r8
    87f0:	a980004c 	andi	r6,r21,1
    87f4:	1009883a 	mov	r4,r2
    87f8:	a82bd07a 	srai	r21,r21,1
    87fc:	180b883a 	mov	r5,r3
    8800:	30000426 	beq	r6,zero,8814 <_dtoa_r+0x430>
    8804:	b9800017 	ldw	r6,0(r23)
    8808:	b9c00117 	ldw	r7,4(r23)
    880c:	84000044 	addi	r16,r16,1
    8810:	00111100 	call	11110 <__muldf3>
    8814:	bdc00204 	addi	r23,r23,8
    8818:	a83ff51e 	bne	r21,zero,87f0 <__alt_data_end+0xf80087f0>
    881c:	1013883a 	mov	r9,r2
    8820:	1811883a 	mov	r8,r3
    8824:	480d883a 	mov	r6,r9
    8828:	400f883a 	mov	r7,r8
    882c:	8809883a 	mov	r4,r17
    8830:	a00b883a 	mov	r5,r20
    8834:	00104e80 	call	104e8 <__divdf3>
    8838:	d8800f15 	stw	r2,60(sp)
    883c:	d8c01015 	stw	r3,64(sp)
    8840:	d8c00e17 	ldw	r3,56(sp)
    8844:	18000626 	beq	r3,zero,8860 <_dtoa_r+0x47c>
    8848:	d9000f17 	ldw	r4,60(sp)
    884c:	d9401017 	ldw	r5,64(sp)
    8850:	000d883a 	mov	r6,zero
    8854:	01cffc34 	movhi	r7,16368
    8858:	001101c0 	call	1101c <__ledf2>
    885c:	10040b16 	blt	r2,zero,988c <_dtoa_r+0x14a8>
    8860:	8009883a 	mov	r4,r16
    8864:	00122f80 	call	122f8 <__floatsidf>
    8868:	d9800f17 	ldw	r6,60(sp)
    886c:	d9c01017 	ldw	r7,64(sp)
    8870:	1009883a 	mov	r4,r2
    8874:	180b883a 	mov	r5,r3
    8878:	00111100 	call	11110 <__muldf3>
    887c:	000d883a 	mov	r6,zero
    8880:	01d00734 	movhi	r7,16412
    8884:	1009883a 	mov	r4,r2
    8888:	180b883a 	mov	r5,r3
    888c:	000fc3c0 	call	fc3c <__adddf3>
    8890:	1021883a 	mov	r16,r2
    8894:	d8800617 	ldw	r2,24(sp)
    8898:	047f3034 	movhi	r17,64704
    889c:	1c63883a 	add	r17,r3,r17
    88a0:	10031826 	beq	r2,zero,9504 <_dtoa_r+0x1120>
    88a4:	d8c00517 	ldw	r3,20(sp)
    88a8:	db000617 	ldw	r12,24(sp)
    88ac:	d8c01315 	stw	r3,76(sp)
    88b0:	d9000b17 	ldw	r4,44(sp)
    88b4:	20038f26 	beq	r4,zero,96f4 <_dtoa_r+0x1310>
    88b8:	60bfffc4 	addi	r2,r12,-1
    88bc:	100490fa 	slli	r2,r2,3
    88c0:	00c00074 	movhi	r3,1
    88c4:	18d7dc04 	addi	r3,r3,24432
    88c8:	1885883a 	add	r2,r3,r2
    88cc:	11800017 	ldw	r6,0(r2)
    88d0:	11c00117 	ldw	r7,4(r2)
    88d4:	d8800717 	ldw	r2,28(sp)
    88d8:	0009883a 	mov	r4,zero
    88dc:	014ff834 	movhi	r5,16352
    88e0:	db001615 	stw	r12,88(sp)
    88e4:	15c00044 	addi	r23,r2,1
    88e8:	00104e80 	call	104e8 <__divdf3>
    88ec:	800d883a 	mov	r6,r16
    88f0:	880f883a 	mov	r7,r17
    88f4:	1009883a 	mov	r4,r2
    88f8:	180b883a 	mov	r5,r3
    88fc:	001197c0 	call	1197c <__subdf3>
    8900:	d9401017 	ldw	r5,64(sp)
    8904:	d9000f17 	ldw	r4,60(sp)
    8908:	102b883a 	mov	r21,r2
    890c:	d8c01215 	stw	r3,72(sp)
    8910:	00122780 	call	12278 <__fixdfsi>
    8914:	1009883a 	mov	r4,r2
    8918:	1029883a 	mov	r20,r2
    891c:	00122f80 	call	122f8 <__floatsidf>
    8920:	d9000f17 	ldw	r4,60(sp)
    8924:	d9401017 	ldw	r5,64(sp)
    8928:	100d883a 	mov	r6,r2
    892c:	180f883a 	mov	r7,r3
    8930:	001197c0 	call	1197c <__subdf3>
    8934:	1823883a 	mov	r17,r3
    8938:	d8c00717 	ldw	r3,28(sp)
    893c:	d9401217 	ldw	r5,72(sp)
    8940:	a2000c04 	addi	r8,r20,48
    8944:	1021883a 	mov	r16,r2
    8948:	1a000005 	stb	r8,0(r3)
    894c:	800d883a 	mov	r6,r16
    8950:	880f883a 	mov	r7,r17
    8954:	a809883a 	mov	r4,r21
    8958:	4029883a 	mov	r20,r8
    895c:	0010f400 	call	10f40 <__gedf2>
    8960:	00841d16 	blt	zero,r2,99d8 <_dtoa_r+0x15f4>
    8964:	800d883a 	mov	r6,r16
    8968:	880f883a 	mov	r7,r17
    896c:	0009883a 	mov	r4,zero
    8970:	014ffc34 	movhi	r5,16368
    8974:	001197c0 	call	1197c <__subdf3>
    8978:	d9401217 	ldw	r5,72(sp)
    897c:	100d883a 	mov	r6,r2
    8980:	180f883a 	mov	r7,r3
    8984:	a809883a 	mov	r4,r21
    8988:	0010f400 	call	10f40 <__gedf2>
    898c:	db001617 	ldw	r12,88(sp)
    8990:	00840e16 	blt	zero,r2,99cc <_dtoa_r+0x15e8>
    8994:	00800044 	movi	r2,1
    8998:	13006b0e 	bge	r2,r12,8b48 <_dtoa_r+0x764>
    899c:	d9000717 	ldw	r4,28(sp)
    89a0:	dd800f15 	stw	r22,60(sp)
    89a4:	dcc01015 	stw	r19,64(sp)
    89a8:	2319883a 	add	r12,r4,r12
    89ac:	dcc01217 	ldw	r19,72(sp)
    89b0:	602d883a 	mov	r22,r12
    89b4:	dc801215 	stw	r18,72(sp)
    89b8:	b825883a 	mov	r18,r23
    89bc:	00000906 	br	89e4 <_dtoa_r+0x600>
    89c0:	001197c0 	call	1197c <__subdf3>
    89c4:	a80d883a 	mov	r6,r21
    89c8:	980f883a 	mov	r7,r19
    89cc:	1009883a 	mov	r4,r2
    89d0:	180b883a 	mov	r5,r3
    89d4:	001101c0 	call	1101c <__ledf2>
    89d8:	1003e816 	blt	r2,zero,997c <_dtoa_r+0x1598>
    89dc:	b825883a 	mov	r18,r23
    89e0:	bd83e926 	beq	r23,r22,9988 <_dtoa_r+0x15a4>
    89e4:	a809883a 	mov	r4,r21
    89e8:	980b883a 	mov	r5,r19
    89ec:	000d883a 	mov	r6,zero
    89f0:	01d00934 	movhi	r7,16420
    89f4:	00111100 	call	11110 <__muldf3>
    89f8:	000d883a 	mov	r6,zero
    89fc:	01d00934 	movhi	r7,16420
    8a00:	8009883a 	mov	r4,r16
    8a04:	880b883a 	mov	r5,r17
    8a08:	102b883a 	mov	r21,r2
    8a0c:	1827883a 	mov	r19,r3
    8a10:	00111100 	call	11110 <__muldf3>
    8a14:	180b883a 	mov	r5,r3
    8a18:	1009883a 	mov	r4,r2
    8a1c:	1821883a 	mov	r16,r3
    8a20:	1023883a 	mov	r17,r2
    8a24:	00122780 	call	12278 <__fixdfsi>
    8a28:	1009883a 	mov	r4,r2
    8a2c:	1029883a 	mov	r20,r2
    8a30:	00122f80 	call	122f8 <__floatsidf>
    8a34:	8809883a 	mov	r4,r17
    8a38:	800b883a 	mov	r5,r16
    8a3c:	100d883a 	mov	r6,r2
    8a40:	180f883a 	mov	r7,r3
    8a44:	001197c0 	call	1197c <__subdf3>
    8a48:	a5000c04 	addi	r20,r20,48
    8a4c:	a80d883a 	mov	r6,r21
    8a50:	980f883a 	mov	r7,r19
    8a54:	1009883a 	mov	r4,r2
    8a58:	180b883a 	mov	r5,r3
    8a5c:	95000005 	stb	r20,0(r18)
    8a60:	1021883a 	mov	r16,r2
    8a64:	1823883a 	mov	r17,r3
    8a68:	001101c0 	call	1101c <__ledf2>
    8a6c:	bdc00044 	addi	r23,r23,1
    8a70:	800d883a 	mov	r6,r16
    8a74:	880f883a 	mov	r7,r17
    8a78:	0009883a 	mov	r4,zero
    8a7c:	014ffc34 	movhi	r5,16368
    8a80:	103fcf0e 	bge	r2,zero,89c0 <__alt_data_end+0xf80089c0>
    8a84:	d8c01317 	ldw	r3,76(sp)
    8a88:	d8c00515 	stw	r3,20(sp)
    8a8c:	d9400917 	ldw	r5,36(sp)
    8a90:	e009883a 	mov	r4,fp
    8a94:	000a6a40 	call	a6a4 <_Bfree>
    8a98:	d9000517 	ldw	r4,20(sp)
    8a9c:	d9802317 	ldw	r6,140(sp)
    8aa0:	d9c02517 	ldw	r7,148(sp)
    8aa4:	b8000005 	stb	zero,0(r23)
    8aa8:	20800044 	addi	r2,r4,1
    8aac:	30800015 	stw	r2,0(r6)
    8ab0:	3802aa26 	beq	r7,zero,955c <_dtoa_r+0x1178>
    8ab4:	3dc00015 	stw	r23,0(r7)
    8ab8:	d8800717 	ldw	r2,28(sp)
    8abc:	003e7906 	br	84a4 <__alt_data_end+0xf80084a4>
    8ac0:	00800434 	movhi	r2,16
    8ac4:	10bfffc4 	addi	r2,r2,-1
    8ac8:	88a2703a 	and	r17,r17,r2
    8acc:	883e851e 	bne	r17,zero,84e4 <__alt_data_end+0xf80084e4>
    8ad0:	00800074 	movhi	r2,1
    8ad4:	1097be04 	addi	r2,r2,24312
    8ad8:	003e8406 	br	84ec <__alt_data_end+0xf80084ec>
    8adc:	10c00204 	addi	r3,r2,8
    8ae0:	003e8706 	br	8500 <__alt_data_end+0xf8008500>
    8ae4:	01400434 	movhi	r5,16
    8ae8:	297fffc4 	addi	r5,r5,-1
    8aec:	994a703a 	and	r5,r19,r5
    8af0:	9009883a 	mov	r4,r18
    8af4:	843f0044 	addi	r16,r16,-1023
    8af8:	294ffc34 	orhi	r5,r5,16368
    8afc:	dd800217 	ldw	r22,8(sp)
    8b00:	d8001115 	stw	zero,68(sp)
    8b04:	003ea506 	br	859c <__alt_data_end+0xf800859c>
    8b08:	00800074 	movhi	r2,1
    8b0c:	1097ad04 	addi	r2,r2,24244
    8b10:	003e6406 	br	84a4 <__alt_data_end+0xf80084a4>
    8b14:	e0001115 	stw	zero,68(fp)
    8b18:	000b883a 	mov	r5,zero
    8b1c:	e009883a 	mov	r4,fp
    8b20:	000a5fc0 	call	a5fc <_Balloc>
    8b24:	01bfffc4 	movi	r6,-1
    8b28:	01c00044 	movi	r7,1
    8b2c:	d8800715 	stw	r2,28(sp)
    8b30:	d9800c15 	stw	r6,48(sp)
    8b34:	e0801015 	stw	r2,64(fp)
    8b38:	d8000315 	stw	zero,12(sp)
    8b3c:	d9c00b15 	stw	r7,44(sp)
    8b40:	d9800615 	stw	r6,24(sp)
    8b44:	d8002215 	stw	zero,136(sp)
    8b48:	d8800117 	ldw	r2,4(sp)
    8b4c:	10008916 	blt	r2,zero,8d74 <_dtoa_r+0x990>
    8b50:	d9000517 	ldw	r4,20(sp)
    8b54:	00c00384 	movi	r3,14
    8b58:	19008616 	blt	r3,r4,8d74 <_dtoa_r+0x990>
    8b5c:	200490fa 	slli	r2,r4,3
    8b60:	00c00074 	movhi	r3,1
    8b64:	d9802217 	ldw	r6,136(sp)
    8b68:	18d7dc04 	addi	r3,r3,24432
    8b6c:	1885883a 	add	r2,r3,r2
    8b70:	14000017 	ldw	r16,0(r2)
    8b74:	14400117 	ldw	r17,4(r2)
    8b78:	30016316 	blt	r6,zero,9108 <_dtoa_r+0xd24>
    8b7c:	800d883a 	mov	r6,r16
    8b80:	880f883a 	mov	r7,r17
    8b84:	9009883a 	mov	r4,r18
    8b88:	980b883a 	mov	r5,r19
    8b8c:	00104e80 	call	104e8 <__divdf3>
    8b90:	180b883a 	mov	r5,r3
    8b94:	1009883a 	mov	r4,r2
    8b98:	00122780 	call	12278 <__fixdfsi>
    8b9c:	1009883a 	mov	r4,r2
    8ba0:	102b883a 	mov	r21,r2
    8ba4:	00122f80 	call	122f8 <__floatsidf>
    8ba8:	800d883a 	mov	r6,r16
    8bac:	880f883a 	mov	r7,r17
    8bb0:	1009883a 	mov	r4,r2
    8bb4:	180b883a 	mov	r5,r3
    8bb8:	00111100 	call	11110 <__muldf3>
    8bbc:	100d883a 	mov	r6,r2
    8bc0:	180f883a 	mov	r7,r3
    8bc4:	9009883a 	mov	r4,r18
    8bc8:	980b883a 	mov	r5,r19
    8bcc:	001197c0 	call	1197c <__subdf3>
    8bd0:	d9c00717 	ldw	r7,28(sp)
    8bd4:	1009883a 	mov	r4,r2
    8bd8:	a8800c04 	addi	r2,r21,48
    8bdc:	38800005 	stb	r2,0(r7)
    8be0:	3dc00044 	addi	r23,r7,1
    8be4:	d9c00617 	ldw	r7,24(sp)
    8be8:	01800044 	movi	r6,1
    8bec:	180b883a 	mov	r5,r3
    8bf0:	2005883a 	mov	r2,r4
    8bf4:	39803826 	beq	r7,r6,8cd8 <_dtoa_r+0x8f4>
    8bf8:	000d883a 	mov	r6,zero
    8bfc:	01d00934 	movhi	r7,16420
    8c00:	00111100 	call	11110 <__muldf3>
    8c04:	000d883a 	mov	r6,zero
    8c08:	000f883a 	mov	r7,zero
    8c0c:	1009883a 	mov	r4,r2
    8c10:	180b883a 	mov	r5,r3
    8c14:	1025883a 	mov	r18,r2
    8c18:	1827883a 	mov	r19,r3
    8c1c:	0010eb80 	call	10eb8 <__eqdf2>
    8c20:	103f9a26 	beq	r2,zero,8a8c <__alt_data_end+0xf8008a8c>
    8c24:	d9c00617 	ldw	r7,24(sp)
    8c28:	d8c00717 	ldw	r3,28(sp)
    8c2c:	b829883a 	mov	r20,r23
    8c30:	38bfffc4 	addi	r2,r7,-1
    8c34:	18ad883a 	add	r22,r3,r2
    8c38:	00000a06 	br	8c64 <_dtoa_r+0x880>
    8c3c:	00111100 	call	11110 <__muldf3>
    8c40:	000d883a 	mov	r6,zero
    8c44:	000f883a 	mov	r7,zero
    8c48:	1009883a 	mov	r4,r2
    8c4c:	180b883a 	mov	r5,r3
    8c50:	1025883a 	mov	r18,r2
    8c54:	1827883a 	mov	r19,r3
    8c58:	b829883a 	mov	r20,r23
    8c5c:	0010eb80 	call	10eb8 <__eqdf2>
    8c60:	103f8a26 	beq	r2,zero,8a8c <__alt_data_end+0xf8008a8c>
    8c64:	800d883a 	mov	r6,r16
    8c68:	880f883a 	mov	r7,r17
    8c6c:	9009883a 	mov	r4,r18
    8c70:	980b883a 	mov	r5,r19
    8c74:	00104e80 	call	104e8 <__divdf3>
    8c78:	180b883a 	mov	r5,r3
    8c7c:	1009883a 	mov	r4,r2
    8c80:	00122780 	call	12278 <__fixdfsi>
    8c84:	1009883a 	mov	r4,r2
    8c88:	102b883a 	mov	r21,r2
    8c8c:	00122f80 	call	122f8 <__floatsidf>
    8c90:	800d883a 	mov	r6,r16
    8c94:	880f883a 	mov	r7,r17
    8c98:	1009883a 	mov	r4,r2
    8c9c:	180b883a 	mov	r5,r3
    8ca0:	00111100 	call	11110 <__muldf3>
    8ca4:	100d883a 	mov	r6,r2
    8ca8:	180f883a 	mov	r7,r3
    8cac:	9009883a 	mov	r4,r18
    8cb0:	980b883a 	mov	r5,r19
    8cb4:	001197c0 	call	1197c <__subdf3>
    8cb8:	aa000c04 	addi	r8,r21,48
    8cbc:	a2000005 	stb	r8,0(r20)
    8cc0:	000d883a 	mov	r6,zero
    8cc4:	01d00934 	movhi	r7,16420
    8cc8:	1009883a 	mov	r4,r2
    8ccc:	180b883a 	mov	r5,r3
    8cd0:	a5c00044 	addi	r23,r20,1
    8cd4:	b53fd91e 	bne	r22,r20,8c3c <__alt_data_end+0xf8008c3c>
    8cd8:	100d883a 	mov	r6,r2
    8cdc:	180f883a 	mov	r7,r3
    8ce0:	1009883a 	mov	r4,r2
    8ce4:	180b883a 	mov	r5,r3
    8ce8:	000fc3c0 	call	fc3c <__adddf3>
    8cec:	100d883a 	mov	r6,r2
    8cf0:	180f883a 	mov	r7,r3
    8cf4:	8009883a 	mov	r4,r16
    8cf8:	880b883a 	mov	r5,r17
    8cfc:	1027883a 	mov	r19,r2
    8d00:	1825883a 	mov	r18,r3
    8d04:	001101c0 	call	1101c <__ledf2>
    8d08:	10000816 	blt	r2,zero,8d2c <_dtoa_r+0x948>
    8d0c:	980d883a 	mov	r6,r19
    8d10:	900f883a 	mov	r7,r18
    8d14:	8009883a 	mov	r4,r16
    8d18:	880b883a 	mov	r5,r17
    8d1c:	0010eb80 	call	10eb8 <__eqdf2>
    8d20:	103f5a1e 	bne	r2,zero,8a8c <__alt_data_end+0xf8008a8c>
    8d24:	ad40004c 	andi	r21,r21,1
    8d28:	a83f5826 	beq	r21,zero,8a8c <__alt_data_end+0xf8008a8c>
    8d2c:	bd3fffc3 	ldbu	r20,-1(r23)
    8d30:	b8bfffc4 	addi	r2,r23,-1
    8d34:	1007883a 	mov	r3,r2
    8d38:	01400e44 	movi	r5,57
    8d3c:	d9800717 	ldw	r6,28(sp)
    8d40:	00000506 	br	8d58 <_dtoa_r+0x974>
    8d44:	18ffffc4 	addi	r3,r3,-1
    8d48:	11824726 	beq	r2,r6,9668 <_dtoa_r+0x1284>
    8d4c:	1d000003 	ldbu	r20,0(r3)
    8d50:	102f883a 	mov	r23,r2
    8d54:	10bfffc4 	addi	r2,r2,-1
    8d58:	a1003fcc 	andi	r4,r20,255
    8d5c:	2100201c 	xori	r4,r4,128
    8d60:	213fe004 	addi	r4,r4,-128
    8d64:	217ff726 	beq	r4,r5,8d44 <__alt_data_end+0xf8008d44>
    8d68:	a2000044 	addi	r8,r20,1
    8d6c:	12000005 	stb	r8,0(r2)
    8d70:	003f4606 	br	8a8c <__alt_data_end+0xf8008a8c>
    8d74:	d9000b17 	ldw	r4,44(sp)
    8d78:	2000c826 	beq	r4,zero,909c <_dtoa_r+0xcb8>
    8d7c:	d9800317 	ldw	r6,12(sp)
    8d80:	00c00044 	movi	r3,1
    8d84:	1980f90e 	bge	r3,r6,916c <_dtoa_r+0xd88>
    8d88:	d8800617 	ldw	r2,24(sp)
    8d8c:	d8c00a17 	ldw	r3,40(sp)
    8d90:	157fffc4 	addi	r21,r2,-1
    8d94:	1d41f316 	blt	r3,r21,9564 <_dtoa_r+0x1180>
    8d98:	1d6bc83a 	sub	r21,r3,r21
    8d9c:	d9c00617 	ldw	r7,24(sp)
    8da0:	3802aa16 	blt	r7,zero,984c <_dtoa_r+0x1468>
    8da4:	dd000817 	ldw	r20,32(sp)
    8da8:	d8800617 	ldw	r2,24(sp)
    8dac:	d8c00817 	ldw	r3,32(sp)
    8db0:	01400044 	movi	r5,1
    8db4:	e009883a 	mov	r4,fp
    8db8:	1887883a 	add	r3,r3,r2
    8dbc:	d8c00815 	stw	r3,32(sp)
    8dc0:	b0ad883a 	add	r22,r22,r2
    8dc4:	000aa300 	call	aa30 <__i2b>
    8dc8:	1023883a 	mov	r17,r2
    8dcc:	a0000826 	beq	r20,zero,8df0 <_dtoa_r+0xa0c>
    8dd0:	0580070e 	bge	zero,r22,8df0 <_dtoa_r+0xa0c>
    8dd4:	a005883a 	mov	r2,r20
    8dd8:	b500b916 	blt	r22,r20,90c0 <_dtoa_r+0xcdc>
    8ddc:	d9000817 	ldw	r4,32(sp)
    8de0:	a0a9c83a 	sub	r20,r20,r2
    8de4:	b0adc83a 	sub	r22,r22,r2
    8de8:	2089c83a 	sub	r4,r4,r2
    8dec:	d9000815 	stw	r4,32(sp)
    8df0:	d9800a17 	ldw	r6,40(sp)
    8df4:	0181810e 	bge	zero,r6,93fc <_dtoa_r+0x1018>
    8df8:	d9c00b17 	ldw	r7,44(sp)
    8dfc:	3800b326 	beq	r7,zero,90cc <_dtoa_r+0xce8>
    8e00:	a800b226 	beq	r21,zero,90cc <_dtoa_r+0xce8>
    8e04:	880b883a 	mov	r5,r17
    8e08:	a80d883a 	mov	r6,r21
    8e0c:	e009883a 	mov	r4,fp
    8e10:	000acf80 	call	acf8 <__pow5mult>
    8e14:	d9800917 	ldw	r6,36(sp)
    8e18:	100b883a 	mov	r5,r2
    8e1c:	e009883a 	mov	r4,fp
    8e20:	1023883a 	mov	r17,r2
    8e24:	000aa6c0 	call	aa6c <__multiply>
    8e28:	1021883a 	mov	r16,r2
    8e2c:	d8800a17 	ldw	r2,40(sp)
    8e30:	d9400917 	ldw	r5,36(sp)
    8e34:	e009883a 	mov	r4,fp
    8e38:	1545c83a 	sub	r2,r2,r21
    8e3c:	d8800a15 	stw	r2,40(sp)
    8e40:	000a6a40 	call	a6a4 <_Bfree>
    8e44:	d8c00a17 	ldw	r3,40(sp)
    8e48:	18009f1e 	bne	r3,zero,90c8 <_dtoa_r+0xce4>
    8e4c:	05c00044 	movi	r23,1
    8e50:	e009883a 	mov	r4,fp
    8e54:	b80b883a 	mov	r5,r23
    8e58:	000aa300 	call	aa30 <__i2b>
    8e5c:	d9000d17 	ldw	r4,52(sp)
    8e60:	102b883a 	mov	r21,r2
    8e64:	2000ce26 	beq	r4,zero,91a0 <_dtoa_r+0xdbc>
    8e68:	200d883a 	mov	r6,r4
    8e6c:	100b883a 	mov	r5,r2
    8e70:	e009883a 	mov	r4,fp
    8e74:	000acf80 	call	acf8 <__pow5mult>
    8e78:	d9800317 	ldw	r6,12(sp)
    8e7c:	102b883a 	mov	r21,r2
    8e80:	b981810e 	bge	r23,r6,9488 <_dtoa_r+0x10a4>
    8e84:	0027883a 	mov	r19,zero
    8e88:	a8800417 	ldw	r2,16(r21)
    8e8c:	05c00804 	movi	r23,32
    8e90:	10800104 	addi	r2,r2,4
    8e94:	1085883a 	add	r2,r2,r2
    8e98:	1085883a 	add	r2,r2,r2
    8e9c:	a885883a 	add	r2,r21,r2
    8ea0:	11000017 	ldw	r4,0(r2)
    8ea4:	000a9180 	call	a918 <__hi0bits>
    8ea8:	b885c83a 	sub	r2,r23,r2
    8eac:	1585883a 	add	r2,r2,r22
    8eb0:	108007cc 	andi	r2,r2,31
    8eb4:	1000b326 	beq	r2,zero,9184 <_dtoa_r+0xda0>
    8eb8:	00c00804 	movi	r3,32
    8ebc:	1887c83a 	sub	r3,r3,r2
    8ec0:	01000104 	movi	r4,4
    8ec4:	20c2cd0e 	bge	r4,r3,99fc <_dtoa_r+0x1618>
    8ec8:	00c00704 	movi	r3,28
    8ecc:	1885c83a 	sub	r2,r3,r2
    8ed0:	d8c00817 	ldw	r3,32(sp)
    8ed4:	a0a9883a 	add	r20,r20,r2
    8ed8:	b0ad883a 	add	r22,r22,r2
    8edc:	1887883a 	add	r3,r3,r2
    8ee0:	d8c00815 	stw	r3,32(sp)
    8ee4:	d9800817 	ldw	r6,32(sp)
    8ee8:	0180040e 	bge	zero,r6,8efc <_dtoa_r+0xb18>
    8eec:	800b883a 	mov	r5,r16
    8ef0:	e009883a 	mov	r4,fp
    8ef4:	000ae380 	call	ae38 <__lshift>
    8ef8:	1021883a 	mov	r16,r2
    8efc:	0580050e 	bge	zero,r22,8f14 <_dtoa_r+0xb30>
    8f00:	a80b883a 	mov	r5,r21
    8f04:	b00d883a 	mov	r6,r22
    8f08:	e009883a 	mov	r4,fp
    8f0c:	000ae380 	call	ae38 <__lshift>
    8f10:	102b883a 	mov	r21,r2
    8f14:	d9c00e17 	ldw	r7,56(sp)
    8f18:	3801211e 	bne	r7,zero,93a0 <_dtoa_r+0xfbc>
    8f1c:	d9800617 	ldw	r6,24(sp)
    8f20:	0181380e 	bge	zero,r6,9404 <_dtoa_r+0x1020>
    8f24:	d8c00b17 	ldw	r3,44(sp)
    8f28:	1800ab1e 	bne	r3,zero,91d8 <_dtoa_r+0xdf4>
    8f2c:	dc800717 	ldw	r18,28(sp)
    8f30:	dcc00617 	ldw	r19,24(sp)
    8f34:	9029883a 	mov	r20,r18
    8f38:	00000206 	br	8f44 <_dtoa_r+0xb60>
    8f3c:	000a6cc0 	call	a6cc <__multadd>
    8f40:	1021883a 	mov	r16,r2
    8f44:	a80b883a 	mov	r5,r21
    8f48:	8009883a 	mov	r4,r16
    8f4c:	00081bc0 	call	81bc <quorem>
    8f50:	10800c04 	addi	r2,r2,48
    8f54:	90800005 	stb	r2,0(r18)
    8f58:	94800044 	addi	r18,r18,1
    8f5c:	9507c83a 	sub	r3,r18,r20
    8f60:	000f883a 	mov	r7,zero
    8f64:	01800284 	movi	r6,10
    8f68:	800b883a 	mov	r5,r16
    8f6c:	e009883a 	mov	r4,fp
    8f70:	1cfff216 	blt	r3,r19,8f3c <__alt_data_end+0xf8008f3c>
    8f74:	1011883a 	mov	r8,r2
    8f78:	d8800617 	ldw	r2,24(sp)
    8f7c:	0082370e 	bge	zero,r2,985c <_dtoa_r+0x1478>
    8f80:	d9000717 	ldw	r4,28(sp)
    8f84:	0025883a 	mov	r18,zero
    8f88:	20af883a 	add	r23,r4,r2
    8f8c:	01800044 	movi	r6,1
    8f90:	800b883a 	mov	r5,r16
    8f94:	e009883a 	mov	r4,fp
    8f98:	da001715 	stw	r8,92(sp)
    8f9c:	000ae380 	call	ae38 <__lshift>
    8fa0:	a80b883a 	mov	r5,r21
    8fa4:	1009883a 	mov	r4,r2
    8fa8:	d8800915 	stw	r2,36(sp)
    8fac:	000af800 	call	af80 <__mcmp>
    8fb0:	da001717 	ldw	r8,92(sp)
    8fb4:	0081800e 	bge	zero,r2,95b8 <_dtoa_r+0x11d4>
    8fb8:	b93fffc3 	ldbu	r4,-1(r23)
    8fbc:	b8bfffc4 	addi	r2,r23,-1
    8fc0:	1007883a 	mov	r3,r2
    8fc4:	01800e44 	movi	r6,57
    8fc8:	d9c00717 	ldw	r7,28(sp)
    8fcc:	00000506 	br	8fe4 <_dtoa_r+0xc00>
    8fd0:	18ffffc4 	addi	r3,r3,-1
    8fd4:	11c12326 	beq	r2,r7,9464 <_dtoa_r+0x1080>
    8fd8:	19000003 	ldbu	r4,0(r3)
    8fdc:	102f883a 	mov	r23,r2
    8fe0:	10bfffc4 	addi	r2,r2,-1
    8fe4:	21403fcc 	andi	r5,r4,255
    8fe8:	2940201c 	xori	r5,r5,128
    8fec:	297fe004 	addi	r5,r5,-128
    8ff0:	29bff726 	beq	r5,r6,8fd0 <__alt_data_end+0xf8008fd0>
    8ff4:	21000044 	addi	r4,r4,1
    8ff8:	11000005 	stb	r4,0(r2)
    8ffc:	a80b883a 	mov	r5,r21
    9000:	e009883a 	mov	r4,fp
    9004:	000a6a40 	call	a6a4 <_Bfree>
    9008:	883ea026 	beq	r17,zero,8a8c <__alt_data_end+0xf8008a8c>
    900c:	90000426 	beq	r18,zero,9020 <_dtoa_r+0xc3c>
    9010:	94400326 	beq	r18,r17,9020 <_dtoa_r+0xc3c>
    9014:	900b883a 	mov	r5,r18
    9018:	e009883a 	mov	r4,fp
    901c:	000a6a40 	call	a6a4 <_Bfree>
    9020:	880b883a 	mov	r5,r17
    9024:	e009883a 	mov	r4,fp
    9028:	000a6a40 	call	a6a4 <_Bfree>
    902c:	003e9706 	br	8a8c <__alt_data_end+0xf8008a8c>
    9030:	01800044 	movi	r6,1
    9034:	d9800e15 	stw	r6,56(sp)
    9038:	003d9606 	br	8694 <__alt_data_end+0xf8008694>
    903c:	d8800817 	ldw	r2,32(sp)
    9040:	d8c00517 	ldw	r3,20(sp)
    9044:	d8000d15 	stw	zero,52(sp)
    9048:	10c5c83a 	sub	r2,r2,r3
    904c:	00c9c83a 	sub	r4,zero,r3
    9050:	d8800815 	stw	r2,32(sp)
    9054:	d9000a15 	stw	r4,40(sp)
    9058:	003d9706 	br	86b8 <__alt_data_end+0xf80086b8>
    905c:	05adc83a 	sub	r22,zero,r22
    9060:	dd800815 	stw	r22,32(sp)
    9064:	002d883a 	mov	r22,zero
    9068:	003d8e06 	br	86a4 <__alt_data_end+0xf80086a4>
    906c:	d9000517 	ldw	r4,20(sp)
    9070:	00122f80 	call	122f8 <__floatsidf>
    9074:	100d883a 	mov	r6,r2
    9078:	180f883a 	mov	r7,r3
    907c:	a009883a 	mov	r4,r20
    9080:	880b883a 	mov	r5,r17
    9084:	0010eb80 	call	10eb8 <__eqdf2>
    9088:	103d7126 	beq	r2,zero,8650 <__alt_data_end+0xf8008650>
    908c:	d9c00517 	ldw	r7,20(sp)
    9090:	39ffffc4 	addi	r7,r7,-1
    9094:	d9c00515 	stw	r7,20(sp)
    9098:	003d6d06 	br	8650 <__alt_data_end+0xf8008650>
    909c:	dd400a17 	ldw	r21,40(sp)
    90a0:	dd000817 	ldw	r20,32(sp)
    90a4:	0023883a 	mov	r17,zero
    90a8:	003f4806 	br	8dcc <__alt_data_end+0xf8008dcc>
    90ac:	10e3c83a 	sub	r17,r2,r3
    90b0:	9448983a 	sll	r4,r18,r17
    90b4:	003d3206 	br	8580 <__alt_data_end+0xf8008580>
    90b8:	d8000e15 	stw	zero,56(sp)
    90bc:	003d7506 	br	8694 <__alt_data_end+0xf8008694>
    90c0:	b005883a 	mov	r2,r22
    90c4:	003f4506 	br	8ddc <__alt_data_end+0xf8008ddc>
    90c8:	dc000915 	stw	r16,36(sp)
    90cc:	d9800a17 	ldw	r6,40(sp)
    90d0:	d9400917 	ldw	r5,36(sp)
    90d4:	e009883a 	mov	r4,fp
    90d8:	000acf80 	call	acf8 <__pow5mult>
    90dc:	1021883a 	mov	r16,r2
    90e0:	003f5a06 	br	8e4c <__alt_data_end+0xf8008e4c>
    90e4:	01c00044 	movi	r7,1
    90e8:	d9c00b15 	stw	r7,44(sp)
    90ec:	d8802217 	ldw	r2,136(sp)
    90f0:	0081280e 	bge	zero,r2,9594 <_dtoa_r+0x11b0>
    90f4:	100d883a 	mov	r6,r2
    90f8:	1021883a 	mov	r16,r2
    90fc:	d8800c15 	stw	r2,48(sp)
    9100:	d8800615 	stw	r2,24(sp)
    9104:	003d8806 	br	8728 <__alt_data_end+0xf8008728>
    9108:	d8800617 	ldw	r2,24(sp)
    910c:	00be9b16 	blt	zero,r2,8b7c <__alt_data_end+0xf8008b7c>
    9110:	10010f1e 	bne	r2,zero,9550 <_dtoa_r+0x116c>
    9114:	880b883a 	mov	r5,r17
    9118:	000d883a 	mov	r6,zero
    911c:	01d00534 	movhi	r7,16404
    9120:	8009883a 	mov	r4,r16
    9124:	00111100 	call	11110 <__muldf3>
    9128:	900d883a 	mov	r6,r18
    912c:	980f883a 	mov	r7,r19
    9130:	1009883a 	mov	r4,r2
    9134:	180b883a 	mov	r5,r3
    9138:	0010f400 	call	10f40 <__gedf2>
    913c:	002b883a 	mov	r21,zero
    9140:	0023883a 	mov	r17,zero
    9144:	1000bf16 	blt	r2,zero,9444 <_dtoa_r+0x1060>
    9148:	d9802217 	ldw	r6,136(sp)
    914c:	ddc00717 	ldw	r23,28(sp)
    9150:	018c303a 	nor	r6,zero,r6
    9154:	d9800515 	stw	r6,20(sp)
    9158:	a80b883a 	mov	r5,r21
    915c:	e009883a 	mov	r4,fp
    9160:	000a6a40 	call	a6a4 <_Bfree>
    9164:	883e4926 	beq	r17,zero,8a8c <__alt_data_end+0xf8008a8c>
    9168:	003fad06 	br	9020 <__alt_data_end+0xf8009020>
    916c:	d9c01117 	ldw	r7,68(sp)
    9170:	3801bc26 	beq	r7,zero,9864 <_dtoa_r+0x1480>
    9174:	10810cc4 	addi	r2,r2,1075
    9178:	dd400a17 	ldw	r21,40(sp)
    917c:	dd000817 	ldw	r20,32(sp)
    9180:	003f0a06 	br	8dac <__alt_data_end+0xf8008dac>
    9184:	00800704 	movi	r2,28
    9188:	d9000817 	ldw	r4,32(sp)
    918c:	a0a9883a 	add	r20,r20,r2
    9190:	b0ad883a 	add	r22,r22,r2
    9194:	2089883a 	add	r4,r4,r2
    9198:	d9000815 	stw	r4,32(sp)
    919c:	003f5106 	br	8ee4 <__alt_data_end+0xf8008ee4>
    91a0:	d8c00317 	ldw	r3,12(sp)
    91a4:	b8c1fc0e 	bge	r23,r3,9998 <_dtoa_r+0x15b4>
    91a8:	0027883a 	mov	r19,zero
    91ac:	b805883a 	mov	r2,r23
    91b0:	003f3e06 	br	8eac <__alt_data_end+0xf8008eac>
    91b4:	880b883a 	mov	r5,r17
    91b8:	e009883a 	mov	r4,fp
    91bc:	000f883a 	mov	r7,zero
    91c0:	01800284 	movi	r6,10
    91c4:	000a6cc0 	call	a6cc <__multadd>
    91c8:	d9000c17 	ldw	r4,48(sp)
    91cc:	1023883a 	mov	r17,r2
    91d0:	0102040e 	bge	zero,r4,99e4 <_dtoa_r+0x1600>
    91d4:	d9000615 	stw	r4,24(sp)
    91d8:	0500050e 	bge	zero,r20,91f0 <_dtoa_r+0xe0c>
    91dc:	880b883a 	mov	r5,r17
    91e0:	a00d883a 	mov	r6,r20
    91e4:	e009883a 	mov	r4,fp
    91e8:	000ae380 	call	ae38 <__lshift>
    91ec:	1023883a 	mov	r17,r2
    91f0:	9801241e 	bne	r19,zero,9684 <_dtoa_r+0x12a0>
    91f4:	8829883a 	mov	r20,r17
    91f8:	d9000617 	ldw	r4,24(sp)
    91fc:	dcc00717 	ldw	r19,28(sp)
    9200:	9480004c 	andi	r18,r18,1
    9204:	20bfffc4 	addi	r2,r4,-1
    9208:	9885883a 	add	r2,r19,r2
    920c:	d8800415 	stw	r2,16(sp)
    9210:	dc800615 	stw	r18,24(sp)
    9214:	a80b883a 	mov	r5,r21
    9218:	8009883a 	mov	r4,r16
    921c:	00081bc0 	call	81bc <quorem>
    9220:	880b883a 	mov	r5,r17
    9224:	8009883a 	mov	r4,r16
    9228:	102f883a 	mov	r23,r2
    922c:	000af800 	call	af80 <__mcmp>
    9230:	a80b883a 	mov	r5,r21
    9234:	a00d883a 	mov	r6,r20
    9238:	e009883a 	mov	r4,fp
    923c:	102d883a 	mov	r22,r2
    9240:	000afe00 	call	afe0 <__mdiff>
    9244:	1007883a 	mov	r3,r2
    9248:	10800317 	ldw	r2,12(r2)
    924c:	bc800c04 	addi	r18,r23,48
    9250:	180b883a 	mov	r5,r3
    9254:	10004e1e 	bne	r2,zero,9390 <_dtoa_r+0xfac>
    9258:	8009883a 	mov	r4,r16
    925c:	d8c01615 	stw	r3,88(sp)
    9260:	000af800 	call	af80 <__mcmp>
    9264:	d8c01617 	ldw	r3,88(sp)
    9268:	e009883a 	mov	r4,fp
    926c:	d8801615 	stw	r2,88(sp)
    9270:	180b883a 	mov	r5,r3
    9274:	000a6a40 	call	a6a4 <_Bfree>
    9278:	d8801617 	ldw	r2,88(sp)
    927c:	1000041e 	bne	r2,zero,9290 <_dtoa_r+0xeac>
    9280:	d9800317 	ldw	r6,12(sp)
    9284:	3000021e 	bne	r6,zero,9290 <_dtoa_r+0xeac>
    9288:	d8c00617 	ldw	r3,24(sp)
    928c:	18003726 	beq	r3,zero,936c <_dtoa_r+0xf88>
    9290:	b0002016 	blt	r22,zero,9314 <_dtoa_r+0xf30>
    9294:	b000041e 	bne	r22,zero,92a8 <_dtoa_r+0xec4>
    9298:	d9000317 	ldw	r4,12(sp)
    929c:	2000021e 	bne	r4,zero,92a8 <_dtoa_r+0xec4>
    92a0:	d8c00617 	ldw	r3,24(sp)
    92a4:	18001b26 	beq	r3,zero,9314 <_dtoa_r+0xf30>
    92a8:	00810716 	blt	zero,r2,96c8 <_dtoa_r+0x12e4>
    92ac:	d8c00417 	ldw	r3,16(sp)
    92b0:	9d800044 	addi	r22,r19,1
    92b4:	9c800005 	stb	r18,0(r19)
    92b8:	b02f883a 	mov	r23,r22
    92bc:	98c10626 	beq	r19,r3,96d8 <_dtoa_r+0x12f4>
    92c0:	800b883a 	mov	r5,r16
    92c4:	000f883a 	mov	r7,zero
    92c8:	01800284 	movi	r6,10
    92cc:	e009883a 	mov	r4,fp
    92d0:	000a6cc0 	call	a6cc <__multadd>
    92d4:	1021883a 	mov	r16,r2
    92d8:	000f883a 	mov	r7,zero
    92dc:	01800284 	movi	r6,10
    92e0:	880b883a 	mov	r5,r17
    92e4:	e009883a 	mov	r4,fp
    92e8:	8d002526 	beq	r17,r20,9380 <_dtoa_r+0xf9c>
    92ec:	000a6cc0 	call	a6cc <__multadd>
    92f0:	a00b883a 	mov	r5,r20
    92f4:	000f883a 	mov	r7,zero
    92f8:	01800284 	movi	r6,10
    92fc:	e009883a 	mov	r4,fp
    9300:	1023883a 	mov	r17,r2
    9304:	000a6cc0 	call	a6cc <__multadd>
    9308:	1029883a 	mov	r20,r2
    930c:	b027883a 	mov	r19,r22
    9310:	003fc006 	br	9214 <__alt_data_end+0xf8009214>
    9314:	9011883a 	mov	r8,r18
    9318:	00800e0e 	bge	zero,r2,9354 <_dtoa_r+0xf70>
    931c:	800b883a 	mov	r5,r16
    9320:	01800044 	movi	r6,1
    9324:	e009883a 	mov	r4,fp
    9328:	da001715 	stw	r8,92(sp)
    932c:	000ae380 	call	ae38 <__lshift>
    9330:	a80b883a 	mov	r5,r21
    9334:	1009883a 	mov	r4,r2
    9338:	1021883a 	mov	r16,r2
    933c:	000af800 	call	af80 <__mcmp>
    9340:	da001717 	ldw	r8,92(sp)
    9344:	0081960e 	bge	zero,r2,99a0 <_dtoa_r+0x15bc>
    9348:	00800e44 	movi	r2,57
    934c:	40817026 	beq	r8,r2,9910 <_dtoa_r+0x152c>
    9350:	ba000c44 	addi	r8,r23,49
    9354:	8825883a 	mov	r18,r17
    9358:	9dc00044 	addi	r23,r19,1
    935c:	9a000005 	stb	r8,0(r19)
    9360:	a023883a 	mov	r17,r20
    9364:	dc000915 	stw	r16,36(sp)
    9368:	003f2406 	br	8ffc <__alt_data_end+0xf8008ffc>
    936c:	00800e44 	movi	r2,57
    9370:	9011883a 	mov	r8,r18
    9374:	90816626 	beq	r18,r2,9910 <_dtoa_r+0x152c>
    9378:	05bff516 	blt	zero,r22,9350 <__alt_data_end+0xf8009350>
    937c:	003ff506 	br	9354 <__alt_data_end+0xf8009354>
    9380:	000a6cc0 	call	a6cc <__multadd>
    9384:	1023883a 	mov	r17,r2
    9388:	1029883a 	mov	r20,r2
    938c:	003fdf06 	br	930c <__alt_data_end+0xf800930c>
    9390:	e009883a 	mov	r4,fp
    9394:	000a6a40 	call	a6a4 <_Bfree>
    9398:	00800044 	movi	r2,1
    939c:	003fbc06 	br	9290 <__alt_data_end+0xf8009290>
    93a0:	a80b883a 	mov	r5,r21
    93a4:	8009883a 	mov	r4,r16
    93a8:	000af800 	call	af80 <__mcmp>
    93ac:	103edb0e 	bge	r2,zero,8f1c <__alt_data_end+0xf8008f1c>
    93b0:	800b883a 	mov	r5,r16
    93b4:	000f883a 	mov	r7,zero
    93b8:	01800284 	movi	r6,10
    93bc:	e009883a 	mov	r4,fp
    93c0:	000a6cc0 	call	a6cc <__multadd>
    93c4:	1021883a 	mov	r16,r2
    93c8:	d8800517 	ldw	r2,20(sp)
    93cc:	d8c00b17 	ldw	r3,44(sp)
    93d0:	10bfffc4 	addi	r2,r2,-1
    93d4:	d8800515 	stw	r2,20(sp)
    93d8:	183f761e 	bne	r3,zero,91b4 <__alt_data_end+0xf80091b4>
    93dc:	d9000c17 	ldw	r4,48(sp)
    93e0:	0101730e 	bge	zero,r4,99b0 <_dtoa_r+0x15cc>
    93e4:	d9000615 	stw	r4,24(sp)
    93e8:	003ed006 	br	8f2c <__alt_data_end+0xf8008f2c>
    93ec:	00800084 	movi	r2,2
    93f0:	3081861e 	bne	r6,r2,9a0c <_dtoa_r+0x1628>
    93f4:	d8000b15 	stw	zero,44(sp)
    93f8:	003f3c06 	br	90ec <__alt_data_end+0xf80090ec>
    93fc:	dc000917 	ldw	r16,36(sp)
    9400:	003e9206 	br	8e4c <__alt_data_end+0xf8008e4c>
    9404:	d9c00317 	ldw	r7,12(sp)
    9408:	00800084 	movi	r2,2
    940c:	11fec50e 	bge	r2,r7,8f24 <__alt_data_end+0xf8008f24>
    9410:	d9000617 	ldw	r4,24(sp)
    9414:	20013c1e 	bne	r4,zero,9908 <_dtoa_r+0x1524>
    9418:	a80b883a 	mov	r5,r21
    941c:	000f883a 	mov	r7,zero
    9420:	01800144 	movi	r6,5
    9424:	e009883a 	mov	r4,fp
    9428:	000a6cc0 	call	a6cc <__multadd>
    942c:	100b883a 	mov	r5,r2
    9430:	8009883a 	mov	r4,r16
    9434:	102b883a 	mov	r21,r2
    9438:	000af800 	call	af80 <__mcmp>
    943c:	dc000915 	stw	r16,36(sp)
    9440:	00bf410e 	bge	zero,r2,9148 <__alt_data_end+0xf8009148>
    9444:	d9c00717 	ldw	r7,28(sp)
    9448:	00800c44 	movi	r2,49
    944c:	38800005 	stb	r2,0(r7)
    9450:	d8800517 	ldw	r2,20(sp)
    9454:	3dc00044 	addi	r23,r7,1
    9458:	10800044 	addi	r2,r2,1
    945c:	d8800515 	stw	r2,20(sp)
    9460:	003f3d06 	br	9158 <__alt_data_end+0xf8009158>
    9464:	d9800517 	ldw	r6,20(sp)
    9468:	d9c00717 	ldw	r7,28(sp)
    946c:	00800c44 	movi	r2,49
    9470:	31800044 	addi	r6,r6,1
    9474:	d9800515 	stw	r6,20(sp)
    9478:	38800005 	stb	r2,0(r7)
    947c:	003edf06 	br	8ffc <__alt_data_end+0xf8008ffc>
    9480:	d8000b15 	stw	zero,44(sp)
    9484:	003c9f06 	br	8704 <__alt_data_end+0xf8008704>
    9488:	903e7e1e 	bne	r18,zero,8e84 <__alt_data_end+0xf8008e84>
    948c:	00800434 	movhi	r2,16
    9490:	10bfffc4 	addi	r2,r2,-1
    9494:	9884703a 	and	r2,r19,r2
    9498:	1000ea1e 	bne	r2,zero,9844 <_dtoa_r+0x1460>
    949c:	9cdffc2c 	andhi	r19,r19,32752
    94a0:	9800e826 	beq	r19,zero,9844 <_dtoa_r+0x1460>
    94a4:	d9c00817 	ldw	r7,32(sp)
    94a8:	b5800044 	addi	r22,r22,1
    94ac:	04c00044 	movi	r19,1
    94b0:	39c00044 	addi	r7,r7,1
    94b4:	d9c00815 	stw	r7,32(sp)
    94b8:	d8800d17 	ldw	r2,52(sp)
    94bc:	103e721e 	bne	r2,zero,8e88 <__alt_data_end+0xf8008e88>
    94c0:	00800044 	movi	r2,1
    94c4:	003e7906 	br	8eac <__alt_data_end+0xf8008eac>
    94c8:	8009883a 	mov	r4,r16
    94cc:	00122f80 	call	122f8 <__floatsidf>
    94d0:	d9800f17 	ldw	r6,60(sp)
    94d4:	d9c01017 	ldw	r7,64(sp)
    94d8:	1009883a 	mov	r4,r2
    94dc:	180b883a 	mov	r5,r3
    94e0:	00111100 	call	11110 <__muldf3>
    94e4:	000d883a 	mov	r6,zero
    94e8:	01d00734 	movhi	r7,16412
    94ec:	1009883a 	mov	r4,r2
    94f0:	180b883a 	mov	r5,r3
    94f4:	000fc3c0 	call	fc3c <__adddf3>
    94f8:	047f3034 	movhi	r17,64704
    94fc:	1021883a 	mov	r16,r2
    9500:	1c63883a 	add	r17,r3,r17
    9504:	d9000f17 	ldw	r4,60(sp)
    9508:	d9401017 	ldw	r5,64(sp)
    950c:	000d883a 	mov	r6,zero
    9510:	01d00534 	movhi	r7,16404
    9514:	001197c0 	call	1197c <__subdf3>
    9518:	800d883a 	mov	r6,r16
    951c:	880f883a 	mov	r7,r17
    9520:	1009883a 	mov	r4,r2
    9524:	180b883a 	mov	r5,r3
    9528:	102b883a 	mov	r21,r2
    952c:	1829883a 	mov	r20,r3
    9530:	0010f400 	call	10f40 <__gedf2>
    9534:	00806c16 	blt	zero,r2,96e8 <_dtoa_r+0x1304>
    9538:	89e0003c 	xorhi	r7,r17,32768
    953c:	800d883a 	mov	r6,r16
    9540:	a809883a 	mov	r4,r21
    9544:	a00b883a 	mov	r5,r20
    9548:	001101c0 	call	1101c <__ledf2>
    954c:	103d7e0e 	bge	r2,zero,8b48 <__alt_data_end+0xf8008b48>
    9550:	002b883a 	mov	r21,zero
    9554:	0023883a 	mov	r17,zero
    9558:	003efb06 	br	9148 <__alt_data_end+0xf8009148>
    955c:	d8800717 	ldw	r2,28(sp)
    9560:	003bd006 	br	84a4 <__alt_data_end+0xf80084a4>
    9564:	d9000a17 	ldw	r4,40(sp)
    9568:	d9800d17 	ldw	r6,52(sp)
    956c:	dd400a15 	stw	r21,40(sp)
    9570:	a905c83a 	sub	r2,r21,r4
    9574:	308d883a 	add	r6,r6,r2
    9578:	d9800d15 	stw	r6,52(sp)
    957c:	002b883a 	mov	r21,zero
    9580:	003e0606 	br	8d9c <__alt_data_end+0xf8008d9c>
    9584:	9023883a 	mov	r17,r18
    9588:	9829883a 	mov	r20,r19
    958c:	04000084 	movi	r16,2
    9590:	003c9206 	br	87dc <__alt_data_end+0xf80087dc>
    9594:	04000044 	movi	r16,1
    9598:	dc000c15 	stw	r16,48(sp)
    959c:	dc000615 	stw	r16,24(sp)
    95a0:	dc002215 	stw	r16,136(sp)
    95a4:	e0001115 	stw	zero,68(fp)
    95a8:	000b883a 	mov	r5,zero
    95ac:	003c6906 	br	8754 <__alt_data_end+0xf8008754>
    95b0:	3021883a 	mov	r16,r6
    95b4:	003ffb06 	br	95a4 <__alt_data_end+0xf80095a4>
    95b8:	1000021e 	bne	r2,zero,95c4 <_dtoa_r+0x11e0>
    95bc:	4200004c 	andi	r8,r8,1
    95c0:	403e7d1e 	bne	r8,zero,8fb8 <__alt_data_end+0xf8008fb8>
    95c4:	01000c04 	movi	r4,48
    95c8:	00000106 	br	95d0 <_dtoa_r+0x11ec>
    95cc:	102f883a 	mov	r23,r2
    95d0:	b8bfffc4 	addi	r2,r23,-1
    95d4:	10c00007 	ldb	r3,0(r2)
    95d8:	193ffc26 	beq	r3,r4,95cc <__alt_data_end+0xf80095cc>
    95dc:	003e8706 	br	8ffc <__alt_data_end+0xf8008ffc>
    95e0:	d8800517 	ldw	r2,20(sp)
    95e4:	00a3c83a 	sub	r17,zero,r2
    95e8:	8800a426 	beq	r17,zero,987c <_dtoa_r+0x1498>
    95ec:	888003cc 	andi	r2,r17,15
    95f0:	100490fa 	slli	r2,r2,3
    95f4:	00c00074 	movhi	r3,1
    95f8:	18d7dc04 	addi	r3,r3,24432
    95fc:	1885883a 	add	r2,r3,r2
    9600:	11800017 	ldw	r6,0(r2)
    9604:	11c00117 	ldw	r7,4(r2)
    9608:	9009883a 	mov	r4,r18
    960c:	980b883a 	mov	r5,r19
    9610:	8823d13a 	srai	r17,r17,4
    9614:	00111100 	call	11110 <__muldf3>
    9618:	d8800f15 	stw	r2,60(sp)
    961c:	d8c01015 	stw	r3,64(sp)
    9620:	8800e826 	beq	r17,zero,99c4 <_dtoa_r+0x15e0>
    9624:	05000074 	movhi	r20,1
    9628:	a517d204 	addi	r20,r20,24392
    962c:	04000084 	movi	r16,2
    9630:	8980004c 	andi	r6,r17,1
    9634:	1009883a 	mov	r4,r2
    9638:	8823d07a 	srai	r17,r17,1
    963c:	180b883a 	mov	r5,r3
    9640:	30000426 	beq	r6,zero,9654 <_dtoa_r+0x1270>
    9644:	a1800017 	ldw	r6,0(r20)
    9648:	a1c00117 	ldw	r7,4(r20)
    964c:	84000044 	addi	r16,r16,1
    9650:	00111100 	call	11110 <__muldf3>
    9654:	a5000204 	addi	r20,r20,8
    9658:	883ff51e 	bne	r17,zero,9630 <__alt_data_end+0xf8009630>
    965c:	d8800f15 	stw	r2,60(sp)
    9660:	d8c01015 	stw	r3,64(sp)
    9664:	003c7606 	br	8840 <__alt_data_end+0xf8008840>
    9668:	00c00c04 	movi	r3,48
    966c:	10c00005 	stb	r3,0(r2)
    9670:	d8c00517 	ldw	r3,20(sp)
    9674:	bd3fffc3 	ldbu	r20,-1(r23)
    9678:	18c00044 	addi	r3,r3,1
    967c:	d8c00515 	stw	r3,20(sp)
    9680:	003db906 	br	8d68 <__alt_data_end+0xf8008d68>
    9684:	89400117 	ldw	r5,4(r17)
    9688:	e009883a 	mov	r4,fp
    968c:	000a5fc0 	call	a5fc <_Balloc>
    9690:	89800417 	ldw	r6,16(r17)
    9694:	89400304 	addi	r5,r17,12
    9698:	11000304 	addi	r4,r2,12
    969c:	31800084 	addi	r6,r6,2
    96a0:	318d883a 	add	r6,r6,r6
    96a4:	318d883a 	add	r6,r6,r6
    96a8:	1027883a 	mov	r19,r2
    96ac:	000a3580 	call	a358 <memcpy>
    96b0:	01800044 	movi	r6,1
    96b4:	980b883a 	mov	r5,r19
    96b8:	e009883a 	mov	r4,fp
    96bc:	000ae380 	call	ae38 <__lshift>
    96c0:	1029883a 	mov	r20,r2
    96c4:	003ecc06 	br	91f8 <__alt_data_end+0xf80091f8>
    96c8:	00800e44 	movi	r2,57
    96cc:	90809026 	beq	r18,r2,9910 <_dtoa_r+0x152c>
    96d0:	92000044 	addi	r8,r18,1
    96d4:	003f1f06 	br	9354 <__alt_data_end+0xf8009354>
    96d8:	9011883a 	mov	r8,r18
    96dc:	8825883a 	mov	r18,r17
    96e0:	a023883a 	mov	r17,r20
    96e4:	003e2906 	br	8f8c <__alt_data_end+0xf8008f8c>
    96e8:	002b883a 	mov	r21,zero
    96ec:	0023883a 	mov	r17,zero
    96f0:	003f5406 	br	9444 <__alt_data_end+0xf8009444>
    96f4:	61bfffc4 	addi	r6,r12,-1
    96f8:	300490fa 	slli	r2,r6,3
    96fc:	00c00074 	movhi	r3,1
    9700:	18d7dc04 	addi	r3,r3,24432
    9704:	1885883a 	add	r2,r3,r2
    9708:	11000017 	ldw	r4,0(r2)
    970c:	11400117 	ldw	r5,4(r2)
    9710:	d8800717 	ldw	r2,28(sp)
    9714:	880f883a 	mov	r7,r17
    9718:	d9801215 	stw	r6,72(sp)
    971c:	800d883a 	mov	r6,r16
    9720:	db001615 	stw	r12,88(sp)
    9724:	15c00044 	addi	r23,r2,1
    9728:	00111100 	call	11110 <__muldf3>
    972c:	d9401017 	ldw	r5,64(sp)
    9730:	d9000f17 	ldw	r4,60(sp)
    9734:	d8c01515 	stw	r3,84(sp)
    9738:	d8801415 	stw	r2,80(sp)
    973c:	00122780 	call	12278 <__fixdfsi>
    9740:	1009883a 	mov	r4,r2
    9744:	1021883a 	mov	r16,r2
    9748:	00122f80 	call	122f8 <__floatsidf>
    974c:	d9000f17 	ldw	r4,60(sp)
    9750:	d9401017 	ldw	r5,64(sp)
    9754:	100d883a 	mov	r6,r2
    9758:	180f883a 	mov	r7,r3
    975c:	001197c0 	call	1197c <__subdf3>
    9760:	1829883a 	mov	r20,r3
    9764:	d8c00717 	ldw	r3,28(sp)
    9768:	84000c04 	addi	r16,r16,48
    976c:	1023883a 	mov	r17,r2
    9770:	1c000005 	stb	r16,0(r3)
    9774:	db001617 	ldw	r12,88(sp)
    9778:	00800044 	movi	r2,1
    977c:	60802226 	beq	r12,r2,9808 <_dtoa_r+0x1424>
    9780:	d9c00717 	ldw	r7,28(sp)
    9784:	8805883a 	mov	r2,r17
    9788:	b82b883a 	mov	r21,r23
    978c:	3b19883a 	add	r12,r7,r12
    9790:	6023883a 	mov	r17,r12
    9794:	a007883a 	mov	r3,r20
    9798:	dc800f15 	stw	r18,60(sp)
    979c:	000d883a 	mov	r6,zero
    97a0:	01d00934 	movhi	r7,16420
    97a4:	1009883a 	mov	r4,r2
    97a8:	180b883a 	mov	r5,r3
    97ac:	00111100 	call	11110 <__muldf3>
    97b0:	180b883a 	mov	r5,r3
    97b4:	1009883a 	mov	r4,r2
    97b8:	1829883a 	mov	r20,r3
    97bc:	1025883a 	mov	r18,r2
    97c0:	00122780 	call	12278 <__fixdfsi>
    97c4:	1009883a 	mov	r4,r2
    97c8:	1021883a 	mov	r16,r2
    97cc:	00122f80 	call	122f8 <__floatsidf>
    97d0:	100d883a 	mov	r6,r2
    97d4:	180f883a 	mov	r7,r3
    97d8:	9009883a 	mov	r4,r18
    97dc:	a00b883a 	mov	r5,r20
    97e0:	84000c04 	addi	r16,r16,48
    97e4:	001197c0 	call	1197c <__subdf3>
    97e8:	ad400044 	addi	r21,r21,1
    97ec:	ac3fffc5 	stb	r16,-1(r21)
    97f0:	ac7fea1e 	bne	r21,r17,979c <__alt_data_end+0xf800979c>
    97f4:	1023883a 	mov	r17,r2
    97f8:	d8801217 	ldw	r2,72(sp)
    97fc:	dc800f17 	ldw	r18,60(sp)
    9800:	1829883a 	mov	r20,r3
    9804:	b8af883a 	add	r23,r23,r2
    9808:	d9001417 	ldw	r4,80(sp)
    980c:	d9401517 	ldw	r5,84(sp)
    9810:	000d883a 	mov	r6,zero
    9814:	01cff834 	movhi	r7,16352
    9818:	000fc3c0 	call	fc3c <__adddf3>
    981c:	880d883a 	mov	r6,r17
    9820:	a00f883a 	mov	r7,r20
    9824:	1009883a 	mov	r4,r2
    9828:	180b883a 	mov	r5,r3
    982c:	001101c0 	call	1101c <__ledf2>
    9830:	10003e0e 	bge	r2,zero,992c <_dtoa_r+0x1548>
    9834:	d9001317 	ldw	r4,76(sp)
    9838:	bd3fffc3 	ldbu	r20,-1(r23)
    983c:	d9000515 	stw	r4,20(sp)
    9840:	003d3b06 	br	8d30 <__alt_data_end+0xf8008d30>
    9844:	0027883a 	mov	r19,zero
    9848:	003f1b06 	br	94b8 <__alt_data_end+0xf80094b8>
    984c:	d8800817 	ldw	r2,32(sp)
    9850:	11e9c83a 	sub	r20,r2,r7
    9854:	0005883a 	mov	r2,zero
    9858:	003d5406 	br	8dac <__alt_data_end+0xf8008dac>
    985c:	00800044 	movi	r2,1
    9860:	003dc706 	br	8f80 <__alt_data_end+0xf8008f80>
    9864:	d8c00217 	ldw	r3,8(sp)
    9868:	00800d84 	movi	r2,54
    986c:	dd400a17 	ldw	r21,40(sp)
    9870:	10c5c83a 	sub	r2,r2,r3
    9874:	dd000817 	ldw	r20,32(sp)
    9878:	003d4c06 	br	8dac <__alt_data_end+0xf8008dac>
    987c:	dc800f15 	stw	r18,60(sp)
    9880:	dcc01015 	stw	r19,64(sp)
    9884:	04000084 	movi	r16,2
    9888:	003bed06 	br	8840 <__alt_data_end+0xf8008840>
    988c:	d9000617 	ldw	r4,24(sp)
    9890:	203f0d26 	beq	r4,zero,94c8 <__alt_data_end+0xf80094c8>
    9894:	d9800c17 	ldw	r6,48(sp)
    9898:	01bcab0e 	bge	zero,r6,8b48 <__alt_data_end+0xf8008b48>
    989c:	d9401017 	ldw	r5,64(sp)
    98a0:	d9000f17 	ldw	r4,60(sp)
    98a4:	000d883a 	mov	r6,zero
    98a8:	01d00934 	movhi	r7,16420
    98ac:	00111100 	call	11110 <__muldf3>
    98b0:	81000044 	addi	r4,r16,1
    98b4:	d8800f15 	stw	r2,60(sp)
    98b8:	d8c01015 	stw	r3,64(sp)
    98bc:	00122f80 	call	122f8 <__floatsidf>
    98c0:	d9800f17 	ldw	r6,60(sp)
    98c4:	d9c01017 	ldw	r7,64(sp)
    98c8:	1009883a 	mov	r4,r2
    98cc:	180b883a 	mov	r5,r3
    98d0:	00111100 	call	11110 <__muldf3>
    98d4:	01d00734 	movhi	r7,16412
    98d8:	000d883a 	mov	r6,zero
    98dc:	1009883a 	mov	r4,r2
    98e0:	180b883a 	mov	r5,r3
    98e4:	000fc3c0 	call	fc3c <__adddf3>
    98e8:	d9c00517 	ldw	r7,20(sp)
    98ec:	047f3034 	movhi	r17,64704
    98f0:	1021883a 	mov	r16,r2
    98f4:	39ffffc4 	addi	r7,r7,-1
    98f8:	d9c01315 	stw	r7,76(sp)
    98fc:	1c63883a 	add	r17,r3,r17
    9900:	db000c17 	ldw	r12,48(sp)
    9904:	003bea06 	br	88b0 <__alt_data_end+0xf80088b0>
    9908:	dc000915 	stw	r16,36(sp)
    990c:	003e0e06 	br	9148 <__alt_data_end+0xf8009148>
    9910:	01000e44 	movi	r4,57
    9914:	8825883a 	mov	r18,r17
    9918:	9dc00044 	addi	r23,r19,1
    991c:	99000005 	stb	r4,0(r19)
    9920:	a023883a 	mov	r17,r20
    9924:	dc000915 	stw	r16,36(sp)
    9928:	003da406 	br	8fbc <__alt_data_end+0xf8008fbc>
    992c:	d9801417 	ldw	r6,80(sp)
    9930:	d9c01517 	ldw	r7,84(sp)
    9934:	0009883a 	mov	r4,zero
    9938:	014ff834 	movhi	r5,16352
    993c:	001197c0 	call	1197c <__subdf3>
    9940:	880d883a 	mov	r6,r17
    9944:	a00f883a 	mov	r7,r20
    9948:	1009883a 	mov	r4,r2
    994c:	180b883a 	mov	r5,r3
    9950:	0010f400 	call	10f40 <__gedf2>
    9954:	00bc7c0e 	bge	zero,r2,8b48 <__alt_data_end+0xf8008b48>
    9958:	01000c04 	movi	r4,48
    995c:	00000106 	br	9964 <_dtoa_r+0x1580>
    9960:	102f883a 	mov	r23,r2
    9964:	b8bfffc4 	addi	r2,r23,-1
    9968:	10c00007 	ldb	r3,0(r2)
    996c:	193ffc26 	beq	r3,r4,9960 <__alt_data_end+0xf8009960>
    9970:	d9801317 	ldw	r6,76(sp)
    9974:	d9800515 	stw	r6,20(sp)
    9978:	003c4406 	br	8a8c <__alt_data_end+0xf8008a8c>
    997c:	d9801317 	ldw	r6,76(sp)
    9980:	d9800515 	stw	r6,20(sp)
    9984:	003cea06 	br	8d30 <__alt_data_end+0xf8008d30>
    9988:	dd800f17 	ldw	r22,60(sp)
    998c:	dcc01017 	ldw	r19,64(sp)
    9990:	dc801217 	ldw	r18,72(sp)
    9994:	003c6c06 	br	8b48 <__alt_data_end+0xf8008b48>
    9998:	903e031e 	bne	r18,zero,91a8 <__alt_data_end+0xf80091a8>
    999c:	003ebb06 	br	948c <__alt_data_end+0xf800948c>
    99a0:	103e6c1e 	bne	r2,zero,9354 <__alt_data_end+0xf8009354>
    99a4:	4080004c 	andi	r2,r8,1
    99a8:	103e6a26 	beq	r2,zero,9354 <__alt_data_end+0xf8009354>
    99ac:	003e6606 	br	9348 <__alt_data_end+0xf8009348>
    99b0:	d8c00317 	ldw	r3,12(sp)
    99b4:	00800084 	movi	r2,2
    99b8:	10c02916 	blt	r2,r3,9a60 <_dtoa_r+0x167c>
    99bc:	d9000c17 	ldw	r4,48(sp)
    99c0:	003e8806 	br	93e4 <__alt_data_end+0xf80093e4>
    99c4:	04000084 	movi	r16,2
    99c8:	003b9d06 	br	8840 <__alt_data_end+0xf8008840>
    99cc:	d9001317 	ldw	r4,76(sp)
    99d0:	d9000515 	stw	r4,20(sp)
    99d4:	003cd606 	br	8d30 <__alt_data_end+0xf8008d30>
    99d8:	d8801317 	ldw	r2,76(sp)
    99dc:	d8800515 	stw	r2,20(sp)
    99e0:	003c2a06 	br	8a8c <__alt_data_end+0xf8008a8c>
    99e4:	d9800317 	ldw	r6,12(sp)
    99e8:	00800084 	movi	r2,2
    99ec:	11801516 	blt	r2,r6,9a44 <_dtoa_r+0x1660>
    99f0:	d9c00c17 	ldw	r7,48(sp)
    99f4:	d9c00615 	stw	r7,24(sp)
    99f8:	003df706 	br	91d8 <__alt_data_end+0xf80091d8>
    99fc:	193d3926 	beq	r3,r4,8ee4 <__alt_data_end+0xf8008ee4>
    9a00:	00c00f04 	movi	r3,60
    9a04:	1885c83a 	sub	r2,r3,r2
    9a08:	003ddf06 	br	9188 <__alt_data_end+0xf8009188>
    9a0c:	e009883a 	mov	r4,fp
    9a10:	e0001115 	stw	zero,68(fp)
    9a14:	000b883a 	mov	r5,zero
    9a18:	000a5fc0 	call	a5fc <_Balloc>
    9a1c:	d8800715 	stw	r2,28(sp)
    9a20:	d8c00717 	ldw	r3,28(sp)
    9a24:	00bfffc4 	movi	r2,-1
    9a28:	01000044 	movi	r4,1
    9a2c:	d8800c15 	stw	r2,48(sp)
    9a30:	e0c01015 	stw	r3,64(fp)
    9a34:	d9000b15 	stw	r4,44(sp)
    9a38:	d8800615 	stw	r2,24(sp)
    9a3c:	d8002215 	stw	zero,136(sp)
    9a40:	003c4106 	br	8b48 <__alt_data_end+0xf8008b48>
    9a44:	d8c00c17 	ldw	r3,48(sp)
    9a48:	d8c00615 	stw	r3,24(sp)
    9a4c:	003e7006 	br	9410 <__alt_data_end+0xf8009410>
    9a50:	04400044 	movi	r17,1
    9a54:	003b2006 	br	86d8 <__alt_data_end+0xf80086d8>
    9a58:	000b883a 	mov	r5,zero
    9a5c:	003b3d06 	br	8754 <__alt_data_end+0xf8008754>
    9a60:	d8800c17 	ldw	r2,48(sp)
    9a64:	d8800615 	stw	r2,24(sp)
    9a68:	003e6906 	br	9410 <__alt_data_end+0xf8009410>

00009a6c <_fclose_r>:
    9a6c:	28003926 	beq	r5,zero,9b54 <_fclose_r+0xe8>
    9a70:	defffc04 	addi	sp,sp,-16
    9a74:	dc400115 	stw	r17,4(sp)
    9a78:	dc000015 	stw	r16,0(sp)
    9a7c:	dfc00315 	stw	ra,12(sp)
    9a80:	dc800215 	stw	r18,8(sp)
    9a84:	2023883a 	mov	r17,r4
    9a88:	2821883a 	mov	r16,r5
    9a8c:	20000226 	beq	r4,zero,9a98 <_fclose_r+0x2c>
    9a90:	20800e17 	ldw	r2,56(r4)
    9a94:	10002726 	beq	r2,zero,9b34 <_fclose_r+0xc8>
    9a98:	8080030f 	ldh	r2,12(r16)
    9a9c:	1000071e 	bne	r2,zero,9abc <_fclose_r+0x50>
    9aa0:	0005883a 	mov	r2,zero
    9aa4:	dfc00317 	ldw	ra,12(sp)
    9aa8:	dc800217 	ldw	r18,8(sp)
    9aac:	dc400117 	ldw	r17,4(sp)
    9ab0:	dc000017 	ldw	r16,0(sp)
    9ab4:	dec00404 	addi	sp,sp,16
    9ab8:	f800283a 	ret
    9abc:	800b883a 	mov	r5,r16
    9ac0:	8809883a 	mov	r4,r17
    9ac4:	00014800 	call	1480 <__sflush_r>
    9ac8:	1025883a 	mov	r18,r2
    9acc:	80800b17 	ldw	r2,44(r16)
    9ad0:	10000426 	beq	r2,zero,9ae4 <_fclose_r+0x78>
    9ad4:	81400717 	ldw	r5,28(r16)
    9ad8:	8809883a 	mov	r4,r17
    9adc:	103ee83a 	callr	r2
    9ae0:	10001616 	blt	r2,zero,9b3c <_fclose_r+0xd0>
    9ae4:	8080030b 	ldhu	r2,12(r16)
    9ae8:	1080200c 	andi	r2,r2,128
    9aec:	1000151e 	bne	r2,zero,9b44 <_fclose_r+0xd8>
    9af0:	81400c17 	ldw	r5,48(r16)
    9af4:	28000526 	beq	r5,zero,9b0c <_fclose_r+0xa0>
    9af8:	80801004 	addi	r2,r16,64
    9afc:	28800226 	beq	r5,r2,9b08 <_fclose_r+0x9c>
    9b00:	8809883a 	mov	r4,r17
    9b04:	0001d540 	call	1d54 <_free_r>
    9b08:	80000c15 	stw	zero,48(r16)
    9b0c:	81401117 	ldw	r5,68(r16)
    9b10:	28000326 	beq	r5,zero,9b20 <_fclose_r+0xb4>
    9b14:	8809883a 	mov	r4,r17
    9b18:	0001d540 	call	1d54 <_free_r>
    9b1c:	80001115 	stw	zero,68(r16)
    9b20:	0001a980 	call	1a98 <__sfp_lock_acquire>
    9b24:	8000030d 	sth	zero,12(r16)
    9b28:	0001a9c0 	call	1a9c <__sfp_lock_release>
    9b2c:	9005883a 	mov	r2,r18
    9b30:	003fdc06 	br	9aa4 <__alt_data_end+0xf8009aa4>
    9b34:	0001a880 	call	1a88 <__sinit>
    9b38:	003fd706 	br	9a98 <__alt_data_end+0xf8009a98>
    9b3c:	04bfffc4 	movi	r18,-1
    9b40:	003fe806 	br	9ae4 <__alt_data_end+0xf8009ae4>
    9b44:	81400417 	ldw	r5,16(r16)
    9b48:	8809883a 	mov	r4,r17
    9b4c:	0001d540 	call	1d54 <_free_r>
    9b50:	003fe706 	br	9af0 <__alt_data_end+0xf8009af0>
    9b54:	0005883a 	mov	r2,zero
    9b58:	f800283a 	ret

00009b5c <fclose>:
    9b5c:	008000b4 	movhi	r2,2
    9b60:	10a01704 	addi	r2,r2,-32676
    9b64:	200b883a 	mov	r5,r4
    9b68:	11000017 	ldw	r4,0(r2)
    9b6c:	0009a6c1 	jmpi	9a6c <_fclose_r>

00009b70 <__sflags>:
    9b70:	28800007 	ldb	r2,0(r5)
    9b74:	00c01c84 	movi	r3,114
    9b78:	10c02426 	beq	r2,r3,9c0c <__sflags+0x9c>
    9b7c:	00c01dc4 	movi	r3,119
    9b80:	10c01e26 	beq	r2,r3,9bfc <__sflags+0x8c>
    9b84:	00c01844 	movi	r3,97
    9b88:	10c00426 	beq	r2,r3,9b9c <__sflags+0x2c>
    9b8c:	00800584 	movi	r2,22
    9b90:	20800015 	stw	r2,0(r4)
    9b94:	0005883a 	mov	r2,zero
    9b98:	f800283a 	ret
    9b9c:	02c08204 	movi	r11,520
    9ba0:	01000044 	movi	r4,1
    9ba4:	00804204 	movi	r2,264
    9ba8:	01c00ac4 	movi	r7,43
    9bac:	02bff8c4 	movi	r10,-29
    9bb0:	027fff04 	movi	r9,-4
    9bb4:	02001e04 	movi	r8,120
    9bb8:	29400044 	addi	r5,r5,1
    9bbc:	28c00007 	ldb	r3,0(r5)
    9bc0:	18000626 	beq	r3,zero,9bdc <__sflags+0x6c>
    9bc4:	19c00826 	beq	r3,r7,9be8 <__sflags+0x78>
    9bc8:	1a3ffb1e 	bne	r3,r8,9bb8 <__alt_data_end+0xf8009bb8>
    9bcc:	29400044 	addi	r5,r5,1
    9bd0:	28c00007 	ldb	r3,0(r5)
    9bd4:	21020014 	ori	r4,r4,2048
    9bd8:	183ffa1e 	bne	r3,zero,9bc4 <__alt_data_end+0xf8009bc4>
    9bdc:	22c8b03a 	or	r4,r4,r11
    9be0:	31000015 	stw	r4,0(r6)
    9be4:	f800283a 	ret
    9be8:	1284703a 	and	r2,r2,r10
    9bec:	2248703a 	and	r4,r4,r9
    9bf0:	10800414 	ori	r2,r2,16
    9bf4:	21000094 	ori	r4,r4,2
    9bf8:	003fef06 	br	9bb8 <__alt_data_end+0xf8009bb8>
    9bfc:	02c18004 	movi	r11,1536
    9c00:	01000044 	movi	r4,1
    9c04:	00800204 	movi	r2,8
    9c08:	003fe706 	br	9ba8 <__alt_data_end+0xf8009ba8>
    9c0c:	0017883a 	mov	r11,zero
    9c10:	0009883a 	mov	r4,zero
    9c14:	00800104 	movi	r2,4
    9c18:	003fe306 	br	9ba8 <__alt_data_end+0xf8009ba8>

00009c1c <__sfvwrite_r>:
    9c1c:	30800217 	ldw	r2,8(r6)
    9c20:	10006726 	beq	r2,zero,9dc0 <__sfvwrite_r+0x1a4>
    9c24:	28c0030b 	ldhu	r3,12(r5)
    9c28:	defff404 	addi	sp,sp,-48
    9c2c:	dd400715 	stw	r21,28(sp)
    9c30:	dd000615 	stw	r20,24(sp)
    9c34:	dc000215 	stw	r16,8(sp)
    9c38:	dfc00b15 	stw	ra,44(sp)
    9c3c:	df000a15 	stw	fp,40(sp)
    9c40:	ddc00915 	stw	r23,36(sp)
    9c44:	dd800815 	stw	r22,32(sp)
    9c48:	dcc00515 	stw	r19,20(sp)
    9c4c:	dc800415 	stw	r18,16(sp)
    9c50:	dc400315 	stw	r17,12(sp)
    9c54:	1880020c 	andi	r2,r3,8
    9c58:	2821883a 	mov	r16,r5
    9c5c:	202b883a 	mov	r21,r4
    9c60:	3029883a 	mov	r20,r6
    9c64:	10002726 	beq	r2,zero,9d04 <__sfvwrite_r+0xe8>
    9c68:	28800417 	ldw	r2,16(r5)
    9c6c:	10002526 	beq	r2,zero,9d04 <__sfvwrite_r+0xe8>
    9c70:	1880008c 	andi	r2,r3,2
    9c74:	a4400017 	ldw	r17,0(r20)
    9c78:	10002a26 	beq	r2,zero,9d24 <__sfvwrite_r+0x108>
    9c7c:	05a00034 	movhi	r22,32768
    9c80:	0027883a 	mov	r19,zero
    9c84:	0025883a 	mov	r18,zero
    9c88:	b5bf0004 	addi	r22,r22,-1024
    9c8c:	980d883a 	mov	r6,r19
    9c90:	a809883a 	mov	r4,r21
    9c94:	90004626 	beq	r18,zero,9db0 <__sfvwrite_r+0x194>
    9c98:	900f883a 	mov	r7,r18
    9c9c:	b480022e 	bgeu	r22,r18,9ca8 <__sfvwrite_r+0x8c>
    9ca0:	01e00034 	movhi	r7,32768
    9ca4:	39ff0004 	addi	r7,r7,-1024
    9ca8:	80800917 	ldw	r2,36(r16)
    9cac:	81400717 	ldw	r5,28(r16)
    9cb0:	103ee83a 	callr	r2
    9cb4:	00805a0e 	bge	zero,r2,9e20 <__sfvwrite_r+0x204>
    9cb8:	a0c00217 	ldw	r3,8(r20)
    9cbc:	98a7883a 	add	r19,r19,r2
    9cc0:	90a5c83a 	sub	r18,r18,r2
    9cc4:	1885c83a 	sub	r2,r3,r2
    9cc8:	a0800215 	stw	r2,8(r20)
    9ccc:	103fef1e 	bne	r2,zero,9c8c <__alt_data_end+0xf8009c8c>
    9cd0:	0005883a 	mov	r2,zero
    9cd4:	dfc00b17 	ldw	ra,44(sp)
    9cd8:	df000a17 	ldw	fp,40(sp)
    9cdc:	ddc00917 	ldw	r23,36(sp)
    9ce0:	dd800817 	ldw	r22,32(sp)
    9ce4:	dd400717 	ldw	r21,28(sp)
    9ce8:	dd000617 	ldw	r20,24(sp)
    9cec:	dcc00517 	ldw	r19,20(sp)
    9cf0:	dc800417 	ldw	r18,16(sp)
    9cf4:	dc400317 	ldw	r17,12(sp)
    9cf8:	dc000217 	ldw	r16,8(sp)
    9cfc:	dec00c04 	addi	sp,sp,48
    9d00:	f800283a 	ret
    9d04:	800b883a 	mov	r5,r16
    9d08:	a809883a 	mov	r4,r21
    9d0c:	00080140 	call	8014 <__swsetup_r>
    9d10:	1000ee1e 	bne	r2,zero,a0cc <__sfvwrite_r+0x4b0>
    9d14:	80c0030b 	ldhu	r3,12(r16)
    9d18:	a4400017 	ldw	r17,0(r20)
    9d1c:	1880008c 	andi	r2,r3,2
    9d20:	103fd61e 	bne	r2,zero,9c7c <__alt_data_end+0xf8009c7c>
    9d24:	1880004c 	andi	r2,r3,1
    9d28:	1000421e 	bne	r2,zero,9e34 <__sfvwrite_r+0x218>
    9d2c:	0039883a 	mov	fp,zero
    9d30:	0025883a 	mov	r18,zero
    9d34:	90001a26 	beq	r18,zero,9da0 <__sfvwrite_r+0x184>
    9d38:	1880800c 	andi	r2,r3,512
    9d3c:	84c00217 	ldw	r19,8(r16)
    9d40:	10002126 	beq	r2,zero,9dc8 <__sfvwrite_r+0x1ac>
    9d44:	982f883a 	mov	r23,r19
    9d48:	94c09636 	bltu	r18,r19,9fa4 <__sfvwrite_r+0x388>
    9d4c:	1881200c 	andi	r2,r3,1152
    9d50:	1000a11e 	bne	r2,zero,9fd8 <__sfvwrite_r+0x3bc>
    9d54:	81000017 	ldw	r4,0(r16)
    9d58:	b80d883a 	mov	r6,r23
    9d5c:	e00b883a 	mov	r5,fp
    9d60:	000a4a00 	call	a4a0 <memmove>
    9d64:	80c00217 	ldw	r3,8(r16)
    9d68:	81000017 	ldw	r4,0(r16)
    9d6c:	9005883a 	mov	r2,r18
    9d70:	1ce7c83a 	sub	r19,r3,r19
    9d74:	25cf883a 	add	r7,r4,r23
    9d78:	84c00215 	stw	r19,8(r16)
    9d7c:	81c00015 	stw	r7,0(r16)
    9d80:	a0c00217 	ldw	r3,8(r20)
    9d84:	e0b9883a 	add	fp,fp,r2
    9d88:	90a5c83a 	sub	r18,r18,r2
    9d8c:	18a7c83a 	sub	r19,r3,r2
    9d90:	a4c00215 	stw	r19,8(r20)
    9d94:	983fce26 	beq	r19,zero,9cd0 <__alt_data_end+0xf8009cd0>
    9d98:	80c0030b 	ldhu	r3,12(r16)
    9d9c:	903fe61e 	bne	r18,zero,9d38 <__alt_data_end+0xf8009d38>
    9da0:	8f000017 	ldw	fp,0(r17)
    9da4:	8c800117 	ldw	r18,4(r17)
    9da8:	8c400204 	addi	r17,r17,8
    9dac:	003fe106 	br	9d34 <__alt_data_end+0xf8009d34>
    9db0:	8cc00017 	ldw	r19,0(r17)
    9db4:	8c800117 	ldw	r18,4(r17)
    9db8:	8c400204 	addi	r17,r17,8
    9dbc:	003fb306 	br	9c8c <__alt_data_end+0xf8009c8c>
    9dc0:	0005883a 	mov	r2,zero
    9dc4:	f800283a 	ret
    9dc8:	81000017 	ldw	r4,0(r16)
    9dcc:	80800417 	ldw	r2,16(r16)
    9dd0:	11005a36 	bltu	r2,r4,9f3c <__sfvwrite_r+0x320>
    9dd4:	85c00517 	ldw	r23,20(r16)
    9dd8:	95c05836 	bltu	r18,r23,9f3c <__sfvwrite_r+0x320>
    9ddc:	00a00034 	movhi	r2,32768
    9de0:	10bfffc4 	addi	r2,r2,-1
    9de4:	9009883a 	mov	r4,r18
    9de8:	1480012e 	bgeu	r2,r18,9df0 <__sfvwrite_r+0x1d4>
    9dec:	1009883a 	mov	r4,r2
    9df0:	b80b883a 	mov	r5,r23
    9df4:	00012cc0 	call	12cc <__divsi3>
    9df8:	b80b883a 	mov	r5,r23
    9dfc:	1009883a 	mov	r4,r2
    9e00:	000fc140 	call	fc14 <__mulsi3>
    9e04:	81400717 	ldw	r5,28(r16)
    9e08:	80c00917 	ldw	r3,36(r16)
    9e0c:	100f883a 	mov	r7,r2
    9e10:	e00d883a 	mov	r6,fp
    9e14:	a809883a 	mov	r4,r21
    9e18:	183ee83a 	callr	r3
    9e1c:	00bfd816 	blt	zero,r2,9d80 <__alt_data_end+0xf8009d80>
    9e20:	8080030b 	ldhu	r2,12(r16)
    9e24:	10801014 	ori	r2,r2,64
    9e28:	8080030d 	sth	r2,12(r16)
    9e2c:	00bfffc4 	movi	r2,-1
    9e30:	003fa806 	br	9cd4 <__alt_data_end+0xf8009cd4>
    9e34:	0027883a 	mov	r19,zero
    9e38:	0011883a 	mov	r8,zero
    9e3c:	0039883a 	mov	fp,zero
    9e40:	0025883a 	mov	r18,zero
    9e44:	90001f26 	beq	r18,zero,9ec4 <__sfvwrite_r+0x2a8>
    9e48:	40005a26 	beq	r8,zero,9fb4 <__sfvwrite_r+0x398>
    9e4c:	982d883a 	mov	r22,r19
    9e50:	94c0012e 	bgeu	r18,r19,9e58 <__sfvwrite_r+0x23c>
    9e54:	902d883a 	mov	r22,r18
    9e58:	81000017 	ldw	r4,0(r16)
    9e5c:	80800417 	ldw	r2,16(r16)
    9e60:	b02f883a 	mov	r23,r22
    9e64:	81c00517 	ldw	r7,20(r16)
    9e68:	1100032e 	bgeu	r2,r4,9e78 <__sfvwrite_r+0x25c>
    9e6c:	80c00217 	ldw	r3,8(r16)
    9e70:	38c7883a 	add	r3,r7,r3
    9e74:	1d801816 	blt	r3,r22,9ed8 <__sfvwrite_r+0x2bc>
    9e78:	b1c03e16 	blt	r22,r7,9f74 <__sfvwrite_r+0x358>
    9e7c:	80800917 	ldw	r2,36(r16)
    9e80:	81400717 	ldw	r5,28(r16)
    9e84:	e00d883a 	mov	r6,fp
    9e88:	da000115 	stw	r8,4(sp)
    9e8c:	a809883a 	mov	r4,r21
    9e90:	103ee83a 	callr	r2
    9e94:	102f883a 	mov	r23,r2
    9e98:	da000117 	ldw	r8,4(sp)
    9e9c:	00bfe00e 	bge	zero,r2,9e20 <__alt_data_end+0xf8009e20>
    9ea0:	9de7c83a 	sub	r19,r19,r23
    9ea4:	98001f26 	beq	r19,zero,9f24 <__sfvwrite_r+0x308>
    9ea8:	a0800217 	ldw	r2,8(r20)
    9eac:	e5f9883a 	add	fp,fp,r23
    9eb0:	95e5c83a 	sub	r18,r18,r23
    9eb4:	15efc83a 	sub	r23,r2,r23
    9eb8:	a5c00215 	stw	r23,8(r20)
    9ebc:	b83f8426 	beq	r23,zero,9cd0 <__alt_data_end+0xf8009cd0>
    9ec0:	903fe11e 	bne	r18,zero,9e48 <__alt_data_end+0xf8009e48>
    9ec4:	8f000017 	ldw	fp,0(r17)
    9ec8:	8c800117 	ldw	r18,4(r17)
    9ecc:	0011883a 	mov	r8,zero
    9ed0:	8c400204 	addi	r17,r17,8
    9ed4:	003fdb06 	br	9e44 <__alt_data_end+0xf8009e44>
    9ed8:	180d883a 	mov	r6,r3
    9edc:	e00b883a 	mov	r5,fp
    9ee0:	da000115 	stw	r8,4(sp)
    9ee4:	d8c00015 	stw	r3,0(sp)
    9ee8:	000a4a00 	call	a4a0 <memmove>
    9eec:	d8c00017 	ldw	r3,0(sp)
    9ef0:	80800017 	ldw	r2,0(r16)
    9ef4:	800b883a 	mov	r5,r16
    9ef8:	a809883a 	mov	r4,r21
    9efc:	10c5883a 	add	r2,r2,r3
    9f00:	80800015 	stw	r2,0(r16)
    9f04:	d8c00015 	stw	r3,0(sp)
    9f08:	000169c0 	call	169c <_fflush_r>
    9f0c:	d8c00017 	ldw	r3,0(sp)
    9f10:	da000117 	ldw	r8,4(sp)
    9f14:	103fc21e 	bne	r2,zero,9e20 <__alt_data_end+0xf8009e20>
    9f18:	182f883a 	mov	r23,r3
    9f1c:	9de7c83a 	sub	r19,r19,r23
    9f20:	983fe11e 	bne	r19,zero,9ea8 <__alt_data_end+0xf8009ea8>
    9f24:	800b883a 	mov	r5,r16
    9f28:	a809883a 	mov	r4,r21
    9f2c:	000169c0 	call	169c <_fflush_r>
    9f30:	103fbb1e 	bne	r2,zero,9e20 <__alt_data_end+0xf8009e20>
    9f34:	0011883a 	mov	r8,zero
    9f38:	003fdb06 	br	9ea8 <__alt_data_end+0xf8009ea8>
    9f3c:	94c0012e 	bgeu	r18,r19,9f44 <__sfvwrite_r+0x328>
    9f40:	9027883a 	mov	r19,r18
    9f44:	980d883a 	mov	r6,r19
    9f48:	e00b883a 	mov	r5,fp
    9f4c:	000a4a00 	call	a4a0 <memmove>
    9f50:	80800217 	ldw	r2,8(r16)
    9f54:	80c00017 	ldw	r3,0(r16)
    9f58:	14c5c83a 	sub	r2,r2,r19
    9f5c:	1cc7883a 	add	r3,r3,r19
    9f60:	80800215 	stw	r2,8(r16)
    9f64:	80c00015 	stw	r3,0(r16)
    9f68:	10004326 	beq	r2,zero,a078 <__sfvwrite_r+0x45c>
    9f6c:	9805883a 	mov	r2,r19
    9f70:	003f8306 	br	9d80 <__alt_data_end+0xf8009d80>
    9f74:	b00d883a 	mov	r6,r22
    9f78:	e00b883a 	mov	r5,fp
    9f7c:	da000115 	stw	r8,4(sp)
    9f80:	000a4a00 	call	a4a0 <memmove>
    9f84:	80800217 	ldw	r2,8(r16)
    9f88:	80c00017 	ldw	r3,0(r16)
    9f8c:	da000117 	ldw	r8,4(sp)
    9f90:	1585c83a 	sub	r2,r2,r22
    9f94:	1dad883a 	add	r22,r3,r22
    9f98:	80800215 	stw	r2,8(r16)
    9f9c:	85800015 	stw	r22,0(r16)
    9fa0:	003fbf06 	br	9ea0 <__alt_data_end+0xf8009ea0>
    9fa4:	81000017 	ldw	r4,0(r16)
    9fa8:	9027883a 	mov	r19,r18
    9fac:	902f883a 	mov	r23,r18
    9fb0:	003f6906 	br	9d58 <__alt_data_end+0xf8009d58>
    9fb4:	900d883a 	mov	r6,r18
    9fb8:	01400284 	movi	r5,10
    9fbc:	e009883a 	mov	r4,fp
    9fc0:	000a2740 	call	a274 <memchr>
    9fc4:	10003e26 	beq	r2,zero,a0c0 <__sfvwrite_r+0x4a4>
    9fc8:	10800044 	addi	r2,r2,1
    9fcc:	1727c83a 	sub	r19,r2,fp
    9fd0:	02000044 	movi	r8,1
    9fd4:	003f9d06 	br	9e4c <__alt_data_end+0xf8009e4c>
    9fd8:	80800517 	ldw	r2,20(r16)
    9fdc:	81400417 	ldw	r5,16(r16)
    9fe0:	81c00017 	ldw	r7,0(r16)
    9fe4:	10a7883a 	add	r19,r2,r2
    9fe8:	9885883a 	add	r2,r19,r2
    9fec:	1026d7fa 	srli	r19,r2,31
    9ff0:	396dc83a 	sub	r22,r7,r5
    9ff4:	b1000044 	addi	r4,r22,1
    9ff8:	9885883a 	add	r2,r19,r2
    9ffc:	1027d07a 	srai	r19,r2,1
    a000:	2485883a 	add	r2,r4,r18
    a004:	980d883a 	mov	r6,r19
    a008:	9880022e 	bgeu	r19,r2,a014 <__sfvwrite_r+0x3f8>
    a00c:	1027883a 	mov	r19,r2
    a010:	100d883a 	mov	r6,r2
    a014:	18c1000c 	andi	r3,r3,1024
    a018:	18001c26 	beq	r3,zero,a08c <__sfvwrite_r+0x470>
    a01c:	300b883a 	mov	r5,r6
    a020:	a809883a 	mov	r4,r21
    a024:	00029940 	call	2994 <_malloc_r>
    a028:	102f883a 	mov	r23,r2
    a02c:	10002926 	beq	r2,zero,a0d4 <__sfvwrite_r+0x4b8>
    a030:	81400417 	ldw	r5,16(r16)
    a034:	b00d883a 	mov	r6,r22
    a038:	1009883a 	mov	r4,r2
    a03c:	000a3580 	call	a358 <memcpy>
    a040:	8080030b 	ldhu	r2,12(r16)
    a044:	00fedfc4 	movi	r3,-1153
    a048:	10c4703a 	and	r2,r2,r3
    a04c:	10802014 	ori	r2,r2,128
    a050:	8080030d 	sth	r2,12(r16)
    a054:	bd89883a 	add	r4,r23,r22
    a058:	9d8fc83a 	sub	r7,r19,r22
    a05c:	85c00415 	stw	r23,16(r16)
    a060:	84c00515 	stw	r19,20(r16)
    a064:	81000015 	stw	r4,0(r16)
    a068:	9027883a 	mov	r19,r18
    a06c:	81c00215 	stw	r7,8(r16)
    a070:	902f883a 	mov	r23,r18
    a074:	003f3806 	br	9d58 <__alt_data_end+0xf8009d58>
    a078:	800b883a 	mov	r5,r16
    a07c:	a809883a 	mov	r4,r21
    a080:	000169c0 	call	169c <_fflush_r>
    a084:	103fb926 	beq	r2,zero,9f6c <__alt_data_end+0xf8009f6c>
    a088:	003f6506 	br	9e20 <__alt_data_end+0xf8009e20>
    a08c:	a809883a 	mov	r4,r21
    a090:	000b7140 	call	b714 <_realloc_r>
    a094:	102f883a 	mov	r23,r2
    a098:	103fee1e 	bne	r2,zero,a054 <__alt_data_end+0xf800a054>
    a09c:	81400417 	ldw	r5,16(r16)
    a0a0:	a809883a 	mov	r4,r21
    a0a4:	0001d540 	call	1d54 <_free_r>
    a0a8:	8080030b 	ldhu	r2,12(r16)
    a0ac:	00ffdfc4 	movi	r3,-129
    a0b0:	1884703a 	and	r2,r3,r2
    a0b4:	00c00304 	movi	r3,12
    a0b8:	a8c00015 	stw	r3,0(r21)
    a0bc:	003f5906 	br	9e24 <__alt_data_end+0xf8009e24>
    a0c0:	94c00044 	addi	r19,r18,1
    a0c4:	02000044 	movi	r8,1
    a0c8:	003f6006 	br	9e4c <__alt_data_end+0xf8009e4c>
    a0cc:	00bfffc4 	movi	r2,-1
    a0d0:	003f0006 	br	9cd4 <__alt_data_end+0xf8009cd4>
    a0d4:	00800304 	movi	r2,12
    a0d8:	a8800015 	stw	r2,0(r21)
    a0dc:	8080030b 	ldhu	r2,12(r16)
    a0e0:	003f5006 	br	9e24 <__alt_data_end+0xf8009e24>

0000a0e4 <_isatty_r>:
    a0e4:	defffd04 	addi	sp,sp,-12
    a0e8:	dc000015 	stw	r16,0(sp)
    a0ec:	040000b4 	movhi	r16,2
    a0f0:	dc400115 	stw	r17,4(sp)
    a0f4:	84274604 	addi	r16,r16,-25320
    a0f8:	2023883a 	mov	r17,r4
    a0fc:	2809883a 	mov	r4,r5
    a100:	dfc00215 	stw	ra,8(sp)
    a104:	80000015 	stw	zero,0(r16)
    a108:	00129f00 	call	129f0 <isatty>
    a10c:	00ffffc4 	movi	r3,-1
    a110:	10c00526 	beq	r2,r3,a128 <_isatty_r+0x44>
    a114:	dfc00217 	ldw	ra,8(sp)
    a118:	dc400117 	ldw	r17,4(sp)
    a11c:	dc000017 	ldw	r16,0(sp)
    a120:	dec00304 	addi	sp,sp,12
    a124:	f800283a 	ret
    a128:	80c00017 	ldw	r3,0(r16)
    a12c:	183ff926 	beq	r3,zero,a114 <__alt_data_end+0xf800a114>
    a130:	88c00015 	stw	r3,0(r17)
    a134:	003ff706 	br	a114 <__alt_data_end+0xf800a114>

0000a138 <_setlocale_r>:
    a138:	30001b26 	beq	r6,zero,a1a8 <_setlocale_r+0x70>
    a13c:	01400074 	movhi	r5,1
    a140:	defffe04 	addi	sp,sp,-8
    a144:	2957c204 	addi	r5,r5,24328
    a148:	3009883a 	mov	r4,r6
    a14c:	dc000015 	stw	r16,0(sp)
    a150:	dfc00115 	stw	ra,4(sp)
    a154:	3021883a 	mov	r16,r6
    a158:	000bcec0 	call	bcec <strcmp>
    a15c:	1000061e 	bne	r2,zero,a178 <_setlocale_r+0x40>
    a160:	00800074 	movhi	r2,1
    a164:	10979b04 	addi	r2,r2,24172
    a168:	dfc00117 	ldw	ra,4(sp)
    a16c:	dc000017 	ldw	r16,0(sp)
    a170:	dec00204 	addi	sp,sp,8
    a174:	f800283a 	ret
    a178:	01400074 	movhi	r5,1
    a17c:	29579b04 	addi	r5,r5,24172
    a180:	8009883a 	mov	r4,r16
    a184:	000bcec0 	call	bcec <strcmp>
    a188:	103ff526 	beq	r2,zero,a160 <__alt_data_end+0xf800a160>
    a18c:	01400074 	movhi	r5,1
    a190:	2957a504 	addi	r5,r5,24212
    a194:	8009883a 	mov	r4,r16
    a198:	000bcec0 	call	bcec <strcmp>
    a19c:	103ff026 	beq	r2,zero,a160 <__alt_data_end+0xf800a160>
    a1a0:	0005883a 	mov	r2,zero
    a1a4:	003ff006 	br	a168 <__alt_data_end+0xf800a168>
    a1a8:	00800074 	movhi	r2,1
    a1ac:	10979b04 	addi	r2,r2,24172
    a1b0:	f800283a 	ret

0000a1b4 <__locale_charset>:
    a1b4:	00800074 	movhi	r2,1
    a1b8:	109b3504 	addi	r2,r2,27860
    a1bc:	f800283a 	ret

0000a1c0 <__locale_mb_cur_max>:
    a1c0:	008000b4 	movhi	r2,2
    a1c4:	10a01a04 	addi	r2,r2,-32664
    a1c8:	10800017 	ldw	r2,0(r2)
    a1cc:	f800283a 	ret

0000a1d0 <__locale_msgcharset>:
    a1d0:	00800074 	movhi	r2,1
    a1d4:	109b2d04 	addi	r2,r2,27828
    a1d8:	f800283a 	ret

0000a1dc <__locale_cjk_lang>:
    a1dc:	0005883a 	mov	r2,zero
    a1e0:	f800283a 	ret

0000a1e4 <_localeconv_r>:
    a1e4:	00800074 	movhi	r2,1
    a1e8:	109b3d04 	addi	r2,r2,27892
    a1ec:	f800283a 	ret

0000a1f0 <setlocale>:
    a1f0:	008000b4 	movhi	r2,2
    a1f4:	10a01704 	addi	r2,r2,-32676
    a1f8:	280d883a 	mov	r6,r5
    a1fc:	200b883a 	mov	r5,r4
    a200:	11000017 	ldw	r4,0(r2)
    a204:	000a1381 	jmpi	a138 <_setlocale_r>

0000a208 <localeconv>:
    a208:	00800074 	movhi	r2,1
    a20c:	109b3d04 	addi	r2,r2,27892
    a210:	f800283a 	ret

0000a214 <_lseek_r>:
    a214:	defffd04 	addi	sp,sp,-12
    a218:	2805883a 	mov	r2,r5
    a21c:	dc000015 	stw	r16,0(sp)
    a220:	040000b4 	movhi	r16,2
    a224:	dc400115 	stw	r17,4(sp)
    a228:	300b883a 	mov	r5,r6
    a22c:	84274604 	addi	r16,r16,-25320
    a230:	2023883a 	mov	r17,r4
    a234:	380d883a 	mov	r6,r7
    a238:	1009883a 	mov	r4,r2
    a23c:	dfc00215 	stw	ra,8(sp)
    a240:	80000015 	stw	zero,0(r16)
    a244:	0012bc40 	call	12bc4 <lseek>
    a248:	00ffffc4 	movi	r3,-1
    a24c:	10c00526 	beq	r2,r3,a264 <_lseek_r+0x50>
    a250:	dfc00217 	ldw	ra,8(sp)
    a254:	dc400117 	ldw	r17,4(sp)
    a258:	dc000017 	ldw	r16,0(sp)
    a25c:	dec00304 	addi	sp,sp,12
    a260:	f800283a 	ret
    a264:	80c00017 	ldw	r3,0(r16)
    a268:	183ff926 	beq	r3,zero,a250 <__alt_data_end+0xf800a250>
    a26c:	88c00015 	stw	r3,0(r17)
    a270:	003ff706 	br	a250 <__alt_data_end+0xf800a250>

0000a274 <memchr>:
    a274:	208000cc 	andi	r2,r4,3
    a278:	280f883a 	mov	r7,r5
    a27c:	10003426 	beq	r2,zero,a350 <memchr+0xdc>
    a280:	30bfffc4 	addi	r2,r6,-1
    a284:	30001a26 	beq	r6,zero,a2f0 <memchr+0x7c>
    a288:	20c00003 	ldbu	r3,0(r4)
    a28c:	29803fcc 	andi	r6,r5,255
    a290:	30c0051e 	bne	r6,r3,a2a8 <memchr+0x34>
    a294:	00001806 	br	a2f8 <memchr+0x84>
    a298:	10001526 	beq	r2,zero,a2f0 <memchr+0x7c>
    a29c:	20c00003 	ldbu	r3,0(r4)
    a2a0:	10bfffc4 	addi	r2,r2,-1
    a2a4:	30c01426 	beq	r6,r3,a2f8 <memchr+0x84>
    a2a8:	21000044 	addi	r4,r4,1
    a2ac:	20c000cc 	andi	r3,r4,3
    a2b0:	183ff91e 	bne	r3,zero,a298 <__alt_data_end+0xf800a298>
    a2b4:	020000c4 	movi	r8,3
    a2b8:	40801136 	bltu	r8,r2,a300 <memchr+0x8c>
    a2bc:	10000c26 	beq	r2,zero,a2f0 <memchr+0x7c>
    a2c0:	20c00003 	ldbu	r3,0(r4)
    a2c4:	29403fcc 	andi	r5,r5,255
    a2c8:	28c00b26 	beq	r5,r3,a2f8 <memchr+0x84>
    a2cc:	20c00044 	addi	r3,r4,1
    a2d0:	39803fcc 	andi	r6,r7,255
    a2d4:	2089883a 	add	r4,r4,r2
    a2d8:	00000306 	br	a2e8 <memchr+0x74>
    a2dc:	18c00044 	addi	r3,r3,1
    a2e0:	197fffc3 	ldbu	r5,-1(r3)
    a2e4:	31400526 	beq	r6,r5,a2fc <memchr+0x88>
    a2e8:	1805883a 	mov	r2,r3
    a2ec:	20fffb1e 	bne	r4,r3,a2dc <__alt_data_end+0xf800a2dc>
    a2f0:	0005883a 	mov	r2,zero
    a2f4:	f800283a 	ret
    a2f8:	2005883a 	mov	r2,r4
    a2fc:	f800283a 	ret
    a300:	28c03fcc 	andi	r3,r5,255
    a304:	1812923a 	slli	r9,r3,8
    a308:	02ffbff4 	movhi	r11,65279
    a30c:	02a02074 	movhi	r10,32897
    a310:	48d2b03a 	or	r9,r9,r3
    a314:	4806943a 	slli	r3,r9,16
    a318:	5affbfc4 	addi	r11,r11,-257
    a31c:	52a02004 	addi	r10,r10,-32640
    a320:	48d2b03a 	or	r9,r9,r3
    a324:	20c00017 	ldw	r3,0(r4)
    a328:	48c6f03a 	xor	r3,r9,r3
    a32c:	1acd883a 	add	r6,r3,r11
    a330:	00c6303a 	nor	r3,zero,r3
    a334:	30c6703a 	and	r3,r6,r3
    a338:	1a86703a 	and	r3,r3,r10
    a33c:	183fe01e 	bne	r3,zero,a2c0 <__alt_data_end+0xf800a2c0>
    a340:	10bfff04 	addi	r2,r2,-4
    a344:	21000104 	addi	r4,r4,4
    a348:	40bff636 	bltu	r8,r2,a324 <__alt_data_end+0xf800a324>
    a34c:	003fdb06 	br	a2bc <__alt_data_end+0xf800a2bc>
    a350:	3005883a 	mov	r2,r6
    a354:	003fd706 	br	a2b4 <__alt_data_end+0xf800a2b4>

0000a358 <memcpy>:
    a358:	defffd04 	addi	sp,sp,-12
    a35c:	dfc00215 	stw	ra,8(sp)
    a360:	dc400115 	stw	r17,4(sp)
    a364:	dc000015 	stw	r16,0(sp)
    a368:	00c003c4 	movi	r3,15
    a36c:	2005883a 	mov	r2,r4
    a370:	1980452e 	bgeu	r3,r6,a488 <memcpy+0x130>
    a374:	2906b03a 	or	r3,r5,r4
    a378:	18c000cc 	andi	r3,r3,3
    a37c:	1800441e 	bne	r3,zero,a490 <memcpy+0x138>
    a380:	347ffc04 	addi	r17,r6,-16
    a384:	8822d13a 	srli	r17,r17,4
    a388:	28c00104 	addi	r3,r5,4
    a38c:	23400104 	addi	r13,r4,4
    a390:	8820913a 	slli	r16,r17,4
    a394:	2b000204 	addi	r12,r5,8
    a398:	22c00204 	addi	r11,r4,8
    a39c:	84000504 	addi	r16,r16,20
    a3a0:	2a800304 	addi	r10,r5,12
    a3a4:	22400304 	addi	r9,r4,12
    a3a8:	2c21883a 	add	r16,r5,r16
    a3ac:	2811883a 	mov	r8,r5
    a3b0:	200f883a 	mov	r7,r4
    a3b4:	41000017 	ldw	r4,0(r8)
    a3b8:	1fc00017 	ldw	ra,0(r3)
    a3bc:	63c00017 	ldw	r15,0(r12)
    a3c0:	39000015 	stw	r4,0(r7)
    a3c4:	53800017 	ldw	r14,0(r10)
    a3c8:	6fc00015 	stw	ra,0(r13)
    a3cc:	5bc00015 	stw	r15,0(r11)
    a3d0:	4b800015 	stw	r14,0(r9)
    a3d4:	18c00404 	addi	r3,r3,16
    a3d8:	39c00404 	addi	r7,r7,16
    a3dc:	42000404 	addi	r8,r8,16
    a3e0:	6b400404 	addi	r13,r13,16
    a3e4:	63000404 	addi	r12,r12,16
    a3e8:	5ac00404 	addi	r11,r11,16
    a3ec:	52800404 	addi	r10,r10,16
    a3f0:	4a400404 	addi	r9,r9,16
    a3f4:	1c3fef1e 	bne	r3,r16,a3b4 <__alt_data_end+0xf800a3b4>
    a3f8:	89c00044 	addi	r7,r17,1
    a3fc:	380e913a 	slli	r7,r7,4
    a400:	310003cc 	andi	r4,r6,15
    a404:	02c000c4 	movi	r11,3
    a408:	11c7883a 	add	r3,r2,r7
    a40c:	29cb883a 	add	r5,r5,r7
    a410:	5900212e 	bgeu	r11,r4,a498 <memcpy+0x140>
    a414:	1813883a 	mov	r9,r3
    a418:	2811883a 	mov	r8,r5
    a41c:	200f883a 	mov	r7,r4
    a420:	42800017 	ldw	r10,0(r8)
    a424:	4a400104 	addi	r9,r9,4
    a428:	39ffff04 	addi	r7,r7,-4
    a42c:	4abfff15 	stw	r10,-4(r9)
    a430:	42000104 	addi	r8,r8,4
    a434:	59fffa36 	bltu	r11,r7,a420 <__alt_data_end+0xf800a420>
    a438:	213fff04 	addi	r4,r4,-4
    a43c:	2008d0ba 	srli	r4,r4,2
    a440:	318000cc 	andi	r6,r6,3
    a444:	21000044 	addi	r4,r4,1
    a448:	2109883a 	add	r4,r4,r4
    a44c:	2109883a 	add	r4,r4,r4
    a450:	1907883a 	add	r3,r3,r4
    a454:	290b883a 	add	r5,r5,r4
    a458:	30000626 	beq	r6,zero,a474 <memcpy+0x11c>
    a45c:	198d883a 	add	r6,r3,r6
    a460:	29c00003 	ldbu	r7,0(r5)
    a464:	18c00044 	addi	r3,r3,1
    a468:	29400044 	addi	r5,r5,1
    a46c:	19ffffc5 	stb	r7,-1(r3)
    a470:	19bffb1e 	bne	r3,r6,a460 <__alt_data_end+0xf800a460>
    a474:	dfc00217 	ldw	ra,8(sp)
    a478:	dc400117 	ldw	r17,4(sp)
    a47c:	dc000017 	ldw	r16,0(sp)
    a480:	dec00304 	addi	sp,sp,12
    a484:	f800283a 	ret
    a488:	2007883a 	mov	r3,r4
    a48c:	003ff206 	br	a458 <__alt_data_end+0xf800a458>
    a490:	2007883a 	mov	r3,r4
    a494:	003ff106 	br	a45c <__alt_data_end+0xf800a45c>
    a498:	200d883a 	mov	r6,r4
    a49c:	003fee06 	br	a458 <__alt_data_end+0xf800a458>

0000a4a0 <memmove>:
    a4a0:	2005883a 	mov	r2,r4
    a4a4:	29000b2e 	bgeu	r5,r4,a4d4 <memmove+0x34>
    a4a8:	298f883a 	add	r7,r5,r6
    a4ac:	21c0092e 	bgeu	r4,r7,a4d4 <memmove+0x34>
    a4b0:	2187883a 	add	r3,r4,r6
    a4b4:	198bc83a 	sub	r5,r3,r6
    a4b8:	30004826 	beq	r6,zero,a5dc <memmove+0x13c>
    a4bc:	39ffffc4 	addi	r7,r7,-1
    a4c0:	39000003 	ldbu	r4,0(r7)
    a4c4:	18ffffc4 	addi	r3,r3,-1
    a4c8:	19000005 	stb	r4,0(r3)
    a4cc:	28fffb1e 	bne	r5,r3,a4bc <__alt_data_end+0xf800a4bc>
    a4d0:	f800283a 	ret
    a4d4:	00c003c4 	movi	r3,15
    a4d8:	1980412e 	bgeu	r3,r6,a5e0 <memmove+0x140>
    a4dc:	2886b03a 	or	r3,r5,r2
    a4e0:	18c000cc 	andi	r3,r3,3
    a4e4:	1800401e 	bne	r3,zero,a5e8 <memmove+0x148>
    a4e8:	33fffc04 	addi	r15,r6,-16
    a4ec:	781ed13a 	srli	r15,r15,4
    a4f0:	28c00104 	addi	r3,r5,4
    a4f4:	13400104 	addi	r13,r2,4
    a4f8:	781c913a 	slli	r14,r15,4
    a4fc:	2b000204 	addi	r12,r5,8
    a500:	12c00204 	addi	r11,r2,8
    a504:	73800504 	addi	r14,r14,20
    a508:	2a800304 	addi	r10,r5,12
    a50c:	12400304 	addi	r9,r2,12
    a510:	2b9d883a 	add	r14,r5,r14
    a514:	2811883a 	mov	r8,r5
    a518:	100f883a 	mov	r7,r2
    a51c:	41000017 	ldw	r4,0(r8)
    a520:	39c00404 	addi	r7,r7,16
    a524:	18c00404 	addi	r3,r3,16
    a528:	393ffc15 	stw	r4,-16(r7)
    a52c:	193ffc17 	ldw	r4,-16(r3)
    a530:	6b400404 	addi	r13,r13,16
    a534:	5ac00404 	addi	r11,r11,16
    a538:	693ffc15 	stw	r4,-16(r13)
    a53c:	61000017 	ldw	r4,0(r12)
    a540:	4a400404 	addi	r9,r9,16
    a544:	42000404 	addi	r8,r8,16
    a548:	593ffc15 	stw	r4,-16(r11)
    a54c:	51000017 	ldw	r4,0(r10)
    a550:	63000404 	addi	r12,r12,16
    a554:	52800404 	addi	r10,r10,16
    a558:	493ffc15 	stw	r4,-16(r9)
    a55c:	1bbfef1e 	bne	r3,r14,a51c <__alt_data_end+0xf800a51c>
    a560:	79000044 	addi	r4,r15,1
    a564:	2008913a 	slli	r4,r4,4
    a568:	328003cc 	andi	r10,r6,15
    a56c:	02c000c4 	movi	r11,3
    a570:	1107883a 	add	r3,r2,r4
    a574:	290b883a 	add	r5,r5,r4
    a578:	5a801e2e 	bgeu	r11,r10,a5f4 <memmove+0x154>
    a57c:	1813883a 	mov	r9,r3
    a580:	2811883a 	mov	r8,r5
    a584:	500f883a 	mov	r7,r10
    a588:	41000017 	ldw	r4,0(r8)
    a58c:	4a400104 	addi	r9,r9,4
    a590:	39ffff04 	addi	r7,r7,-4
    a594:	493fff15 	stw	r4,-4(r9)
    a598:	42000104 	addi	r8,r8,4
    a59c:	59fffa36 	bltu	r11,r7,a588 <__alt_data_end+0xf800a588>
    a5a0:	513fff04 	addi	r4,r10,-4
    a5a4:	2008d0ba 	srli	r4,r4,2
    a5a8:	318000cc 	andi	r6,r6,3
    a5ac:	21000044 	addi	r4,r4,1
    a5b0:	2109883a 	add	r4,r4,r4
    a5b4:	2109883a 	add	r4,r4,r4
    a5b8:	1907883a 	add	r3,r3,r4
    a5bc:	290b883a 	add	r5,r5,r4
    a5c0:	30000b26 	beq	r6,zero,a5f0 <memmove+0x150>
    a5c4:	198d883a 	add	r6,r3,r6
    a5c8:	29c00003 	ldbu	r7,0(r5)
    a5cc:	18c00044 	addi	r3,r3,1
    a5d0:	29400044 	addi	r5,r5,1
    a5d4:	19ffffc5 	stb	r7,-1(r3)
    a5d8:	19bffb1e 	bne	r3,r6,a5c8 <__alt_data_end+0xf800a5c8>
    a5dc:	f800283a 	ret
    a5e0:	1007883a 	mov	r3,r2
    a5e4:	003ff606 	br	a5c0 <__alt_data_end+0xf800a5c0>
    a5e8:	1007883a 	mov	r3,r2
    a5ec:	003ff506 	br	a5c4 <__alt_data_end+0xf800a5c4>
    a5f0:	f800283a 	ret
    a5f4:	500d883a 	mov	r6,r10
    a5f8:	003ff106 	br	a5c0 <__alt_data_end+0xf800a5c0>

0000a5fc <_Balloc>:
    a5fc:	20801317 	ldw	r2,76(r4)
    a600:	defffc04 	addi	sp,sp,-16
    a604:	dc400115 	stw	r17,4(sp)
    a608:	dc000015 	stw	r16,0(sp)
    a60c:	dfc00315 	stw	ra,12(sp)
    a610:	dc800215 	stw	r18,8(sp)
    a614:	2023883a 	mov	r17,r4
    a618:	2821883a 	mov	r16,r5
    a61c:	10000f26 	beq	r2,zero,a65c <_Balloc+0x60>
    a620:	8407883a 	add	r3,r16,r16
    a624:	18c7883a 	add	r3,r3,r3
    a628:	10c7883a 	add	r3,r2,r3
    a62c:	18800017 	ldw	r2,0(r3)
    a630:	10001126 	beq	r2,zero,a678 <_Balloc+0x7c>
    a634:	11000017 	ldw	r4,0(r2)
    a638:	19000015 	stw	r4,0(r3)
    a63c:	10000415 	stw	zero,16(r2)
    a640:	10000315 	stw	zero,12(r2)
    a644:	dfc00317 	ldw	ra,12(sp)
    a648:	dc800217 	ldw	r18,8(sp)
    a64c:	dc400117 	ldw	r17,4(sp)
    a650:	dc000017 	ldw	r16,0(sp)
    a654:	dec00404 	addi	sp,sp,16
    a658:	f800283a 	ret
    a65c:	01800844 	movi	r6,33
    a660:	01400104 	movi	r5,4
    a664:	000ea300 	call	ea30 <_calloc_r>
    a668:	88801315 	stw	r2,76(r17)
    a66c:	103fec1e 	bne	r2,zero,a620 <__alt_data_end+0xf800a620>
    a670:	0005883a 	mov	r2,zero
    a674:	003ff306 	br	a644 <__alt_data_end+0xf800a644>
    a678:	01400044 	movi	r5,1
    a67c:	2c24983a 	sll	r18,r5,r16
    a680:	8809883a 	mov	r4,r17
    a684:	91800144 	addi	r6,r18,5
    a688:	318d883a 	add	r6,r6,r6
    a68c:	318d883a 	add	r6,r6,r6
    a690:	000ea300 	call	ea30 <_calloc_r>
    a694:	103ff626 	beq	r2,zero,a670 <__alt_data_end+0xf800a670>
    a698:	14000115 	stw	r16,4(r2)
    a69c:	14800215 	stw	r18,8(r2)
    a6a0:	003fe606 	br	a63c <__alt_data_end+0xf800a63c>

0000a6a4 <_Bfree>:
    a6a4:	28000826 	beq	r5,zero,a6c8 <_Bfree+0x24>
    a6a8:	28c00117 	ldw	r3,4(r5)
    a6ac:	20801317 	ldw	r2,76(r4)
    a6b0:	18c7883a 	add	r3,r3,r3
    a6b4:	18c7883a 	add	r3,r3,r3
    a6b8:	10c5883a 	add	r2,r2,r3
    a6bc:	10c00017 	ldw	r3,0(r2)
    a6c0:	28c00015 	stw	r3,0(r5)
    a6c4:	11400015 	stw	r5,0(r2)
    a6c8:	f800283a 	ret

0000a6cc <__multadd>:
    a6cc:	defff704 	addi	sp,sp,-36
    a6d0:	dc800215 	stw	r18,8(sp)
    a6d4:	2c800417 	ldw	r18,16(r5)
    a6d8:	dd800615 	stw	r22,24(sp)
    a6dc:	dd400515 	stw	r21,20(sp)
    a6e0:	dd000415 	stw	r20,16(sp)
    a6e4:	dcc00315 	stw	r19,12(sp)
    a6e8:	dc400115 	stw	r17,4(sp)
    a6ec:	dc000015 	stw	r16,0(sp)
    a6f0:	dfc00815 	stw	ra,32(sp)
    a6f4:	ddc00715 	stw	r23,28(sp)
    a6f8:	2827883a 	mov	r19,r5
    a6fc:	2029883a 	mov	r20,r4
    a700:	3023883a 	mov	r17,r6
    a704:	3821883a 	mov	r16,r7
    a708:	2d400504 	addi	r21,r5,20
    a70c:	002d883a 	mov	r22,zero
    a710:	adc00017 	ldw	r23,0(r21)
    a714:	880b883a 	mov	r5,r17
    a718:	ad400104 	addi	r21,r21,4
    a71c:	b93fffcc 	andi	r4,r23,65535
    a720:	000fc140 	call	fc14 <__mulsi3>
    a724:	b808d43a 	srli	r4,r23,16
    a728:	880b883a 	mov	r5,r17
    a72c:	1421883a 	add	r16,r2,r16
    a730:	000fc140 	call	fc14 <__mulsi3>
    a734:	800ed43a 	srli	r7,r16,16
    a738:	80ffffcc 	andi	r3,r16,65535
    a73c:	b5800044 	addi	r22,r22,1
    a740:	11c5883a 	add	r2,r2,r7
    a744:	100e943a 	slli	r7,r2,16
    a748:	1020d43a 	srli	r16,r2,16
    a74c:	38c7883a 	add	r3,r7,r3
    a750:	a8ffff15 	stw	r3,-4(r21)
    a754:	b4bfee16 	blt	r22,r18,a710 <__alt_data_end+0xf800a710>
    a758:	80000926 	beq	r16,zero,a780 <__multadd+0xb4>
    a75c:	98800217 	ldw	r2,8(r19)
    a760:	9080130e 	bge	r18,r2,a7b0 <__multadd+0xe4>
    a764:	90800144 	addi	r2,r18,5
    a768:	1085883a 	add	r2,r2,r2
    a76c:	1085883a 	add	r2,r2,r2
    a770:	9885883a 	add	r2,r19,r2
    a774:	14000015 	stw	r16,0(r2)
    a778:	94800044 	addi	r18,r18,1
    a77c:	9c800415 	stw	r18,16(r19)
    a780:	9805883a 	mov	r2,r19
    a784:	dfc00817 	ldw	ra,32(sp)
    a788:	ddc00717 	ldw	r23,28(sp)
    a78c:	dd800617 	ldw	r22,24(sp)
    a790:	dd400517 	ldw	r21,20(sp)
    a794:	dd000417 	ldw	r20,16(sp)
    a798:	dcc00317 	ldw	r19,12(sp)
    a79c:	dc800217 	ldw	r18,8(sp)
    a7a0:	dc400117 	ldw	r17,4(sp)
    a7a4:	dc000017 	ldw	r16,0(sp)
    a7a8:	dec00904 	addi	sp,sp,36
    a7ac:	f800283a 	ret
    a7b0:	99400117 	ldw	r5,4(r19)
    a7b4:	a009883a 	mov	r4,r20
    a7b8:	29400044 	addi	r5,r5,1
    a7bc:	000a5fc0 	call	a5fc <_Balloc>
    a7c0:	99800417 	ldw	r6,16(r19)
    a7c4:	99400304 	addi	r5,r19,12
    a7c8:	11000304 	addi	r4,r2,12
    a7cc:	31800084 	addi	r6,r6,2
    a7d0:	318d883a 	add	r6,r6,r6
    a7d4:	318d883a 	add	r6,r6,r6
    a7d8:	1023883a 	mov	r17,r2
    a7dc:	000a3580 	call	a358 <memcpy>
    a7e0:	98000a26 	beq	r19,zero,a80c <__multadd+0x140>
    a7e4:	98c00117 	ldw	r3,4(r19)
    a7e8:	a0801317 	ldw	r2,76(r20)
    a7ec:	18c7883a 	add	r3,r3,r3
    a7f0:	18c7883a 	add	r3,r3,r3
    a7f4:	10c5883a 	add	r2,r2,r3
    a7f8:	10c00017 	ldw	r3,0(r2)
    a7fc:	98c00015 	stw	r3,0(r19)
    a800:	14c00015 	stw	r19,0(r2)
    a804:	8827883a 	mov	r19,r17
    a808:	003fd606 	br	a764 <__alt_data_end+0xf800a764>
    a80c:	8827883a 	mov	r19,r17
    a810:	003fd406 	br	a764 <__alt_data_end+0xf800a764>

0000a814 <__s2b>:
    a814:	defff904 	addi	sp,sp,-28
    a818:	dc400115 	stw	r17,4(sp)
    a81c:	dc000015 	stw	r16,0(sp)
    a820:	2023883a 	mov	r17,r4
    a824:	2821883a 	mov	r16,r5
    a828:	39000204 	addi	r4,r7,8
    a82c:	01400244 	movi	r5,9
    a830:	dcc00315 	stw	r19,12(sp)
    a834:	dc800215 	stw	r18,8(sp)
    a838:	dfc00615 	stw	ra,24(sp)
    a83c:	dd400515 	stw	r21,20(sp)
    a840:	dd000415 	stw	r20,16(sp)
    a844:	3825883a 	mov	r18,r7
    a848:	3027883a 	mov	r19,r6
    a84c:	00012cc0 	call	12cc <__divsi3>
    a850:	00c00044 	movi	r3,1
    a854:	000b883a 	mov	r5,zero
    a858:	1880030e 	bge	r3,r2,a868 <__s2b+0x54>
    a85c:	18c7883a 	add	r3,r3,r3
    a860:	29400044 	addi	r5,r5,1
    a864:	18bffd16 	blt	r3,r2,a85c <__alt_data_end+0xf800a85c>
    a868:	8809883a 	mov	r4,r17
    a86c:	000a5fc0 	call	a5fc <_Balloc>
    a870:	d8c00717 	ldw	r3,28(sp)
    a874:	10c00515 	stw	r3,20(r2)
    a878:	00c00044 	movi	r3,1
    a87c:	10c00415 	stw	r3,16(r2)
    a880:	00c00244 	movi	r3,9
    a884:	1cc0210e 	bge	r3,r19,a90c <__s2b+0xf8>
    a888:	80eb883a 	add	r21,r16,r3
    a88c:	a829883a 	mov	r20,r21
    a890:	84e1883a 	add	r16,r16,r19
    a894:	a1c00007 	ldb	r7,0(r20)
    a898:	01800284 	movi	r6,10
    a89c:	a5000044 	addi	r20,r20,1
    a8a0:	100b883a 	mov	r5,r2
    a8a4:	39fff404 	addi	r7,r7,-48
    a8a8:	8809883a 	mov	r4,r17
    a8ac:	000a6cc0 	call	a6cc <__multadd>
    a8b0:	a43ff81e 	bne	r20,r16,a894 <__alt_data_end+0xf800a894>
    a8b4:	ace1883a 	add	r16,r21,r19
    a8b8:	843ffe04 	addi	r16,r16,-8
    a8bc:	9c800a0e 	bge	r19,r18,a8e8 <__s2b+0xd4>
    a8c0:	94e5c83a 	sub	r18,r18,r19
    a8c4:	84a5883a 	add	r18,r16,r18
    a8c8:	81c00007 	ldb	r7,0(r16)
    a8cc:	01800284 	movi	r6,10
    a8d0:	84000044 	addi	r16,r16,1
    a8d4:	100b883a 	mov	r5,r2
    a8d8:	39fff404 	addi	r7,r7,-48
    a8dc:	8809883a 	mov	r4,r17
    a8e0:	000a6cc0 	call	a6cc <__multadd>
    a8e4:	84bff81e 	bne	r16,r18,a8c8 <__alt_data_end+0xf800a8c8>
    a8e8:	dfc00617 	ldw	ra,24(sp)
    a8ec:	dd400517 	ldw	r21,20(sp)
    a8f0:	dd000417 	ldw	r20,16(sp)
    a8f4:	dcc00317 	ldw	r19,12(sp)
    a8f8:	dc800217 	ldw	r18,8(sp)
    a8fc:	dc400117 	ldw	r17,4(sp)
    a900:	dc000017 	ldw	r16,0(sp)
    a904:	dec00704 	addi	sp,sp,28
    a908:	f800283a 	ret
    a90c:	84000284 	addi	r16,r16,10
    a910:	1827883a 	mov	r19,r3
    a914:	003fe906 	br	a8bc <__alt_data_end+0xf800a8bc>

0000a918 <__hi0bits>:
    a918:	20bfffec 	andhi	r2,r4,65535
    a91c:	1000141e 	bne	r2,zero,a970 <__hi0bits+0x58>
    a920:	2008943a 	slli	r4,r4,16
    a924:	00800404 	movi	r2,16
    a928:	20ffc02c 	andhi	r3,r4,65280
    a92c:	1800021e 	bne	r3,zero,a938 <__hi0bits+0x20>
    a930:	2008923a 	slli	r4,r4,8
    a934:	10800204 	addi	r2,r2,8
    a938:	20fc002c 	andhi	r3,r4,61440
    a93c:	1800021e 	bne	r3,zero,a948 <__hi0bits+0x30>
    a940:	2008913a 	slli	r4,r4,4
    a944:	10800104 	addi	r2,r2,4
    a948:	20f0002c 	andhi	r3,r4,49152
    a94c:	1800031e 	bne	r3,zero,a95c <__hi0bits+0x44>
    a950:	2109883a 	add	r4,r4,r4
    a954:	10800084 	addi	r2,r2,2
    a958:	2109883a 	add	r4,r4,r4
    a95c:	20000316 	blt	r4,zero,a96c <__hi0bits+0x54>
    a960:	2110002c 	andhi	r4,r4,16384
    a964:	2000041e 	bne	r4,zero,a978 <__hi0bits+0x60>
    a968:	00800804 	movi	r2,32
    a96c:	f800283a 	ret
    a970:	0005883a 	mov	r2,zero
    a974:	003fec06 	br	a928 <__alt_data_end+0xf800a928>
    a978:	10800044 	addi	r2,r2,1
    a97c:	f800283a 	ret

0000a980 <__lo0bits>:
    a980:	20c00017 	ldw	r3,0(r4)
    a984:	188001cc 	andi	r2,r3,7
    a988:	10000826 	beq	r2,zero,a9ac <__lo0bits+0x2c>
    a98c:	1880004c 	andi	r2,r3,1
    a990:	1000211e 	bne	r2,zero,aa18 <__lo0bits+0x98>
    a994:	1880008c 	andi	r2,r3,2
    a998:	1000211e 	bne	r2,zero,aa20 <__lo0bits+0xa0>
    a99c:	1806d0ba 	srli	r3,r3,2
    a9a0:	00800084 	movi	r2,2
    a9a4:	20c00015 	stw	r3,0(r4)
    a9a8:	f800283a 	ret
    a9ac:	18bfffcc 	andi	r2,r3,65535
    a9b0:	10001326 	beq	r2,zero,aa00 <__lo0bits+0x80>
    a9b4:	0005883a 	mov	r2,zero
    a9b8:	19403fcc 	andi	r5,r3,255
    a9bc:	2800021e 	bne	r5,zero,a9c8 <__lo0bits+0x48>
    a9c0:	1806d23a 	srli	r3,r3,8
    a9c4:	10800204 	addi	r2,r2,8
    a9c8:	194003cc 	andi	r5,r3,15
    a9cc:	2800021e 	bne	r5,zero,a9d8 <__lo0bits+0x58>
    a9d0:	1806d13a 	srli	r3,r3,4
    a9d4:	10800104 	addi	r2,r2,4
    a9d8:	194000cc 	andi	r5,r3,3
    a9dc:	2800021e 	bne	r5,zero,a9e8 <__lo0bits+0x68>
    a9e0:	1806d0ba 	srli	r3,r3,2
    a9e4:	10800084 	addi	r2,r2,2
    a9e8:	1940004c 	andi	r5,r3,1
    a9ec:	2800081e 	bne	r5,zero,aa10 <__lo0bits+0x90>
    a9f0:	1806d07a 	srli	r3,r3,1
    a9f4:	1800051e 	bne	r3,zero,aa0c <__lo0bits+0x8c>
    a9f8:	00800804 	movi	r2,32
    a9fc:	f800283a 	ret
    aa00:	1806d43a 	srli	r3,r3,16
    aa04:	00800404 	movi	r2,16
    aa08:	003feb06 	br	a9b8 <__alt_data_end+0xf800a9b8>
    aa0c:	10800044 	addi	r2,r2,1
    aa10:	20c00015 	stw	r3,0(r4)
    aa14:	f800283a 	ret
    aa18:	0005883a 	mov	r2,zero
    aa1c:	f800283a 	ret
    aa20:	1806d07a 	srli	r3,r3,1
    aa24:	00800044 	movi	r2,1
    aa28:	20c00015 	stw	r3,0(r4)
    aa2c:	f800283a 	ret

0000aa30 <__i2b>:
    aa30:	defffd04 	addi	sp,sp,-12
    aa34:	dc000015 	stw	r16,0(sp)
    aa38:	04000044 	movi	r16,1
    aa3c:	dc400115 	stw	r17,4(sp)
    aa40:	2823883a 	mov	r17,r5
    aa44:	800b883a 	mov	r5,r16
    aa48:	dfc00215 	stw	ra,8(sp)
    aa4c:	000a5fc0 	call	a5fc <_Balloc>
    aa50:	14400515 	stw	r17,20(r2)
    aa54:	14000415 	stw	r16,16(r2)
    aa58:	dfc00217 	ldw	ra,8(sp)
    aa5c:	dc400117 	ldw	r17,4(sp)
    aa60:	dc000017 	ldw	r16,0(sp)
    aa64:	dec00304 	addi	sp,sp,12
    aa68:	f800283a 	ret

0000aa6c <__multiply>:
    aa6c:	deffef04 	addi	sp,sp,-68
    aa70:	dc400815 	stw	r17,32(sp)
    aa74:	dc000715 	stw	r16,28(sp)
    aa78:	34400417 	ldw	r17,16(r6)
    aa7c:	2c000417 	ldw	r16,16(r5)
    aa80:	dd800d15 	stw	r22,52(sp)
    aa84:	dc800915 	stw	r18,36(sp)
    aa88:	dfc01015 	stw	ra,64(sp)
    aa8c:	df000f15 	stw	fp,60(sp)
    aa90:	ddc00e15 	stw	r23,56(sp)
    aa94:	dd400c15 	stw	r21,48(sp)
    aa98:	dd000b15 	stw	r20,44(sp)
    aa9c:	dcc00a15 	stw	r19,40(sp)
    aaa0:	2825883a 	mov	r18,r5
    aaa4:	302d883a 	mov	r22,r6
    aaa8:	8440050e 	bge	r16,r17,aac0 <__multiply+0x54>
    aaac:	8007883a 	mov	r3,r16
    aab0:	3025883a 	mov	r18,r6
    aab4:	8821883a 	mov	r16,r17
    aab8:	282d883a 	mov	r22,r5
    aabc:	1823883a 	mov	r17,r3
    aac0:	90800217 	ldw	r2,8(r18)
    aac4:	8447883a 	add	r3,r16,r17
    aac8:	d8c00215 	stw	r3,8(sp)
    aacc:	91400117 	ldw	r5,4(r18)
    aad0:	10c0010e 	bge	r2,r3,aad8 <__multiply+0x6c>
    aad4:	29400044 	addi	r5,r5,1
    aad8:	000a5fc0 	call	a5fc <_Balloc>
    aadc:	d8c00217 	ldw	r3,8(sp)
    aae0:	d8800615 	stw	r2,24(sp)
    aae4:	18eb883a 	add	r21,r3,r3
    aae8:	ad6b883a 	add	r21,r21,r21
    aaec:	10c00504 	addi	r3,r2,20
    aaf0:	1d6b883a 	add	r21,r3,r21
    aaf4:	d8c00115 	stw	r3,4(sp)
    aaf8:	dd400315 	stw	r21,12(sp)
    aafc:	1805883a 	mov	r2,r3
    ab00:	1d40042e 	bgeu	r3,r21,ab14 <__multiply+0xa8>
    ab04:	d8c00317 	ldw	r3,12(sp)
    ab08:	10000015 	stw	zero,0(r2)
    ab0c:	10800104 	addi	r2,r2,4
    ab10:	10fffc36 	bltu	r2,r3,ab04 <__alt_data_end+0xf800ab04>
    ab14:	8c63883a 	add	r17,r17,r17
    ab18:	b5800504 	addi	r22,r22,20
    ab1c:	8c63883a 	add	r17,r17,r17
    ab20:	94800504 	addi	r18,r18,20
    ab24:	8421883a 	add	r16,r16,r16
    ab28:	b463883a 	add	r17,r22,r17
    ab2c:	8421883a 	add	r16,r16,r16
    ab30:	dd800015 	stw	r22,0(sp)
    ab34:	dc800415 	stw	r18,16(sp)
    ab38:	dc400515 	stw	r17,20(sp)
    ab3c:	9429883a 	add	r20,r18,r16
    ab40:	b4404f2e 	bgeu	r22,r17,ac80 <__multiply+0x214>
    ab44:	d8c00017 	ldw	r3,0(sp)
    ab48:	1c800017 	ldw	r18,0(r3)
    ab4c:	947fffcc 	andi	r17,r18,65535
    ab50:	88001e26 	beq	r17,zero,abcc <__multiply+0x160>
    ab54:	dd800117 	ldw	r22,4(sp)
    ab58:	dd400417 	ldw	r21,16(sp)
    ab5c:	0027883a 	mov	r19,zero
    ab60:	ac800017 	ldw	r18,0(r21)
    ab64:	b4000017 	ldw	r16,0(r22)
    ab68:	880b883a 	mov	r5,r17
    ab6c:	913fffcc 	andi	r4,r18,65535
    ab70:	000fc140 	call	fc14 <__mulsi3>
    ab74:	9008d43a 	srli	r4,r18,16
    ab78:	84bfffcc 	andi	r18,r16,65535
    ab7c:	1485883a 	add	r2,r2,r18
    ab80:	14e5883a 	add	r18,r2,r19
    ab84:	8020d43a 	srli	r16,r16,16
    ab88:	9026d43a 	srli	r19,r18,16
    ab8c:	880b883a 	mov	r5,r17
    ab90:	000fc140 	call	fc14 <__mulsi3>
    ab94:	1405883a 	add	r2,r2,r16
    ab98:	14e1883a 	add	r16,r2,r19
    ab9c:	90ffffcc 	andi	r3,r18,65535
    aba0:	8024943a 	slli	r18,r16,16
    aba4:	ad400104 	addi	r21,r21,4
    aba8:	b005883a 	mov	r2,r22
    abac:	90c6b03a 	or	r3,r18,r3
    abb0:	b0c00015 	stw	r3,0(r22)
    abb4:	8026d43a 	srli	r19,r16,16
    abb8:	b5800104 	addi	r22,r22,4
    abbc:	ad3fe836 	bltu	r21,r20,ab60 <__alt_data_end+0xf800ab60>
    abc0:	d8c00017 	ldw	r3,0(sp)
    abc4:	14c00115 	stw	r19,4(r2)
    abc8:	1c800017 	ldw	r18,0(r3)
    abcc:	9024d43a 	srli	r18,r18,16
    abd0:	90002226 	beq	r18,zero,ac5c <__multiply+0x1f0>
    abd4:	d8c00117 	ldw	r3,4(sp)
    abd8:	dd800417 	ldw	r22,16(sp)
    abdc:	002f883a 	mov	r23,zero
    abe0:	1f000017 	ldw	fp,0(r3)
    abe4:	1823883a 	mov	r17,r3
    abe8:	182b883a 	mov	r21,r3
    abec:	e021883a 	mov	r16,fp
    abf0:	00000106 	br	abf8 <__multiply+0x18c>
    abf4:	982b883a 	mov	r21,r19
    abf8:	b100000b 	ldhu	r4,0(r22)
    abfc:	8020d43a 	srli	r16,r16,16
    ac00:	900b883a 	mov	r5,r18
    ac04:	000fc140 	call	fc14 <__mulsi3>
    ac08:	1405883a 	add	r2,r2,r16
    ac0c:	15ef883a 	add	r23,r2,r23
    ac10:	b804943a 	slli	r2,r23,16
    ac14:	e0ffffcc 	andi	r3,fp,65535
    ac18:	8c400104 	addi	r17,r17,4
    ac1c:	10c6b03a 	or	r3,r2,r3
    ac20:	88ffff15 	stw	r3,-4(r17)
    ac24:	b5800104 	addi	r22,r22,4
    ac28:	b13fff17 	ldw	r4,-4(r22)
    ac2c:	acc00104 	addi	r19,r21,4
    ac30:	900b883a 	mov	r5,r18
    ac34:	2008d43a 	srli	r4,r4,16
    ac38:	9c000017 	ldw	r16,0(r19)
    ac3c:	000fc140 	call	fc14 <__mulsi3>
    ac40:	b806d43a 	srli	r3,r23,16
    ac44:	813fffcc 	andi	r4,r16,65535
    ac48:	1105883a 	add	r2,r2,r4
    ac4c:	10f9883a 	add	fp,r2,r3
    ac50:	e02ed43a 	srli	r23,fp,16
    ac54:	b53fe736 	bltu	r22,r20,abf4 <__alt_data_end+0xf800abf4>
    ac58:	af000115 	stw	fp,4(r21)
    ac5c:	d8c00017 	ldw	r3,0(sp)
    ac60:	d9000517 	ldw	r4,20(sp)
    ac64:	18c00104 	addi	r3,r3,4
    ac68:	d8c00015 	stw	r3,0(sp)
    ac6c:	d8c00117 	ldw	r3,4(sp)
    ac70:	18c00104 	addi	r3,r3,4
    ac74:	d8c00115 	stw	r3,4(sp)
    ac78:	d8c00017 	ldw	r3,0(sp)
    ac7c:	193fb136 	bltu	r3,r4,ab44 <__alt_data_end+0xf800ab44>
    ac80:	d8c00217 	ldw	r3,8(sp)
    ac84:	00c00c0e 	bge	zero,r3,acb8 <__multiply+0x24c>
    ac88:	d8c00317 	ldw	r3,12(sp)
    ac8c:	18bfff17 	ldw	r2,-4(r3)
    ac90:	1d7fff04 	addi	r21,r3,-4
    ac94:	10000326 	beq	r2,zero,aca4 <__multiply+0x238>
    ac98:	00000706 	br	acb8 <__multiply+0x24c>
    ac9c:	a8800017 	ldw	r2,0(r21)
    aca0:	1000051e 	bne	r2,zero,acb8 <__multiply+0x24c>
    aca4:	d8c00217 	ldw	r3,8(sp)
    aca8:	ad7fff04 	addi	r21,r21,-4
    acac:	18ffffc4 	addi	r3,r3,-1
    acb0:	d8c00215 	stw	r3,8(sp)
    acb4:	183ff91e 	bne	r3,zero,ac9c <__alt_data_end+0xf800ac9c>
    acb8:	d8c00617 	ldw	r3,24(sp)
    acbc:	d9000217 	ldw	r4,8(sp)
    acc0:	1805883a 	mov	r2,r3
    acc4:	19000415 	stw	r4,16(r3)
    acc8:	dfc01017 	ldw	ra,64(sp)
    accc:	df000f17 	ldw	fp,60(sp)
    acd0:	ddc00e17 	ldw	r23,56(sp)
    acd4:	dd800d17 	ldw	r22,52(sp)
    acd8:	dd400c17 	ldw	r21,48(sp)
    acdc:	dd000b17 	ldw	r20,44(sp)
    ace0:	dcc00a17 	ldw	r19,40(sp)
    ace4:	dc800917 	ldw	r18,36(sp)
    ace8:	dc400817 	ldw	r17,32(sp)
    acec:	dc000717 	ldw	r16,28(sp)
    acf0:	dec01104 	addi	sp,sp,68
    acf4:	f800283a 	ret

0000acf8 <__pow5mult>:
    acf8:	defffa04 	addi	sp,sp,-24
    acfc:	dcc00315 	stw	r19,12(sp)
    ad00:	dc000015 	stw	r16,0(sp)
    ad04:	dfc00515 	stw	ra,20(sp)
    ad08:	dd000415 	stw	r20,16(sp)
    ad0c:	dc800215 	stw	r18,8(sp)
    ad10:	dc400115 	stw	r17,4(sp)
    ad14:	308000cc 	andi	r2,r6,3
    ad18:	3021883a 	mov	r16,r6
    ad1c:	2027883a 	mov	r19,r4
    ad20:	10002f1e 	bne	r2,zero,ade0 <__pow5mult+0xe8>
    ad24:	2825883a 	mov	r18,r5
    ad28:	8021d0ba 	srai	r16,r16,2
    ad2c:	80001a26 	beq	r16,zero,ad98 <__pow5mult+0xa0>
    ad30:	9c401217 	ldw	r17,72(r19)
    ad34:	8800061e 	bne	r17,zero,ad50 <__pow5mult+0x58>
    ad38:	00003406 	br	ae0c <__pow5mult+0x114>
    ad3c:	8021d07a 	srai	r16,r16,1
    ad40:	80001526 	beq	r16,zero,ad98 <__pow5mult+0xa0>
    ad44:	88800017 	ldw	r2,0(r17)
    ad48:	10001c26 	beq	r2,zero,adbc <__pow5mult+0xc4>
    ad4c:	1023883a 	mov	r17,r2
    ad50:	8080004c 	andi	r2,r16,1
    ad54:	103ff926 	beq	r2,zero,ad3c <__alt_data_end+0xf800ad3c>
    ad58:	880d883a 	mov	r6,r17
    ad5c:	900b883a 	mov	r5,r18
    ad60:	9809883a 	mov	r4,r19
    ad64:	000aa6c0 	call	aa6c <__multiply>
    ad68:	90001b26 	beq	r18,zero,add8 <__pow5mult+0xe0>
    ad6c:	91000117 	ldw	r4,4(r18)
    ad70:	98c01317 	ldw	r3,76(r19)
    ad74:	8021d07a 	srai	r16,r16,1
    ad78:	2109883a 	add	r4,r4,r4
    ad7c:	2109883a 	add	r4,r4,r4
    ad80:	1907883a 	add	r3,r3,r4
    ad84:	19000017 	ldw	r4,0(r3)
    ad88:	91000015 	stw	r4,0(r18)
    ad8c:	1c800015 	stw	r18,0(r3)
    ad90:	1025883a 	mov	r18,r2
    ad94:	803feb1e 	bne	r16,zero,ad44 <__alt_data_end+0xf800ad44>
    ad98:	9005883a 	mov	r2,r18
    ad9c:	dfc00517 	ldw	ra,20(sp)
    ada0:	dd000417 	ldw	r20,16(sp)
    ada4:	dcc00317 	ldw	r19,12(sp)
    ada8:	dc800217 	ldw	r18,8(sp)
    adac:	dc400117 	ldw	r17,4(sp)
    adb0:	dc000017 	ldw	r16,0(sp)
    adb4:	dec00604 	addi	sp,sp,24
    adb8:	f800283a 	ret
    adbc:	880d883a 	mov	r6,r17
    adc0:	880b883a 	mov	r5,r17
    adc4:	9809883a 	mov	r4,r19
    adc8:	000aa6c0 	call	aa6c <__multiply>
    adcc:	88800015 	stw	r2,0(r17)
    add0:	10000015 	stw	zero,0(r2)
    add4:	003fdd06 	br	ad4c <__alt_data_end+0xf800ad4c>
    add8:	1025883a 	mov	r18,r2
    addc:	003fd706 	br	ad3c <__alt_data_end+0xf800ad3c>
    ade0:	10bfffc4 	addi	r2,r2,-1
    ade4:	1085883a 	add	r2,r2,r2
    ade8:	00c00074 	movhi	r3,1
    adec:	18d7c504 	addi	r3,r3,24340
    adf0:	1085883a 	add	r2,r2,r2
    adf4:	1885883a 	add	r2,r3,r2
    adf8:	11800017 	ldw	r6,0(r2)
    adfc:	000f883a 	mov	r7,zero
    ae00:	000a6cc0 	call	a6cc <__multadd>
    ae04:	1025883a 	mov	r18,r2
    ae08:	003fc706 	br	ad28 <__alt_data_end+0xf800ad28>
    ae0c:	05000044 	movi	r20,1
    ae10:	a00b883a 	mov	r5,r20
    ae14:	9809883a 	mov	r4,r19
    ae18:	000a5fc0 	call	a5fc <_Balloc>
    ae1c:	1023883a 	mov	r17,r2
    ae20:	00809c44 	movi	r2,625
    ae24:	88800515 	stw	r2,20(r17)
    ae28:	8d000415 	stw	r20,16(r17)
    ae2c:	9c401215 	stw	r17,72(r19)
    ae30:	88000015 	stw	zero,0(r17)
    ae34:	003fc606 	br	ad50 <__alt_data_end+0xf800ad50>

0000ae38 <__lshift>:
    ae38:	defff904 	addi	sp,sp,-28
    ae3c:	dd400515 	stw	r21,20(sp)
    ae40:	dcc00315 	stw	r19,12(sp)
    ae44:	302bd17a 	srai	r21,r6,5
    ae48:	2cc00417 	ldw	r19,16(r5)
    ae4c:	28800217 	ldw	r2,8(r5)
    ae50:	dd000415 	stw	r20,16(sp)
    ae54:	ace7883a 	add	r19,r21,r19
    ae58:	dc800215 	stw	r18,8(sp)
    ae5c:	dc400115 	stw	r17,4(sp)
    ae60:	dc000015 	stw	r16,0(sp)
    ae64:	dfc00615 	stw	ra,24(sp)
    ae68:	9c000044 	addi	r16,r19,1
    ae6c:	2823883a 	mov	r17,r5
    ae70:	3029883a 	mov	r20,r6
    ae74:	2025883a 	mov	r18,r4
    ae78:	29400117 	ldw	r5,4(r5)
    ae7c:	1400030e 	bge	r2,r16,ae8c <__lshift+0x54>
    ae80:	1085883a 	add	r2,r2,r2
    ae84:	29400044 	addi	r5,r5,1
    ae88:	143ffd16 	blt	r2,r16,ae80 <__alt_data_end+0xf800ae80>
    ae8c:	9009883a 	mov	r4,r18
    ae90:	000a5fc0 	call	a5fc <_Balloc>
    ae94:	10c00504 	addi	r3,r2,20
    ae98:	0540070e 	bge	zero,r21,aeb8 <__lshift+0x80>
    ae9c:	ad6b883a 	add	r21,r21,r21
    aea0:	ad6b883a 	add	r21,r21,r21
    aea4:	1809883a 	mov	r4,r3
    aea8:	1d47883a 	add	r3,r3,r21
    aeac:	20000015 	stw	zero,0(r4)
    aeb0:	21000104 	addi	r4,r4,4
    aeb4:	193ffd1e 	bne	r3,r4,aeac <__alt_data_end+0xf800aeac>
    aeb8:	8a000417 	ldw	r8,16(r17)
    aebc:	89000504 	addi	r4,r17,20
    aec0:	a18007cc 	andi	r6,r20,31
    aec4:	4211883a 	add	r8,r8,r8
    aec8:	4211883a 	add	r8,r8,r8
    aecc:	2211883a 	add	r8,r4,r8
    aed0:	30002326 	beq	r6,zero,af60 <__lshift+0x128>
    aed4:	02400804 	movi	r9,32
    aed8:	4993c83a 	sub	r9,r9,r6
    aedc:	000b883a 	mov	r5,zero
    aee0:	21c00017 	ldw	r7,0(r4)
    aee4:	1815883a 	mov	r10,r3
    aee8:	18c00104 	addi	r3,r3,4
    aeec:	398e983a 	sll	r7,r7,r6
    aef0:	21000104 	addi	r4,r4,4
    aef4:	394ab03a 	or	r5,r7,r5
    aef8:	197fff15 	stw	r5,-4(r3)
    aefc:	217fff17 	ldw	r5,-4(r4)
    af00:	2a4ad83a 	srl	r5,r5,r9
    af04:	223ff636 	bltu	r4,r8,aee0 <__alt_data_end+0xf800aee0>
    af08:	51400115 	stw	r5,4(r10)
    af0c:	28001a1e 	bne	r5,zero,af78 <__lshift+0x140>
    af10:	843fffc4 	addi	r16,r16,-1
    af14:	14000415 	stw	r16,16(r2)
    af18:	88000826 	beq	r17,zero,af3c <__lshift+0x104>
    af1c:	89000117 	ldw	r4,4(r17)
    af20:	90c01317 	ldw	r3,76(r18)
    af24:	2109883a 	add	r4,r4,r4
    af28:	2109883a 	add	r4,r4,r4
    af2c:	1907883a 	add	r3,r3,r4
    af30:	19000017 	ldw	r4,0(r3)
    af34:	89000015 	stw	r4,0(r17)
    af38:	1c400015 	stw	r17,0(r3)
    af3c:	dfc00617 	ldw	ra,24(sp)
    af40:	dd400517 	ldw	r21,20(sp)
    af44:	dd000417 	ldw	r20,16(sp)
    af48:	dcc00317 	ldw	r19,12(sp)
    af4c:	dc800217 	ldw	r18,8(sp)
    af50:	dc400117 	ldw	r17,4(sp)
    af54:	dc000017 	ldw	r16,0(sp)
    af58:	dec00704 	addi	sp,sp,28
    af5c:	f800283a 	ret
    af60:	21400017 	ldw	r5,0(r4)
    af64:	18c00104 	addi	r3,r3,4
    af68:	21000104 	addi	r4,r4,4
    af6c:	197fff15 	stw	r5,-4(r3)
    af70:	223ffb36 	bltu	r4,r8,af60 <__alt_data_end+0xf800af60>
    af74:	003fe606 	br	af10 <__alt_data_end+0xf800af10>
    af78:	9c000084 	addi	r16,r19,2
    af7c:	003fe406 	br	af10 <__alt_data_end+0xf800af10>

0000af80 <__mcmp>:
    af80:	20800417 	ldw	r2,16(r4)
    af84:	28c00417 	ldw	r3,16(r5)
    af88:	10c5c83a 	sub	r2,r2,r3
    af8c:	1000111e 	bne	r2,zero,afd4 <__mcmp+0x54>
    af90:	18c7883a 	add	r3,r3,r3
    af94:	18c7883a 	add	r3,r3,r3
    af98:	21000504 	addi	r4,r4,20
    af9c:	29400504 	addi	r5,r5,20
    afa0:	20c5883a 	add	r2,r4,r3
    afa4:	28cb883a 	add	r5,r5,r3
    afa8:	00000106 	br	afb0 <__mcmp+0x30>
    afac:	20800a2e 	bgeu	r4,r2,afd8 <__mcmp+0x58>
    afb0:	10bfff04 	addi	r2,r2,-4
    afb4:	297fff04 	addi	r5,r5,-4
    afb8:	11800017 	ldw	r6,0(r2)
    afbc:	28c00017 	ldw	r3,0(r5)
    afc0:	30fffa26 	beq	r6,r3,afac <__alt_data_end+0xf800afac>
    afc4:	30c00236 	bltu	r6,r3,afd0 <__mcmp+0x50>
    afc8:	00800044 	movi	r2,1
    afcc:	f800283a 	ret
    afd0:	00bfffc4 	movi	r2,-1
    afd4:	f800283a 	ret
    afd8:	0005883a 	mov	r2,zero
    afdc:	f800283a 	ret

0000afe0 <__mdiff>:
    afe0:	28c00417 	ldw	r3,16(r5)
    afe4:	30800417 	ldw	r2,16(r6)
    afe8:	defffa04 	addi	sp,sp,-24
    afec:	dcc00315 	stw	r19,12(sp)
    aff0:	dc800215 	stw	r18,8(sp)
    aff4:	dfc00515 	stw	ra,20(sp)
    aff8:	dd000415 	stw	r20,16(sp)
    affc:	dc400115 	stw	r17,4(sp)
    b000:	dc000015 	stw	r16,0(sp)
    b004:	1887c83a 	sub	r3,r3,r2
    b008:	2825883a 	mov	r18,r5
    b00c:	3027883a 	mov	r19,r6
    b010:	1800141e 	bne	r3,zero,b064 <__mdiff+0x84>
    b014:	1085883a 	add	r2,r2,r2
    b018:	1085883a 	add	r2,r2,r2
    b01c:	2a000504 	addi	r8,r5,20
    b020:	34000504 	addi	r16,r6,20
    b024:	4087883a 	add	r3,r8,r2
    b028:	8085883a 	add	r2,r16,r2
    b02c:	00000106 	br	b034 <__mdiff+0x54>
    b030:	40c0592e 	bgeu	r8,r3,b198 <__mdiff+0x1b8>
    b034:	18ffff04 	addi	r3,r3,-4
    b038:	10bfff04 	addi	r2,r2,-4
    b03c:	19c00017 	ldw	r7,0(r3)
    b040:	11400017 	ldw	r5,0(r2)
    b044:	397ffa26 	beq	r7,r5,b030 <__alt_data_end+0xf800b030>
    b048:	3940592e 	bgeu	r7,r5,b1b0 <__mdiff+0x1d0>
    b04c:	9005883a 	mov	r2,r18
    b050:	4023883a 	mov	r17,r8
    b054:	9825883a 	mov	r18,r19
    b058:	05000044 	movi	r20,1
    b05c:	1027883a 	mov	r19,r2
    b060:	00000406 	br	b074 <__mdiff+0x94>
    b064:	18005616 	blt	r3,zero,b1c0 <__mdiff+0x1e0>
    b068:	34400504 	addi	r17,r6,20
    b06c:	2c000504 	addi	r16,r5,20
    b070:	0029883a 	mov	r20,zero
    b074:	91400117 	ldw	r5,4(r18)
    b078:	000a5fc0 	call	a5fc <_Balloc>
    b07c:	92400417 	ldw	r9,16(r18)
    b080:	9b000417 	ldw	r12,16(r19)
    b084:	12c00504 	addi	r11,r2,20
    b088:	4a51883a 	add	r8,r9,r9
    b08c:	6319883a 	add	r12,r12,r12
    b090:	4211883a 	add	r8,r8,r8
    b094:	6319883a 	add	r12,r12,r12
    b098:	15000315 	stw	r20,12(r2)
    b09c:	8211883a 	add	r8,r16,r8
    b0a0:	8b19883a 	add	r12,r17,r12
    b0a4:	0007883a 	mov	r3,zero
    b0a8:	81400017 	ldw	r5,0(r16)
    b0ac:	89c00017 	ldw	r7,0(r17)
    b0b0:	59800104 	addi	r6,r11,4
    b0b4:	293fffcc 	andi	r4,r5,65535
    b0b8:	20c7883a 	add	r3,r4,r3
    b0bc:	393fffcc 	andi	r4,r7,65535
    b0c0:	1909c83a 	sub	r4,r3,r4
    b0c4:	280ad43a 	srli	r5,r5,16
    b0c8:	380ed43a 	srli	r7,r7,16
    b0cc:	2007d43a 	srai	r3,r4,16
    b0d0:	213fffcc 	andi	r4,r4,65535
    b0d4:	29cbc83a 	sub	r5,r5,r7
    b0d8:	28c7883a 	add	r3,r5,r3
    b0dc:	180a943a 	slli	r5,r3,16
    b0e0:	8c400104 	addi	r17,r17,4
    b0e4:	84000104 	addi	r16,r16,4
    b0e8:	2908b03a 	or	r4,r5,r4
    b0ec:	59000015 	stw	r4,0(r11)
    b0f0:	1807d43a 	srai	r3,r3,16
    b0f4:	3015883a 	mov	r10,r6
    b0f8:	3017883a 	mov	r11,r6
    b0fc:	8b3fea36 	bltu	r17,r12,b0a8 <__alt_data_end+0xf800b0a8>
    b100:	8200162e 	bgeu	r16,r8,b15c <__mdiff+0x17c>
    b104:	8017883a 	mov	r11,r16
    b108:	59400017 	ldw	r5,0(r11)
    b10c:	31800104 	addi	r6,r6,4
    b110:	5ac00104 	addi	r11,r11,4
    b114:	293fffcc 	andi	r4,r5,65535
    b118:	20c7883a 	add	r3,r4,r3
    b11c:	280ed43a 	srli	r7,r5,16
    b120:	180bd43a 	srai	r5,r3,16
    b124:	193fffcc 	andi	r4,r3,65535
    b128:	3947883a 	add	r3,r7,r5
    b12c:	180a943a 	slli	r5,r3,16
    b130:	1807d43a 	srai	r3,r3,16
    b134:	2908b03a 	or	r4,r5,r4
    b138:	313fff15 	stw	r4,-4(r6)
    b13c:	5a3ff236 	bltu	r11,r8,b108 <__alt_data_end+0xf800b108>
    b140:	0406303a 	nor	r3,zero,r16
    b144:	1a07883a 	add	r3,r3,r8
    b148:	1806d0ba 	srli	r3,r3,2
    b14c:	18c00044 	addi	r3,r3,1
    b150:	18c7883a 	add	r3,r3,r3
    b154:	18c7883a 	add	r3,r3,r3
    b158:	50d5883a 	add	r10,r10,r3
    b15c:	50ffff04 	addi	r3,r10,-4
    b160:	2000041e 	bne	r4,zero,b174 <__mdiff+0x194>
    b164:	18ffff04 	addi	r3,r3,-4
    b168:	19000017 	ldw	r4,0(r3)
    b16c:	4a7fffc4 	addi	r9,r9,-1
    b170:	203ffc26 	beq	r4,zero,b164 <__alt_data_end+0xf800b164>
    b174:	12400415 	stw	r9,16(r2)
    b178:	dfc00517 	ldw	ra,20(sp)
    b17c:	dd000417 	ldw	r20,16(sp)
    b180:	dcc00317 	ldw	r19,12(sp)
    b184:	dc800217 	ldw	r18,8(sp)
    b188:	dc400117 	ldw	r17,4(sp)
    b18c:	dc000017 	ldw	r16,0(sp)
    b190:	dec00604 	addi	sp,sp,24
    b194:	f800283a 	ret
    b198:	000b883a 	mov	r5,zero
    b19c:	000a5fc0 	call	a5fc <_Balloc>
    b1a0:	00c00044 	movi	r3,1
    b1a4:	10c00415 	stw	r3,16(r2)
    b1a8:	10000515 	stw	zero,20(r2)
    b1ac:	003ff206 	br	b178 <__alt_data_end+0xf800b178>
    b1b0:	8023883a 	mov	r17,r16
    b1b4:	0029883a 	mov	r20,zero
    b1b8:	4021883a 	mov	r16,r8
    b1bc:	003fad06 	br	b074 <__alt_data_end+0xf800b074>
    b1c0:	9005883a 	mov	r2,r18
    b1c4:	94400504 	addi	r17,r18,20
    b1c8:	9c000504 	addi	r16,r19,20
    b1cc:	9825883a 	mov	r18,r19
    b1d0:	05000044 	movi	r20,1
    b1d4:	1027883a 	mov	r19,r2
    b1d8:	003fa606 	br	b074 <__alt_data_end+0xf800b074>

0000b1dc <__ulp>:
    b1dc:	295ffc2c 	andhi	r5,r5,32752
    b1e0:	00bf3034 	movhi	r2,64704
    b1e4:	2887883a 	add	r3,r5,r2
    b1e8:	00c0020e 	bge	zero,r3,b1f4 <__ulp+0x18>
    b1ec:	0005883a 	mov	r2,zero
    b1f0:	f800283a 	ret
    b1f4:	00c7c83a 	sub	r3,zero,r3
    b1f8:	1807d53a 	srai	r3,r3,20
    b1fc:	008004c4 	movi	r2,19
    b200:	10c00b0e 	bge	r2,r3,b230 <__ulp+0x54>
    b204:	18bffb04 	addi	r2,r3,-20
    b208:	01000784 	movi	r4,30
    b20c:	0007883a 	mov	r3,zero
    b210:	20800516 	blt	r4,r2,b228 <__ulp+0x4c>
    b214:	010007c4 	movi	r4,31
    b218:	2089c83a 	sub	r4,r4,r2
    b21c:	00800044 	movi	r2,1
    b220:	1104983a 	sll	r2,r2,r4
    b224:	f800283a 	ret
    b228:	00800044 	movi	r2,1
    b22c:	f800283a 	ret
    b230:	01400234 	movhi	r5,8
    b234:	28c7d83a 	sra	r3,r5,r3
    b238:	0005883a 	mov	r2,zero
    b23c:	f800283a 	ret

0000b240 <__b2d>:
    b240:	defffa04 	addi	sp,sp,-24
    b244:	dc000015 	stw	r16,0(sp)
    b248:	24000417 	ldw	r16,16(r4)
    b24c:	dc400115 	stw	r17,4(sp)
    b250:	24400504 	addi	r17,r4,20
    b254:	8421883a 	add	r16,r16,r16
    b258:	8421883a 	add	r16,r16,r16
    b25c:	8c21883a 	add	r16,r17,r16
    b260:	dc800215 	stw	r18,8(sp)
    b264:	84bfff17 	ldw	r18,-4(r16)
    b268:	dd000415 	stw	r20,16(sp)
    b26c:	dcc00315 	stw	r19,12(sp)
    b270:	9009883a 	mov	r4,r18
    b274:	2829883a 	mov	r20,r5
    b278:	dfc00515 	stw	ra,20(sp)
    b27c:	000a9180 	call	a918 <__hi0bits>
    b280:	00c00804 	movi	r3,32
    b284:	1889c83a 	sub	r4,r3,r2
    b288:	a1000015 	stw	r4,0(r20)
    b28c:	01000284 	movi	r4,10
    b290:	84ffff04 	addi	r19,r16,-4
    b294:	20801216 	blt	r4,r2,b2e0 <__b2d+0xa0>
    b298:	018002c4 	movi	r6,11
    b29c:	308dc83a 	sub	r6,r6,r2
    b2a0:	9186d83a 	srl	r3,r18,r6
    b2a4:	18cffc34 	orhi	r3,r3,16368
    b2a8:	8cc0212e 	bgeu	r17,r19,b330 <__b2d+0xf0>
    b2ac:	813ffe17 	ldw	r4,-8(r16)
    b2b0:	218cd83a 	srl	r6,r4,r6
    b2b4:	10800544 	addi	r2,r2,21
    b2b8:	9084983a 	sll	r2,r18,r2
    b2bc:	1184b03a 	or	r2,r2,r6
    b2c0:	dfc00517 	ldw	ra,20(sp)
    b2c4:	dd000417 	ldw	r20,16(sp)
    b2c8:	dcc00317 	ldw	r19,12(sp)
    b2cc:	dc800217 	ldw	r18,8(sp)
    b2d0:	dc400117 	ldw	r17,4(sp)
    b2d4:	dc000017 	ldw	r16,0(sp)
    b2d8:	dec00604 	addi	sp,sp,24
    b2dc:	f800283a 	ret
    b2e0:	8cc00f2e 	bgeu	r17,r19,b320 <__b2d+0xe0>
    b2e4:	117ffd44 	addi	r5,r2,-11
    b2e8:	80bffe17 	ldw	r2,-8(r16)
    b2ec:	28000e26 	beq	r5,zero,b328 <__b2d+0xe8>
    b2f0:	1949c83a 	sub	r4,r3,r5
    b2f4:	9164983a 	sll	r18,r18,r5
    b2f8:	1106d83a 	srl	r3,r2,r4
    b2fc:	81bffe04 	addi	r6,r16,-8
    b300:	948ffc34 	orhi	r18,r18,16368
    b304:	90c6b03a 	or	r3,r18,r3
    b308:	89800e2e 	bgeu	r17,r6,b344 <__b2d+0x104>
    b30c:	81bffd17 	ldw	r6,-12(r16)
    b310:	1144983a 	sll	r2,r2,r5
    b314:	310ad83a 	srl	r5,r6,r4
    b318:	2884b03a 	or	r2,r5,r2
    b31c:	003fe806 	br	b2c0 <__alt_data_end+0xf800b2c0>
    b320:	10bffd44 	addi	r2,r2,-11
    b324:	1000041e 	bne	r2,zero,b338 <__b2d+0xf8>
    b328:	90cffc34 	orhi	r3,r18,16368
    b32c:	003fe406 	br	b2c0 <__alt_data_end+0xf800b2c0>
    b330:	000d883a 	mov	r6,zero
    b334:	003fdf06 	br	b2b4 <__alt_data_end+0xf800b2b4>
    b338:	90a4983a 	sll	r18,r18,r2
    b33c:	0005883a 	mov	r2,zero
    b340:	003ff906 	br	b328 <__alt_data_end+0xf800b328>
    b344:	1144983a 	sll	r2,r2,r5
    b348:	003fdd06 	br	b2c0 <__alt_data_end+0xf800b2c0>

0000b34c <__d2b>:
    b34c:	defff804 	addi	sp,sp,-32
    b350:	dc000215 	stw	r16,8(sp)
    b354:	3021883a 	mov	r16,r6
    b358:	dc400315 	stw	r17,12(sp)
    b35c:	8022907a 	slli	r17,r16,1
    b360:	dd000615 	stw	r20,24(sp)
    b364:	2829883a 	mov	r20,r5
    b368:	01400044 	movi	r5,1
    b36c:	dcc00515 	stw	r19,20(sp)
    b370:	dc800415 	stw	r18,16(sp)
    b374:	dfc00715 	stw	ra,28(sp)
    b378:	3825883a 	mov	r18,r7
    b37c:	8822d57a 	srli	r17,r17,21
    b380:	000a5fc0 	call	a5fc <_Balloc>
    b384:	1027883a 	mov	r19,r2
    b388:	00800434 	movhi	r2,16
    b38c:	10bfffc4 	addi	r2,r2,-1
    b390:	808c703a 	and	r6,r16,r2
    b394:	88000126 	beq	r17,zero,b39c <__d2b+0x50>
    b398:	31800434 	orhi	r6,r6,16
    b39c:	d9800015 	stw	r6,0(sp)
    b3a0:	a0002426 	beq	r20,zero,b434 <__d2b+0xe8>
    b3a4:	d9000104 	addi	r4,sp,4
    b3a8:	dd000115 	stw	r20,4(sp)
    b3ac:	000a9800 	call	a980 <__lo0bits>
    b3b0:	d8c00017 	ldw	r3,0(sp)
    b3b4:	10002f1e 	bne	r2,zero,b474 <__d2b+0x128>
    b3b8:	d9000117 	ldw	r4,4(sp)
    b3bc:	99000515 	stw	r4,20(r19)
    b3c0:	1821003a 	cmpeq	r16,r3,zero
    b3c4:	01000084 	movi	r4,2
    b3c8:	2421c83a 	sub	r16,r4,r16
    b3cc:	98c00615 	stw	r3,24(r19)
    b3d0:	9c000415 	stw	r16,16(r19)
    b3d4:	88001f1e 	bne	r17,zero,b454 <__d2b+0x108>
    b3d8:	10bef384 	addi	r2,r2,-1074
    b3dc:	90800015 	stw	r2,0(r18)
    b3e0:	00900034 	movhi	r2,16384
    b3e4:	10bfffc4 	addi	r2,r2,-1
    b3e8:	8085883a 	add	r2,r16,r2
    b3ec:	1085883a 	add	r2,r2,r2
    b3f0:	1085883a 	add	r2,r2,r2
    b3f4:	9885883a 	add	r2,r19,r2
    b3f8:	11000517 	ldw	r4,20(r2)
    b3fc:	8020917a 	slli	r16,r16,5
    b400:	000a9180 	call	a918 <__hi0bits>
    b404:	d8c00817 	ldw	r3,32(sp)
    b408:	8085c83a 	sub	r2,r16,r2
    b40c:	18800015 	stw	r2,0(r3)
    b410:	9805883a 	mov	r2,r19
    b414:	dfc00717 	ldw	ra,28(sp)
    b418:	dd000617 	ldw	r20,24(sp)
    b41c:	dcc00517 	ldw	r19,20(sp)
    b420:	dc800417 	ldw	r18,16(sp)
    b424:	dc400317 	ldw	r17,12(sp)
    b428:	dc000217 	ldw	r16,8(sp)
    b42c:	dec00804 	addi	sp,sp,32
    b430:	f800283a 	ret
    b434:	d809883a 	mov	r4,sp
    b438:	000a9800 	call	a980 <__lo0bits>
    b43c:	d8c00017 	ldw	r3,0(sp)
    b440:	04000044 	movi	r16,1
    b444:	9c000415 	stw	r16,16(r19)
    b448:	98c00515 	stw	r3,20(r19)
    b44c:	10800804 	addi	r2,r2,32
    b450:	883fe126 	beq	r17,zero,b3d8 <__alt_data_end+0xf800b3d8>
    b454:	00c00d44 	movi	r3,53
    b458:	8c7ef344 	addi	r17,r17,-1075
    b45c:	88a3883a 	add	r17,r17,r2
    b460:	1885c83a 	sub	r2,r3,r2
    b464:	d8c00817 	ldw	r3,32(sp)
    b468:	94400015 	stw	r17,0(r18)
    b46c:	18800015 	stw	r2,0(r3)
    b470:	003fe706 	br	b410 <__alt_data_end+0xf800b410>
    b474:	01000804 	movi	r4,32
    b478:	2089c83a 	sub	r4,r4,r2
    b47c:	1908983a 	sll	r4,r3,r4
    b480:	d9400117 	ldw	r5,4(sp)
    b484:	1886d83a 	srl	r3,r3,r2
    b488:	2148b03a 	or	r4,r4,r5
    b48c:	99000515 	stw	r4,20(r19)
    b490:	d8c00015 	stw	r3,0(sp)
    b494:	003fca06 	br	b3c0 <__alt_data_end+0xf800b3c0>

0000b498 <__ratio>:
    b498:	defff904 	addi	sp,sp,-28
    b49c:	dc400315 	stw	r17,12(sp)
    b4a0:	2823883a 	mov	r17,r5
    b4a4:	d9400104 	addi	r5,sp,4
    b4a8:	dfc00615 	stw	ra,24(sp)
    b4ac:	dcc00515 	stw	r19,20(sp)
    b4b0:	dc800415 	stw	r18,16(sp)
    b4b4:	2027883a 	mov	r19,r4
    b4b8:	dc000215 	stw	r16,8(sp)
    b4bc:	000b2400 	call	b240 <__b2d>
    b4c0:	d80b883a 	mov	r5,sp
    b4c4:	8809883a 	mov	r4,r17
    b4c8:	1025883a 	mov	r18,r2
    b4cc:	1821883a 	mov	r16,r3
    b4d0:	000b2400 	call	b240 <__b2d>
    b4d4:	8a000417 	ldw	r8,16(r17)
    b4d8:	99000417 	ldw	r4,16(r19)
    b4dc:	d9400117 	ldw	r5,4(sp)
    b4e0:	2209c83a 	sub	r4,r4,r8
    b4e4:	2010917a 	slli	r8,r4,5
    b4e8:	d9000017 	ldw	r4,0(sp)
    b4ec:	2909c83a 	sub	r4,r5,r4
    b4f0:	4109883a 	add	r4,r8,r4
    b4f4:	01000e0e 	bge	zero,r4,b530 <__ratio+0x98>
    b4f8:	2008953a 	slli	r4,r4,20
    b4fc:	2421883a 	add	r16,r4,r16
    b500:	100d883a 	mov	r6,r2
    b504:	180f883a 	mov	r7,r3
    b508:	9009883a 	mov	r4,r18
    b50c:	800b883a 	mov	r5,r16
    b510:	00104e80 	call	104e8 <__divdf3>
    b514:	dfc00617 	ldw	ra,24(sp)
    b518:	dcc00517 	ldw	r19,20(sp)
    b51c:	dc800417 	ldw	r18,16(sp)
    b520:	dc400317 	ldw	r17,12(sp)
    b524:	dc000217 	ldw	r16,8(sp)
    b528:	dec00704 	addi	sp,sp,28
    b52c:	f800283a 	ret
    b530:	2008953a 	slli	r4,r4,20
    b534:	1907c83a 	sub	r3,r3,r4
    b538:	003ff106 	br	b500 <__alt_data_end+0xf800b500>

0000b53c <_mprec_log10>:
    b53c:	defffe04 	addi	sp,sp,-8
    b540:	dc000015 	stw	r16,0(sp)
    b544:	dfc00115 	stw	ra,4(sp)
    b548:	008005c4 	movi	r2,23
    b54c:	2021883a 	mov	r16,r4
    b550:	11000d0e 	bge	r2,r4,b588 <_mprec_log10+0x4c>
    b554:	0005883a 	mov	r2,zero
    b558:	00cffc34 	movhi	r3,16368
    b55c:	843fffc4 	addi	r16,r16,-1
    b560:	000d883a 	mov	r6,zero
    b564:	01d00934 	movhi	r7,16420
    b568:	1009883a 	mov	r4,r2
    b56c:	180b883a 	mov	r5,r3
    b570:	00111100 	call	11110 <__muldf3>
    b574:	803ff91e 	bne	r16,zero,b55c <__alt_data_end+0xf800b55c>
    b578:	dfc00117 	ldw	ra,4(sp)
    b57c:	dc000017 	ldw	r16,0(sp)
    b580:	dec00204 	addi	sp,sp,8
    b584:	f800283a 	ret
    b588:	202090fa 	slli	r16,r4,3
    b58c:	00800074 	movhi	r2,1
    b590:	1097dc04 	addi	r2,r2,24432
    b594:	1421883a 	add	r16,r2,r16
    b598:	80800017 	ldw	r2,0(r16)
    b59c:	80c00117 	ldw	r3,4(r16)
    b5a0:	dfc00117 	ldw	ra,4(sp)
    b5a4:	dc000017 	ldw	r16,0(sp)
    b5a8:	dec00204 	addi	sp,sp,8
    b5ac:	f800283a 	ret

0000b5b0 <__copybits>:
    b5b0:	297fffc4 	addi	r5,r5,-1
    b5b4:	280fd17a 	srai	r7,r5,5
    b5b8:	30c00417 	ldw	r3,16(r6)
    b5bc:	30800504 	addi	r2,r6,20
    b5c0:	39c00044 	addi	r7,r7,1
    b5c4:	18c7883a 	add	r3,r3,r3
    b5c8:	39cf883a 	add	r7,r7,r7
    b5cc:	18c7883a 	add	r3,r3,r3
    b5d0:	39cf883a 	add	r7,r7,r7
    b5d4:	10c7883a 	add	r3,r2,r3
    b5d8:	21cf883a 	add	r7,r4,r7
    b5dc:	10c00d2e 	bgeu	r2,r3,b614 <__copybits+0x64>
    b5e0:	200b883a 	mov	r5,r4
    b5e4:	12000017 	ldw	r8,0(r2)
    b5e8:	29400104 	addi	r5,r5,4
    b5ec:	10800104 	addi	r2,r2,4
    b5f0:	2a3fff15 	stw	r8,-4(r5)
    b5f4:	10fffb36 	bltu	r2,r3,b5e4 <__alt_data_end+0xf800b5e4>
    b5f8:	1985c83a 	sub	r2,r3,r6
    b5fc:	10bffac4 	addi	r2,r2,-21
    b600:	1004d0ba 	srli	r2,r2,2
    b604:	10800044 	addi	r2,r2,1
    b608:	1085883a 	add	r2,r2,r2
    b60c:	1085883a 	add	r2,r2,r2
    b610:	2089883a 	add	r4,r4,r2
    b614:	21c0032e 	bgeu	r4,r7,b624 <__copybits+0x74>
    b618:	20000015 	stw	zero,0(r4)
    b61c:	21000104 	addi	r4,r4,4
    b620:	21fffd36 	bltu	r4,r7,b618 <__alt_data_end+0xf800b618>
    b624:	f800283a 	ret

0000b628 <__any_on>:
    b628:	20c00417 	ldw	r3,16(r4)
    b62c:	2805d17a 	srai	r2,r5,5
    b630:	21000504 	addi	r4,r4,20
    b634:	18800d0e 	bge	r3,r2,b66c <__any_on+0x44>
    b638:	18c7883a 	add	r3,r3,r3
    b63c:	18c7883a 	add	r3,r3,r3
    b640:	20c7883a 	add	r3,r4,r3
    b644:	20c0192e 	bgeu	r4,r3,b6ac <__any_on+0x84>
    b648:	18bfff17 	ldw	r2,-4(r3)
    b64c:	18ffff04 	addi	r3,r3,-4
    b650:	1000041e 	bne	r2,zero,b664 <__any_on+0x3c>
    b654:	20c0142e 	bgeu	r4,r3,b6a8 <__any_on+0x80>
    b658:	18ffff04 	addi	r3,r3,-4
    b65c:	19400017 	ldw	r5,0(r3)
    b660:	283ffc26 	beq	r5,zero,b654 <__alt_data_end+0xf800b654>
    b664:	00800044 	movi	r2,1
    b668:	f800283a 	ret
    b66c:	10c00a0e 	bge	r2,r3,b698 <__any_on+0x70>
    b670:	1085883a 	add	r2,r2,r2
    b674:	1085883a 	add	r2,r2,r2
    b678:	294007cc 	andi	r5,r5,31
    b67c:	2087883a 	add	r3,r4,r2
    b680:	283ff026 	beq	r5,zero,b644 <__alt_data_end+0xf800b644>
    b684:	19800017 	ldw	r6,0(r3)
    b688:	3144d83a 	srl	r2,r6,r5
    b68c:	114a983a 	sll	r5,r2,r5
    b690:	317ff41e 	bne	r6,r5,b664 <__alt_data_end+0xf800b664>
    b694:	003feb06 	br	b644 <__alt_data_end+0xf800b644>
    b698:	1085883a 	add	r2,r2,r2
    b69c:	1085883a 	add	r2,r2,r2
    b6a0:	2087883a 	add	r3,r4,r2
    b6a4:	003fe706 	br	b644 <__alt_data_end+0xf800b644>
    b6a8:	f800283a 	ret
    b6ac:	0005883a 	mov	r2,zero
    b6b0:	f800283a 	ret

0000b6b4 <_read_r>:
    b6b4:	defffd04 	addi	sp,sp,-12
    b6b8:	2805883a 	mov	r2,r5
    b6bc:	dc000015 	stw	r16,0(sp)
    b6c0:	040000b4 	movhi	r16,2
    b6c4:	dc400115 	stw	r17,4(sp)
    b6c8:	300b883a 	mov	r5,r6
    b6cc:	84274604 	addi	r16,r16,-25320
    b6d0:	2023883a 	mov	r17,r4
    b6d4:	380d883a 	mov	r6,r7
    b6d8:	1009883a 	mov	r4,r2
    b6dc:	dfc00215 	stw	ra,8(sp)
    b6e0:	80000015 	stw	zero,0(r16)
    b6e4:	00130240 	call	13024 <read>
    b6e8:	00ffffc4 	movi	r3,-1
    b6ec:	10c00526 	beq	r2,r3,b704 <_read_r+0x50>
    b6f0:	dfc00217 	ldw	ra,8(sp)
    b6f4:	dc400117 	ldw	r17,4(sp)
    b6f8:	dc000017 	ldw	r16,0(sp)
    b6fc:	dec00304 	addi	sp,sp,12
    b700:	f800283a 	ret
    b704:	80c00017 	ldw	r3,0(r16)
    b708:	183ff926 	beq	r3,zero,b6f0 <__alt_data_end+0xf800b6f0>
    b70c:	88c00015 	stw	r3,0(r17)
    b710:	003ff706 	br	b6f0 <__alt_data_end+0xf800b6f0>

0000b714 <_realloc_r>:
    b714:	defff604 	addi	sp,sp,-40
    b718:	dc800215 	stw	r18,8(sp)
    b71c:	dfc00915 	stw	ra,36(sp)
    b720:	df000815 	stw	fp,32(sp)
    b724:	ddc00715 	stw	r23,28(sp)
    b728:	dd800615 	stw	r22,24(sp)
    b72c:	dd400515 	stw	r21,20(sp)
    b730:	dd000415 	stw	r20,16(sp)
    b734:	dcc00315 	stw	r19,12(sp)
    b738:	dc400115 	stw	r17,4(sp)
    b73c:	dc000015 	stw	r16,0(sp)
    b740:	3025883a 	mov	r18,r6
    b744:	2800b726 	beq	r5,zero,ba24 <_realloc_r+0x310>
    b748:	282b883a 	mov	r21,r5
    b74c:	2029883a 	mov	r20,r4
    b750:	0012d1c0 	call	12d1c <__malloc_lock>
    b754:	a8bfff17 	ldw	r2,-4(r21)
    b758:	043fff04 	movi	r16,-4
    b75c:	90c002c4 	addi	r3,r18,11
    b760:	01000584 	movi	r4,22
    b764:	acfffe04 	addi	r19,r21,-8
    b768:	1420703a 	and	r16,r2,r16
    b76c:	20c0332e 	bgeu	r4,r3,b83c <_realloc_r+0x128>
    b770:	047ffe04 	movi	r17,-8
    b774:	1c62703a 	and	r17,r3,r17
    b778:	8807883a 	mov	r3,r17
    b77c:	88005816 	blt	r17,zero,b8e0 <_realloc_r+0x1cc>
    b780:	8c805736 	bltu	r17,r18,b8e0 <_realloc_r+0x1cc>
    b784:	80c0300e 	bge	r16,r3,b848 <_realloc_r+0x134>
    b788:	07000074 	movhi	fp,1
    b78c:	e71a2b04 	addi	fp,fp,26796
    b790:	e1c00217 	ldw	r7,8(fp)
    b794:	9c09883a 	add	r4,r19,r16
    b798:	22000117 	ldw	r8,4(r4)
    b79c:	21c06326 	beq	r4,r7,b92c <_realloc_r+0x218>
    b7a0:	017fff84 	movi	r5,-2
    b7a4:	414a703a 	and	r5,r8,r5
    b7a8:	214b883a 	add	r5,r4,r5
    b7ac:	29800117 	ldw	r6,4(r5)
    b7b0:	3180004c 	andi	r6,r6,1
    b7b4:	30003f26 	beq	r6,zero,b8b4 <_realloc_r+0x1a0>
    b7b8:	1080004c 	andi	r2,r2,1
    b7bc:	10008326 	beq	r2,zero,b9cc <_realloc_r+0x2b8>
    b7c0:	900b883a 	mov	r5,r18
    b7c4:	a009883a 	mov	r4,r20
    b7c8:	00029940 	call	2994 <_malloc_r>
    b7cc:	1025883a 	mov	r18,r2
    b7d0:	10011e26 	beq	r2,zero,bc4c <_realloc_r+0x538>
    b7d4:	a93fff17 	ldw	r4,-4(r21)
    b7d8:	10fffe04 	addi	r3,r2,-8
    b7dc:	00bfff84 	movi	r2,-2
    b7e0:	2084703a 	and	r2,r4,r2
    b7e4:	9885883a 	add	r2,r19,r2
    b7e8:	1880ee26 	beq	r3,r2,bba4 <_realloc_r+0x490>
    b7ec:	81bfff04 	addi	r6,r16,-4
    b7f0:	00800904 	movi	r2,36
    b7f4:	1180b836 	bltu	r2,r6,bad8 <_realloc_r+0x3c4>
    b7f8:	00c004c4 	movi	r3,19
    b7fc:	19809636 	bltu	r3,r6,ba58 <_realloc_r+0x344>
    b800:	9005883a 	mov	r2,r18
    b804:	a807883a 	mov	r3,r21
    b808:	19000017 	ldw	r4,0(r3)
    b80c:	11000015 	stw	r4,0(r2)
    b810:	19000117 	ldw	r4,4(r3)
    b814:	11000115 	stw	r4,4(r2)
    b818:	18c00217 	ldw	r3,8(r3)
    b81c:	10c00215 	stw	r3,8(r2)
    b820:	a80b883a 	mov	r5,r21
    b824:	a009883a 	mov	r4,r20
    b828:	0001d540 	call	1d54 <_free_r>
    b82c:	a009883a 	mov	r4,r20
    b830:	0012d400 	call	12d40 <__malloc_unlock>
    b834:	9005883a 	mov	r2,r18
    b838:	00001206 	br	b884 <_realloc_r+0x170>
    b83c:	00c00404 	movi	r3,16
    b840:	1823883a 	mov	r17,r3
    b844:	003fce06 	br	b780 <__alt_data_end+0xf800b780>
    b848:	a825883a 	mov	r18,r21
    b84c:	8445c83a 	sub	r2,r16,r17
    b850:	00c003c4 	movi	r3,15
    b854:	18802636 	bltu	r3,r2,b8f0 <_realloc_r+0x1dc>
    b858:	99800117 	ldw	r6,4(r19)
    b85c:	9c07883a 	add	r3,r19,r16
    b860:	3180004c 	andi	r6,r6,1
    b864:	3420b03a 	or	r16,r6,r16
    b868:	9c000115 	stw	r16,4(r19)
    b86c:	18800117 	ldw	r2,4(r3)
    b870:	10800054 	ori	r2,r2,1
    b874:	18800115 	stw	r2,4(r3)
    b878:	a009883a 	mov	r4,r20
    b87c:	0012d400 	call	12d40 <__malloc_unlock>
    b880:	9005883a 	mov	r2,r18
    b884:	dfc00917 	ldw	ra,36(sp)
    b888:	df000817 	ldw	fp,32(sp)
    b88c:	ddc00717 	ldw	r23,28(sp)
    b890:	dd800617 	ldw	r22,24(sp)
    b894:	dd400517 	ldw	r21,20(sp)
    b898:	dd000417 	ldw	r20,16(sp)
    b89c:	dcc00317 	ldw	r19,12(sp)
    b8a0:	dc800217 	ldw	r18,8(sp)
    b8a4:	dc400117 	ldw	r17,4(sp)
    b8a8:	dc000017 	ldw	r16,0(sp)
    b8ac:	dec00a04 	addi	sp,sp,40
    b8b0:	f800283a 	ret
    b8b4:	017fff04 	movi	r5,-4
    b8b8:	414a703a 	and	r5,r8,r5
    b8bc:	814d883a 	add	r6,r16,r5
    b8c0:	30c01f16 	blt	r6,r3,b940 <_realloc_r+0x22c>
    b8c4:	20800317 	ldw	r2,12(r4)
    b8c8:	20c00217 	ldw	r3,8(r4)
    b8cc:	a825883a 	mov	r18,r21
    b8d0:	3021883a 	mov	r16,r6
    b8d4:	18800315 	stw	r2,12(r3)
    b8d8:	10c00215 	stw	r3,8(r2)
    b8dc:	003fdb06 	br	b84c <__alt_data_end+0xf800b84c>
    b8e0:	00800304 	movi	r2,12
    b8e4:	a0800015 	stw	r2,0(r20)
    b8e8:	0005883a 	mov	r2,zero
    b8ec:	003fe506 	br	b884 <__alt_data_end+0xf800b884>
    b8f0:	98c00117 	ldw	r3,4(r19)
    b8f4:	9c4b883a 	add	r5,r19,r17
    b8f8:	11000054 	ori	r4,r2,1
    b8fc:	18c0004c 	andi	r3,r3,1
    b900:	1c62b03a 	or	r17,r3,r17
    b904:	9c400115 	stw	r17,4(r19)
    b908:	29000115 	stw	r4,4(r5)
    b90c:	2885883a 	add	r2,r5,r2
    b910:	10c00117 	ldw	r3,4(r2)
    b914:	29400204 	addi	r5,r5,8
    b918:	a009883a 	mov	r4,r20
    b91c:	18c00054 	ori	r3,r3,1
    b920:	10c00115 	stw	r3,4(r2)
    b924:	0001d540 	call	1d54 <_free_r>
    b928:	003fd306 	br	b878 <__alt_data_end+0xf800b878>
    b92c:	017fff04 	movi	r5,-4
    b930:	414a703a 	and	r5,r8,r5
    b934:	89800404 	addi	r6,r17,16
    b938:	8151883a 	add	r8,r16,r5
    b93c:	4180590e 	bge	r8,r6,baa4 <_realloc_r+0x390>
    b940:	1080004c 	andi	r2,r2,1
    b944:	103f9e1e 	bne	r2,zero,b7c0 <__alt_data_end+0xf800b7c0>
    b948:	adbffe17 	ldw	r22,-8(r21)
    b94c:	00bfff04 	movi	r2,-4
    b950:	9dadc83a 	sub	r22,r19,r22
    b954:	b1800117 	ldw	r6,4(r22)
    b958:	3084703a 	and	r2,r6,r2
    b95c:	20002026 	beq	r4,zero,b9e0 <_realloc_r+0x2cc>
    b960:	80af883a 	add	r23,r16,r2
    b964:	b96f883a 	add	r23,r23,r5
    b968:	21c05f26 	beq	r4,r7,bae8 <_realloc_r+0x3d4>
    b96c:	b8c01c16 	blt	r23,r3,b9e0 <_realloc_r+0x2cc>
    b970:	20800317 	ldw	r2,12(r4)
    b974:	20c00217 	ldw	r3,8(r4)
    b978:	81bfff04 	addi	r6,r16,-4
    b97c:	01000904 	movi	r4,36
    b980:	18800315 	stw	r2,12(r3)
    b984:	10c00215 	stw	r3,8(r2)
    b988:	b0c00217 	ldw	r3,8(r22)
    b98c:	b0800317 	ldw	r2,12(r22)
    b990:	b4800204 	addi	r18,r22,8
    b994:	18800315 	stw	r2,12(r3)
    b998:	10c00215 	stw	r3,8(r2)
    b99c:	21801b36 	bltu	r4,r6,ba0c <_realloc_r+0x2f8>
    b9a0:	008004c4 	movi	r2,19
    b9a4:	1180352e 	bgeu	r2,r6,ba7c <_realloc_r+0x368>
    b9a8:	a8800017 	ldw	r2,0(r21)
    b9ac:	b0800215 	stw	r2,8(r22)
    b9b0:	a8800117 	ldw	r2,4(r21)
    b9b4:	b0800315 	stw	r2,12(r22)
    b9b8:	008006c4 	movi	r2,27
    b9bc:	11807f36 	bltu	r2,r6,bbbc <_realloc_r+0x4a8>
    b9c0:	b0800404 	addi	r2,r22,16
    b9c4:	ad400204 	addi	r21,r21,8
    b9c8:	00002d06 	br	ba80 <_realloc_r+0x36c>
    b9cc:	adbffe17 	ldw	r22,-8(r21)
    b9d0:	00bfff04 	movi	r2,-4
    b9d4:	9dadc83a 	sub	r22,r19,r22
    b9d8:	b1000117 	ldw	r4,4(r22)
    b9dc:	2084703a 	and	r2,r4,r2
    b9e0:	b03f7726 	beq	r22,zero,b7c0 <__alt_data_end+0xf800b7c0>
    b9e4:	80af883a 	add	r23,r16,r2
    b9e8:	b8ff7516 	blt	r23,r3,b7c0 <__alt_data_end+0xf800b7c0>
    b9ec:	b0800317 	ldw	r2,12(r22)
    b9f0:	b0c00217 	ldw	r3,8(r22)
    b9f4:	81bfff04 	addi	r6,r16,-4
    b9f8:	01000904 	movi	r4,36
    b9fc:	18800315 	stw	r2,12(r3)
    ba00:	10c00215 	stw	r3,8(r2)
    ba04:	b4800204 	addi	r18,r22,8
    ba08:	21bfe52e 	bgeu	r4,r6,b9a0 <__alt_data_end+0xf800b9a0>
    ba0c:	a80b883a 	mov	r5,r21
    ba10:	9009883a 	mov	r4,r18
    ba14:	000a4a00 	call	a4a0 <memmove>
    ba18:	b821883a 	mov	r16,r23
    ba1c:	b027883a 	mov	r19,r22
    ba20:	003f8a06 	br	b84c <__alt_data_end+0xf800b84c>
    ba24:	300b883a 	mov	r5,r6
    ba28:	dfc00917 	ldw	ra,36(sp)
    ba2c:	df000817 	ldw	fp,32(sp)
    ba30:	ddc00717 	ldw	r23,28(sp)
    ba34:	dd800617 	ldw	r22,24(sp)
    ba38:	dd400517 	ldw	r21,20(sp)
    ba3c:	dd000417 	ldw	r20,16(sp)
    ba40:	dcc00317 	ldw	r19,12(sp)
    ba44:	dc800217 	ldw	r18,8(sp)
    ba48:	dc400117 	ldw	r17,4(sp)
    ba4c:	dc000017 	ldw	r16,0(sp)
    ba50:	dec00a04 	addi	sp,sp,40
    ba54:	00029941 	jmpi	2994 <_malloc_r>
    ba58:	a8c00017 	ldw	r3,0(r21)
    ba5c:	90c00015 	stw	r3,0(r18)
    ba60:	a8c00117 	ldw	r3,4(r21)
    ba64:	90c00115 	stw	r3,4(r18)
    ba68:	00c006c4 	movi	r3,27
    ba6c:	19804536 	bltu	r3,r6,bb84 <_realloc_r+0x470>
    ba70:	90800204 	addi	r2,r18,8
    ba74:	a8c00204 	addi	r3,r21,8
    ba78:	003f6306 	br	b808 <__alt_data_end+0xf800b808>
    ba7c:	9005883a 	mov	r2,r18
    ba80:	a8c00017 	ldw	r3,0(r21)
    ba84:	b821883a 	mov	r16,r23
    ba88:	b027883a 	mov	r19,r22
    ba8c:	10c00015 	stw	r3,0(r2)
    ba90:	a8c00117 	ldw	r3,4(r21)
    ba94:	10c00115 	stw	r3,4(r2)
    ba98:	a8c00217 	ldw	r3,8(r21)
    ba9c:	10c00215 	stw	r3,8(r2)
    baa0:	003f6a06 	br	b84c <__alt_data_end+0xf800b84c>
    baa4:	9c67883a 	add	r19,r19,r17
    baa8:	4445c83a 	sub	r2,r8,r17
    baac:	e4c00215 	stw	r19,8(fp)
    bab0:	10800054 	ori	r2,r2,1
    bab4:	98800115 	stw	r2,4(r19)
    bab8:	a8bfff17 	ldw	r2,-4(r21)
    babc:	a009883a 	mov	r4,r20
    bac0:	1080004c 	andi	r2,r2,1
    bac4:	1462b03a 	or	r17,r2,r17
    bac8:	ac7fff15 	stw	r17,-4(r21)
    bacc:	0012d400 	call	12d40 <__malloc_unlock>
    bad0:	a805883a 	mov	r2,r21
    bad4:	003f6b06 	br	b884 <__alt_data_end+0xf800b884>
    bad8:	a80b883a 	mov	r5,r21
    badc:	9009883a 	mov	r4,r18
    bae0:	000a4a00 	call	a4a0 <memmove>
    bae4:	003f4e06 	br	b820 <__alt_data_end+0xf800b820>
    bae8:	89000404 	addi	r4,r17,16
    baec:	b93fbc16 	blt	r23,r4,b9e0 <__alt_data_end+0xf800b9e0>
    baf0:	b0800317 	ldw	r2,12(r22)
    baf4:	b0c00217 	ldw	r3,8(r22)
    baf8:	81bfff04 	addi	r6,r16,-4
    bafc:	01000904 	movi	r4,36
    bb00:	18800315 	stw	r2,12(r3)
    bb04:	10c00215 	stw	r3,8(r2)
    bb08:	b4800204 	addi	r18,r22,8
    bb0c:	21804336 	bltu	r4,r6,bc1c <_realloc_r+0x508>
    bb10:	008004c4 	movi	r2,19
    bb14:	11803f2e 	bgeu	r2,r6,bc14 <_realloc_r+0x500>
    bb18:	a8800017 	ldw	r2,0(r21)
    bb1c:	b0800215 	stw	r2,8(r22)
    bb20:	a8800117 	ldw	r2,4(r21)
    bb24:	b0800315 	stw	r2,12(r22)
    bb28:	008006c4 	movi	r2,27
    bb2c:	11803f36 	bltu	r2,r6,bc2c <_realloc_r+0x518>
    bb30:	b0800404 	addi	r2,r22,16
    bb34:	ad400204 	addi	r21,r21,8
    bb38:	a8c00017 	ldw	r3,0(r21)
    bb3c:	10c00015 	stw	r3,0(r2)
    bb40:	a8c00117 	ldw	r3,4(r21)
    bb44:	10c00115 	stw	r3,4(r2)
    bb48:	a8c00217 	ldw	r3,8(r21)
    bb4c:	10c00215 	stw	r3,8(r2)
    bb50:	b447883a 	add	r3,r22,r17
    bb54:	bc45c83a 	sub	r2,r23,r17
    bb58:	e0c00215 	stw	r3,8(fp)
    bb5c:	10800054 	ori	r2,r2,1
    bb60:	18800115 	stw	r2,4(r3)
    bb64:	b0800117 	ldw	r2,4(r22)
    bb68:	a009883a 	mov	r4,r20
    bb6c:	1080004c 	andi	r2,r2,1
    bb70:	1462b03a 	or	r17,r2,r17
    bb74:	b4400115 	stw	r17,4(r22)
    bb78:	0012d400 	call	12d40 <__malloc_unlock>
    bb7c:	9005883a 	mov	r2,r18
    bb80:	003f4006 	br	b884 <__alt_data_end+0xf800b884>
    bb84:	a8c00217 	ldw	r3,8(r21)
    bb88:	90c00215 	stw	r3,8(r18)
    bb8c:	a8c00317 	ldw	r3,12(r21)
    bb90:	90c00315 	stw	r3,12(r18)
    bb94:	30801126 	beq	r6,r2,bbdc <_realloc_r+0x4c8>
    bb98:	90800404 	addi	r2,r18,16
    bb9c:	a8c00404 	addi	r3,r21,16
    bba0:	003f1906 	br	b808 <__alt_data_end+0xf800b808>
    bba4:	90ffff17 	ldw	r3,-4(r18)
    bba8:	00bfff04 	movi	r2,-4
    bbac:	a825883a 	mov	r18,r21
    bbb0:	1884703a 	and	r2,r3,r2
    bbb4:	80a1883a 	add	r16,r16,r2
    bbb8:	003f2406 	br	b84c <__alt_data_end+0xf800b84c>
    bbbc:	a8800217 	ldw	r2,8(r21)
    bbc0:	b0800415 	stw	r2,16(r22)
    bbc4:	a8800317 	ldw	r2,12(r21)
    bbc8:	b0800515 	stw	r2,20(r22)
    bbcc:	31000a26 	beq	r6,r4,bbf8 <_realloc_r+0x4e4>
    bbd0:	b0800604 	addi	r2,r22,24
    bbd4:	ad400404 	addi	r21,r21,16
    bbd8:	003fa906 	br	ba80 <__alt_data_end+0xf800ba80>
    bbdc:	a9000417 	ldw	r4,16(r21)
    bbe0:	90800604 	addi	r2,r18,24
    bbe4:	a8c00604 	addi	r3,r21,24
    bbe8:	91000415 	stw	r4,16(r18)
    bbec:	a9000517 	ldw	r4,20(r21)
    bbf0:	91000515 	stw	r4,20(r18)
    bbf4:	003f0406 	br	b808 <__alt_data_end+0xf800b808>
    bbf8:	a8c00417 	ldw	r3,16(r21)
    bbfc:	ad400604 	addi	r21,r21,24
    bc00:	b0800804 	addi	r2,r22,32
    bc04:	b0c00615 	stw	r3,24(r22)
    bc08:	a8ffff17 	ldw	r3,-4(r21)
    bc0c:	b0c00715 	stw	r3,28(r22)
    bc10:	003f9b06 	br	ba80 <__alt_data_end+0xf800ba80>
    bc14:	9005883a 	mov	r2,r18
    bc18:	003fc706 	br	bb38 <__alt_data_end+0xf800bb38>
    bc1c:	a80b883a 	mov	r5,r21
    bc20:	9009883a 	mov	r4,r18
    bc24:	000a4a00 	call	a4a0 <memmove>
    bc28:	003fc906 	br	bb50 <__alt_data_end+0xf800bb50>
    bc2c:	a8800217 	ldw	r2,8(r21)
    bc30:	b0800415 	stw	r2,16(r22)
    bc34:	a8800317 	ldw	r2,12(r21)
    bc38:	b0800515 	stw	r2,20(r22)
    bc3c:	31000726 	beq	r6,r4,bc5c <_realloc_r+0x548>
    bc40:	b0800604 	addi	r2,r22,24
    bc44:	ad400404 	addi	r21,r21,16
    bc48:	003fbb06 	br	bb38 <__alt_data_end+0xf800bb38>
    bc4c:	a009883a 	mov	r4,r20
    bc50:	0012d400 	call	12d40 <__malloc_unlock>
    bc54:	0005883a 	mov	r2,zero
    bc58:	003f0a06 	br	b884 <__alt_data_end+0xf800b884>
    bc5c:	a8c00417 	ldw	r3,16(r21)
    bc60:	ad400604 	addi	r21,r21,24
    bc64:	b0800804 	addi	r2,r22,32
    bc68:	b0c00615 	stw	r3,24(r22)
    bc6c:	a8ffff17 	ldw	r3,-4(r21)
    bc70:	b0c00715 	stw	r3,28(r22)
    bc74:	003fb006 	br	bb38 <__alt_data_end+0xf800bb38>

0000bc78 <__fpclassifyd>:
    bc78:	00a00034 	movhi	r2,32768
    bc7c:	10bfffc4 	addi	r2,r2,-1
    bc80:	2884703a 	and	r2,r5,r2
    bc84:	10000726 	beq	r2,zero,bca4 <__fpclassifyd+0x2c>
    bc88:	00fffc34 	movhi	r3,65520
    bc8c:	019ff834 	movhi	r6,32736
    bc90:	28c7883a 	add	r3,r5,r3
    bc94:	31bfffc4 	addi	r6,r6,-1
    bc98:	30c00536 	bltu	r6,r3,bcb0 <__fpclassifyd+0x38>
    bc9c:	00800104 	movi	r2,4
    bca0:	f800283a 	ret
    bca4:	2000021e 	bne	r4,zero,bcb0 <__fpclassifyd+0x38>
    bca8:	00800084 	movi	r2,2
    bcac:	f800283a 	ret
    bcb0:	00dffc34 	movhi	r3,32752
    bcb4:	019ff834 	movhi	r6,32736
    bcb8:	28cb883a 	add	r5,r5,r3
    bcbc:	31bfffc4 	addi	r6,r6,-1
    bcc0:	317ff62e 	bgeu	r6,r5,bc9c <__alt_data_end+0xf800bc9c>
    bcc4:	01400434 	movhi	r5,16
    bcc8:	297fffc4 	addi	r5,r5,-1
    bccc:	28800236 	bltu	r5,r2,bcd8 <__fpclassifyd+0x60>
    bcd0:	008000c4 	movi	r2,3
    bcd4:	f800283a 	ret
    bcd8:	10c00226 	beq	r2,r3,bce4 <__fpclassifyd+0x6c>
    bcdc:	0005883a 	mov	r2,zero
    bce0:	f800283a 	ret
    bce4:	2005003a 	cmpeq	r2,r4,zero
    bce8:	f800283a 	ret

0000bcec <strcmp>:
    bcec:	2144b03a 	or	r2,r4,r5
    bcf0:	108000cc 	andi	r2,r2,3
    bcf4:	1000171e 	bne	r2,zero,bd54 <strcmp+0x68>
    bcf8:	20800017 	ldw	r2,0(r4)
    bcfc:	28c00017 	ldw	r3,0(r5)
    bd00:	10c0141e 	bne	r2,r3,bd54 <strcmp+0x68>
    bd04:	027fbff4 	movhi	r9,65279
    bd08:	4a7fbfc4 	addi	r9,r9,-257
    bd0c:	0086303a 	nor	r3,zero,r2
    bd10:	02202074 	movhi	r8,32897
    bd14:	1245883a 	add	r2,r2,r9
    bd18:	42202004 	addi	r8,r8,-32640
    bd1c:	10c4703a 	and	r2,r2,r3
    bd20:	1204703a 	and	r2,r2,r8
    bd24:	10000226 	beq	r2,zero,bd30 <strcmp+0x44>
    bd28:	00002306 	br	bdb8 <strcmp+0xcc>
    bd2c:	1000221e 	bne	r2,zero,bdb8 <strcmp+0xcc>
    bd30:	21000104 	addi	r4,r4,4
    bd34:	20c00017 	ldw	r3,0(r4)
    bd38:	29400104 	addi	r5,r5,4
    bd3c:	29800017 	ldw	r6,0(r5)
    bd40:	1a4f883a 	add	r7,r3,r9
    bd44:	00c4303a 	nor	r2,zero,r3
    bd48:	3884703a 	and	r2,r7,r2
    bd4c:	1204703a 	and	r2,r2,r8
    bd50:	19bff626 	beq	r3,r6,bd2c <__alt_data_end+0xf800bd2c>
    bd54:	20800003 	ldbu	r2,0(r4)
    bd58:	10c03fcc 	andi	r3,r2,255
    bd5c:	18c0201c 	xori	r3,r3,128
    bd60:	18ffe004 	addi	r3,r3,-128
    bd64:	18000c26 	beq	r3,zero,bd98 <strcmp+0xac>
    bd68:	29800007 	ldb	r6,0(r5)
    bd6c:	19800326 	beq	r3,r6,bd7c <strcmp+0x90>
    bd70:	00001306 	br	bdc0 <strcmp+0xd4>
    bd74:	29800007 	ldb	r6,0(r5)
    bd78:	11800b1e 	bne	r2,r6,bda8 <strcmp+0xbc>
    bd7c:	21000044 	addi	r4,r4,1
    bd80:	20c00003 	ldbu	r3,0(r4)
    bd84:	29400044 	addi	r5,r5,1
    bd88:	18803fcc 	andi	r2,r3,255
    bd8c:	1080201c 	xori	r2,r2,128
    bd90:	10bfe004 	addi	r2,r2,-128
    bd94:	103ff71e 	bne	r2,zero,bd74 <__alt_data_end+0xf800bd74>
    bd98:	0007883a 	mov	r3,zero
    bd9c:	28800003 	ldbu	r2,0(r5)
    bda0:	1885c83a 	sub	r2,r3,r2
    bda4:	f800283a 	ret
    bda8:	28800003 	ldbu	r2,0(r5)
    bdac:	18c03fcc 	andi	r3,r3,255
    bdb0:	1885c83a 	sub	r2,r3,r2
    bdb4:	f800283a 	ret
    bdb8:	0005883a 	mov	r2,zero
    bdbc:	f800283a 	ret
    bdc0:	10c03fcc 	andi	r3,r2,255
    bdc4:	003ff506 	br	bd9c <__alt_data_end+0xf800bd9c>

0000bdc8 <__ssprint_r>:
    bdc8:	30800217 	ldw	r2,8(r6)
    bdcc:	defff604 	addi	sp,sp,-40
    bdd0:	dc800215 	stw	r18,8(sp)
    bdd4:	dfc00915 	stw	ra,36(sp)
    bdd8:	df000815 	stw	fp,32(sp)
    bddc:	ddc00715 	stw	r23,28(sp)
    bde0:	dd800615 	stw	r22,24(sp)
    bde4:	dd400515 	stw	r21,20(sp)
    bde8:	dd000415 	stw	r20,16(sp)
    bdec:	dcc00315 	stw	r19,12(sp)
    bdf0:	dc400115 	stw	r17,4(sp)
    bdf4:	dc000015 	stw	r16,0(sp)
    bdf8:	3025883a 	mov	r18,r6
    bdfc:	10005826 	beq	r2,zero,bf60 <__ssprint_r+0x198>
    be00:	2027883a 	mov	r19,r4
    be04:	35c00017 	ldw	r23,0(r6)
    be08:	29000017 	ldw	r4,0(r5)
    be0c:	28800217 	ldw	r2,8(r5)
    be10:	2823883a 	mov	r17,r5
    be14:	0039883a 	mov	fp,zero
    be18:	0021883a 	mov	r16,zero
    be1c:	80003926 	beq	r16,zero,bf04 <__ssprint_r+0x13c>
    be20:	102b883a 	mov	r21,r2
    be24:	102d883a 	mov	r22,r2
    be28:	80803a36 	bltu	r16,r2,bf14 <__ssprint_r+0x14c>
    be2c:	88c0030b 	ldhu	r3,12(r17)
    be30:	1881200c 	andi	r2,r3,1152
    be34:	10002626 	beq	r2,zero,bed0 <__ssprint_r+0x108>
    be38:	88800517 	ldw	r2,20(r17)
    be3c:	89400417 	ldw	r5,16(r17)
    be40:	81800044 	addi	r6,r16,1
    be44:	108f883a 	add	r7,r2,r2
    be48:	3885883a 	add	r2,r7,r2
    be4c:	100ed7fa 	srli	r7,r2,31
    be50:	216dc83a 	sub	r22,r4,r5
    be54:	3589883a 	add	r4,r6,r22
    be58:	3885883a 	add	r2,r7,r2
    be5c:	102bd07a 	srai	r21,r2,1
    be60:	a80d883a 	mov	r6,r21
    be64:	a900022e 	bgeu	r21,r4,be70 <__ssprint_r+0xa8>
    be68:	202b883a 	mov	r21,r4
    be6c:	200d883a 	mov	r6,r4
    be70:	18c1000c 	andi	r3,r3,1024
    be74:	18002a26 	beq	r3,zero,bf20 <__ssprint_r+0x158>
    be78:	300b883a 	mov	r5,r6
    be7c:	9809883a 	mov	r4,r19
    be80:	00029940 	call	2994 <_malloc_r>
    be84:	1029883a 	mov	r20,r2
    be88:	10002c26 	beq	r2,zero,bf3c <__ssprint_r+0x174>
    be8c:	89400417 	ldw	r5,16(r17)
    be90:	b00d883a 	mov	r6,r22
    be94:	1009883a 	mov	r4,r2
    be98:	000a3580 	call	a358 <memcpy>
    be9c:	8880030b 	ldhu	r2,12(r17)
    bea0:	00fedfc4 	movi	r3,-1153
    bea4:	10c4703a 	and	r2,r2,r3
    bea8:	10802014 	ori	r2,r2,128
    beac:	8880030d 	sth	r2,12(r17)
    beb0:	a589883a 	add	r4,r20,r22
    beb4:	adadc83a 	sub	r22,r21,r22
    beb8:	8d400515 	stw	r21,20(r17)
    bebc:	8d800215 	stw	r22,8(r17)
    bec0:	8d000415 	stw	r20,16(r17)
    bec4:	89000015 	stw	r4,0(r17)
    bec8:	802b883a 	mov	r21,r16
    becc:	802d883a 	mov	r22,r16
    bed0:	b00d883a 	mov	r6,r22
    bed4:	e00b883a 	mov	r5,fp
    bed8:	000a4a00 	call	a4a0 <memmove>
    bedc:	88800217 	ldw	r2,8(r17)
    bee0:	89000017 	ldw	r4,0(r17)
    bee4:	90c00217 	ldw	r3,8(r18)
    bee8:	1545c83a 	sub	r2,r2,r21
    beec:	2589883a 	add	r4,r4,r22
    bef0:	88800215 	stw	r2,8(r17)
    bef4:	89000015 	stw	r4,0(r17)
    bef8:	1c21c83a 	sub	r16,r3,r16
    befc:	94000215 	stw	r16,8(r18)
    bf00:	80001726 	beq	r16,zero,bf60 <__ssprint_r+0x198>
    bf04:	bf000017 	ldw	fp,0(r23)
    bf08:	bc000117 	ldw	r16,4(r23)
    bf0c:	bdc00204 	addi	r23,r23,8
    bf10:	003fc206 	br	be1c <__alt_data_end+0xf800be1c>
    bf14:	802b883a 	mov	r21,r16
    bf18:	802d883a 	mov	r22,r16
    bf1c:	003fec06 	br	bed0 <__alt_data_end+0xf800bed0>
    bf20:	9809883a 	mov	r4,r19
    bf24:	000b7140 	call	b714 <_realloc_r>
    bf28:	1029883a 	mov	r20,r2
    bf2c:	103fe01e 	bne	r2,zero,beb0 <__alt_data_end+0xf800beb0>
    bf30:	89400417 	ldw	r5,16(r17)
    bf34:	9809883a 	mov	r4,r19
    bf38:	0001d540 	call	1d54 <_free_r>
    bf3c:	88c0030b 	ldhu	r3,12(r17)
    bf40:	00800304 	movi	r2,12
    bf44:	98800015 	stw	r2,0(r19)
    bf48:	18c01014 	ori	r3,r3,64
    bf4c:	88c0030d 	sth	r3,12(r17)
    bf50:	00bfffc4 	movi	r2,-1
    bf54:	90000215 	stw	zero,8(r18)
    bf58:	90000115 	stw	zero,4(r18)
    bf5c:	00000206 	br	bf68 <__ssprint_r+0x1a0>
    bf60:	90000115 	stw	zero,4(r18)
    bf64:	0005883a 	mov	r2,zero
    bf68:	dfc00917 	ldw	ra,36(sp)
    bf6c:	df000817 	ldw	fp,32(sp)
    bf70:	ddc00717 	ldw	r23,28(sp)
    bf74:	dd800617 	ldw	r22,24(sp)
    bf78:	dd400517 	ldw	r21,20(sp)
    bf7c:	dd000417 	ldw	r20,16(sp)
    bf80:	dcc00317 	ldw	r19,12(sp)
    bf84:	dc800217 	ldw	r18,8(sp)
    bf88:	dc400117 	ldw	r17,4(sp)
    bf8c:	dc000017 	ldw	r16,0(sp)
    bf90:	dec00a04 	addi	sp,sp,40
    bf94:	f800283a 	ret

0000bf98 <___svfiprintf_internal_r>:
    bf98:	2880030b 	ldhu	r2,12(r5)
    bf9c:	deffc804 	addi	sp,sp,-224
    bfa0:	dcc03115 	stw	r19,196(sp)
    bfa4:	dfc03715 	stw	ra,220(sp)
    bfa8:	df003615 	stw	fp,216(sp)
    bfac:	ddc03515 	stw	r23,212(sp)
    bfb0:	dd803415 	stw	r22,208(sp)
    bfb4:	dd403315 	stw	r21,204(sp)
    bfb8:	dd003215 	stw	r20,200(sp)
    bfbc:	dc803015 	stw	r18,192(sp)
    bfc0:	dc402f15 	stw	r17,188(sp)
    bfc4:	dc002e15 	stw	r16,184(sp)
    bfc8:	d9402315 	stw	r5,140(sp)
    bfcc:	d9002715 	stw	r4,156(sp)
    bfd0:	1080200c 	andi	r2,r2,128
    bfd4:	d9c02415 	stw	r7,144(sp)
    bfd8:	3027883a 	mov	r19,r6
    bfdc:	10000226 	beq	r2,zero,bfe8 <___svfiprintf_internal_r+0x50>
    bfe0:	28800417 	ldw	r2,16(r5)
    bfe4:	10046d26 	beq	r2,zero,d19c <___svfiprintf_internal_r+0x1204>
    bfe8:	d8801a04 	addi	r2,sp,104
    bfec:	d8c019c4 	addi	r3,sp,103
    bff0:	05800074 	movhi	r22,1
    bff4:	10c9c83a 	sub	r4,r2,r3
    bff8:	b5980e04 	addi	r22,r22,24632
    bffc:	d8801e15 	stw	r2,120(sp)
    c000:	d8c01f15 	stw	r3,124(sp)
    c004:	dec01a15 	stw	sp,104(sp)
    c008:	d8001c15 	stw	zero,112(sp)
    c00c:	d8001b15 	stw	zero,108(sp)
    c010:	d811883a 	mov	r8,sp
    c014:	d8002915 	stw	zero,164(sp)
    c018:	d8002615 	stw	zero,152(sp)
    c01c:	d9002c15 	stw	r4,176(sp)
    c020:	98800007 	ldb	r2,0(r19)
    c024:	10031426 	beq	r2,zero,cc78 <___svfiprintf_internal_r+0xce0>
    c028:	00c00944 	movi	r3,37
    c02c:	9825883a 	mov	r18,r19
    c030:	10c0021e 	bne	r2,r3,c03c <___svfiprintf_internal_r+0xa4>
    c034:	00001406 	br	c088 <___svfiprintf_internal_r+0xf0>
    c038:	10c00326 	beq	r2,r3,c048 <___svfiprintf_internal_r+0xb0>
    c03c:	94800044 	addi	r18,r18,1
    c040:	90800007 	ldb	r2,0(r18)
    c044:	103ffc1e 	bne	r2,zero,c038 <__alt_data_end+0xf800c038>
    c048:	94e1c83a 	sub	r16,r18,r19
    c04c:	80000e26 	beq	r16,zero,c088 <___svfiprintf_internal_r+0xf0>
    c050:	d8c01c17 	ldw	r3,112(sp)
    c054:	d8801b17 	ldw	r2,108(sp)
    c058:	44c00015 	stw	r19,0(r8)
    c05c:	1c07883a 	add	r3,r3,r16
    c060:	10800044 	addi	r2,r2,1
    c064:	d8c01c15 	stw	r3,112(sp)
    c068:	44000115 	stw	r16,4(r8)
    c06c:	d8801b15 	stw	r2,108(sp)
    c070:	00c001c4 	movi	r3,7
    c074:	18835c16 	blt	r3,r2,cde8 <___svfiprintf_internal_r+0xe50>
    c078:	42000204 	addi	r8,r8,8
    c07c:	d9402617 	ldw	r5,152(sp)
    c080:	2c0b883a 	add	r5,r5,r16
    c084:	d9402615 	stw	r5,152(sp)
    c088:	90800007 	ldb	r2,0(r18)
    c08c:	1002fc26 	beq	r2,zero,cc80 <___svfiprintf_internal_r+0xce8>
    c090:	0023883a 	mov	r17,zero
    c094:	00bfffc4 	movi	r2,-1
    c098:	0021883a 	mov	r16,zero
    c09c:	94c00044 	addi	r19,r18,1
    c0a0:	90c00047 	ldb	r3,1(r18)
    c0a4:	dc402105 	stb	r17,132(sp)
    c0a8:	d8001d85 	stb	zero,118(sp)
    c0ac:	002b883a 	mov	r21,zero
    c0b0:	d8802015 	stw	r2,128(sp)
    c0b4:	d8002515 	stw	zero,148(sp)
    c0b8:	04801604 	movi	r18,88
    c0bc:	05000244 	movi	r20,9
    c0c0:	402f883a 	mov	r23,r8
    c0c4:	8023883a 	mov	r17,r16
    c0c8:	9cc00044 	addi	r19,r19,1
    c0cc:	18bff804 	addi	r2,r3,-32
    c0d0:	9081fb36 	bltu	r18,r2,c8c0 <___svfiprintf_internal_r+0x928>
    c0d4:	100490ba 	slli	r2,r2,2
    c0d8:	01000074 	movhi	r4,1
    c0dc:	21303b04 	addi	r4,r4,-16148
    c0e0:	1105883a 	add	r2,r2,r4
    c0e4:	10800017 	ldw	r2,0(r2)
    c0e8:	1000683a 	jmp	r2
    c0ec:	0000c2ec 	andhi	zero,zero,779
    c0f0:	0000c8c0 	call	c8c <main+0x738>
    c0f4:	0000c8c0 	call	c8c <main+0x738>
    c0f8:	0000c2e0 	cmpeqi	zero,zero,779
    c0fc:	0000c8c0 	call	c8c <main+0x738>
    c100:	0000c8c0 	call	c8c <main+0x738>
    c104:	0000c8c0 	call	c8c <main+0x738>
    c108:	0000c8c0 	call	c8c <main+0x738>
    c10c:	0000c8c0 	call	c8c <main+0x738>
    c110:	0000c8c0 	call	c8c <main+0x738>
    c114:	0000c250 	cmplti	zero,zero,777
    c118:	0000c44c 	andi	zero,zero,785
    c11c:	0000c8c0 	call	c8c <main+0x738>
    c120:	0000c278 	rdprs	zero,zero,777
    c124:	0000c8fc 	xorhi	zero,zero,803
    c128:	0000c8c0 	call	c8c <main+0x738>
    c12c:	0000c8f0 	cmpltui	zero,zero,803
    c130:	0000c884 	movi	zero,802
    c134:	0000c884 	movi	zero,802
    c138:	0000c884 	movi	zero,802
    c13c:	0000c884 	movi	zero,802
    c140:	0000c884 	movi	zero,802
    c144:	0000c884 	movi	zero,802
    c148:	0000c884 	movi	zero,802
    c14c:	0000c884 	movi	zero,802
    c150:	0000c884 	movi	zero,802
    c154:	0000c8c0 	call	c8c <main+0x738>
    c158:	0000c8c0 	call	c8c <main+0x738>
    c15c:	0000c8c0 	call	c8c <main+0x738>
    c160:	0000c8c0 	call	c8c <main+0x738>
    c164:	0000c8c0 	call	c8c <main+0x738>
    c168:	0000c8c0 	call	c8c <main+0x738>
    c16c:	0000c8c0 	call	c8c <main+0x738>
    c170:	0000c8c0 	call	c8c <main+0x738>
    c174:	0000c8c0 	call	c8c <main+0x738>
    c178:	0000c8c0 	call	c8c <main+0x738>
    c17c:	0000c808 	cmpgei	zero,zero,800
    c180:	0000c8c0 	call	c8c <main+0x738>
    c184:	0000c8c0 	call	c8c <main+0x738>
    c188:	0000c8c0 	call	c8c <main+0x738>
    c18c:	0000c8c0 	call	c8c <main+0x738>
    c190:	0000c8c0 	call	c8c <main+0x738>
    c194:	0000c8c0 	call	c8c <main+0x738>
    c198:	0000c8c0 	call	c8c <main+0x738>
    c19c:	0000c8c0 	call	c8c <main+0x738>
    c1a0:	0000c8c0 	call	c8c <main+0x738>
    c1a4:	0000c8c0 	call	c8c <main+0x738>
    c1a8:	0000c9b8 	rdprs	zero,zero,806
    c1ac:	0000c8c0 	call	c8c <main+0x738>
    c1b0:	0000c8c0 	call	c8c <main+0x738>
    c1b4:	0000c8c0 	call	c8c <main+0x738>
    c1b8:	0000c8c0 	call	c8c <main+0x738>
    c1bc:	0000c8c0 	call	c8c <main+0x738>
    c1c0:	0000c944 	movi	zero,805
    c1c4:	0000c8c0 	call	c8c <main+0x738>
    c1c8:	0000c8c0 	call	c8c <main+0x738>
    c1cc:	0000c644 	movi	zero,793
    c1d0:	0000c8c0 	call	c8c <main+0x738>
    c1d4:	0000c8c0 	call	c8c <main+0x738>
    c1d8:	0000c8c0 	call	c8c <main+0x738>
    c1dc:	0000c8c0 	call	c8c <main+0x738>
    c1e0:	0000c8c0 	call	c8c <main+0x738>
    c1e4:	0000c8c0 	call	c8c <main+0x738>
    c1e8:	0000c8c0 	call	c8c <main+0x738>
    c1ec:	0000c8c0 	call	c8c <main+0x738>
    c1f0:	0000c8c0 	call	c8c <main+0x738>
    c1f4:	0000c8c0 	call	c8c <main+0x738>
    c1f8:	0000c510 	cmplti	zero,zero,788
    c1fc:	0000c6f4 	movhi	zero,795
    c200:	0000c8c0 	call	c8c <main+0x738>
    c204:	0000c8c0 	call	c8c <main+0x738>
    c208:	0000c8c0 	call	c8c <main+0x738>
    c20c:	0000c6e8 	cmpgeui	zero,zero,795
    c210:	0000c6f4 	movhi	zero,795
    c214:	0000c8c0 	call	c8c <main+0x738>
    c218:	0000c8c0 	call	c8c <main+0x738>
    c21c:	0000c6d4 	movui	zero,795
    c220:	0000c8c0 	call	c8c <main+0x738>
    c224:	0000c694 	movui	zero,794
    c228:	0000c460 	cmpeqi	zero,zero,785
    c22c:	0000c284 	movi	zero,778
    c230:	0000c7fc 	xorhi	zero,zero,799
    c234:	0000c8c0 	call	c8c <main+0x738>
    c238:	0000c7a8 	cmpgeui	zero,zero,798
    c23c:	0000c8c0 	call	c8c <main+0x738>
    c240:	0000c3c4 	movi	zero,783
    c244:	0000c8c0 	call	c8c <main+0x738>
    c248:	0000c8c0 	call	c8c <main+0x738>
    c24c:	0000c310 	cmplti	zero,zero,780
    c250:	d9002417 	ldw	r4,144(sp)
    c254:	d9402417 	ldw	r5,144(sp)
    c258:	21000017 	ldw	r4,0(r4)
    c25c:	28800104 	addi	r2,r5,4
    c260:	d9002515 	stw	r4,148(sp)
    c264:	20032b0e 	bge	r4,zero,cf14 <___svfiprintf_internal_r+0xf7c>
    c268:	d8c02517 	ldw	r3,148(sp)
    c26c:	d8802415 	stw	r2,144(sp)
    c270:	00c7c83a 	sub	r3,zero,r3
    c274:	d8c02515 	stw	r3,148(sp)
    c278:	8c400114 	ori	r17,r17,4
    c27c:	98c00007 	ldb	r3,0(r19)
    c280:	003f9106 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c284:	00800c04 	movi	r2,48
    c288:	d9402417 	ldw	r5,144(sp)
    c28c:	d9002017 	ldw	r4,128(sp)
    c290:	d8801d05 	stb	r2,116(sp)
    c294:	00801e04 	movi	r2,120
    c298:	d8801d45 	stb	r2,117(sp)
    c29c:	d8001d85 	stb	zero,118(sp)
    c2a0:	b811883a 	mov	r8,r23
    c2a4:	28c00104 	addi	r3,r5,4
    c2a8:	2c800017 	ldw	r18,0(r5)
    c2ac:	0029883a 	mov	r20,zero
    c2b0:	88800094 	ori	r2,r17,2
    c2b4:	20036316 	blt	r4,zero,d044 <___svfiprintf_internal_r+0x10ac>
    c2b8:	00bfdfc4 	movi	r2,-129
    c2bc:	88a0703a 	and	r16,r17,r2
    c2c0:	d8c02415 	stw	r3,144(sp)
    c2c4:	84000094 	ori	r16,r16,2
    c2c8:	90031c26 	beq	r18,zero,cf3c <___svfiprintf_internal_r+0xfa4>
    c2cc:	01400074 	movhi	r5,1
    c2d0:	2957a604 	addi	r5,r5,24216
    c2d4:	002b883a 	mov	r21,zero
    c2d8:	d9402915 	stw	r5,164(sp)
    c2dc:	00002906 	br	c384 <___svfiprintf_internal_r+0x3ec>
    c2e0:	8c400054 	ori	r17,r17,1
    c2e4:	98c00007 	ldb	r3,0(r19)
    c2e8:	003f7706 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c2ec:	a8803fcc 	andi	r2,r21,255
    c2f0:	1080201c 	xori	r2,r2,128
    c2f4:	10bfe004 	addi	r2,r2,-128
    c2f8:	10032a1e 	bne	r2,zero,cfa4 <___svfiprintf_internal_r+0x100c>
    c2fc:	00c00044 	movi	r3,1
    c300:	d8c02105 	stb	r3,132(sp)
    c304:	05400804 	movi	r21,32
    c308:	98c00007 	ldb	r3,0(r19)
    c30c:	003f6e06 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c310:	8821883a 	mov	r16,r17
    c314:	dc402103 	ldbu	r17,132(sp)
    c318:	b811883a 	mov	r8,r23
    c31c:	8c403fcc 	andi	r17,r17,255
    c320:	8803f01e 	bne	r17,zero,d2e4 <___svfiprintf_internal_r+0x134c>
    c324:	00800074 	movhi	r2,1
    c328:	1097a604 	addi	r2,r2,24216
    c32c:	d8802915 	stw	r2,164(sp)
    c330:	8080080c 	andi	r2,r16,32
    c334:	1000cd26 	beq	r2,zero,c66c <___svfiprintf_internal_r+0x6d4>
    c338:	d9002417 	ldw	r4,144(sp)
    c33c:	24800017 	ldw	r18,0(r4)
    c340:	25000117 	ldw	r20,4(r4)
    c344:	21000204 	addi	r4,r4,8
    c348:	d9002415 	stw	r4,144(sp)
    c34c:	8080004c 	andi	r2,r16,1
    c350:	1002c726 	beq	r2,zero,ce70 <___svfiprintf_internal_r+0xed8>
    c354:	9504b03a 	or	r2,r18,r20
    c358:	1003061e 	bne	r2,zero,cf74 <___svfiprintf_internal_r+0xfdc>
    c35c:	d9002017 	ldw	r4,128(sp)
    c360:	d8001d85 	stb	zero,118(sp)
    c364:	20033e16 	blt	r4,zero,d060 <___svfiprintf_internal_r+0x10c8>
    c368:	00bfdfc4 	movi	r2,-129
    c36c:	80a0703a 	and	r16,r16,r2
    c370:	d9402017 	ldw	r5,128(sp)
    c374:	002b883a 	mov	r21,zero
    c378:	28002826 	beq	r5,zero,c41c <___svfiprintf_internal_r+0x484>
    c37c:	0025883a 	mov	r18,zero
    c380:	0029883a 	mov	r20,zero
    c384:	d9002917 	ldw	r4,164(sp)
    c388:	dc401a04 	addi	r17,sp,104
    c38c:	908003cc 	andi	r2,r18,15
    c390:	a006973a 	slli	r3,r20,28
    c394:	2085883a 	add	r2,r4,r2
    c398:	9024d13a 	srli	r18,r18,4
    c39c:	10800003 	ldbu	r2,0(r2)
    c3a0:	a028d13a 	srli	r20,r20,4
    c3a4:	8c7fffc4 	addi	r17,r17,-1
    c3a8:	1ca4b03a 	or	r18,r3,r18
    c3ac:	88800005 	stb	r2,0(r17)
    c3b0:	9504b03a 	or	r2,r18,r20
    c3b4:	103ff51e 	bne	r2,zero,c38c <__alt_data_end+0xf800c38c>
    c3b8:	d8801e17 	ldw	r2,120(sp)
    c3bc:	1469c83a 	sub	r20,r2,r17
    c3c0:	00001906 	br	c428 <___svfiprintf_internal_r+0x490>
    c3c4:	8821883a 	mov	r16,r17
    c3c8:	dc402103 	ldbu	r17,132(sp)
    c3cc:	b811883a 	mov	r8,r23
    c3d0:	8c403fcc 	andi	r17,r17,255
    c3d4:	8803d01e 	bne	r17,zero,d318 <___svfiprintf_internal_r+0x1380>
    c3d8:	8080080c 	andi	r2,r16,32
    c3dc:	10016126 	beq	r2,zero,c964 <___svfiprintf_internal_r+0x9cc>
    c3e0:	d9002417 	ldw	r4,144(sp)
    c3e4:	d9402017 	ldw	r5,128(sp)
    c3e8:	d8001d85 	stb	zero,118(sp)
    c3ec:	20c00204 	addi	r3,r4,8
    c3f0:	24800017 	ldw	r18,0(r4)
    c3f4:	25000117 	ldw	r20,4(r4)
    c3f8:	28030f16 	blt	r5,zero,d038 <___svfiprintf_internal_r+0x10a0>
    c3fc:	013fdfc4 	movi	r4,-129
    c400:	9504b03a 	or	r2,r18,r20
    c404:	d8c02415 	stw	r3,144(sp)
    c408:	8120703a 	and	r16,r16,r4
    c40c:	002b883a 	mov	r21,zero
    c410:	1000cd1e 	bne	r2,zero,c748 <___svfiprintf_internal_r+0x7b0>
    c414:	d8c02017 	ldw	r3,128(sp)
    c418:	1803141e 	bne	r3,zero,d06c <___svfiprintf_internal_r+0x10d4>
    c41c:	d8002015 	stw	zero,128(sp)
    c420:	0029883a 	mov	r20,zero
    c424:	dc401a04 	addi	r17,sp,104
    c428:	dc802017 	ldw	r18,128(sp)
    c42c:	9500010e 	bge	r18,r20,c434 <___svfiprintf_internal_r+0x49c>
    c430:	a025883a 	mov	r18,r20
    c434:	ad403fcc 	andi	r21,r21,255
    c438:	ad40201c 	xori	r21,r21,128
    c43c:	ad7fe004 	addi	r21,r21,-128
    c440:	a8003f26 	beq	r21,zero,c540 <___svfiprintf_internal_r+0x5a8>
    c444:	94800044 	addi	r18,r18,1
    c448:	00003d06 	br	c540 <___svfiprintf_internal_r+0x5a8>
    c44c:	00c00044 	movi	r3,1
    c450:	d8c02105 	stb	r3,132(sp)
    c454:	05400ac4 	movi	r21,43
    c458:	98c00007 	ldb	r3,0(r19)
    c45c:	003f1a06 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c460:	8821883a 	mov	r16,r17
    c464:	dc402103 	ldbu	r17,132(sp)
    c468:	b811883a 	mov	r8,r23
    c46c:	8c403fcc 	andi	r17,r17,255
    c470:	8803a71e 	bne	r17,zero,d310 <___svfiprintf_internal_r+0x1378>
    c474:	8080080c 	andi	r2,r16,32
    c478:	10015726 	beq	r2,zero,c9d8 <___svfiprintf_internal_r+0xa40>
    c47c:	d8c02417 	ldw	r3,144(sp)
    c480:	d9002017 	ldw	r4,128(sp)
    c484:	d8001d85 	stb	zero,118(sp)
    c488:	18800204 	addi	r2,r3,8
    c48c:	1c800017 	ldw	r18,0(r3)
    c490:	1d000117 	ldw	r20,4(r3)
    c494:	2002db16 	blt	r4,zero,d004 <___svfiprintf_internal_r+0x106c>
    c498:	013fdfc4 	movi	r4,-129
    c49c:	9506b03a 	or	r3,r18,r20
    c4a0:	d8802415 	stw	r2,144(sp)
    c4a4:	8120703a 	and	r16,r16,r4
    c4a8:	18015826 	beq	r3,zero,ca0c <___svfiprintf_internal_r+0xa74>
    c4ac:	002b883a 	mov	r21,zero
    c4b0:	dc401a04 	addi	r17,sp,104
    c4b4:	9006d0fa 	srli	r3,r18,3
    c4b8:	a008977a 	slli	r4,r20,29
    c4bc:	a028d0fa 	srli	r20,r20,3
    c4c0:	948001cc 	andi	r18,r18,7
    c4c4:	90800c04 	addi	r2,r18,48
    c4c8:	8c7fffc4 	addi	r17,r17,-1
    c4cc:	20e4b03a 	or	r18,r4,r3
    c4d0:	88800005 	stb	r2,0(r17)
    c4d4:	9506b03a 	or	r3,r18,r20
    c4d8:	183ff61e 	bne	r3,zero,c4b4 <__alt_data_end+0xf800c4b4>
    c4dc:	80c0004c 	andi	r3,r16,1
    c4e0:	18028926 	beq	r3,zero,cf08 <___svfiprintf_internal_r+0xf70>
    c4e4:	10803fcc 	andi	r2,r2,255
    c4e8:	1080201c 	xori	r2,r2,128
    c4ec:	10bfe004 	addi	r2,r2,-128
    c4f0:	00c00c04 	movi	r3,48
    c4f4:	10ffb026 	beq	r2,r3,c3b8 <__alt_data_end+0xf800c3b8>
    c4f8:	88ffffc5 	stb	r3,-1(r17)
    c4fc:	d8c01e17 	ldw	r3,120(sp)
    c500:	88bfffc4 	addi	r2,r17,-1
    c504:	1023883a 	mov	r17,r2
    c508:	18a9c83a 	sub	r20,r3,r2
    c50c:	003fc606 	br	c428 <__alt_data_end+0xf800c428>
    c510:	d8c02417 	ldw	r3,144(sp)
    c514:	04800044 	movi	r18,1
    c518:	8821883a 	mov	r16,r17
    c51c:	18800017 	ldw	r2,0(r3)
    c520:	18c00104 	addi	r3,r3,4
    c524:	b811883a 	mov	r8,r23
    c528:	d8001d85 	stb	zero,118(sp)
    c52c:	d8801005 	stb	r2,64(sp)
    c530:	d8c02415 	stw	r3,144(sp)
    c534:	9029883a 	mov	r20,r18
    c538:	dc401004 	addi	r17,sp,64
    c53c:	d8002015 	stw	zero,128(sp)
    c540:	80c0008c 	andi	r3,r16,2
    c544:	d8c02115 	stw	r3,132(sp)
    c548:	18000126 	beq	r3,zero,c550 <___svfiprintf_internal_r+0x5b8>
    c54c:	94800084 	addi	r18,r18,2
    c550:	80c0210c 	andi	r3,r16,132
    c554:	d8c02215 	stw	r3,136(sp)
    c558:	1801321e 	bne	r3,zero,ca24 <___svfiprintf_internal_r+0xa8c>
    c55c:	d9002517 	ldw	r4,148(sp)
    c560:	24b9c83a 	sub	fp,r4,r18
    c564:	07012f0e 	bge	zero,fp,ca24 <___svfiprintf_internal_r+0xa8c>
    c568:	02400404 	movi	r9,16
    c56c:	d8c01c17 	ldw	r3,112(sp)
    c570:	d8801b17 	ldw	r2,108(sp)
    c574:	4f03250e 	bge	r9,fp,d20c <___svfiprintf_internal_r+0x1274>
    c578:	01000074 	movhi	r4,1
    c57c:	21181204 	addi	r4,r4,24648
    c580:	dc002a15 	stw	r16,168(sp)
    c584:	dc402b15 	stw	r17,172(sp)
    c588:	d9002815 	stw	r4,160(sp)
    c58c:	e023883a 	mov	r17,fp
    c590:	482f883a 	mov	r23,r9
    c594:	9839883a 	mov	fp,r19
    c598:	054001c4 	movi	r21,7
    c59c:	9027883a 	mov	r19,r18
    c5a0:	dc002717 	ldw	r16,156(sp)
    c5a4:	dc802317 	ldw	r18,140(sp)
    c5a8:	00000306 	br	c5b8 <___svfiprintf_internal_r+0x620>
    c5ac:	8c7ffc04 	addi	r17,r17,-16
    c5b0:	42000204 	addi	r8,r8,8
    c5b4:	bc40130e 	bge	r23,r17,c604 <___svfiprintf_internal_r+0x66c>
    c5b8:	01400074 	movhi	r5,1
    c5bc:	18c00404 	addi	r3,r3,16
    c5c0:	10800044 	addi	r2,r2,1
    c5c4:	29581204 	addi	r5,r5,24648
    c5c8:	41400015 	stw	r5,0(r8)
    c5cc:	45c00115 	stw	r23,4(r8)
    c5d0:	d8c01c15 	stw	r3,112(sp)
    c5d4:	d8801b15 	stw	r2,108(sp)
    c5d8:	a8bff40e 	bge	r21,r2,c5ac <__alt_data_end+0xf800c5ac>
    c5dc:	d9801a04 	addi	r6,sp,104
    c5e0:	900b883a 	mov	r5,r18
    c5e4:	8009883a 	mov	r4,r16
    c5e8:	000bdc80 	call	bdc8 <__ssprint_r>
    c5ec:	1001aa1e 	bne	r2,zero,cc98 <___svfiprintf_internal_r+0xd00>
    c5f0:	8c7ffc04 	addi	r17,r17,-16
    c5f4:	d8c01c17 	ldw	r3,112(sp)
    c5f8:	d8801b17 	ldw	r2,108(sp)
    c5fc:	d811883a 	mov	r8,sp
    c600:	bc7fed16 	blt	r23,r17,c5b8 <__alt_data_end+0xf800c5b8>
    c604:	9825883a 	mov	r18,r19
    c608:	dc002a17 	ldw	r16,168(sp)
    c60c:	e027883a 	mov	r19,fp
    c610:	8839883a 	mov	fp,r17
    c614:	dc402b17 	ldw	r17,172(sp)
    c618:	d9002817 	ldw	r4,160(sp)
    c61c:	e0c7883a 	add	r3,fp,r3
    c620:	10800044 	addi	r2,r2,1
    c624:	41000015 	stw	r4,0(r8)
    c628:	47000115 	stw	fp,4(r8)
    c62c:	d8c01c15 	stw	r3,112(sp)
    c630:	d8801b15 	stw	r2,108(sp)
    c634:	010001c4 	movi	r4,7
    c638:	20821616 	blt	r4,r2,ce94 <___svfiprintf_internal_r+0xefc>
    c63c:	42000204 	addi	r8,r8,8
    c640:	0000fa06 	br	ca2c <___svfiprintf_internal_r+0xa94>
    c644:	8821883a 	mov	r16,r17
    c648:	dc402103 	ldbu	r17,132(sp)
    c64c:	b811883a 	mov	r8,r23
    c650:	8c403fcc 	andi	r17,r17,255
    c654:	8803361e 	bne	r17,zero,d330 <___svfiprintf_internal_r+0x1398>
    c658:	01400074 	movhi	r5,1
    c65c:	2957a104 	addi	r5,r5,24196
    c660:	d9402915 	stw	r5,164(sp)
    c664:	8080080c 	andi	r2,r16,32
    c668:	103f331e 	bne	r2,zero,c338 <__alt_data_end+0xf800c338>
    c66c:	8080040c 	andi	r2,r16,16
    c670:	1002551e 	bne	r2,zero,cfc8 <___svfiprintf_internal_r+0x1030>
    c674:	8080100c 	andi	r2,r16,64
    c678:	1002a626 	beq	r2,zero,d114 <___svfiprintf_internal_r+0x117c>
    c67c:	d8802417 	ldw	r2,144(sp)
    c680:	0029883a 	mov	r20,zero
    c684:	1480000b 	ldhu	r18,0(r2)
    c688:	10800104 	addi	r2,r2,4
    c68c:	d8802415 	stw	r2,144(sp)
    c690:	003f2e06 	br	c34c <__alt_data_end+0xf800c34c>
    c694:	8821883a 	mov	r16,r17
    c698:	dc402103 	ldbu	r17,132(sp)
    c69c:	b811883a 	mov	r8,r23
    c6a0:	8c403fcc 	andi	r17,r17,255
    c6a4:	88030b1e 	bne	r17,zero,d2d4 <___svfiprintf_internal_r+0x133c>
    c6a8:	8080080c 	andi	r2,r16,32
    c6ac:	1002271e 	bne	r2,zero,cf4c <___svfiprintf_internal_r+0xfb4>
    c6b0:	8080040c 	andi	r2,r16,16
    c6b4:	10028e26 	beq	r2,zero,d0f0 <___svfiprintf_internal_r+0x1158>
    c6b8:	d8c02417 	ldw	r3,144(sp)
    c6bc:	d9002617 	ldw	r4,152(sp)
    c6c0:	18800017 	ldw	r2,0(r3)
    c6c4:	18c00104 	addi	r3,r3,4
    c6c8:	d8c02415 	stw	r3,144(sp)
    c6cc:	11000015 	stw	r4,0(r2)
    c6d0:	003e5306 	br	c020 <__alt_data_end+0xf800c020>
    c6d4:	98c00007 	ldb	r3,0(r19)
    c6d8:	01401b04 	movi	r5,108
    c6dc:	19424f26 	beq	r3,r5,d01c <___svfiprintf_internal_r+0x1084>
    c6e0:	8c400414 	ori	r17,r17,16
    c6e4:	003e7806 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c6e8:	8c401014 	ori	r17,r17,64
    c6ec:	98c00007 	ldb	r3,0(r19)
    c6f0:	003e7506 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c6f4:	8821883a 	mov	r16,r17
    c6f8:	dc402103 	ldbu	r17,132(sp)
    c6fc:	b811883a 	mov	r8,r23
    c700:	8c403fcc 	andi	r17,r17,255
    c704:	8802fe1e 	bne	r17,zero,d300 <___svfiprintf_internal_r+0x1368>
    c708:	8080080c 	andi	r2,r16,32
    c70c:	10004626 	beq	r2,zero,c828 <___svfiprintf_internal_r+0x890>
    c710:	d9002417 	ldw	r4,144(sp)
    c714:	20800117 	ldw	r2,4(r4)
    c718:	24800017 	ldw	r18,0(r4)
    c71c:	21000204 	addi	r4,r4,8
    c720:	d9002415 	stw	r4,144(sp)
    c724:	1029883a 	mov	r20,r2
    c728:	10004a16 	blt	r2,zero,c854 <___svfiprintf_internal_r+0x8bc>
    c72c:	d9002017 	ldw	r4,128(sp)
    c730:	dd401d83 	ldbu	r21,118(sp)
    c734:	2001eb16 	blt	r4,zero,cee4 <___svfiprintf_internal_r+0xf4c>
    c738:	00ffdfc4 	movi	r3,-129
    c73c:	9504b03a 	or	r2,r18,r20
    c740:	80e0703a 	and	r16,r16,r3
    c744:	103f3326 	beq	r2,zero,c414 <__alt_data_end+0xf800c414>
    c748:	a0009426 	beq	r20,zero,c99c <___svfiprintf_internal_r+0xa04>
    c74c:	dc401a04 	addi	r17,sp,104
    c750:	402f883a 	mov	r23,r8
    c754:	9009883a 	mov	r4,r18
    c758:	a00b883a 	mov	r5,r20
    c75c:	01800284 	movi	r6,10
    c760:	000f883a 	mov	r7,zero
    c764:	000f6500 	call	f650 <__umoddi3>
    c768:	10800c04 	addi	r2,r2,48
    c76c:	8c7fffc4 	addi	r17,r17,-1
    c770:	9009883a 	mov	r4,r18
    c774:	a00b883a 	mov	r5,r20
    c778:	88800005 	stb	r2,0(r17)
    c77c:	01800284 	movi	r6,10
    c780:	000f883a 	mov	r7,zero
    c784:	000f0540 	call	f054 <__udivdi3>
    c788:	1025883a 	mov	r18,r2
    c78c:	10c4b03a 	or	r2,r2,r3
    c790:	1829883a 	mov	r20,r3
    c794:	103fef1e 	bne	r2,zero,c754 <__alt_data_end+0xf800c754>
    c798:	d9001e17 	ldw	r4,120(sp)
    c79c:	b811883a 	mov	r8,r23
    c7a0:	2469c83a 	sub	r20,r4,r17
    c7a4:	003f2006 	br	c428 <__alt_data_end+0xf800c428>
    c7a8:	d8802417 	ldw	r2,144(sp)
    c7ac:	8821883a 	mov	r16,r17
    c7b0:	d8001d85 	stb	zero,118(sp)
    c7b4:	14400017 	ldw	r17,0(r2)
    c7b8:	b811883a 	mov	r8,r23
    c7bc:	15c00104 	addi	r23,r2,4
    c7c0:	88026c26 	beq	r17,zero,d174 <___svfiprintf_internal_r+0x11dc>
    c7c4:	d8c02017 	ldw	r3,128(sp)
    c7c8:	18025f16 	blt	r3,zero,d148 <___svfiprintf_internal_r+0x11b0>
    c7cc:	180d883a 	mov	r6,r3
    c7d0:	000b883a 	mov	r5,zero
    c7d4:	8809883a 	mov	r4,r17
    c7d8:	da002d15 	stw	r8,180(sp)
    c7dc:	000a2740 	call	a274 <memchr>
    c7e0:	da002d17 	ldw	r8,180(sp)
    c7e4:	1002a526 	beq	r2,zero,d27c <___svfiprintf_internal_r+0x12e4>
    c7e8:	1469c83a 	sub	r20,r2,r17
    c7ec:	dd401d83 	ldbu	r21,118(sp)
    c7f0:	ddc02415 	stw	r23,144(sp)
    c7f4:	d8002015 	stw	zero,128(sp)
    c7f8:	003f0b06 	br	c428 <__alt_data_end+0xf800c428>
    c7fc:	8c400814 	ori	r17,r17,32
    c800:	98c00007 	ldb	r3,0(r19)
    c804:	003e3006 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c808:	8821883a 	mov	r16,r17
    c80c:	dc402103 	ldbu	r17,132(sp)
    c810:	b811883a 	mov	r8,r23
    c814:	8c403fcc 	andi	r17,r17,255
    c818:	8802b01e 	bne	r17,zero,d2dc <___svfiprintf_internal_r+0x1344>
    c81c:	84000414 	ori	r16,r16,16
    c820:	8080080c 	andi	r2,r16,32
    c824:	103fba1e 	bne	r2,zero,c710 <__alt_data_end+0xf800c710>
    c828:	8080040c 	andi	r2,r16,16
    c82c:	1001df1e 	bne	r2,zero,cfac <___svfiprintf_internal_r+0x1014>
    c830:	8080100c 	andi	r2,r16,64
    c834:	10023d26 	beq	r2,zero,d12c <___svfiprintf_internal_r+0x1194>
    c838:	d8802417 	ldw	r2,144(sp)
    c83c:	1480000f 	ldh	r18,0(r2)
    c840:	10800104 	addi	r2,r2,4
    c844:	d8802415 	stw	r2,144(sp)
    c848:	9029d7fa 	srai	r20,r18,31
    c84c:	a005883a 	mov	r2,r20
    c850:	103fb60e 	bge	r2,zero,c72c <__alt_data_end+0xf800c72c>
    c854:	d9402017 	ldw	r5,128(sp)
    c858:	04a5c83a 	sub	r18,zero,r18
    c85c:	05400b44 	movi	r21,45
    c860:	9004c03a 	cmpne	r2,r18,zero
    c864:	0529c83a 	sub	r20,zero,r20
    c868:	dd401d85 	stb	r21,118(sp)
    c86c:	a0a9c83a 	sub	r20,r20,r2
    c870:	28026c16 	blt	r5,zero,d224 <___svfiprintf_internal_r+0x128c>
    c874:	00bfdfc4 	movi	r2,-129
    c878:	80a0703a 	and	r16,r16,r2
    c87c:	a03fb31e 	bne	r20,zero,c74c <__alt_data_end+0xf800c74c>
    c880:	00004606 	br	c99c <___svfiprintf_internal_r+0xa04>
    c884:	9839883a 	mov	fp,r19
    c888:	d8002515 	stw	zero,148(sp)
    c88c:	1c3ff404 	addi	r16,r3,-48
    c890:	0009883a 	mov	r4,zero
    c894:	01400284 	movi	r5,10
    c898:	000fc140 	call	fc14 <__mulsi3>
    c89c:	e0c00007 	ldb	r3,0(fp)
    c8a0:	8089883a 	add	r4,r16,r2
    c8a4:	9cc00044 	addi	r19,r19,1
    c8a8:	1c3ff404 	addi	r16,r3,-48
    c8ac:	9839883a 	mov	fp,r19
    c8b0:	a43ff82e 	bgeu	r20,r16,c894 <__alt_data_end+0xf800c894>
    c8b4:	d9002515 	stw	r4,148(sp)
    c8b8:	18bff804 	addi	r2,r3,-32
    c8bc:	90be052e 	bgeu	r18,r2,c0d4 <__alt_data_end+0xf800c0d4>
    c8c0:	8821883a 	mov	r16,r17
    c8c4:	dc402103 	ldbu	r17,132(sp)
    c8c8:	b811883a 	mov	r8,r23
    c8cc:	8c403fcc 	andi	r17,r17,255
    c8d0:	88028d1e 	bne	r17,zero,d308 <___svfiprintf_internal_r+0x1370>
    c8d4:	1800ea26 	beq	r3,zero,cc80 <___svfiprintf_internal_r+0xce8>
    c8d8:	04800044 	movi	r18,1
    c8dc:	d8c01005 	stb	r3,64(sp)
    c8e0:	d8001d85 	stb	zero,118(sp)
    c8e4:	9029883a 	mov	r20,r18
    c8e8:	dc401004 	addi	r17,sp,64
    c8ec:	003f1306 	br	c53c <__alt_data_end+0xf800c53c>
    c8f0:	8c402014 	ori	r17,r17,128
    c8f4:	98c00007 	ldb	r3,0(r19)
    c8f8:	003df306 	br	c0c8 <__alt_data_end+0xf800c0c8>
    c8fc:	98c00007 	ldb	r3,0(r19)
    c900:	01000a84 	movi	r4,42
    c904:	9f000044 	addi	fp,r19,1
    c908:	19026326 	beq	r3,r4,d298 <___svfiprintf_internal_r+0x1300>
    c90c:	1c3ff404 	addi	r16,r3,-48
    c910:	0009883a 	mov	r4,zero
    c914:	a4025636 	bltu	r20,r16,d270 <___svfiprintf_internal_r+0x12d8>
    c918:	01400284 	movi	r5,10
    c91c:	000fc140 	call	fc14 <__mulsi3>
    c920:	e0c00007 	ldb	r3,0(fp)
    c924:	1409883a 	add	r4,r2,r16
    c928:	e4c00044 	addi	r19,fp,1
    c92c:	1c3ff404 	addi	r16,r3,-48
    c930:	9839883a 	mov	fp,r19
    c934:	a43ff82e 	bgeu	r20,r16,c918 <__alt_data_end+0xf800c918>
    c938:	20020c16 	blt	r4,zero,d16c <___svfiprintf_internal_r+0x11d4>
    c93c:	d9002015 	stw	r4,128(sp)
    c940:	003de206 	br	c0cc <__alt_data_end+0xf800c0cc>
    c944:	8821883a 	mov	r16,r17
    c948:	dc402103 	ldbu	r17,132(sp)
    c94c:	b811883a 	mov	r8,r23
    c950:	8c403fcc 	andi	r17,r17,255
    c954:	8802721e 	bne	r17,zero,d320 <___svfiprintf_internal_r+0x1388>
    c958:	84000414 	ori	r16,r16,16
    c95c:	8080080c 	andi	r2,r16,32
    c960:	103e9f1e 	bne	r2,zero,c3e0 <__alt_data_end+0xf800c3e0>
    c964:	8080040c 	andi	r2,r16,16
    c968:	10015326 	beq	r2,zero,ceb8 <___svfiprintf_internal_r+0xf20>
    c96c:	d8c02417 	ldw	r3,144(sp)
    c970:	d9002017 	ldw	r4,128(sp)
    c974:	d8001d85 	stb	zero,118(sp)
    c978:	18800104 	addi	r2,r3,4
    c97c:	1c800017 	ldw	r18,0(r3)
    c980:	0029883a 	mov	r20,zero
    c984:	20015516 	blt	r4,zero,cedc <___svfiprintf_internal_r+0xf44>
    c988:	00ffdfc4 	movi	r3,-129
    c98c:	d8802415 	stw	r2,144(sp)
    c990:	80e0703a 	and	r16,r16,r3
    c994:	002b883a 	mov	r21,zero
    c998:	903e9e26 	beq	r18,zero,c414 <__alt_data_end+0xf800c414>
    c99c:	00800244 	movi	r2,9
    c9a0:	14bf6a36 	bltu	r2,r18,c74c <__alt_data_end+0xf800c74c>
    c9a4:	94800c04 	addi	r18,r18,48
    c9a8:	dc8019c5 	stb	r18,103(sp)
    c9ac:	dd002c17 	ldw	r20,176(sp)
    c9b0:	dc4019c4 	addi	r17,sp,103
    c9b4:	003e9c06 	br	c428 <__alt_data_end+0xf800c428>
    c9b8:	8821883a 	mov	r16,r17
    c9bc:	dc402103 	ldbu	r17,132(sp)
    c9c0:	b811883a 	mov	r8,r23
    c9c4:	8c403fcc 	andi	r17,r17,255
    c9c8:	8802571e 	bne	r17,zero,d328 <___svfiprintf_internal_r+0x1390>
    c9cc:	84000414 	ori	r16,r16,16
    c9d0:	8080080c 	andi	r2,r16,32
    c9d4:	103ea91e 	bne	r2,zero,c47c <__alt_data_end+0xf800c47c>
    c9d8:	8080040c 	andi	r2,r16,16
    c9dc:	10018026 	beq	r2,zero,cfe0 <___svfiprintf_internal_r+0x1048>
    c9e0:	d9402417 	ldw	r5,144(sp)
    c9e4:	d8c02017 	ldw	r3,128(sp)
    c9e8:	d8001d85 	stb	zero,118(sp)
    c9ec:	28800104 	addi	r2,r5,4
    c9f0:	2c800017 	ldw	r18,0(r5)
    c9f4:	0029883a 	mov	r20,zero
    c9f8:	18018216 	blt	r3,zero,d004 <___svfiprintf_internal_r+0x106c>
    c9fc:	00ffdfc4 	movi	r3,-129
    ca00:	d8802415 	stw	r2,144(sp)
    ca04:	80e0703a 	and	r16,r16,r3
    ca08:	903ea81e 	bne	r18,zero,c4ac <__alt_data_end+0xf800c4ac>
    ca0c:	d8802017 	ldw	r2,128(sp)
    ca10:	002b883a 	mov	r21,zero
    ca14:	1001f226 	beq	r2,zero,d1e0 <___svfiprintf_internal_r+0x1248>
    ca18:	0025883a 	mov	r18,zero
    ca1c:	0029883a 	mov	r20,zero
    ca20:	003ea306 	br	c4b0 <__alt_data_end+0xf800c4b0>
    ca24:	d8c01c17 	ldw	r3,112(sp)
    ca28:	d8801b17 	ldw	r2,108(sp)
    ca2c:	d9001d87 	ldb	r4,118(sp)
    ca30:	20000b26 	beq	r4,zero,ca60 <___svfiprintf_internal_r+0xac8>
    ca34:	d9001d84 	addi	r4,sp,118
    ca38:	18c00044 	addi	r3,r3,1
    ca3c:	10800044 	addi	r2,r2,1
    ca40:	41000015 	stw	r4,0(r8)
    ca44:	01000044 	movi	r4,1
    ca48:	41000115 	stw	r4,4(r8)
    ca4c:	d8c01c15 	stw	r3,112(sp)
    ca50:	d8801b15 	stw	r2,108(sp)
    ca54:	010001c4 	movi	r4,7
    ca58:	2080f316 	blt	r4,r2,ce28 <___svfiprintf_internal_r+0xe90>
    ca5c:	42000204 	addi	r8,r8,8
    ca60:	d9402117 	ldw	r5,132(sp)
    ca64:	28000b26 	beq	r5,zero,ca94 <___svfiprintf_internal_r+0xafc>
    ca68:	d9001d04 	addi	r4,sp,116
    ca6c:	18c00084 	addi	r3,r3,2
    ca70:	10800044 	addi	r2,r2,1
    ca74:	41000015 	stw	r4,0(r8)
    ca78:	01000084 	movi	r4,2
    ca7c:	41000115 	stw	r4,4(r8)
    ca80:	d8c01c15 	stw	r3,112(sp)
    ca84:	d8801b15 	stw	r2,108(sp)
    ca88:	010001c4 	movi	r4,7
    ca8c:	2080ef16 	blt	r4,r2,ce4c <___svfiprintf_internal_r+0xeb4>
    ca90:	42000204 	addi	r8,r8,8
    ca94:	d9402217 	ldw	r5,136(sp)
    ca98:	01002004 	movi	r4,128
    ca9c:	29008f26 	beq	r5,r4,ccdc <___svfiprintf_internal_r+0xd44>
    caa0:	d9002017 	ldw	r4,128(sp)
    caa4:	252fc83a 	sub	r23,r4,r20
    caa8:	05c0310e 	bge	zero,r23,cb70 <___svfiprintf_internal_r+0xbd8>
    caac:	07000404 	movi	fp,16
    cab0:	e5c17d0e 	bge	fp,r23,d0a8 <___svfiprintf_internal_r+0x1110>
    cab4:	01000074 	movhi	r4,1
    cab8:	21180e04 	addi	r4,r4,24632
    cabc:	dc002015 	stw	r16,128(sp)
    cac0:	dc402215 	stw	r17,136(sp)
    cac4:	d9002115 	stw	r4,132(sp)
    cac8:	b823883a 	mov	r17,r23
    cacc:	054001c4 	movi	r21,7
    cad0:	982f883a 	mov	r23,r19
    cad4:	dc002717 	ldw	r16,156(sp)
    cad8:	9027883a 	mov	r19,r18
    cadc:	dc802317 	ldw	r18,140(sp)
    cae0:	00000306 	br	caf0 <___svfiprintf_internal_r+0xb58>
    cae4:	8c7ffc04 	addi	r17,r17,-16
    cae8:	42000204 	addi	r8,r8,8
    caec:	e440110e 	bge	fp,r17,cb34 <___svfiprintf_internal_r+0xb9c>
    caf0:	18c00404 	addi	r3,r3,16
    caf4:	10800044 	addi	r2,r2,1
    caf8:	45800015 	stw	r22,0(r8)
    cafc:	47000115 	stw	fp,4(r8)
    cb00:	d8c01c15 	stw	r3,112(sp)
    cb04:	d8801b15 	stw	r2,108(sp)
    cb08:	a8bff60e 	bge	r21,r2,cae4 <__alt_data_end+0xf800cae4>
    cb0c:	d9801a04 	addi	r6,sp,104
    cb10:	900b883a 	mov	r5,r18
    cb14:	8009883a 	mov	r4,r16
    cb18:	000bdc80 	call	bdc8 <__ssprint_r>
    cb1c:	10005e1e 	bne	r2,zero,cc98 <___svfiprintf_internal_r+0xd00>
    cb20:	8c7ffc04 	addi	r17,r17,-16
    cb24:	d8c01c17 	ldw	r3,112(sp)
    cb28:	d8801b17 	ldw	r2,108(sp)
    cb2c:	d811883a 	mov	r8,sp
    cb30:	e47fef16 	blt	fp,r17,caf0 <__alt_data_end+0xf800caf0>
    cb34:	9825883a 	mov	r18,r19
    cb38:	dc002017 	ldw	r16,128(sp)
    cb3c:	b827883a 	mov	r19,r23
    cb40:	882f883a 	mov	r23,r17
    cb44:	dc402217 	ldw	r17,136(sp)
    cb48:	d9402117 	ldw	r5,132(sp)
    cb4c:	1dc7883a 	add	r3,r3,r23
    cb50:	10800044 	addi	r2,r2,1
    cb54:	41400015 	stw	r5,0(r8)
    cb58:	45c00115 	stw	r23,4(r8)
    cb5c:	d8c01c15 	stw	r3,112(sp)
    cb60:	d8801b15 	stw	r2,108(sp)
    cb64:	010001c4 	movi	r4,7
    cb68:	2080a616 	blt	r4,r2,ce04 <___svfiprintf_internal_r+0xe6c>
    cb6c:	42000204 	addi	r8,r8,8
    cb70:	a0c7883a 	add	r3,r20,r3
    cb74:	10800044 	addi	r2,r2,1
    cb78:	44400015 	stw	r17,0(r8)
    cb7c:	45000115 	stw	r20,4(r8)
    cb80:	d8c01c15 	stw	r3,112(sp)
    cb84:	d8801b15 	stw	r2,108(sp)
    cb88:	010001c4 	movi	r4,7
    cb8c:	20808816 	blt	r4,r2,cdb0 <___svfiprintf_internal_r+0xe18>
    cb90:	42000204 	addi	r8,r8,8
    cb94:	8400010c 	andi	r16,r16,4
    cb98:	80002c26 	beq	r16,zero,cc4c <___svfiprintf_internal_r+0xcb4>
    cb9c:	d8802517 	ldw	r2,148(sp)
    cba0:	14a1c83a 	sub	r16,r2,r18
    cba4:	0400290e 	bge	zero,r16,cc4c <___svfiprintf_internal_r+0xcb4>
    cba8:	04400404 	movi	r17,16
    cbac:	d8801b17 	ldw	r2,108(sp)
    cbb0:	8c01a70e 	bge	r17,r16,d250 <___svfiprintf_internal_r+0x12b8>
    cbb4:	01400074 	movhi	r5,1
    cbb8:	29581204 	addi	r5,r5,24648
    cbbc:	d9402815 	stw	r5,160(sp)
    cbc0:	050001c4 	movi	r20,7
    cbc4:	dd402717 	ldw	r21,156(sp)
    cbc8:	ddc02317 	ldw	r23,140(sp)
    cbcc:	00000306 	br	cbdc <___svfiprintf_internal_r+0xc44>
    cbd0:	843ffc04 	addi	r16,r16,-16
    cbd4:	42000204 	addi	r8,r8,8
    cbd8:	8c00130e 	bge	r17,r16,cc28 <___svfiprintf_internal_r+0xc90>
    cbdc:	01000074 	movhi	r4,1
    cbe0:	18c00404 	addi	r3,r3,16
    cbe4:	10800044 	addi	r2,r2,1
    cbe8:	21181204 	addi	r4,r4,24648
    cbec:	41000015 	stw	r4,0(r8)
    cbf0:	44400115 	stw	r17,4(r8)
    cbf4:	d8c01c15 	stw	r3,112(sp)
    cbf8:	d8801b15 	stw	r2,108(sp)
    cbfc:	a0bff40e 	bge	r20,r2,cbd0 <__alt_data_end+0xf800cbd0>
    cc00:	d9801a04 	addi	r6,sp,104
    cc04:	b80b883a 	mov	r5,r23
    cc08:	a809883a 	mov	r4,r21
    cc0c:	000bdc80 	call	bdc8 <__ssprint_r>
    cc10:	1000211e 	bne	r2,zero,cc98 <___svfiprintf_internal_r+0xd00>
    cc14:	843ffc04 	addi	r16,r16,-16
    cc18:	d8c01c17 	ldw	r3,112(sp)
    cc1c:	d8801b17 	ldw	r2,108(sp)
    cc20:	d811883a 	mov	r8,sp
    cc24:	8c3fed16 	blt	r17,r16,cbdc <__alt_data_end+0xf800cbdc>
    cc28:	d9402817 	ldw	r5,160(sp)
    cc2c:	1c07883a 	add	r3,r3,r16
    cc30:	10800044 	addi	r2,r2,1
    cc34:	41400015 	stw	r5,0(r8)
    cc38:	44000115 	stw	r16,4(r8)
    cc3c:	d8c01c15 	stw	r3,112(sp)
    cc40:	d8801b15 	stw	r2,108(sp)
    cc44:	010001c4 	movi	r4,7
    cc48:	2080b516 	blt	r4,r2,cf20 <___svfiprintf_internal_r+0xf88>
    cc4c:	d8802517 	ldw	r2,148(sp)
    cc50:	1480010e 	bge	r2,r18,cc58 <___svfiprintf_internal_r+0xcc0>
    cc54:	9005883a 	mov	r2,r18
    cc58:	d9002617 	ldw	r4,152(sp)
    cc5c:	2089883a 	add	r4,r4,r2
    cc60:	d9002615 	stw	r4,152(sp)
    cc64:	18005a1e 	bne	r3,zero,cdd0 <___svfiprintf_internal_r+0xe38>
    cc68:	98800007 	ldb	r2,0(r19)
    cc6c:	d8001b15 	stw	zero,108(sp)
    cc70:	d811883a 	mov	r8,sp
    cc74:	103cec1e 	bne	r2,zero,c028 <__alt_data_end+0xf800c028>
    cc78:	9825883a 	mov	r18,r19
    cc7c:	003d0206 	br	c088 <__alt_data_end+0xf800c088>
    cc80:	d8801c17 	ldw	r2,112(sp)
    cc84:	10000426 	beq	r2,zero,cc98 <___svfiprintf_internal_r+0xd00>
    cc88:	d9402317 	ldw	r5,140(sp)
    cc8c:	d9002717 	ldw	r4,156(sp)
    cc90:	d9801a04 	addi	r6,sp,104
    cc94:	000bdc80 	call	bdc8 <__ssprint_r>
    cc98:	d9402317 	ldw	r5,140(sp)
    cc9c:	d8802617 	ldw	r2,152(sp)
    cca0:	28c0030b 	ldhu	r3,12(r5)
    cca4:	18c0100c 	andi	r3,r3,64
    cca8:	18015c1e 	bne	r3,zero,d21c <___svfiprintf_internal_r+0x1284>
    ccac:	dfc03717 	ldw	ra,220(sp)
    ccb0:	df003617 	ldw	fp,216(sp)
    ccb4:	ddc03517 	ldw	r23,212(sp)
    ccb8:	dd803417 	ldw	r22,208(sp)
    ccbc:	dd403317 	ldw	r21,204(sp)
    ccc0:	dd003217 	ldw	r20,200(sp)
    ccc4:	dcc03117 	ldw	r19,196(sp)
    ccc8:	dc803017 	ldw	r18,192(sp)
    cccc:	dc402f17 	ldw	r17,188(sp)
    ccd0:	dc002e17 	ldw	r16,184(sp)
    ccd4:	dec03804 	addi	sp,sp,224
    ccd8:	f800283a 	ret
    ccdc:	d9002517 	ldw	r4,148(sp)
    cce0:	24afc83a 	sub	r23,r4,r18
    cce4:	05ff6e0e 	bge	zero,r23,caa0 <__alt_data_end+0xf800caa0>
    cce8:	07000404 	movi	fp,16
    ccec:	e5c15c0e 	bge	fp,r23,d260 <___svfiprintf_internal_r+0x12c8>
    ccf0:	01000074 	movhi	r4,1
    ccf4:	21180e04 	addi	r4,r4,24632
    ccf8:	dc002215 	stw	r16,136(sp)
    ccfc:	dc402815 	stw	r17,160(sp)
    cd00:	d9002115 	stw	r4,132(sp)
    cd04:	b823883a 	mov	r17,r23
    cd08:	054001c4 	movi	r21,7
    cd0c:	982f883a 	mov	r23,r19
    cd10:	dc002717 	ldw	r16,156(sp)
    cd14:	9027883a 	mov	r19,r18
    cd18:	dc802317 	ldw	r18,140(sp)
    cd1c:	00000306 	br	cd2c <___svfiprintf_internal_r+0xd94>
    cd20:	8c7ffc04 	addi	r17,r17,-16
    cd24:	42000204 	addi	r8,r8,8
    cd28:	e440110e 	bge	fp,r17,cd70 <___svfiprintf_internal_r+0xdd8>
    cd2c:	18c00404 	addi	r3,r3,16
    cd30:	10800044 	addi	r2,r2,1
    cd34:	45800015 	stw	r22,0(r8)
    cd38:	47000115 	stw	fp,4(r8)
    cd3c:	d8c01c15 	stw	r3,112(sp)
    cd40:	d8801b15 	stw	r2,108(sp)
    cd44:	a8bff60e 	bge	r21,r2,cd20 <__alt_data_end+0xf800cd20>
    cd48:	d9801a04 	addi	r6,sp,104
    cd4c:	900b883a 	mov	r5,r18
    cd50:	8009883a 	mov	r4,r16
    cd54:	000bdc80 	call	bdc8 <__ssprint_r>
    cd58:	103fcf1e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    cd5c:	8c7ffc04 	addi	r17,r17,-16
    cd60:	d8c01c17 	ldw	r3,112(sp)
    cd64:	d8801b17 	ldw	r2,108(sp)
    cd68:	d811883a 	mov	r8,sp
    cd6c:	e47fef16 	blt	fp,r17,cd2c <__alt_data_end+0xf800cd2c>
    cd70:	9825883a 	mov	r18,r19
    cd74:	dc002217 	ldw	r16,136(sp)
    cd78:	b827883a 	mov	r19,r23
    cd7c:	882f883a 	mov	r23,r17
    cd80:	dc402817 	ldw	r17,160(sp)
    cd84:	d9402117 	ldw	r5,132(sp)
    cd88:	1dc7883a 	add	r3,r3,r23
    cd8c:	10800044 	addi	r2,r2,1
    cd90:	41400015 	stw	r5,0(r8)
    cd94:	45c00115 	stw	r23,4(r8)
    cd98:	d8c01c15 	stw	r3,112(sp)
    cd9c:	d8801b15 	stw	r2,108(sp)
    cda0:	010001c4 	movi	r4,7
    cda4:	2080b716 	blt	r4,r2,d084 <___svfiprintf_internal_r+0x10ec>
    cda8:	42000204 	addi	r8,r8,8
    cdac:	003f3c06 	br	caa0 <__alt_data_end+0xf800caa0>
    cdb0:	d9402317 	ldw	r5,140(sp)
    cdb4:	d9002717 	ldw	r4,156(sp)
    cdb8:	d9801a04 	addi	r6,sp,104
    cdbc:	000bdc80 	call	bdc8 <__ssprint_r>
    cdc0:	103fb51e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    cdc4:	d8c01c17 	ldw	r3,112(sp)
    cdc8:	d811883a 	mov	r8,sp
    cdcc:	003f7106 	br	cb94 <__alt_data_end+0xf800cb94>
    cdd0:	d9402317 	ldw	r5,140(sp)
    cdd4:	d9002717 	ldw	r4,156(sp)
    cdd8:	d9801a04 	addi	r6,sp,104
    cddc:	000bdc80 	call	bdc8 <__ssprint_r>
    cde0:	103fa126 	beq	r2,zero,cc68 <__alt_data_end+0xf800cc68>
    cde4:	003fac06 	br	cc98 <__alt_data_end+0xf800cc98>
    cde8:	d9402317 	ldw	r5,140(sp)
    cdec:	d9002717 	ldw	r4,156(sp)
    cdf0:	d9801a04 	addi	r6,sp,104
    cdf4:	000bdc80 	call	bdc8 <__ssprint_r>
    cdf8:	103fa71e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    cdfc:	d811883a 	mov	r8,sp
    ce00:	003c9e06 	br	c07c <__alt_data_end+0xf800c07c>
    ce04:	d9402317 	ldw	r5,140(sp)
    ce08:	d9002717 	ldw	r4,156(sp)
    ce0c:	d9801a04 	addi	r6,sp,104
    ce10:	000bdc80 	call	bdc8 <__ssprint_r>
    ce14:	103fa01e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    ce18:	d8c01c17 	ldw	r3,112(sp)
    ce1c:	d8801b17 	ldw	r2,108(sp)
    ce20:	d811883a 	mov	r8,sp
    ce24:	003f5206 	br	cb70 <__alt_data_end+0xf800cb70>
    ce28:	d9402317 	ldw	r5,140(sp)
    ce2c:	d9002717 	ldw	r4,156(sp)
    ce30:	d9801a04 	addi	r6,sp,104
    ce34:	000bdc80 	call	bdc8 <__ssprint_r>
    ce38:	103f971e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    ce3c:	d8c01c17 	ldw	r3,112(sp)
    ce40:	d8801b17 	ldw	r2,108(sp)
    ce44:	d811883a 	mov	r8,sp
    ce48:	003f0506 	br	ca60 <__alt_data_end+0xf800ca60>
    ce4c:	d9402317 	ldw	r5,140(sp)
    ce50:	d9002717 	ldw	r4,156(sp)
    ce54:	d9801a04 	addi	r6,sp,104
    ce58:	000bdc80 	call	bdc8 <__ssprint_r>
    ce5c:	103f8e1e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    ce60:	d8c01c17 	ldw	r3,112(sp)
    ce64:	d8801b17 	ldw	r2,108(sp)
    ce68:	d811883a 	mov	r8,sp
    ce6c:	003f0906 	br	ca94 <__alt_data_end+0xf800ca94>
    ce70:	d9402017 	ldw	r5,128(sp)
    ce74:	d8001d85 	stb	zero,118(sp)
    ce78:	28007716 	blt	r5,zero,d058 <___svfiprintf_internal_r+0x10c0>
    ce7c:	00ffdfc4 	movi	r3,-129
    ce80:	9504b03a 	or	r2,r18,r20
    ce84:	80e0703a 	and	r16,r16,r3
    ce88:	103d3926 	beq	r2,zero,c370 <__alt_data_end+0xf800c370>
    ce8c:	002b883a 	mov	r21,zero
    ce90:	003d3c06 	br	c384 <__alt_data_end+0xf800c384>
    ce94:	d9402317 	ldw	r5,140(sp)
    ce98:	d9002717 	ldw	r4,156(sp)
    ce9c:	d9801a04 	addi	r6,sp,104
    cea0:	000bdc80 	call	bdc8 <__ssprint_r>
    cea4:	103f7c1e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    cea8:	d8c01c17 	ldw	r3,112(sp)
    ceac:	d8801b17 	ldw	r2,108(sp)
    ceb0:	d811883a 	mov	r8,sp
    ceb4:	003edd06 	br	ca2c <__alt_data_end+0xf800ca2c>
    ceb8:	8080100c 	andi	r2,r16,64
    cebc:	d8001d85 	stb	zero,118(sp)
    cec0:	10008426 	beq	r2,zero,d0d4 <___svfiprintf_internal_r+0x113c>
    cec4:	d9402417 	ldw	r5,144(sp)
    cec8:	d8c02017 	ldw	r3,128(sp)
    cecc:	0029883a 	mov	r20,zero
    ced0:	28800104 	addi	r2,r5,4
    ced4:	2c80000b 	ldhu	r18,0(r5)
    ced8:	183eab0e 	bge	r3,zero,c988 <__alt_data_end+0xf800c988>
    cedc:	d8802415 	stw	r2,144(sp)
    cee0:	002b883a 	mov	r21,zero
    cee4:	9504b03a 	or	r2,r18,r20
    cee8:	103e171e 	bne	r2,zero,c748 <__alt_data_end+0xf800c748>
    ceec:	00800044 	movi	r2,1
    cef0:	10803fcc 	andi	r2,r2,255
    cef4:	00c00044 	movi	r3,1
    cef8:	10c05c26 	beq	r2,r3,d06c <___svfiprintf_internal_r+0x10d4>
    cefc:	00c00084 	movi	r3,2
    cf00:	10fd1e26 	beq	r2,r3,c37c <__alt_data_end+0xf800c37c>
    cf04:	003ec406 	br	ca18 <__alt_data_end+0xf800ca18>
    cf08:	d9401e17 	ldw	r5,120(sp)
    cf0c:	2c69c83a 	sub	r20,r5,r17
    cf10:	003d4506 	br	c428 <__alt_data_end+0xf800c428>
    cf14:	d8802415 	stw	r2,144(sp)
    cf18:	98c00007 	ldb	r3,0(r19)
    cf1c:	003c6a06 	br	c0c8 <__alt_data_end+0xf800c0c8>
    cf20:	d9402317 	ldw	r5,140(sp)
    cf24:	d9002717 	ldw	r4,156(sp)
    cf28:	d9801a04 	addi	r6,sp,104
    cf2c:	000bdc80 	call	bdc8 <__ssprint_r>
    cf30:	103f591e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    cf34:	d8c01c17 	ldw	r3,112(sp)
    cf38:	003f4406 	br	cc4c <__alt_data_end+0xf800cc4c>
    cf3c:	01400074 	movhi	r5,1
    cf40:	2957a604 	addi	r5,r5,24216
    cf44:	d9402915 	stw	r5,164(sp)
    cf48:	003d0906 	br	c370 <__alt_data_end+0xf800c370>
    cf4c:	d8c02417 	ldw	r3,144(sp)
    cf50:	d9002617 	ldw	r4,152(sp)
    cf54:	d9402417 	ldw	r5,144(sp)
    cf58:	18800017 	ldw	r2,0(r3)
    cf5c:	2007d7fa 	srai	r3,r4,31
    cf60:	29400104 	addi	r5,r5,4
    cf64:	d9402415 	stw	r5,144(sp)
    cf68:	11000015 	stw	r4,0(r2)
    cf6c:	10c00115 	stw	r3,4(r2)
    cf70:	003c2b06 	br	c020 <__alt_data_end+0xf800c020>
    cf74:	d8c01d45 	stb	r3,117(sp)
    cf78:	d8c02017 	ldw	r3,128(sp)
    cf7c:	00800c04 	movi	r2,48
    cf80:	d8801d05 	stb	r2,116(sp)
    cf84:	d8001d85 	stb	zero,118(sp)
    cf88:	80800094 	ori	r2,r16,2
    cf8c:	1800ac16 	blt	r3,zero,d240 <___svfiprintf_internal_r+0x12a8>
    cf90:	00bfdfc4 	movi	r2,-129
    cf94:	80a0703a 	and	r16,r16,r2
    cf98:	84000094 	ori	r16,r16,2
    cf9c:	002b883a 	mov	r21,zero
    cfa0:	003cf806 	br	c384 <__alt_data_end+0xf800c384>
    cfa4:	98c00007 	ldb	r3,0(r19)
    cfa8:	003c4706 	br	c0c8 <__alt_data_end+0xf800c0c8>
    cfac:	d9402417 	ldw	r5,144(sp)
    cfb0:	2c800017 	ldw	r18,0(r5)
    cfb4:	29400104 	addi	r5,r5,4
    cfb8:	d9402415 	stw	r5,144(sp)
    cfbc:	9029d7fa 	srai	r20,r18,31
    cfc0:	a005883a 	mov	r2,r20
    cfc4:	003dd806 	br	c728 <__alt_data_end+0xf800c728>
    cfc8:	d9402417 	ldw	r5,144(sp)
    cfcc:	0029883a 	mov	r20,zero
    cfd0:	2c800017 	ldw	r18,0(r5)
    cfd4:	29400104 	addi	r5,r5,4
    cfd8:	d9402415 	stw	r5,144(sp)
    cfdc:	003cdb06 	br	c34c <__alt_data_end+0xf800c34c>
    cfe0:	8080100c 	andi	r2,r16,64
    cfe4:	d8001d85 	stb	zero,118(sp)
    cfe8:	10003326 	beq	r2,zero,d0b8 <___svfiprintf_internal_r+0x1120>
    cfec:	d9002417 	ldw	r4,144(sp)
    cff0:	d9402017 	ldw	r5,128(sp)
    cff4:	0029883a 	mov	r20,zero
    cff8:	20800104 	addi	r2,r4,4
    cffc:	2480000b 	ldhu	r18,0(r4)
    d000:	283e7e0e 	bge	r5,zero,c9fc <__alt_data_end+0xf800c9fc>
    d004:	9506b03a 	or	r3,r18,r20
    d008:	d8802415 	stw	r2,144(sp)
    d00c:	183d271e 	bne	r3,zero,c4ac <__alt_data_end+0xf800c4ac>
    d010:	002b883a 	mov	r21,zero
    d014:	0005883a 	mov	r2,zero
    d018:	003fb506 	br	cef0 <__alt_data_end+0xf800cef0>
    d01c:	98c00043 	ldbu	r3,1(r19)
    d020:	8c400814 	ori	r17,r17,32
    d024:	9cc00044 	addi	r19,r19,1
    d028:	18c03fcc 	andi	r3,r3,255
    d02c:	18c0201c 	xori	r3,r3,128
    d030:	18ffe004 	addi	r3,r3,-128
    d034:	003c2406 	br	c0c8 <__alt_data_end+0xf800c0c8>
    d038:	d8c02415 	stw	r3,144(sp)
    d03c:	002b883a 	mov	r21,zero
    d040:	003fa806 	br	cee4 <__alt_data_end+0xf800cee4>
    d044:	01000074 	movhi	r4,1
    d048:	2117a604 	addi	r4,r4,24216
    d04c:	d9002915 	stw	r4,164(sp)
    d050:	d8c02415 	stw	r3,144(sp)
    d054:	1021883a 	mov	r16,r2
    d058:	9504b03a 	or	r2,r18,r20
    d05c:	103f8b1e 	bne	r2,zero,ce8c <__alt_data_end+0xf800ce8c>
    d060:	002b883a 	mov	r21,zero
    d064:	00800084 	movi	r2,2
    d068:	003fa106 	br	cef0 <__alt_data_end+0xf800cef0>
    d06c:	0025883a 	mov	r18,zero
    d070:	94800c04 	addi	r18,r18,48
    d074:	dc8019c5 	stb	r18,103(sp)
    d078:	dd002c17 	ldw	r20,176(sp)
    d07c:	dc4019c4 	addi	r17,sp,103
    d080:	003ce906 	br	c428 <__alt_data_end+0xf800c428>
    d084:	d9402317 	ldw	r5,140(sp)
    d088:	d9002717 	ldw	r4,156(sp)
    d08c:	d9801a04 	addi	r6,sp,104
    d090:	000bdc80 	call	bdc8 <__ssprint_r>
    d094:	103f001e 	bne	r2,zero,cc98 <__alt_data_end+0xf800cc98>
    d098:	d8c01c17 	ldw	r3,112(sp)
    d09c:	d8801b17 	ldw	r2,108(sp)
    d0a0:	d811883a 	mov	r8,sp
    d0a4:	003e7e06 	br	caa0 <__alt_data_end+0xf800caa0>
    d0a8:	01400074 	movhi	r5,1
    d0ac:	29580e04 	addi	r5,r5,24632
    d0b0:	d9402115 	stw	r5,132(sp)
    d0b4:	003ea406 	br	cb48 <__alt_data_end+0xf800cb48>
    d0b8:	d8c02417 	ldw	r3,144(sp)
    d0bc:	d9002017 	ldw	r4,128(sp)
    d0c0:	0029883a 	mov	r20,zero
    d0c4:	18800104 	addi	r2,r3,4
    d0c8:	1c800017 	ldw	r18,0(r3)
    d0cc:	203e4b0e 	bge	r4,zero,c9fc <__alt_data_end+0xf800c9fc>
    d0d0:	003fcc06 	br	d004 <__alt_data_end+0xf800d004>
    d0d4:	d9002417 	ldw	r4,144(sp)
    d0d8:	d9402017 	ldw	r5,128(sp)
    d0dc:	0029883a 	mov	r20,zero
    d0e0:	20800104 	addi	r2,r4,4
    d0e4:	24800017 	ldw	r18,0(r4)
    d0e8:	283e270e 	bge	r5,zero,c988 <__alt_data_end+0xf800c988>
    d0ec:	003f7b06 	br	cedc <__alt_data_end+0xf800cedc>
    d0f0:	8400100c 	andi	r16,r16,64
    d0f4:	80003326 	beq	r16,zero,d1c4 <___svfiprintf_internal_r+0x122c>
    d0f8:	d9402417 	ldw	r5,144(sp)
    d0fc:	d8c02617 	ldw	r3,152(sp)
    d100:	28800017 	ldw	r2,0(r5)
    d104:	29400104 	addi	r5,r5,4
    d108:	d9402415 	stw	r5,144(sp)
    d10c:	10c0000d 	sth	r3,0(r2)
    d110:	003bc306 	br	c020 <__alt_data_end+0xf800c020>
    d114:	d9002417 	ldw	r4,144(sp)
    d118:	0029883a 	mov	r20,zero
    d11c:	24800017 	ldw	r18,0(r4)
    d120:	21000104 	addi	r4,r4,4
    d124:	d9002415 	stw	r4,144(sp)
    d128:	003c8806 	br	c34c <__alt_data_end+0xf800c34c>
    d12c:	d8c02417 	ldw	r3,144(sp)
    d130:	1c800017 	ldw	r18,0(r3)
    d134:	18c00104 	addi	r3,r3,4
    d138:	d8c02415 	stw	r3,144(sp)
    d13c:	9029d7fa 	srai	r20,r18,31
    d140:	a005883a 	mov	r2,r20
    d144:	003d7806 	br	c728 <__alt_data_end+0xf800c728>
    d148:	8809883a 	mov	r4,r17
    d14c:	da002d15 	stw	r8,180(sp)
    d150:	00038ac0 	call	38ac <strlen>
    d154:	1029883a 	mov	r20,r2
    d158:	dd401d83 	ldbu	r21,118(sp)
    d15c:	ddc02415 	stw	r23,144(sp)
    d160:	d8002015 	stw	zero,128(sp)
    d164:	da002d17 	ldw	r8,180(sp)
    d168:	003caf06 	br	c428 <__alt_data_end+0xf800c428>
    d16c:	013fffc4 	movi	r4,-1
    d170:	003df206 	br	c93c <__alt_data_end+0xf800c93c>
    d174:	dd002017 	ldw	r20,128(sp)
    d178:	00800184 	movi	r2,6
    d17c:	1500012e 	bgeu	r2,r20,d184 <___svfiprintf_internal_r+0x11ec>
    d180:	1029883a 	mov	r20,r2
    d184:	a025883a 	mov	r18,r20
    d188:	a0004116 	blt	r20,zero,d290 <___svfiprintf_internal_r+0x12f8>
    d18c:	04400074 	movhi	r17,1
    d190:	ddc02415 	stw	r23,144(sp)
    d194:	8c57ab04 	addi	r17,r17,24236
    d198:	003ce806 	br	c53c <__alt_data_end+0xf800c53c>
    d19c:	04001004 	movi	r16,64
    d1a0:	800b883a 	mov	r5,r16
    d1a4:	00029940 	call	2994 <_malloc_r>
    d1a8:	d8c02317 	ldw	r3,140(sp)
    d1ac:	18800015 	stw	r2,0(r3)
    d1b0:	18800415 	stw	r2,16(r3)
    d1b4:	10004d26 	beq	r2,zero,d2ec <___svfiprintf_internal_r+0x1354>
    d1b8:	d9402317 	ldw	r5,140(sp)
    d1bc:	2c000515 	stw	r16,20(r5)
    d1c0:	003b8906 	br	bfe8 <__alt_data_end+0xf800bfe8>
    d1c4:	d9002417 	ldw	r4,144(sp)
    d1c8:	d9402617 	ldw	r5,152(sp)
    d1cc:	20800017 	ldw	r2,0(r4)
    d1d0:	21000104 	addi	r4,r4,4
    d1d4:	d9002415 	stw	r4,144(sp)
    d1d8:	11400015 	stw	r5,0(r2)
    d1dc:	003b9006 	br	c020 <__alt_data_end+0xf800c020>
    d1e0:	8080004c 	andi	r2,r16,1
    d1e4:	002b883a 	mov	r21,zero
    d1e8:	10000526 	beq	r2,zero,d200 <___svfiprintf_internal_r+0x1268>
    d1ec:	00800c04 	movi	r2,48
    d1f0:	d88019c5 	stb	r2,103(sp)
    d1f4:	dd002c17 	ldw	r20,176(sp)
    d1f8:	dc4019c4 	addi	r17,sp,103
    d1fc:	003c8a06 	br	c428 <__alt_data_end+0xf800c428>
    d200:	0029883a 	mov	r20,zero
    d204:	dc401a04 	addi	r17,sp,104
    d208:	003c8706 	br	c428 <__alt_data_end+0xf800c428>
    d20c:	01400074 	movhi	r5,1
    d210:	29581204 	addi	r5,r5,24648
    d214:	d9402815 	stw	r5,160(sp)
    d218:	003cff06 	br	c618 <__alt_data_end+0xf800c618>
    d21c:	00bfffc4 	movi	r2,-1
    d220:	003ea206 	br	ccac <__alt_data_end+0xf800ccac>
    d224:	00800044 	movi	r2,1
    d228:	10803fcc 	andi	r2,r2,255
    d22c:	00c00044 	movi	r3,1
    d230:	10fd4526 	beq	r2,r3,c748 <__alt_data_end+0xf800c748>
    d234:	00c00084 	movi	r3,2
    d238:	10fc5226 	beq	r2,r3,c384 <__alt_data_end+0xf800c384>
    d23c:	003c9c06 	br	c4b0 <__alt_data_end+0xf800c4b0>
    d240:	1021883a 	mov	r16,r2
    d244:	002b883a 	mov	r21,zero
    d248:	00800084 	movi	r2,2
    d24c:	003ff606 	br	d228 <__alt_data_end+0xf800d228>
    d250:	01000074 	movhi	r4,1
    d254:	21181204 	addi	r4,r4,24648
    d258:	d9002815 	stw	r4,160(sp)
    d25c:	003e7206 	br	cc28 <__alt_data_end+0xf800cc28>
    d260:	01400074 	movhi	r5,1
    d264:	29580e04 	addi	r5,r5,24632
    d268:	d9402115 	stw	r5,132(sp)
    d26c:	003ec506 	br	cd84 <__alt_data_end+0xf800cd84>
    d270:	e027883a 	mov	r19,fp
    d274:	d8002015 	stw	zero,128(sp)
    d278:	003b9406 	br	c0cc <__alt_data_end+0xf800c0cc>
    d27c:	dd002017 	ldw	r20,128(sp)
    d280:	dd401d83 	ldbu	r21,118(sp)
    d284:	ddc02415 	stw	r23,144(sp)
    d288:	d8002015 	stw	zero,128(sp)
    d28c:	003c6606 	br	c428 <__alt_data_end+0xf800c428>
    d290:	0025883a 	mov	r18,zero
    d294:	003fbd06 	br	d18c <__alt_data_end+0xf800d18c>
    d298:	d9402417 	ldw	r5,144(sp)
    d29c:	d8c02417 	ldw	r3,144(sp)
    d2a0:	29400017 	ldw	r5,0(r5)
    d2a4:	19000104 	addi	r4,r3,4
    d2a8:	d9002415 	stw	r4,144(sp)
    d2ac:	d9402015 	stw	r5,128(sp)
    d2b0:	98c00043 	ldbu	r3,1(r19)
    d2b4:	e027883a 	mov	r19,fp
    d2b8:	283f5b0e 	bge	r5,zero,d028 <__alt_data_end+0xf800d028>
    d2bc:	18c03fcc 	andi	r3,r3,255
    d2c0:	013fffc4 	movi	r4,-1
    d2c4:	18c0201c 	xori	r3,r3,128
    d2c8:	d9002015 	stw	r4,128(sp)
    d2cc:	18ffe004 	addi	r3,r3,-128
    d2d0:	003b7d06 	br	c0c8 <__alt_data_end+0xf800c0c8>
    d2d4:	dd401d85 	stb	r21,118(sp)
    d2d8:	003cf306 	br	c6a8 <__alt_data_end+0xf800c6a8>
    d2dc:	dd401d85 	stb	r21,118(sp)
    d2e0:	003d4e06 	br	c81c <__alt_data_end+0xf800c81c>
    d2e4:	dd401d85 	stb	r21,118(sp)
    d2e8:	003c0e06 	br	c324 <__alt_data_end+0xf800c324>
    d2ec:	d9002717 	ldw	r4,156(sp)
    d2f0:	00800304 	movi	r2,12
    d2f4:	20800015 	stw	r2,0(r4)
    d2f8:	00bfffc4 	movi	r2,-1
    d2fc:	003e6b06 	br	ccac <__alt_data_end+0xf800ccac>
    d300:	dd401d85 	stb	r21,118(sp)
    d304:	003d0006 	br	c708 <__alt_data_end+0xf800c708>
    d308:	dd401d85 	stb	r21,118(sp)
    d30c:	003d7106 	br	c8d4 <__alt_data_end+0xf800c8d4>
    d310:	dd401d85 	stb	r21,118(sp)
    d314:	003c5706 	br	c474 <__alt_data_end+0xf800c474>
    d318:	dd401d85 	stb	r21,118(sp)
    d31c:	003c2e06 	br	c3d8 <__alt_data_end+0xf800c3d8>
    d320:	dd401d85 	stb	r21,118(sp)
    d324:	003d8c06 	br	c958 <__alt_data_end+0xf800c958>
    d328:	dd401d85 	stb	r21,118(sp)
    d32c:	003da706 	br	c9cc <__alt_data_end+0xf800c9cc>
    d330:	dd401d85 	stb	r21,118(sp)
    d334:	003cc806 	br	c658 <__alt_data_end+0xf800c658>

0000d338 <__sprint_r.part.0>:
    d338:	28801917 	ldw	r2,100(r5)
    d33c:	defff604 	addi	sp,sp,-40
    d340:	dd400515 	stw	r21,20(sp)
    d344:	dfc00915 	stw	ra,36(sp)
    d348:	df000815 	stw	fp,32(sp)
    d34c:	ddc00715 	stw	r23,28(sp)
    d350:	dd800615 	stw	r22,24(sp)
    d354:	dd000415 	stw	r20,16(sp)
    d358:	dcc00315 	stw	r19,12(sp)
    d35c:	dc800215 	stw	r18,8(sp)
    d360:	dc400115 	stw	r17,4(sp)
    d364:	dc000015 	stw	r16,0(sp)
    d368:	1088000c 	andi	r2,r2,8192
    d36c:	302b883a 	mov	r21,r6
    d370:	10002e26 	beq	r2,zero,d42c <__sprint_r.part.0+0xf4>
    d374:	30800217 	ldw	r2,8(r6)
    d378:	35800017 	ldw	r22,0(r6)
    d37c:	10002926 	beq	r2,zero,d424 <__sprint_r.part.0+0xec>
    d380:	2827883a 	mov	r19,r5
    d384:	2029883a 	mov	r20,r4
    d388:	b5c00104 	addi	r23,r22,4
    d38c:	04bfffc4 	movi	r18,-1
    d390:	bc400017 	ldw	r17,0(r23)
    d394:	b4000017 	ldw	r16,0(r22)
    d398:	0039883a 	mov	fp,zero
    d39c:	8822d0ba 	srli	r17,r17,2
    d3a0:	8800031e 	bne	r17,zero,d3b0 <__sprint_r.part.0+0x78>
    d3a4:	00001806 	br	d408 <__sprint_r.part.0+0xd0>
    d3a8:	84000104 	addi	r16,r16,4
    d3ac:	8f001526 	beq	r17,fp,d404 <__sprint_r.part.0+0xcc>
    d3b0:	81400017 	ldw	r5,0(r16)
    d3b4:	980d883a 	mov	r6,r19
    d3b8:	a009883a 	mov	r4,r20
    d3bc:	000ec700 	call	ec70 <_fputwc_r>
    d3c0:	e7000044 	addi	fp,fp,1
    d3c4:	14bff81e 	bne	r2,r18,d3a8 <__alt_data_end+0xf800d3a8>
    d3c8:	9005883a 	mov	r2,r18
    d3cc:	a8000215 	stw	zero,8(r21)
    d3d0:	a8000115 	stw	zero,4(r21)
    d3d4:	dfc00917 	ldw	ra,36(sp)
    d3d8:	df000817 	ldw	fp,32(sp)
    d3dc:	ddc00717 	ldw	r23,28(sp)
    d3e0:	dd800617 	ldw	r22,24(sp)
    d3e4:	dd400517 	ldw	r21,20(sp)
    d3e8:	dd000417 	ldw	r20,16(sp)
    d3ec:	dcc00317 	ldw	r19,12(sp)
    d3f0:	dc800217 	ldw	r18,8(sp)
    d3f4:	dc400117 	ldw	r17,4(sp)
    d3f8:	dc000017 	ldw	r16,0(sp)
    d3fc:	dec00a04 	addi	sp,sp,40
    d400:	f800283a 	ret
    d404:	a8800217 	ldw	r2,8(r21)
    d408:	8c63883a 	add	r17,r17,r17
    d40c:	8c63883a 	add	r17,r17,r17
    d410:	1445c83a 	sub	r2,r2,r17
    d414:	a8800215 	stw	r2,8(r21)
    d418:	b5800204 	addi	r22,r22,8
    d41c:	bdc00204 	addi	r23,r23,8
    d420:	103fdb1e 	bne	r2,zero,d390 <__alt_data_end+0xf800d390>
    d424:	0005883a 	mov	r2,zero
    d428:	003fe806 	br	d3cc <__alt_data_end+0xf800d3cc>
    d42c:	0009c1c0 	call	9c1c <__sfvwrite_r>
    d430:	003fe606 	br	d3cc <__alt_data_end+0xf800d3cc>

0000d434 <__sprint_r>:
    d434:	30c00217 	ldw	r3,8(r6)
    d438:	18000126 	beq	r3,zero,d440 <__sprint_r+0xc>
    d43c:	000d3381 	jmpi	d338 <__sprint_r.part.0>
    d440:	30000115 	stw	zero,4(r6)
    d444:	0005883a 	mov	r2,zero
    d448:	f800283a 	ret

0000d44c <___vfiprintf_internal_r>:
    d44c:	deffca04 	addi	sp,sp,-216
    d450:	dd403115 	stw	r21,196(sp)
    d454:	dfc03515 	stw	ra,212(sp)
    d458:	df003415 	stw	fp,208(sp)
    d45c:	ddc03315 	stw	r23,204(sp)
    d460:	dd803215 	stw	r22,200(sp)
    d464:	dd003015 	stw	r20,192(sp)
    d468:	dcc02f15 	stw	r19,188(sp)
    d46c:	dc802e15 	stw	r18,184(sp)
    d470:	dc402d15 	stw	r17,180(sp)
    d474:	dc002c15 	stw	r16,176(sp)
    d478:	d9002115 	stw	r4,132(sp)
    d47c:	d9402015 	stw	r5,128(sp)
    d480:	d9c02215 	stw	r7,136(sp)
    d484:	302b883a 	mov	r21,r6
    d488:	20000226 	beq	r4,zero,d494 <___vfiprintf_internal_r+0x48>
    d48c:	20800e17 	ldw	r2,56(r4)
    d490:	1000cf26 	beq	r2,zero,d7d0 <___vfiprintf_internal_r+0x384>
    d494:	d8c02017 	ldw	r3,128(sp)
    d498:	1880030b 	ldhu	r2,12(r3)
    d49c:	10c8000c 	andi	r3,r2,8192
    d4a0:	1800071e 	bne	r3,zero,d4c0 <___vfiprintf_internal_r+0x74>
    d4a4:	d9402017 	ldw	r5,128(sp)
    d4a8:	00f7ffc4 	movi	r3,-8193
    d4ac:	10880014 	ori	r2,r2,8192
    d4b0:	29001917 	ldw	r4,100(r5)
    d4b4:	2880030d 	sth	r2,12(r5)
    d4b8:	20c6703a 	and	r3,r4,r3
    d4bc:	28c01915 	stw	r3,100(r5)
    d4c0:	10c0020c 	andi	r3,r2,8
    d4c4:	1800a526 	beq	r3,zero,d75c <___vfiprintf_internal_r+0x310>
    d4c8:	d9002017 	ldw	r4,128(sp)
    d4cc:	20c00417 	ldw	r3,16(r4)
    d4d0:	1800a226 	beq	r3,zero,d75c <___vfiprintf_internal_r+0x310>
    d4d4:	1080068c 	andi	r2,r2,26
    d4d8:	00c00284 	movi	r3,10
    d4dc:	10c0a826 	beq	r2,r3,d780 <___vfiprintf_internal_r+0x334>
    d4e0:	d9001a04 	addi	r4,sp,104
    d4e4:	d94019c4 	addi	r5,sp,103
    d4e8:	04800074 	movhi	r18,1
    d4ec:	2145c83a 	sub	r2,r4,r5
    d4f0:	94981604 	addi	r18,r18,24664
    d4f4:	d9001e15 	stw	r4,120(sp)
    d4f8:	d9401f15 	stw	r5,124(sp)
    d4fc:	dec01a15 	stw	sp,104(sp)
    d500:	d8001c15 	stw	zero,112(sp)
    d504:	d8001b15 	stw	zero,108(sp)
    d508:	d811883a 	mov	r8,sp
    d50c:	d8002615 	stw	zero,152(sp)
    d510:	d8002415 	stw	zero,144(sp)
    d514:	d8802815 	stw	r2,160(sp)
    d518:	a82d883a 	mov	r22,r21
    d51c:	b0800007 	ldb	r2,0(r22)
    d520:	10040d26 	beq	r2,zero,e558 <___vfiprintf_internal_r+0x110c>
    d524:	00c00944 	movi	r3,37
    d528:	b029883a 	mov	r20,r22
    d52c:	10c0021e 	bne	r2,r3,d538 <___vfiprintf_internal_r+0xec>
    d530:	00001606 	br	d58c <___vfiprintf_internal_r+0x140>
    d534:	10c00326 	beq	r2,r3,d544 <___vfiprintf_internal_r+0xf8>
    d538:	a5000044 	addi	r20,r20,1
    d53c:	a0800007 	ldb	r2,0(r20)
    d540:	103ffc1e 	bne	r2,zero,d534 <__alt_data_end+0xf800d534>
    d544:	a5a1c83a 	sub	r16,r20,r22
    d548:	80001026 	beq	r16,zero,d58c <___vfiprintf_internal_r+0x140>
    d54c:	d8c01c17 	ldw	r3,112(sp)
    d550:	d8801b17 	ldw	r2,108(sp)
    d554:	45800015 	stw	r22,0(r8)
    d558:	80c7883a 	add	r3,r16,r3
    d55c:	10800044 	addi	r2,r2,1
    d560:	44000115 	stw	r16,4(r8)
    d564:	d8c01c15 	stw	r3,112(sp)
    d568:	d8801b15 	stw	r2,108(sp)
    d56c:	010001c4 	movi	r4,7
    d570:	2080750e 	bge	r4,r2,d748 <___vfiprintf_internal_r+0x2fc>
    d574:	1803951e 	bne	r3,zero,e3cc <___vfiprintf_internal_r+0xf80>
    d578:	d8c02417 	ldw	r3,144(sp)
    d57c:	d8001b15 	stw	zero,108(sp)
    d580:	d811883a 	mov	r8,sp
    d584:	1c07883a 	add	r3,r3,r16
    d588:	d8c02415 	stw	r3,144(sp)
    d58c:	a0800007 	ldb	r2,0(r20)
    d590:	1002e026 	beq	r2,zero,e114 <___vfiprintf_internal_r+0xcc8>
    d594:	a5800044 	addi	r22,r20,1
    d598:	a0c00047 	ldb	r3,1(r20)
    d59c:	d8001d85 	stb	zero,118(sp)
    d5a0:	0027883a 	mov	r19,zero
    d5a4:	d8002305 	stb	zero,140(sp)
    d5a8:	043fffc4 	movi	r16,-1
    d5ac:	d8002515 	stw	zero,148(sp)
    d5b0:	0023883a 	mov	r17,zero
    d5b4:	05001604 	movi	r20,88
    d5b8:	05400244 	movi	r21,9
    d5bc:	402f883a 	mov	r23,r8
    d5c0:	b5800044 	addi	r22,r22,1
    d5c4:	18bff804 	addi	r2,r3,-32
    d5c8:	a0827736 	bltu	r20,r2,dfa8 <___vfiprintf_internal_r+0xb5c>
    d5cc:	100490ba 	slli	r2,r2,2
    d5d0:	01000074 	movhi	r4,1
    d5d4:	21357904 	addi	r4,r4,-10780
    d5d8:	1105883a 	add	r2,r2,r4
    d5dc:	10800017 	ldw	r2,0(r2)
    d5e0:	1000683a 	jmp	r2
    d5e4:	0000dca8 	cmpgeui	zero,zero,882
    d5e8:	0000dfa8 	cmpgeui	zero,zero,894
    d5ec:	0000dfa8 	cmpgeui	zero,zero,894
    d5f0:	0000dcc4 	movi	zero,883
    d5f4:	0000dfa8 	cmpgeui	zero,zero,894
    d5f8:	0000dfa8 	cmpgeui	zero,zero,894
    d5fc:	0000dfa8 	cmpgeui	zero,zero,894
    d600:	0000dfa8 	cmpgeui	zero,zero,894
    d604:	0000dfa8 	cmpgeui	zero,zero,894
    d608:	0000dfa8 	cmpgeui	zero,zero,894
    d60c:	0000decc 	andi	zero,zero,891
    d610:	0000def0 	cmpltui	zero,zero,891
    d614:	0000dfa8 	cmpgeui	zero,zero,894
    d618:	0000d7e8 	cmpgeui	zero,zero,863
    d61c:	0000df04 	movi	zero,892
    d620:	0000dfa8 	cmpgeui	zero,zero,894
    d624:	0000dcd0 	cmplti	zero,zero,883
    d628:	0000dcdc 	xori	zero,zero,883
    d62c:	0000dcdc 	xori	zero,zero,883
    d630:	0000dcdc 	xori	zero,zero,883
    d634:	0000dcdc 	xori	zero,zero,883
    d638:	0000dcdc 	xori	zero,zero,883
    d63c:	0000dcdc 	xori	zero,zero,883
    d640:	0000dcdc 	xori	zero,zero,883
    d644:	0000dcdc 	xori	zero,zero,883
    d648:	0000dcdc 	xori	zero,zero,883
    d64c:	0000dfa8 	cmpgeui	zero,zero,894
    d650:	0000dfa8 	cmpgeui	zero,zero,894
    d654:	0000dfa8 	cmpgeui	zero,zero,894
    d658:	0000dfa8 	cmpgeui	zero,zero,894
    d65c:	0000dfa8 	cmpgeui	zero,zero,894
    d660:	0000dfa8 	cmpgeui	zero,zero,894
    d664:	0000dfa8 	cmpgeui	zero,zero,894
    d668:	0000dfa8 	cmpgeui	zero,zero,894
    d66c:	0000dfa8 	cmpgeui	zero,zero,894
    d670:	0000dfa8 	cmpgeui	zero,zero,894
    d674:	0000dd1c 	xori	zero,zero,884
    d678:	0000dfa8 	cmpgeui	zero,zero,894
    d67c:	0000dfa8 	cmpgeui	zero,zero,894
    d680:	0000dfa8 	cmpgeui	zero,zero,894
    d684:	0000dfa8 	cmpgeui	zero,zero,894
    d688:	0000dfa8 	cmpgeui	zero,zero,894
    d68c:	0000dfa8 	cmpgeui	zero,zero,894
    d690:	0000dfa8 	cmpgeui	zero,zero,894
    d694:	0000dfa8 	cmpgeui	zero,zero,894
    d698:	0000dfa8 	cmpgeui	zero,zero,894
    d69c:	0000dfa8 	cmpgeui	zero,zero,894
    d6a0:	0000dd58 	cmpnei	zero,zero,885
    d6a4:	0000dfa8 	cmpgeui	zero,zero,894
    d6a8:	0000dfa8 	cmpgeui	zero,zero,894
    d6ac:	0000dfa8 	cmpgeui	zero,zero,894
    d6b0:	0000dfa8 	cmpgeui	zero,zero,894
    d6b4:	0000dfa8 	cmpgeui	zero,zero,894
    d6b8:	0000ddb4 	movhi	zero,886
    d6bc:	0000dfa8 	cmpgeui	zero,zero,894
    d6c0:	0000dfa8 	cmpgeui	zero,zero,894
    d6c4:	0000de28 	cmpgeui	zero,zero,888
    d6c8:	0000dfa8 	cmpgeui	zero,zero,894
    d6cc:	0000dfa8 	cmpgeui	zero,zero,894
    d6d0:	0000dfa8 	cmpgeui	zero,zero,894
    d6d4:	0000dfa8 	cmpgeui	zero,zero,894
    d6d8:	0000dfa8 	cmpgeui	zero,zero,894
    d6dc:	0000dfa8 	cmpgeui	zero,zero,894
    d6e0:	0000dfa8 	cmpgeui	zero,zero,894
    d6e4:	0000dfa8 	cmpgeui	zero,zero,894
    d6e8:	0000dfa8 	cmpgeui	zero,zero,894
    d6ec:	0000dfa8 	cmpgeui	zero,zero,894
    d6f0:	0000dbd0 	cmplti	zero,zero,879
    d6f4:	0000dc00 	call	dc0 <main+0x86c>
    d6f8:	0000dfa8 	cmpgeui	zero,zero,894
    d6fc:	0000dfa8 	cmpgeui	zero,zero,894
    d700:	0000dfa8 	cmpgeui	zero,zero,894
    d704:	0000df50 	cmplti	zero,zero,893
    d708:	0000dc00 	call	dc0 <main+0x86c>
    d70c:	0000dfa8 	cmpgeui	zero,zero,894
    d710:	0000dfa8 	cmpgeui	zero,zero,894
    d714:	0000daa8 	cmpgeui	zero,zero,874
    d718:	0000dfa8 	cmpgeui	zero,zero,894
    d71c:	0000dabc 	xorhi	zero,zero,874
    d720:	0000daf4 	movhi	zero,875
    d724:	0000d7f4 	movhi	zero,863
    d728:	0000da9c 	xori	zero,zero,874
    d72c:	0000dfa8 	cmpgeui	zero,zero,894
    d730:	0000de68 	cmpgeui	zero,zero,889
    d734:	0000dfa8 	cmpgeui	zero,zero,894
    d738:	0000deb4 	movhi	zero,890
    d73c:	0000dfa8 	cmpgeui	zero,zero,894
    d740:	0000dfa8 	cmpgeui	zero,zero,894
    d744:	0000db78 	rdprs	zero,zero,877
    d748:	42000204 	addi	r8,r8,8
    d74c:	d8c02417 	ldw	r3,144(sp)
    d750:	1c07883a 	add	r3,r3,r16
    d754:	d8c02415 	stw	r3,144(sp)
    d758:	003f8c06 	br	d58c <__alt_data_end+0xf800d58c>
    d75c:	d9402017 	ldw	r5,128(sp)
    d760:	d9002117 	ldw	r4,132(sp)
    d764:	00080140 	call	8014 <__swsetup_r>
    d768:	1003c11e 	bne	r2,zero,e670 <___vfiprintf_internal_r+0x1224>
    d76c:	d9402017 	ldw	r5,128(sp)
    d770:	00c00284 	movi	r3,10
    d774:	2880030b 	ldhu	r2,12(r5)
    d778:	1080068c 	andi	r2,r2,26
    d77c:	10ff581e 	bne	r2,r3,d4e0 <__alt_data_end+0xf800d4e0>
    d780:	d8c02017 	ldw	r3,128(sp)
    d784:	1880038f 	ldh	r2,14(r3)
    d788:	103f5516 	blt	r2,zero,d4e0 <__alt_data_end+0xf800d4e0>
    d78c:	d9c02217 	ldw	r7,136(sp)
    d790:	d9002117 	ldw	r4,132(sp)
    d794:	a80d883a 	mov	r6,r21
    d798:	180b883a 	mov	r5,r3
    d79c:	000e9740 	call	e974 <__sbprintf>
    d7a0:	dfc03517 	ldw	ra,212(sp)
    d7a4:	df003417 	ldw	fp,208(sp)
    d7a8:	ddc03317 	ldw	r23,204(sp)
    d7ac:	dd803217 	ldw	r22,200(sp)
    d7b0:	dd403117 	ldw	r21,196(sp)
    d7b4:	dd003017 	ldw	r20,192(sp)
    d7b8:	dcc02f17 	ldw	r19,188(sp)
    d7bc:	dc802e17 	ldw	r18,184(sp)
    d7c0:	dc402d17 	ldw	r17,180(sp)
    d7c4:	dc002c17 	ldw	r16,176(sp)
    d7c8:	dec03604 	addi	sp,sp,216
    d7cc:	f800283a 	ret
    d7d0:	0001a880 	call	1a88 <__sinit>
    d7d4:	003f2f06 	br	d494 <__alt_data_end+0xf800d494>
    d7d8:	d8c02517 	ldw	r3,148(sp)
    d7dc:	d8802215 	stw	r2,136(sp)
    d7e0:	00c7c83a 	sub	r3,zero,r3
    d7e4:	d8c02515 	stw	r3,148(sp)
    d7e8:	8c400114 	ori	r17,r17,4
    d7ec:	b0c00007 	ldb	r3,0(r22)
    d7f0:	003f7306 	br	d5c0 <__alt_data_end+0xf800d5c0>
    d7f4:	00800c04 	movi	r2,48
    d7f8:	d9402217 	ldw	r5,136(sp)
    d7fc:	d8801d05 	stb	r2,116(sp)
    d800:	00801e04 	movi	r2,120
    d804:	d8801d45 	stb	r2,117(sp)
    d808:	d8001d85 	stb	zero,118(sp)
    d80c:	b811883a 	mov	r8,r23
    d810:	28c00104 	addi	r3,r5,4
    d814:	2cc00017 	ldw	r19,0(r5)
    d818:	0029883a 	mov	r20,zero
    d81c:	88800094 	ori	r2,r17,2
    d820:	80032516 	blt	r16,zero,e4b8 <___vfiprintf_internal_r+0x106c>
    d824:	00bfdfc4 	movi	r2,-129
    d828:	88a2703a 	and	r17,r17,r2
    d82c:	d8c02215 	stw	r3,136(sp)
    d830:	8c400094 	ori	r17,r17,2
    d834:	98032a1e 	bne	r19,zero,e4e0 <___vfiprintf_internal_r+0x1094>
    d838:	00800074 	movhi	r2,1
    d83c:	1097a604 	addi	r2,r2,24216
    d840:	d8802615 	stw	r2,152(sp)
    d844:	002b883a 	mov	r21,zero
    d848:	8001741e 	bne	r16,zero,de1c <___vfiprintf_internal_r+0x9d0>
    d84c:	0021883a 	mov	r16,zero
    d850:	0029883a 	mov	r20,zero
    d854:	ddc01a04 	addi	r23,sp,104
    d858:	8027883a 	mov	r19,r16
    d85c:	8500010e 	bge	r16,r20,d864 <___vfiprintf_internal_r+0x418>
    d860:	a027883a 	mov	r19,r20
    d864:	ad403fcc 	andi	r21,r21,255
    d868:	ad40201c 	xori	r21,r21,128
    d86c:	ad7fe004 	addi	r21,r21,-128
    d870:	a8000126 	beq	r21,zero,d878 <___vfiprintf_internal_r+0x42c>
    d874:	9cc00044 	addi	r19,r19,1
    d878:	89c0008c 	andi	r7,r17,2
    d87c:	38000126 	beq	r7,zero,d884 <___vfiprintf_internal_r+0x438>
    d880:	9cc00084 	addi	r19,r19,2
    d884:	88c0210c 	andi	r3,r17,132
    d888:	1801dd1e 	bne	r3,zero,e000 <___vfiprintf_internal_r+0xbb4>
    d88c:	d9402517 	ldw	r5,148(sp)
    d890:	2cebc83a 	sub	r21,r5,r19
    d894:	0541da0e 	bge	zero,r21,e000 <___vfiprintf_internal_r+0xbb4>
    d898:	07000404 	movi	fp,16
    d89c:	d8801c17 	ldw	r2,112(sp)
    d8a0:	e543be0e 	bge	fp,r21,e79c <___vfiprintf_internal_r+0x1350>
    d8a4:	01400074 	movhi	r5,1
    d8a8:	29581a04 	addi	r5,r5,24680
    d8ac:	dc002715 	stw	r16,156(sp)
    d8b0:	d9801b17 	ldw	r6,108(sp)
    d8b4:	a821883a 	mov	r16,r21
    d8b8:	d9402315 	stw	r5,140(sp)
    d8bc:	028001c4 	movi	r10,7
    d8c0:	d9c02915 	stw	r7,164(sp)
    d8c4:	182b883a 	mov	r21,r3
    d8c8:	00000506 	br	d8e0 <___vfiprintf_internal_r+0x494>
    d8cc:	31000084 	addi	r4,r6,2
    d8d0:	42000204 	addi	r8,r8,8
    d8d4:	180d883a 	mov	r6,r3
    d8d8:	843ffc04 	addi	r16,r16,-16
    d8dc:	e4000f0e 	bge	fp,r16,d91c <___vfiprintf_internal_r+0x4d0>
    d8e0:	01000074 	movhi	r4,1
    d8e4:	10800404 	addi	r2,r2,16
    d8e8:	30c00044 	addi	r3,r6,1
    d8ec:	21181a04 	addi	r4,r4,24680
    d8f0:	41000015 	stw	r4,0(r8)
    d8f4:	47000115 	stw	fp,4(r8)
    d8f8:	d8801c15 	stw	r2,112(sp)
    d8fc:	d8c01b15 	stw	r3,108(sp)
    d900:	50fff20e 	bge	r10,r3,d8cc <__alt_data_end+0xf800d8cc>
    d904:	1001b21e 	bne	r2,zero,dfd0 <___vfiprintf_internal_r+0xb84>
    d908:	843ffc04 	addi	r16,r16,-16
    d90c:	000d883a 	mov	r6,zero
    d910:	01000044 	movi	r4,1
    d914:	d811883a 	mov	r8,sp
    d918:	e43ff116 	blt	fp,r16,d8e0 <__alt_data_end+0xf800d8e0>
    d91c:	a807883a 	mov	r3,r21
    d920:	d9c02917 	ldw	r7,164(sp)
    d924:	802b883a 	mov	r21,r16
    d928:	dc002717 	ldw	r16,156(sp)
    d92c:	d9402317 	ldw	r5,140(sp)
    d930:	a885883a 	add	r2,r21,r2
    d934:	45400115 	stw	r21,4(r8)
    d938:	41400015 	stw	r5,0(r8)
    d93c:	d8801c15 	stw	r2,112(sp)
    d940:	d9001b15 	stw	r4,108(sp)
    d944:	014001c4 	movi	r5,7
    d948:	29026216 	blt	r5,r4,e2d4 <___vfiprintf_internal_r+0xe88>
    d94c:	d9801d87 	ldb	r6,118(sp)
    d950:	42000204 	addi	r8,r8,8
    d954:	21400044 	addi	r5,r4,1
    d958:	3001ae1e 	bne	r6,zero,e014 <___vfiprintf_internal_r+0xbc8>
    d95c:	3801bb26 	beq	r7,zero,e04c <___vfiprintf_internal_r+0xc00>
    d960:	d9001d04 	addi	r4,sp,116
    d964:	10800084 	addi	r2,r2,2
    d968:	41000015 	stw	r4,0(r8)
    d96c:	01000084 	movi	r4,2
    d970:	41000115 	stw	r4,4(r8)
    d974:	d8801c15 	stw	r2,112(sp)
    d978:	d9401b15 	stw	r5,108(sp)
    d97c:	010001c4 	movi	r4,7
    d980:	2142680e 	bge	r4,r5,e324 <___vfiprintf_internal_r+0xed8>
    d984:	1002b11e 	bne	r2,zero,e44c <___vfiprintf_internal_r+0x1000>
    d988:	01802004 	movi	r6,128
    d98c:	01400044 	movi	r5,1
    d990:	0009883a 	mov	r4,zero
    d994:	d811883a 	mov	r8,sp
    d998:	1981ae1e 	bne	r3,r6,e054 <___vfiprintf_internal_r+0xc08>
    d99c:	d8c02517 	ldw	r3,148(sp)
    d9a0:	1cf9c83a 	sub	fp,r3,r19
    d9a4:	0701ab0e 	bge	zero,fp,e054 <___vfiprintf_internal_r+0xc08>
    d9a8:	05400404 	movi	r21,16
    d9ac:	af03a90e 	bge	r21,fp,e854 <___vfiprintf_internal_r+0x1408>
    d9b0:	01400074 	movhi	r5,1
    d9b4:	29581604 	addi	r5,r5,24664
    d9b8:	d9402315 	stw	r5,140(sp)
    d9bc:	01c001c4 	movi	r7,7
    d9c0:	00000506 	br	d9d8 <___vfiprintf_internal_r+0x58c>
    d9c4:	21800084 	addi	r6,r4,2
    d9c8:	42000204 	addi	r8,r8,8
    d9cc:	1809883a 	mov	r4,r3
    d9d0:	e73ffc04 	addi	fp,fp,-16
    d9d4:	af000d0e 	bge	r21,fp,da0c <___vfiprintf_internal_r+0x5c0>
    d9d8:	10800404 	addi	r2,r2,16
    d9dc:	20c00044 	addi	r3,r4,1
    d9e0:	44800015 	stw	r18,0(r8)
    d9e4:	45400115 	stw	r21,4(r8)
    d9e8:	d8801c15 	stw	r2,112(sp)
    d9ec:	d8c01b15 	stw	r3,108(sp)
    d9f0:	38fff40e 	bge	r7,r3,d9c4 <__alt_data_end+0xf800d9c4>
    d9f4:	10022b1e 	bne	r2,zero,e2a4 <___vfiprintf_internal_r+0xe58>
    d9f8:	e73ffc04 	addi	fp,fp,-16
    d9fc:	01800044 	movi	r6,1
    da00:	0009883a 	mov	r4,zero
    da04:	d811883a 	mov	r8,sp
    da08:	af3ff316 	blt	r21,fp,d9d8 <__alt_data_end+0xf800d9d8>
    da0c:	d8c02317 	ldw	r3,140(sp)
    da10:	1705883a 	add	r2,r2,fp
    da14:	47000115 	stw	fp,4(r8)
    da18:	40c00015 	stw	r3,0(r8)
    da1c:	d8801c15 	stw	r2,112(sp)
    da20:	d9801b15 	stw	r6,108(sp)
    da24:	00c001c4 	movi	r3,7
    da28:	19829416 	blt	r3,r6,e47c <___vfiprintf_internal_r+0x1030>
    da2c:	8521c83a 	sub	r16,r16,r20
    da30:	42000204 	addi	r8,r8,8
    da34:	31400044 	addi	r5,r6,1
    da38:	3009883a 	mov	r4,r6
    da3c:	04018716 	blt	zero,r16,e05c <___vfiprintf_internal_r+0xc10>
    da40:	a085883a 	add	r2,r20,r2
    da44:	45c00015 	stw	r23,0(r8)
    da48:	45000115 	stw	r20,4(r8)
    da4c:	d8801c15 	stw	r2,112(sp)
    da50:	d9401b15 	stw	r5,108(sp)
    da54:	00c001c4 	movi	r3,7
    da58:	1941c20e 	bge	r3,r5,e164 <___vfiprintf_internal_r+0xd18>
    da5c:	1002531e 	bne	r2,zero,e3ac <___vfiprintf_internal_r+0xf60>
    da60:	d8001b15 	stw	zero,108(sp)
    da64:	8c40010c 	andi	r17,r17,4
    da68:	88023226 	beq	r17,zero,e334 <___vfiprintf_internal_r+0xee8>
    da6c:	d9002517 	ldw	r4,148(sp)
    da70:	24e3c83a 	sub	r17,r4,r19
    da74:	04432916 	blt	zero,r17,e71c <___vfiprintf_internal_r+0x12d0>
    da78:	d8802517 	ldw	r2,148(sp)
    da7c:	14c0010e 	bge	r2,r19,da84 <___vfiprintf_internal_r+0x638>
    da80:	9805883a 	mov	r2,r19
    da84:	d8c02417 	ldw	r3,144(sp)
    da88:	1887883a 	add	r3,r3,r2
    da8c:	d8c02415 	stw	r3,144(sp)
    da90:	d8001b15 	stw	zero,108(sp)
    da94:	d811883a 	mov	r8,sp
    da98:	003ea006 	br	d51c <__alt_data_end+0xf800d51c>
    da9c:	8c400814 	ori	r17,r17,32
    daa0:	b0c00007 	ldb	r3,0(r22)
    daa4:	003ec606 	br	d5c0 <__alt_data_end+0xf800d5c0>
    daa8:	b0c00007 	ldb	r3,0(r22)
    daac:	00801b04 	movi	r2,108
    dab0:	18832026 	beq	r3,r2,e734 <___vfiprintf_internal_r+0x12e8>
    dab4:	8c400414 	ori	r17,r17,16
    dab8:	003ec106 	br	d5c0 <__alt_data_end+0xf800d5c0>
    dabc:	9cc03fcc 	andi	r19,r19,255
    dac0:	b811883a 	mov	r8,r23
    dac4:	9803981e 	bne	r19,zero,e928 <___vfiprintf_internal_r+0x14dc>
    dac8:	8880080c 	andi	r2,r17,32
    dacc:	1002be26 	beq	r2,zero,e5c8 <___vfiprintf_internal_r+0x117c>
    dad0:	d9002217 	ldw	r4,136(sp)
    dad4:	d9402417 	ldw	r5,144(sp)
    dad8:	20800017 	ldw	r2,0(r4)
    dadc:	2807d7fa 	srai	r3,r5,31
    dae0:	21000104 	addi	r4,r4,4
    dae4:	d9002215 	stw	r4,136(sp)
    dae8:	11400015 	stw	r5,0(r2)
    daec:	10c00115 	stw	r3,4(r2)
    daf0:	003e8a06 	br	d51c <__alt_data_end+0xf800d51c>
    daf4:	9cc03fcc 	andi	r19,r19,255
    daf8:	b811883a 	mov	r8,r23
    dafc:	9803871e 	bne	r19,zero,e91c <___vfiprintf_internal_r+0x14d0>
    db00:	8880080c 	andi	r2,r17,32
    db04:	10009a26 	beq	r2,zero,dd70 <___vfiprintf_internal_r+0x924>
    db08:	d9002217 	ldw	r4,136(sp)
    db0c:	d8001d85 	stb	zero,118(sp)
    db10:	20800204 	addi	r2,r4,8
    db14:	24c00017 	ldw	r19,0(r4)
    db18:	25000117 	ldw	r20,4(r4)
    db1c:	8002a416 	blt	r16,zero,e5b0 <___vfiprintf_internal_r+0x1164>
    db20:	013fdfc4 	movi	r4,-129
    db24:	9d06b03a 	or	r3,r19,r20
    db28:	d8802215 	stw	r2,136(sp)
    db2c:	8922703a 	and	r17,r17,r4
    db30:	18009b26 	beq	r3,zero,dda0 <___vfiprintf_internal_r+0x954>
    db34:	002b883a 	mov	r21,zero
    db38:	ddc01a04 	addi	r23,sp,104
    db3c:	9806d0fa 	srli	r3,r19,3
    db40:	a008977a 	slli	r4,r20,29
    db44:	a028d0fa 	srli	r20,r20,3
    db48:	9cc001cc 	andi	r19,r19,7
    db4c:	98800c04 	addi	r2,r19,48
    db50:	bdffffc4 	addi	r23,r23,-1
    db54:	20e6b03a 	or	r19,r4,r3
    db58:	b8800005 	stb	r2,0(r23)
    db5c:	9d06b03a 	or	r3,r19,r20
    db60:	183ff61e 	bne	r3,zero,db3c <__alt_data_end+0xf800db3c>
    db64:	88c0004c 	andi	r3,r17,1
    db68:	18021f1e 	bne	r3,zero,e3e8 <___vfiprintf_internal_r+0xf9c>
    db6c:	d9401e17 	ldw	r5,120(sp)
    db70:	2de9c83a 	sub	r20,r5,r23
    db74:	003f3806 	br	d858 <__alt_data_end+0xf800d858>
    db78:	9cc03fcc 	andi	r19,r19,255
    db7c:	b811883a 	mov	r8,r23
    db80:	98034f1e 	bne	r19,zero,e8c0 <___vfiprintf_internal_r+0x1474>
    db84:	00800074 	movhi	r2,1
    db88:	1097a604 	addi	r2,r2,24216
    db8c:	d8802615 	stw	r2,152(sp)
    db90:	8880080c 	andi	r2,r17,32
    db94:	1000ac26 	beq	r2,zero,de48 <___vfiprintf_internal_r+0x9fc>
    db98:	d9002217 	ldw	r4,136(sp)
    db9c:	24c00017 	ldw	r19,0(r4)
    dba0:	25000117 	ldw	r20,4(r4)
    dba4:	21000204 	addi	r4,r4,8
    dba8:	d9002215 	stw	r4,136(sp)
    dbac:	8880004c 	andi	r2,r17,1
    dbb0:	1001e726 	beq	r2,zero,e350 <___vfiprintf_internal_r+0xf04>
    dbb4:	9d04b03a 	or	r2,r19,r20
    dbb8:	10025c1e 	bne	r2,zero,e52c <___vfiprintf_internal_r+0x10e0>
    dbbc:	d8001d85 	stb	zero,118(sp)
    dbc0:	80024416 	blt	r16,zero,e4d4 <___vfiprintf_internal_r+0x1088>
    dbc4:	00bfdfc4 	movi	r2,-129
    dbc8:	88a2703a 	and	r17,r17,r2
    dbcc:	003f1d06 	br	d844 <__alt_data_end+0xf800d844>
    dbd0:	d8c02217 	ldw	r3,136(sp)
    dbd4:	04c00044 	movi	r19,1
    dbd8:	b811883a 	mov	r8,r23
    dbdc:	18800017 	ldw	r2,0(r3)
    dbe0:	18c00104 	addi	r3,r3,4
    dbe4:	d8001d85 	stb	zero,118(sp)
    dbe8:	d8801005 	stb	r2,64(sp)
    dbec:	d8c02215 	stw	r3,136(sp)
    dbf0:	9829883a 	mov	r20,r19
    dbf4:	ddc01004 	addi	r23,sp,64
    dbf8:	0021883a 	mov	r16,zero
    dbfc:	003f1e06 	br	d878 <__alt_data_end+0xf800d878>
    dc00:	9cc03fcc 	andi	r19,r19,255
    dc04:	b811883a 	mov	r8,r23
    dc08:	9803331e 	bne	r19,zero,e8d8 <___vfiprintf_internal_r+0x148c>
    dc0c:	8880080c 	andi	r2,r17,32
    dc10:	10004826 	beq	r2,zero,dd34 <___vfiprintf_internal_r+0x8e8>
    dc14:	d9002217 	ldw	r4,136(sp)
    dc18:	20800117 	ldw	r2,4(r4)
    dc1c:	24c00017 	ldw	r19,0(r4)
    dc20:	21000204 	addi	r4,r4,8
    dc24:	d9002215 	stw	r4,136(sp)
    dc28:	1029883a 	mov	r20,r2
    dc2c:	10024c16 	blt	r2,zero,e560 <___vfiprintf_internal_r+0x1114>
    dc30:	dd401d83 	ldbu	r21,118(sp)
    dc34:	80007116 	blt	r16,zero,ddfc <___vfiprintf_internal_r+0x9b0>
    dc38:	00ffdfc4 	movi	r3,-129
    dc3c:	9d04b03a 	or	r2,r19,r20
    dc40:	88e2703a 	and	r17,r17,r3
    dc44:	1000d126 	beq	r2,zero,df8c <___vfiprintf_internal_r+0xb40>
    dc48:	a0023526 	beq	r20,zero,e520 <___vfiprintf_internal_r+0x10d4>
    dc4c:	ddc01a04 	addi	r23,sp,104
    dc50:	4039883a 	mov	fp,r8
    dc54:	9809883a 	mov	r4,r19
    dc58:	a00b883a 	mov	r5,r20
    dc5c:	01800284 	movi	r6,10
    dc60:	000f883a 	mov	r7,zero
    dc64:	000f6500 	call	f650 <__umoddi3>
    dc68:	10800c04 	addi	r2,r2,48
    dc6c:	bdffffc4 	addi	r23,r23,-1
    dc70:	9809883a 	mov	r4,r19
    dc74:	a00b883a 	mov	r5,r20
    dc78:	b8800005 	stb	r2,0(r23)
    dc7c:	01800284 	movi	r6,10
    dc80:	000f883a 	mov	r7,zero
    dc84:	000f0540 	call	f054 <__udivdi3>
    dc88:	1027883a 	mov	r19,r2
    dc8c:	10c4b03a 	or	r2,r2,r3
    dc90:	1829883a 	mov	r20,r3
    dc94:	103fef1e 	bne	r2,zero,dc54 <__alt_data_end+0xf800dc54>
    dc98:	d9001e17 	ldw	r4,120(sp)
    dc9c:	e011883a 	mov	r8,fp
    dca0:	25e9c83a 	sub	r20,r4,r23
    dca4:	003eec06 	br	d858 <__alt_data_end+0xf800d858>
    dca8:	d8802307 	ldb	r2,140(sp)
    dcac:	1002361e 	bne	r2,zero,e588 <___vfiprintf_internal_r+0x113c>
    dcb0:	00c00804 	movi	r3,32
    dcb4:	d8c02305 	stb	r3,140(sp)
    dcb8:	04c00044 	movi	r19,1
    dcbc:	b0c00007 	ldb	r3,0(r22)
    dcc0:	003e3f06 	br	d5c0 <__alt_data_end+0xf800d5c0>
    dcc4:	8c400054 	ori	r17,r17,1
    dcc8:	b0c00007 	ldb	r3,0(r22)
    dccc:	003e3c06 	br	d5c0 <__alt_data_end+0xf800d5c0>
    dcd0:	8c402014 	ori	r17,r17,128
    dcd4:	b0c00007 	ldb	r3,0(r22)
    dcd8:	003e3906 	br	d5c0 <__alt_data_end+0xf800d5c0>
    dcdc:	dc002715 	stw	r16,156(sp)
    dce0:	d8002515 	stw	zero,148(sp)
    dce4:	1f3ff404 	addi	fp,r3,-48
    dce8:	0009883a 	mov	r4,zero
    dcec:	b021883a 	mov	r16,r22
    dcf0:	01400284 	movi	r5,10
    dcf4:	000fc140 	call	fc14 <__mulsi3>
    dcf8:	80c00007 	ldb	r3,0(r16)
    dcfc:	e089883a 	add	r4,fp,r2
    dd00:	b5800044 	addi	r22,r22,1
    dd04:	1f3ff404 	addi	fp,r3,-48
    dd08:	b021883a 	mov	r16,r22
    dd0c:	af3ff82e 	bgeu	r21,fp,dcf0 <__alt_data_end+0xf800dcf0>
    dd10:	d9002515 	stw	r4,148(sp)
    dd14:	dc002717 	ldw	r16,156(sp)
    dd18:	003e2a06 	br	d5c4 <__alt_data_end+0xf800d5c4>
    dd1c:	9cc03fcc 	andi	r19,r19,255
    dd20:	b811883a 	mov	r8,r23
    dd24:	9802e91e 	bne	r19,zero,e8cc <___vfiprintf_internal_r+0x1480>
    dd28:	8c400414 	ori	r17,r17,16
    dd2c:	8880080c 	andi	r2,r17,32
    dd30:	103fb81e 	bne	r2,zero,dc14 <__alt_data_end+0xf800dc14>
    dd34:	8880040c 	andi	r2,r17,16
    dd38:	10022e26 	beq	r2,zero,e5f4 <___vfiprintf_internal_r+0x11a8>
    dd3c:	d9402217 	ldw	r5,136(sp)
    dd40:	2cc00017 	ldw	r19,0(r5)
    dd44:	29400104 	addi	r5,r5,4
    dd48:	d9402215 	stw	r5,136(sp)
    dd4c:	9829d7fa 	srai	r20,r19,31
    dd50:	a005883a 	mov	r2,r20
    dd54:	003fb506 	br	dc2c <__alt_data_end+0xf800dc2c>
    dd58:	9cc03fcc 	andi	r19,r19,255
    dd5c:	b811883a 	mov	r8,r23
    dd60:	9802fa1e 	bne	r19,zero,e94c <___vfiprintf_internal_r+0x1500>
    dd64:	8c400414 	ori	r17,r17,16
    dd68:	8880080c 	andi	r2,r17,32
    dd6c:	103f661e 	bne	r2,zero,db08 <__alt_data_end+0xf800db08>
    dd70:	8880040c 	andi	r2,r17,16
    dd74:	10020626 	beq	r2,zero,e590 <___vfiprintf_internal_r+0x1144>
    dd78:	d9402217 	ldw	r5,136(sp)
    dd7c:	d8001d85 	stb	zero,118(sp)
    dd80:	0029883a 	mov	r20,zero
    dd84:	28800104 	addi	r2,r5,4
    dd88:	2cc00017 	ldw	r19,0(r5)
    dd8c:	80020816 	blt	r16,zero,e5b0 <___vfiprintf_internal_r+0x1164>
    dd90:	00ffdfc4 	movi	r3,-129
    dd94:	d8802215 	stw	r2,136(sp)
    dd98:	88e2703a 	and	r17,r17,r3
    dd9c:	983f651e 	bne	r19,zero,db34 <__alt_data_end+0xf800db34>
    dda0:	002b883a 	mov	r21,zero
    dda4:	8002cf26 	beq	r16,zero,e8e4 <___vfiprintf_internal_r+0x1498>
    dda8:	0027883a 	mov	r19,zero
    ddac:	0029883a 	mov	r20,zero
    ddb0:	003f6106 	br	db38 <__alt_data_end+0xf800db38>
    ddb4:	9cc03fcc 	andi	r19,r19,255
    ddb8:	b811883a 	mov	r8,r23
    ddbc:	9802e01e 	bne	r19,zero,e940 <___vfiprintf_internal_r+0x14f4>
    ddc0:	8c400414 	ori	r17,r17,16
    ddc4:	8880080c 	andi	r2,r17,32
    ddc8:	1000641e 	bne	r2,zero,df5c <___vfiprintf_internal_r+0xb10>
    ddcc:	8880040c 	andi	r2,r17,16
    ddd0:	1001c81e 	bne	r2,zero,e4f4 <___vfiprintf_internal_r+0x10a8>
    ddd4:	8880100c 	andi	r2,r17,64
    ddd8:	d8001d85 	stb	zero,118(sp)
    dddc:	1002281e 	bne	r2,zero,e680 <___vfiprintf_internal_r+0x1234>
    dde0:	d9002217 	ldw	r4,136(sp)
    dde4:	0029883a 	mov	r20,zero
    dde8:	20800104 	addi	r2,r4,4
    ddec:	24c00017 	ldw	r19,0(r4)
    ddf0:	8001c60e 	bge	r16,zero,e50c <___vfiprintf_internal_r+0x10c0>
    ddf4:	d8802215 	stw	r2,136(sp)
    ddf8:	002b883a 	mov	r21,zero
    ddfc:	9d04b03a 	or	r2,r19,r20
    de00:	103f911e 	bne	r2,zero,dc48 <__alt_data_end+0xf800dc48>
    de04:	00800044 	movi	r2,1
    de08:	10803fcc 	andi	r2,r2,255
    de0c:	00c00044 	movi	r3,1
    de10:	10c05f26 	beq	r2,r3,df90 <___vfiprintf_internal_r+0xb44>
    de14:	00c00084 	movi	r3,2
    de18:	10ffe31e 	bne	r2,r3,dda8 <__alt_data_end+0xf800dda8>
    de1c:	0027883a 	mov	r19,zero
    de20:	0029883a 	mov	r20,zero
    de24:	00015106 	br	e36c <___vfiprintf_internal_r+0xf20>
    de28:	9cc03fcc 	andi	r19,r19,255
    de2c:	b811883a 	mov	r8,r23
    de30:	9802c01e 	bne	r19,zero,e934 <___vfiprintf_internal_r+0x14e8>
    de34:	01400074 	movhi	r5,1
    de38:	2957a104 	addi	r5,r5,24196
    de3c:	d9402615 	stw	r5,152(sp)
    de40:	8880080c 	andi	r2,r17,32
    de44:	103f541e 	bne	r2,zero,db98 <__alt_data_end+0xf800db98>
    de48:	8880040c 	andi	r2,r17,16
    de4c:	1001f226 	beq	r2,zero,e618 <___vfiprintf_internal_r+0x11cc>
    de50:	d9402217 	ldw	r5,136(sp)
    de54:	0029883a 	mov	r20,zero
    de58:	2cc00017 	ldw	r19,0(r5)
    de5c:	29400104 	addi	r5,r5,4
    de60:	d9402215 	stw	r5,136(sp)
    de64:	003f5106 	br	dbac <__alt_data_end+0xf800dbac>
    de68:	d8c02217 	ldw	r3,136(sp)
    de6c:	b811883a 	mov	r8,r23
    de70:	d8001d85 	stb	zero,118(sp)
    de74:	1dc00017 	ldw	r23,0(r3)
    de78:	1f000104 	addi	fp,r3,4
    de7c:	b8025926 	beq	r23,zero,e7e4 <___vfiprintf_internal_r+0x1398>
    de80:	80023316 	blt	r16,zero,e750 <___vfiprintf_internal_r+0x1304>
    de84:	800d883a 	mov	r6,r16
    de88:	000b883a 	mov	r5,zero
    de8c:	b809883a 	mov	r4,r23
    de90:	da002a15 	stw	r8,168(sp)
    de94:	000a2740 	call	a274 <memchr>
    de98:	da002a17 	ldw	r8,168(sp)
    de9c:	10026826 	beq	r2,zero,e840 <___vfiprintf_internal_r+0x13f4>
    dea0:	15e9c83a 	sub	r20,r2,r23
    dea4:	dd401d83 	ldbu	r21,118(sp)
    dea8:	df002215 	stw	fp,136(sp)
    deac:	0021883a 	mov	r16,zero
    deb0:	003e6906 	br	d858 <__alt_data_end+0xf800d858>
    deb4:	9cc03fcc 	andi	r19,r19,255
    deb8:	b811883a 	mov	r8,r23
    debc:	983fc126 	beq	r19,zero,ddc4 <__alt_data_end+0xf800ddc4>
    dec0:	d8c02303 	ldbu	r3,140(sp)
    dec4:	d8c01d85 	stb	r3,118(sp)
    dec8:	003fbe06 	br	ddc4 <__alt_data_end+0xf800ddc4>
    decc:	d9002217 	ldw	r4,136(sp)
    ded0:	d9402217 	ldw	r5,136(sp)
    ded4:	21000017 	ldw	r4,0(r4)
    ded8:	28800104 	addi	r2,r5,4
    dedc:	d9002515 	stw	r4,148(sp)
    dee0:	203e3d16 	blt	r4,zero,d7d8 <__alt_data_end+0xf800d7d8>
    dee4:	d8802215 	stw	r2,136(sp)
    dee8:	b0c00007 	ldb	r3,0(r22)
    deec:	003db406 	br	d5c0 <__alt_data_end+0xf800d5c0>
    def0:	00c00ac4 	movi	r3,43
    def4:	d8c02305 	stb	r3,140(sp)
    def8:	04c00044 	movi	r19,1
    defc:	b0c00007 	ldb	r3,0(r22)
    df00:	003daf06 	br	d5c0 <__alt_data_end+0xf800d5c0>
    df04:	b0c00007 	ldb	r3,0(r22)
    df08:	01000a84 	movi	r4,42
    df0c:	b4000044 	addi	r16,r22,1
    df10:	19025e26 	beq	r3,r4,e88c <___vfiprintf_internal_r+0x1440>
    df14:	1f3ff404 	addi	fp,r3,-48
    df18:	0009883a 	mov	r4,zero
    df1c:	af025236 	bltu	r21,fp,e868 <___vfiprintf_internal_r+0x141c>
    df20:	01400284 	movi	r5,10
    df24:	000fc140 	call	fc14 <__mulsi3>
    df28:	80c00007 	ldb	r3,0(r16)
    df2c:	1709883a 	add	r4,r2,fp
    df30:	85800044 	addi	r22,r16,1
    df34:	1f3ff404 	addi	fp,r3,-48
    df38:	b021883a 	mov	r16,r22
    df3c:	af3ff82e 	bgeu	r21,fp,df20 <__alt_data_end+0xf800df20>
    df40:	2021883a 	mov	r16,r4
    df44:	203d9f0e 	bge	r4,zero,d5c4 <__alt_data_end+0xf800d5c4>
    df48:	043fffc4 	movi	r16,-1
    df4c:	003d9d06 	br	d5c4 <__alt_data_end+0xf800d5c4>
    df50:	8c401014 	ori	r17,r17,64
    df54:	b0c00007 	ldb	r3,0(r22)
    df58:	003d9906 	br	d5c0 <__alt_data_end+0xf800d5c0>
    df5c:	d9002217 	ldw	r4,136(sp)
    df60:	d8001d85 	stb	zero,118(sp)
    df64:	20c00204 	addi	r3,r4,8
    df68:	24c00017 	ldw	r19,0(r4)
    df6c:	25000117 	ldw	r20,4(r4)
    df70:	8001e716 	blt	r16,zero,e710 <___vfiprintf_internal_r+0x12c4>
    df74:	013fdfc4 	movi	r4,-129
    df78:	9d04b03a 	or	r2,r19,r20
    df7c:	d8c02215 	stw	r3,136(sp)
    df80:	8922703a 	and	r17,r17,r4
    df84:	002b883a 	mov	r21,zero
    df88:	103f2f1e 	bne	r2,zero,dc48 <__alt_data_end+0xf800dc48>
    df8c:	803e2f26 	beq	r16,zero,d84c <__alt_data_end+0xf800d84c>
    df90:	0027883a 	mov	r19,zero
    df94:	9cc00c04 	addi	r19,r19,48
    df98:	dcc019c5 	stb	r19,103(sp)
    df9c:	dd002817 	ldw	r20,160(sp)
    dfa0:	ddc019c4 	addi	r23,sp,103
    dfa4:	003e2c06 	br	d858 <__alt_data_end+0xf800d858>
    dfa8:	9cc03fcc 	andi	r19,r19,255
    dfac:	b811883a 	mov	r8,r23
    dfb0:	9802571e 	bne	r19,zero,e910 <___vfiprintf_internal_r+0x14c4>
    dfb4:	18005726 	beq	r3,zero,e114 <___vfiprintf_internal_r+0xcc8>
    dfb8:	04c00044 	movi	r19,1
    dfbc:	d8c01005 	stb	r3,64(sp)
    dfc0:	d8001d85 	stb	zero,118(sp)
    dfc4:	9829883a 	mov	r20,r19
    dfc8:	ddc01004 	addi	r23,sp,64
    dfcc:	003f0a06 	br	dbf8 <__alt_data_end+0xf800dbf8>
    dfd0:	d9402017 	ldw	r5,128(sp)
    dfd4:	d9002117 	ldw	r4,132(sp)
    dfd8:	d9801a04 	addi	r6,sp,104
    dfdc:	da802a15 	stw	r10,168(sp)
    dfe0:	000d3380 	call	d338 <__sprint_r.part.0>
    dfe4:	da802a17 	ldw	r10,168(sp)
    dfe8:	1000501e 	bne	r2,zero,e12c <___vfiprintf_internal_r+0xce0>
    dfec:	d9801b17 	ldw	r6,108(sp)
    dff0:	d8801c17 	ldw	r2,112(sp)
    dff4:	d811883a 	mov	r8,sp
    dff8:	31000044 	addi	r4,r6,1
    dffc:	003e3606 	br	d8d8 <__alt_data_end+0xf800d8d8>
    e000:	d9001b17 	ldw	r4,108(sp)
    e004:	d8801c17 	ldw	r2,112(sp)
    e008:	21400044 	addi	r5,r4,1
    e00c:	d9801d87 	ldb	r6,118(sp)
    e010:	303e5226 	beq	r6,zero,d95c <__alt_data_end+0xf800d95c>
    e014:	01800044 	movi	r6,1
    e018:	d9001d84 	addi	r4,sp,118
    e01c:	1185883a 	add	r2,r2,r6
    e020:	41000015 	stw	r4,0(r8)
    e024:	41800115 	stw	r6,4(r8)
    e028:	d8801c15 	stw	r2,112(sp)
    e02c:	d9401b15 	stw	r5,108(sp)
    e030:	010001c4 	movi	r4,7
    e034:	2140b00e 	bge	r4,r5,e2f8 <___vfiprintf_internal_r+0xeac>
    e038:	1000f61e 	bne	r2,zero,e414 <___vfiprintf_internal_r+0xfc8>
    e03c:	3800b31e 	bne	r7,zero,e30c <___vfiprintf_internal_r+0xec0>
    e040:	0009883a 	mov	r4,zero
    e044:	300b883a 	mov	r5,r6
    e048:	d811883a 	mov	r8,sp
    e04c:	01802004 	movi	r6,128
    e050:	19be5226 	beq	r3,r6,d99c <__alt_data_end+0xf800d99c>
    e054:	8521c83a 	sub	r16,r16,r20
    e058:	043e790e 	bge	zero,r16,da40 <__alt_data_end+0xf800da40>
    e05c:	05400404 	movi	r21,16
    e060:	ac01b00e 	bge	r21,r16,e724 <___vfiprintf_internal_r+0x12d8>
    e064:	01400074 	movhi	r5,1
    e068:	29581604 	addi	r5,r5,24664
    e06c:	d9402315 	stw	r5,140(sp)
    e070:	070001c4 	movi	fp,7
    e074:	00000506 	br	e08c <___vfiprintf_internal_r+0xc40>
    e078:	21400084 	addi	r5,r4,2
    e07c:	42000204 	addi	r8,r8,8
    e080:	1809883a 	mov	r4,r3
    e084:	843ffc04 	addi	r16,r16,-16
    e088:	ac000d0e 	bge	r21,r16,e0c0 <___vfiprintf_internal_r+0xc74>
    e08c:	10800404 	addi	r2,r2,16
    e090:	20c00044 	addi	r3,r4,1
    e094:	44800015 	stw	r18,0(r8)
    e098:	45400115 	stw	r21,4(r8)
    e09c:	d8801c15 	stw	r2,112(sp)
    e0a0:	d8c01b15 	stw	r3,108(sp)
    e0a4:	e0fff40e 	bge	fp,r3,e078 <__alt_data_end+0xf800e078>
    e0a8:	1000101e 	bne	r2,zero,e0ec <___vfiprintf_internal_r+0xca0>
    e0ac:	843ffc04 	addi	r16,r16,-16
    e0b0:	01400044 	movi	r5,1
    e0b4:	0009883a 	mov	r4,zero
    e0b8:	d811883a 	mov	r8,sp
    e0bc:	ac3ff316 	blt	r21,r16,e08c <__alt_data_end+0xf800e08c>
    e0c0:	d8c02317 	ldw	r3,140(sp)
    e0c4:	1405883a 	add	r2,r2,r16
    e0c8:	44000115 	stw	r16,4(r8)
    e0cc:	40c00015 	stw	r3,0(r8)
    e0d0:	d8801c15 	stw	r2,112(sp)
    e0d4:	d9401b15 	stw	r5,108(sp)
    e0d8:	00c001c4 	movi	r3,7
    e0dc:	19401916 	blt	r3,r5,e144 <___vfiprintf_internal_r+0xcf8>
    e0e0:	42000204 	addi	r8,r8,8
    e0e4:	29400044 	addi	r5,r5,1
    e0e8:	003e5506 	br	da40 <__alt_data_end+0xf800da40>
    e0ec:	d9402017 	ldw	r5,128(sp)
    e0f0:	d9002117 	ldw	r4,132(sp)
    e0f4:	d9801a04 	addi	r6,sp,104
    e0f8:	000d3380 	call	d338 <__sprint_r.part.0>
    e0fc:	10000b1e 	bne	r2,zero,e12c <___vfiprintf_internal_r+0xce0>
    e100:	d9001b17 	ldw	r4,108(sp)
    e104:	d8801c17 	ldw	r2,112(sp)
    e108:	d811883a 	mov	r8,sp
    e10c:	21400044 	addi	r5,r4,1
    e110:	003fdc06 	br	e084 <__alt_data_end+0xf800e084>
    e114:	d8801c17 	ldw	r2,112(sp)
    e118:	10000426 	beq	r2,zero,e12c <___vfiprintf_internal_r+0xce0>
    e11c:	d9402017 	ldw	r5,128(sp)
    e120:	d9002117 	ldw	r4,132(sp)
    e124:	d9801a04 	addi	r6,sp,104
    e128:	000d3380 	call	d338 <__sprint_r.part.0>
    e12c:	d9402017 	ldw	r5,128(sp)
    e130:	2880030b 	ldhu	r2,12(r5)
    e134:	1080100c 	andi	r2,r2,64
    e138:	10014d1e 	bne	r2,zero,e670 <___vfiprintf_internal_r+0x1224>
    e13c:	d8802417 	ldw	r2,144(sp)
    e140:	003d9706 	br	d7a0 <__alt_data_end+0xf800d7a0>
    e144:	1000d21e 	bne	r2,zero,e490 <___vfiprintf_internal_r+0x1044>
    e148:	00c00044 	movi	r3,1
    e14c:	a005883a 	mov	r2,r20
    e150:	ddc00015 	stw	r23,0(sp)
    e154:	dd000115 	stw	r20,4(sp)
    e158:	dd001c15 	stw	r20,112(sp)
    e15c:	d8c01b15 	stw	r3,108(sp)
    e160:	d811883a 	mov	r8,sp
    e164:	42000204 	addi	r8,r8,8
    e168:	8c40010c 	andi	r17,r17,4
    e16c:	88004026 	beq	r17,zero,e270 <___vfiprintf_internal_r+0xe24>
    e170:	d9002517 	ldw	r4,148(sp)
    e174:	24e3c83a 	sub	r17,r4,r19
    e178:	04403d0e 	bge	zero,r17,e270 <___vfiprintf_internal_r+0xe24>
    e17c:	04000404 	movi	r16,16
    e180:	8441a90e 	bge	r16,r17,e828 <___vfiprintf_internal_r+0x13dc>
    e184:	00c00074 	movhi	r3,1
    e188:	18d81a04 	addi	r3,r3,24680
    e18c:	d9001b17 	ldw	r4,108(sp)
    e190:	d8c02315 	stw	r3,140(sp)
    e194:	050001c4 	movi	r20,7
    e198:	dd402117 	ldw	r21,132(sp)
    e19c:	ddc02017 	ldw	r23,128(sp)
    e1a0:	00000506 	br	e1b8 <___vfiprintf_internal_r+0xd6c>
    e1a4:	21400084 	addi	r5,r4,2
    e1a8:	42000204 	addi	r8,r8,8
    e1ac:	1809883a 	mov	r4,r3
    e1b0:	8c7ffc04 	addi	r17,r17,-16
    e1b4:	84400f0e 	bge	r16,r17,e1f4 <___vfiprintf_internal_r+0xda8>
    e1b8:	01400074 	movhi	r5,1
    e1bc:	10800404 	addi	r2,r2,16
    e1c0:	20c00044 	addi	r3,r4,1
    e1c4:	29581a04 	addi	r5,r5,24680
    e1c8:	41400015 	stw	r5,0(r8)
    e1cc:	44000115 	stw	r16,4(r8)
    e1d0:	d8801c15 	stw	r2,112(sp)
    e1d4:	d8c01b15 	stw	r3,108(sp)
    e1d8:	a0fff20e 	bge	r20,r3,e1a4 <__alt_data_end+0xf800e1a4>
    e1dc:	1000141e 	bne	r2,zero,e230 <___vfiprintf_internal_r+0xde4>
    e1e0:	8c7ffc04 	addi	r17,r17,-16
    e1e4:	01400044 	movi	r5,1
    e1e8:	0009883a 	mov	r4,zero
    e1ec:	d811883a 	mov	r8,sp
    e1f0:	847ff116 	blt	r16,r17,e1b8 <__alt_data_end+0xf800e1b8>
    e1f4:	d8c02317 	ldw	r3,140(sp)
    e1f8:	1445883a 	add	r2,r2,r17
    e1fc:	44400115 	stw	r17,4(r8)
    e200:	40c00015 	stw	r3,0(r8)
    e204:	d8801c15 	stw	r2,112(sp)
    e208:	d9401b15 	stw	r5,108(sp)
    e20c:	00c001c4 	movi	r3,7
    e210:	1940170e 	bge	r3,r5,e270 <___vfiprintf_internal_r+0xe24>
    e214:	1000101e 	bne	r2,zero,e258 <___vfiprintf_internal_r+0xe0c>
    e218:	d8802517 	ldw	r2,148(sp)
    e21c:	14c11616 	blt	r2,r19,e678 <___vfiprintf_internal_r+0x122c>
    e220:	d9002417 	ldw	r4,144(sp)
    e224:	2089883a 	add	r4,r4,r2
    e228:	d9002415 	stw	r4,144(sp)
    e22c:	003e1806 	br	da90 <__alt_data_end+0xf800da90>
    e230:	d9801a04 	addi	r6,sp,104
    e234:	b80b883a 	mov	r5,r23
    e238:	a809883a 	mov	r4,r21
    e23c:	000d3380 	call	d338 <__sprint_r.part.0>
    e240:	103fba1e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e244:	d9001b17 	ldw	r4,108(sp)
    e248:	d8801c17 	ldw	r2,112(sp)
    e24c:	d811883a 	mov	r8,sp
    e250:	21400044 	addi	r5,r4,1
    e254:	003fd606 	br	e1b0 <__alt_data_end+0xf800e1b0>
    e258:	d9402017 	ldw	r5,128(sp)
    e25c:	d9002117 	ldw	r4,132(sp)
    e260:	d9801a04 	addi	r6,sp,104
    e264:	000d3380 	call	d338 <__sprint_r.part.0>
    e268:	103fb01e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e26c:	d8801c17 	ldw	r2,112(sp)
    e270:	d8c02517 	ldw	r3,148(sp)
    e274:	1cc0010e 	bge	r3,r19,e27c <___vfiprintf_internal_r+0xe30>
    e278:	9807883a 	mov	r3,r19
    e27c:	d9002417 	ldw	r4,144(sp)
    e280:	20c9883a 	add	r4,r4,r3
    e284:	d9002415 	stw	r4,144(sp)
    e288:	103e0126 	beq	r2,zero,da90 <__alt_data_end+0xf800da90>
    e28c:	d9402017 	ldw	r5,128(sp)
    e290:	d9002117 	ldw	r4,132(sp)
    e294:	d9801a04 	addi	r6,sp,104
    e298:	000d3380 	call	d338 <__sprint_r.part.0>
    e29c:	103dfc26 	beq	r2,zero,da90 <__alt_data_end+0xf800da90>
    e2a0:	003fa206 	br	e12c <__alt_data_end+0xf800e12c>
    e2a4:	d9402017 	ldw	r5,128(sp)
    e2a8:	d9002117 	ldw	r4,132(sp)
    e2ac:	d9801a04 	addi	r6,sp,104
    e2b0:	d9c02b15 	stw	r7,172(sp)
    e2b4:	000d3380 	call	d338 <__sprint_r.part.0>
    e2b8:	d9c02b17 	ldw	r7,172(sp)
    e2bc:	103f9b1e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e2c0:	d9001b17 	ldw	r4,108(sp)
    e2c4:	d8801c17 	ldw	r2,112(sp)
    e2c8:	d811883a 	mov	r8,sp
    e2cc:	21800044 	addi	r6,r4,1
    e2d0:	003dbf06 	br	d9d0 <__alt_data_end+0xf800d9d0>
    e2d4:	1000d81e 	bne	r2,zero,e638 <___vfiprintf_internal_r+0x11ec>
    e2d8:	d9001d87 	ldb	r4,118(sp)
    e2dc:	20000a26 	beq	r4,zero,e308 <___vfiprintf_internal_r+0xebc>
    e2e0:	00800044 	movi	r2,1
    e2e4:	d9001d84 	addi	r4,sp,118
    e2e8:	100b883a 	mov	r5,r2
    e2ec:	d9000015 	stw	r4,0(sp)
    e2f0:	d8800115 	stw	r2,4(sp)
    e2f4:	d811883a 	mov	r8,sp
    e2f8:	2809883a 	mov	r4,r5
    e2fc:	42000204 	addi	r8,r8,8
    e300:	29400044 	addi	r5,r5,1
    e304:	003d9506 	br	d95c <__alt_data_end+0xf800d95c>
    e308:	3800fd26 	beq	r7,zero,e700 <___vfiprintf_internal_r+0x12b4>
    e30c:	00800084 	movi	r2,2
    e310:	d9001d04 	addi	r4,sp,116
    e314:	d9000015 	stw	r4,0(sp)
    e318:	d8800115 	stw	r2,4(sp)
    e31c:	01400044 	movi	r5,1
    e320:	d811883a 	mov	r8,sp
    e324:	2809883a 	mov	r4,r5
    e328:	42000204 	addi	r8,r8,8
    e32c:	29400044 	addi	r5,r5,1
    e330:	003f4606 	br	e04c <__alt_data_end+0xf800e04c>
    e334:	d8802517 	ldw	r2,148(sp)
    e338:	14c0010e 	bge	r2,r19,e340 <___vfiprintf_internal_r+0xef4>
    e33c:	9805883a 	mov	r2,r19
    e340:	d9402417 	ldw	r5,144(sp)
    e344:	288b883a 	add	r5,r5,r2
    e348:	d9402415 	stw	r5,144(sp)
    e34c:	003dd006 	br	da90 <__alt_data_end+0xf800da90>
    e350:	d8001d85 	stb	zero,118(sp)
    e354:	80005d16 	blt	r16,zero,e4cc <___vfiprintf_internal_r+0x1080>
    e358:	00ffdfc4 	movi	r3,-129
    e35c:	9d04b03a 	or	r2,r19,r20
    e360:	88e2703a 	and	r17,r17,r3
    e364:	103d3726 	beq	r2,zero,d844 <__alt_data_end+0xf800d844>
    e368:	002b883a 	mov	r21,zero
    e36c:	d9002617 	ldw	r4,152(sp)
    e370:	ddc01a04 	addi	r23,sp,104
    e374:	988003cc 	andi	r2,r19,15
    e378:	a006973a 	slli	r3,r20,28
    e37c:	2085883a 	add	r2,r4,r2
    e380:	9826d13a 	srli	r19,r19,4
    e384:	10800003 	ldbu	r2,0(r2)
    e388:	a028d13a 	srli	r20,r20,4
    e38c:	bdffffc4 	addi	r23,r23,-1
    e390:	1ce6b03a 	or	r19,r3,r19
    e394:	b8800005 	stb	r2,0(r23)
    e398:	9d04b03a 	or	r2,r19,r20
    e39c:	103ff51e 	bne	r2,zero,e374 <__alt_data_end+0xf800e374>
    e3a0:	d8801e17 	ldw	r2,120(sp)
    e3a4:	15e9c83a 	sub	r20,r2,r23
    e3a8:	003d2b06 	br	d858 <__alt_data_end+0xf800d858>
    e3ac:	d9402017 	ldw	r5,128(sp)
    e3b0:	d9002117 	ldw	r4,132(sp)
    e3b4:	d9801a04 	addi	r6,sp,104
    e3b8:	000d3380 	call	d338 <__sprint_r.part.0>
    e3bc:	103f5b1e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e3c0:	d8801c17 	ldw	r2,112(sp)
    e3c4:	d811883a 	mov	r8,sp
    e3c8:	003f6706 	br	e168 <__alt_data_end+0xf800e168>
    e3cc:	d9402017 	ldw	r5,128(sp)
    e3d0:	d9002117 	ldw	r4,132(sp)
    e3d4:	d9801a04 	addi	r6,sp,104
    e3d8:	000d3380 	call	d338 <__sprint_r.part.0>
    e3dc:	103f531e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e3e0:	d811883a 	mov	r8,sp
    e3e4:	003cd906 	br	d74c <__alt_data_end+0xf800d74c>
    e3e8:	10803fcc 	andi	r2,r2,255
    e3ec:	1080201c 	xori	r2,r2,128
    e3f0:	10bfe004 	addi	r2,r2,-128
    e3f4:	00c00c04 	movi	r3,48
    e3f8:	10ffe926 	beq	r2,r3,e3a0 <__alt_data_end+0xf800e3a0>
    e3fc:	b8ffffc5 	stb	r3,-1(r23)
    e400:	d8c01e17 	ldw	r3,120(sp)
    e404:	b8bfffc4 	addi	r2,r23,-1
    e408:	102f883a 	mov	r23,r2
    e40c:	18a9c83a 	sub	r20,r3,r2
    e410:	003d1106 	br	d858 <__alt_data_end+0xf800d858>
    e414:	d9402017 	ldw	r5,128(sp)
    e418:	d9002117 	ldw	r4,132(sp)
    e41c:	d9801a04 	addi	r6,sp,104
    e420:	d8c02a15 	stw	r3,168(sp)
    e424:	d9c02b15 	stw	r7,172(sp)
    e428:	000d3380 	call	d338 <__sprint_r.part.0>
    e42c:	d8c02a17 	ldw	r3,168(sp)
    e430:	d9c02b17 	ldw	r7,172(sp)
    e434:	103f3d1e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e438:	d9001b17 	ldw	r4,108(sp)
    e43c:	d8801c17 	ldw	r2,112(sp)
    e440:	d811883a 	mov	r8,sp
    e444:	21400044 	addi	r5,r4,1
    e448:	003d4406 	br	d95c <__alt_data_end+0xf800d95c>
    e44c:	d9402017 	ldw	r5,128(sp)
    e450:	d9002117 	ldw	r4,132(sp)
    e454:	d9801a04 	addi	r6,sp,104
    e458:	d8c02a15 	stw	r3,168(sp)
    e45c:	000d3380 	call	d338 <__sprint_r.part.0>
    e460:	d8c02a17 	ldw	r3,168(sp)
    e464:	103f311e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e468:	d9001b17 	ldw	r4,108(sp)
    e46c:	d8801c17 	ldw	r2,112(sp)
    e470:	d811883a 	mov	r8,sp
    e474:	21400044 	addi	r5,r4,1
    e478:	003ef406 	br	e04c <__alt_data_end+0xf800e04c>
    e47c:	1000bd1e 	bne	r2,zero,e774 <___vfiprintf_internal_r+0x1328>
    e480:	01400044 	movi	r5,1
    e484:	0009883a 	mov	r4,zero
    e488:	d811883a 	mov	r8,sp
    e48c:	003ef106 	br	e054 <__alt_data_end+0xf800e054>
    e490:	d9402017 	ldw	r5,128(sp)
    e494:	d9002117 	ldw	r4,132(sp)
    e498:	d9801a04 	addi	r6,sp,104
    e49c:	000d3380 	call	d338 <__sprint_r.part.0>
    e4a0:	103f221e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e4a4:	d9401b17 	ldw	r5,108(sp)
    e4a8:	d8801c17 	ldw	r2,112(sp)
    e4ac:	d811883a 	mov	r8,sp
    e4b0:	29400044 	addi	r5,r5,1
    e4b4:	003d6206 	br	da40 <__alt_data_end+0xf800da40>
    e4b8:	01400074 	movhi	r5,1
    e4bc:	2957a604 	addi	r5,r5,24216
    e4c0:	d9402615 	stw	r5,152(sp)
    e4c4:	d8c02215 	stw	r3,136(sp)
    e4c8:	1023883a 	mov	r17,r2
    e4cc:	9d04b03a 	or	r2,r19,r20
    e4d0:	103fa51e 	bne	r2,zero,e368 <__alt_data_end+0xf800e368>
    e4d4:	002b883a 	mov	r21,zero
    e4d8:	00800084 	movi	r2,2
    e4dc:	003e4a06 	br	de08 <__alt_data_end+0xf800de08>
    e4e0:	01400074 	movhi	r5,1
    e4e4:	2957a604 	addi	r5,r5,24216
    e4e8:	002b883a 	mov	r21,zero
    e4ec:	d9402615 	stw	r5,152(sp)
    e4f0:	003f9e06 	br	e36c <__alt_data_end+0xf800e36c>
    e4f4:	d9402217 	ldw	r5,136(sp)
    e4f8:	d8001d85 	stb	zero,118(sp)
    e4fc:	0029883a 	mov	r20,zero
    e500:	28800104 	addi	r2,r5,4
    e504:	2cc00017 	ldw	r19,0(r5)
    e508:	803e3a16 	blt	r16,zero,ddf4 <__alt_data_end+0xf800ddf4>
    e50c:	00ffdfc4 	movi	r3,-129
    e510:	d8802215 	stw	r2,136(sp)
    e514:	88e2703a 	and	r17,r17,r3
    e518:	002b883a 	mov	r21,zero
    e51c:	983e9b26 	beq	r19,zero,df8c <__alt_data_end+0xf800df8c>
    e520:	00800244 	movi	r2,9
    e524:	14fdc936 	bltu	r2,r19,dc4c <__alt_data_end+0xf800dc4c>
    e528:	003e9a06 	br	df94 <__alt_data_end+0xf800df94>
    e52c:	00800c04 	movi	r2,48
    e530:	d8c01d45 	stb	r3,117(sp)
    e534:	d8801d05 	stb	r2,116(sp)
    e538:	d8001d85 	stb	zero,118(sp)
    e53c:	88c00094 	ori	r3,r17,2
    e540:	80009c16 	blt	r16,zero,e7b4 <___vfiprintf_internal_r+0x1368>
    e544:	00bfdfc4 	movi	r2,-129
    e548:	88a2703a 	and	r17,r17,r2
    e54c:	8c400094 	ori	r17,r17,2
    e550:	002b883a 	mov	r21,zero
    e554:	003f8506 	br	e36c <__alt_data_end+0xf800e36c>
    e558:	b029883a 	mov	r20,r22
    e55c:	003c0b06 	br	d58c <__alt_data_end+0xf800d58c>
    e560:	04e7c83a 	sub	r19,zero,r19
    e564:	05400b44 	movi	r21,45
    e568:	9804c03a 	cmpne	r2,r19,zero
    e56c:	0529c83a 	sub	r20,zero,r20
    e570:	dd401d85 	stb	r21,118(sp)
    e574:	a0a9c83a 	sub	r20,r20,r2
    e578:	80009716 	blt	r16,zero,e7d8 <___vfiprintf_internal_r+0x138c>
    e57c:	00bfdfc4 	movi	r2,-129
    e580:	88a2703a 	and	r17,r17,r2
    e584:	003db006 	br	dc48 <__alt_data_end+0xf800dc48>
    e588:	b0c00007 	ldb	r3,0(r22)
    e58c:	003c0c06 	br	d5c0 <__alt_data_end+0xf800d5c0>
    e590:	8880100c 	andi	r2,r17,64
    e594:	d8001d85 	stb	zero,118(sp)
    e598:	1000461e 	bne	r2,zero,e6b4 <___vfiprintf_internal_r+0x1268>
    e59c:	d9002217 	ldw	r4,136(sp)
    e5a0:	0029883a 	mov	r20,zero
    e5a4:	20800104 	addi	r2,r4,4
    e5a8:	24c00017 	ldw	r19,0(r4)
    e5ac:	803df80e 	bge	r16,zero,dd90 <__alt_data_end+0xf800dd90>
    e5b0:	9d06b03a 	or	r3,r19,r20
    e5b4:	d8802215 	stw	r2,136(sp)
    e5b8:	183d5e1e 	bne	r3,zero,db34 <__alt_data_end+0xf800db34>
    e5bc:	002b883a 	mov	r21,zero
    e5c0:	0005883a 	mov	r2,zero
    e5c4:	003e1006 	br	de08 <__alt_data_end+0xf800de08>
    e5c8:	8880040c 	andi	r2,r17,16
    e5cc:	1000321e 	bne	r2,zero,e698 <___vfiprintf_internal_r+0x124c>
    e5d0:	8c40100c 	andi	r17,r17,64
    e5d4:	88008d26 	beq	r17,zero,e80c <___vfiprintf_internal_r+0x13c0>
    e5d8:	d9402217 	ldw	r5,136(sp)
    e5dc:	d8c02417 	ldw	r3,144(sp)
    e5e0:	28800017 	ldw	r2,0(r5)
    e5e4:	29400104 	addi	r5,r5,4
    e5e8:	d9402215 	stw	r5,136(sp)
    e5ec:	10c0000d 	sth	r3,0(r2)
    e5f0:	003bca06 	br	d51c <__alt_data_end+0xf800d51c>
    e5f4:	8880100c 	andi	r2,r17,64
    e5f8:	10003a26 	beq	r2,zero,e6e4 <___vfiprintf_internal_r+0x1298>
    e5fc:	d8802217 	ldw	r2,136(sp)
    e600:	14c0000f 	ldh	r19,0(r2)
    e604:	10800104 	addi	r2,r2,4
    e608:	d8802215 	stw	r2,136(sp)
    e60c:	9829d7fa 	srai	r20,r19,31
    e610:	a005883a 	mov	r2,r20
    e614:	003d8506 	br	dc2c <__alt_data_end+0xf800dc2c>
    e618:	8880100c 	andi	r2,r17,64
    e61c:	10002b26 	beq	r2,zero,e6cc <___vfiprintf_internal_r+0x1280>
    e620:	d8802217 	ldw	r2,136(sp)
    e624:	0029883a 	mov	r20,zero
    e628:	14c0000b 	ldhu	r19,0(r2)
    e62c:	10800104 	addi	r2,r2,4
    e630:	d8802215 	stw	r2,136(sp)
    e634:	003d5d06 	br	dbac <__alt_data_end+0xf800dbac>
    e638:	d9402017 	ldw	r5,128(sp)
    e63c:	d9002117 	ldw	r4,132(sp)
    e640:	d9801a04 	addi	r6,sp,104
    e644:	d8c02a15 	stw	r3,168(sp)
    e648:	d9c02b15 	stw	r7,172(sp)
    e64c:	000d3380 	call	d338 <__sprint_r.part.0>
    e650:	d8c02a17 	ldw	r3,168(sp)
    e654:	d9c02b17 	ldw	r7,172(sp)
    e658:	103eb41e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e65c:	d9001b17 	ldw	r4,108(sp)
    e660:	d8801c17 	ldw	r2,112(sp)
    e664:	d811883a 	mov	r8,sp
    e668:	21400044 	addi	r5,r4,1
    e66c:	003e6706 	br	e00c <__alt_data_end+0xf800e00c>
    e670:	00bfffc4 	movi	r2,-1
    e674:	003c4a06 	br	d7a0 <__alt_data_end+0xf800d7a0>
    e678:	9805883a 	mov	r2,r19
    e67c:	003ee806 	br	e220 <__alt_data_end+0xf800e220>
    e680:	d8c02217 	ldw	r3,136(sp)
    e684:	0029883a 	mov	r20,zero
    e688:	18800104 	addi	r2,r3,4
    e68c:	1cc0000b 	ldhu	r19,0(r3)
    e690:	803f9e0e 	bge	r16,zero,e50c <__alt_data_end+0xf800e50c>
    e694:	003dd706 	br	ddf4 <__alt_data_end+0xf800ddf4>
    e698:	d8c02217 	ldw	r3,136(sp)
    e69c:	d9002417 	ldw	r4,144(sp)
    e6a0:	18800017 	ldw	r2,0(r3)
    e6a4:	18c00104 	addi	r3,r3,4
    e6a8:	d8c02215 	stw	r3,136(sp)
    e6ac:	11000015 	stw	r4,0(r2)
    e6b0:	003b9a06 	br	d51c <__alt_data_end+0xf800d51c>
    e6b4:	d8c02217 	ldw	r3,136(sp)
    e6b8:	0029883a 	mov	r20,zero
    e6bc:	18800104 	addi	r2,r3,4
    e6c0:	1cc0000b 	ldhu	r19,0(r3)
    e6c4:	803db20e 	bge	r16,zero,dd90 <__alt_data_end+0xf800dd90>
    e6c8:	003fb906 	br	e5b0 <__alt_data_end+0xf800e5b0>
    e6cc:	d9002217 	ldw	r4,136(sp)
    e6d0:	0029883a 	mov	r20,zero
    e6d4:	24c00017 	ldw	r19,0(r4)
    e6d8:	21000104 	addi	r4,r4,4
    e6dc:	d9002215 	stw	r4,136(sp)
    e6e0:	003d3206 	br	dbac <__alt_data_end+0xf800dbac>
    e6e4:	d8c02217 	ldw	r3,136(sp)
    e6e8:	1cc00017 	ldw	r19,0(r3)
    e6ec:	18c00104 	addi	r3,r3,4
    e6f0:	d8c02215 	stw	r3,136(sp)
    e6f4:	9829d7fa 	srai	r20,r19,31
    e6f8:	a005883a 	mov	r2,r20
    e6fc:	003d4b06 	br	dc2c <__alt_data_end+0xf800dc2c>
    e700:	0009883a 	mov	r4,zero
    e704:	01400044 	movi	r5,1
    e708:	d811883a 	mov	r8,sp
    e70c:	003e4f06 	br	e04c <__alt_data_end+0xf800e04c>
    e710:	d8c02215 	stw	r3,136(sp)
    e714:	002b883a 	mov	r21,zero
    e718:	003db806 	br	ddfc <__alt_data_end+0xf800ddfc>
    e71c:	d811883a 	mov	r8,sp
    e720:	003e9606 	br	e17c <__alt_data_end+0xf800e17c>
    e724:	01000074 	movhi	r4,1
    e728:	21181604 	addi	r4,r4,24664
    e72c:	d9002315 	stw	r4,140(sp)
    e730:	003e6306 	br	e0c0 <__alt_data_end+0xf800e0c0>
    e734:	b0c00043 	ldbu	r3,1(r22)
    e738:	8c400814 	ori	r17,r17,32
    e73c:	b5800044 	addi	r22,r22,1
    e740:	18c03fcc 	andi	r3,r3,255
    e744:	18c0201c 	xori	r3,r3,128
    e748:	18ffe004 	addi	r3,r3,-128
    e74c:	003b9c06 	br	d5c0 <__alt_data_end+0xf800d5c0>
    e750:	b809883a 	mov	r4,r23
    e754:	da002a15 	stw	r8,168(sp)
    e758:	00038ac0 	call	38ac <strlen>
    e75c:	1029883a 	mov	r20,r2
    e760:	dd401d83 	ldbu	r21,118(sp)
    e764:	df002215 	stw	fp,136(sp)
    e768:	0021883a 	mov	r16,zero
    e76c:	da002a17 	ldw	r8,168(sp)
    e770:	003c3906 	br	d858 <__alt_data_end+0xf800d858>
    e774:	d9402017 	ldw	r5,128(sp)
    e778:	d9002117 	ldw	r4,132(sp)
    e77c:	d9801a04 	addi	r6,sp,104
    e780:	000d3380 	call	d338 <__sprint_r.part.0>
    e784:	103e691e 	bne	r2,zero,e12c <__alt_data_end+0xf800e12c>
    e788:	d9001b17 	ldw	r4,108(sp)
    e78c:	d8801c17 	ldw	r2,112(sp)
    e790:	d811883a 	mov	r8,sp
    e794:	21400044 	addi	r5,r4,1
    e798:	003e2e06 	br	e054 <__alt_data_end+0xf800e054>
    e79c:	01000074 	movhi	r4,1
    e7a0:	21181a04 	addi	r4,r4,24680
    e7a4:	d9002315 	stw	r4,140(sp)
    e7a8:	d9001b17 	ldw	r4,108(sp)
    e7ac:	21000044 	addi	r4,r4,1
    e7b0:	003c5e06 	br	d92c <__alt_data_end+0xf800d92c>
    e7b4:	002b883a 	mov	r21,zero
    e7b8:	00800084 	movi	r2,2
    e7bc:	10803fcc 	andi	r2,r2,255
    e7c0:	01000044 	movi	r4,1
    e7c4:	11002b26 	beq	r2,r4,e874 <___vfiprintf_internal_r+0x1428>
    e7c8:	01000084 	movi	r4,2
    e7cc:	11002b1e 	bne	r2,r4,e87c <___vfiprintf_internal_r+0x1430>
    e7d0:	1823883a 	mov	r17,r3
    e7d4:	003ee506 	br	e36c <__alt_data_end+0xf800e36c>
    e7d8:	8807883a 	mov	r3,r17
    e7dc:	00800044 	movi	r2,1
    e7e0:	003ff606 	br	e7bc <__alt_data_end+0xf800e7bc>
    e7e4:	00800184 	movi	r2,6
    e7e8:	1400012e 	bgeu	r2,r16,e7f0 <___vfiprintf_internal_r+0x13a4>
    e7ec:	1021883a 	mov	r16,r2
    e7f0:	8029883a 	mov	r20,r16
    e7f4:	8027883a 	mov	r19,r16
    e7f8:	80002216 	blt	r16,zero,e884 <___vfiprintf_internal_r+0x1438>
    e7fc:	05c00074 	movhi	r23,1
    e800:	df002215 	stw	fp,136(sp)
    e804:	bdd7ab04 	addi	r23,r23,24236
    e808:	003cfb06 	br	dbf8 <__alt_data_end+0xf800dbf8>
    e80c:	d9002217 	ldw	r4,136(sp)
    e810:	d9402417 	ldw	r5,144(sp)
    e814:	20800017 	ldw	r2,0(r4)
    e818:	21000104 	addi	r4,r4,4
    e81c:	d9002215 	stw	r4,136(sp)
    e820:	11400015 	stw	r5,0(r2)
    e824:	003b3d06 	br	d51c <__alt_data_end+0xf800d51c>
    e828:	01400074 	movhi	r5,1
    e82c:	29581a04 	addi	r5,r5,24680
    e830:	d9402315 	stw	r5,140(sp)
    e834:	d9401b17 	ldw	r5,108(sp)
    e838:	29400044 	addi	r5,r5,1
    e83c:	003e6d06 	br	e1f4 <__alt_data_end+0xf800e1f4>
    e840:	8029883a 	mov	r20,r16
    e844:	dd401d83 	ldbu	r21,118(sp)
    e848:	df002215 	stw	fp,136(sp)
    e84c:	0021883a 	mov	r16,zero
    e850:	003c0106 	br	d858 <__alt_data_end+0xf800d858>
    e854:	00c00074 	movhi	r3,1
    e858:	18d81604 	addi	r3,r3,24664
    e85c:	d8c02315 	stw	r3,140(sp)
    e860:	280d883a 	mov	r6,r5
    e864:	003c6906 	br	da0c <__alt_data_end+0xf800da0c>
    e868:	802d883a 	mov	r22,r16
    e86c:	0021883a 	mov	r16,zero
    e870:	003b5406 	br	d5c4 <__alt_data_end+0xf800d5c4>
    e874:	1823883a 	mov	r17,r3
    e878:	003cf306 	br	dc48 <__alt_data_end+0xf800dc48>
    e87c:	1823883a 	mov	r17,r3
    e880:	003cad06 	br	db38 <__alt_data_end+0xf800db38>
    e884:	0027883a 	mov	r19,zero
    e888:	003fdc06 	br	e7fc <__alt_data_end+0xf800e7fc>
    e88c:	d9402217 	ldw	r5,136(sp)
    e890:	8005883a 	mov	r2,r16
    e894:	b0c00043 	ldbu	r3,1(r22)
    e898:	2c000017 	ldw	r16,0(r5)
    e89c:	29000104 	addi	r4,r5,4
    e8a0:	d9002215 	stw	r4,136(sp)
    e8a4:	102d883a 	mov	r22,r2
    e8a8:	803fa50e 	bge	r16,zero,e740 <__alt_data_end+0xf800e740>
    e8ac:	18c03fcc 	andi	r3,r3,255
    e8b0:	18c0201c 	xori	r3,r3,128
    e8b4:	043fffc4 	movi	r16,-1
    e8b8:	18ffe004 	addi	r3,r3,-128
    e8bc:	003b4006 	br	d5c0 <__alt_data_end+0xf800d5c0>
    e8c0:	d9402303 	ldbu	r5,140(sp)
    e8c4:	d9401d85 	stb	r5,118(sp)
    e8c8:	003cae06 	br	db84 <__alt_data_end+0xf800db84>
    e8cc:	d8c02303 	ldbu	r3,140(sp)
    e8d0:	d8c01d85 	stb	r3,118(sp)
    e8d4:	003d1406 	br	dd28 <__alt_data_end+0xf800dd28>
    e8d8:	d8c02303 	ldbu	r3,140(sp)
    e8dc:	d8c01d85 	stb	r3,118(sp)
    e8e0:	003cca06 	br	dc0c <__alt_data_end+0xf800dc0c>
    e8e4:	8880004c 	andi	r2,r17,1
    e8e8:	002b883a 	mov	r21,zero
    e8ec:	10000526 	beq	r2,zero,e904 <___vfiprintf_internal_r+0x14b8>
    e8f0:	00800c04 	movi	r2,48
    e8f4:	d88019c5 	stb	r2,103(sp)
    e8f8:	dd002817 	ldw	r20,160(sp)
    e8fc:	ddc019c4 	addi	r23,sp,103
    e900:	003bd506 	br	d858 <__alt_data_end+0xf800d858>
    e904:	0029883a 	mov	r20,zero
    e908:	ddc01a04 	addi	r23,sp,104
    e90c:	003bd206 	br	d858 <__alt_data_end+0xf800d858>
    e910:	d9002303 	ldbu	r4,140(sp)
    e914:	d9001d85 	stb	r4,118(sp)
    e918:	003da606 	br	dfb4 <__alt_data_end+0xf800dfb4>
    e91c:	d8c02303 	ldbu	r3,140(sp)
    e920:	d8c01d85 	stb	r3,118(sp)
    e924:	003c7606 	br	db00 <__alt_data_end+0xf800db00>
    e928:	d8c02303 	ldbu	r3,140(sp)
    e92c:	d8c01d85 	stb	r3,118(sp)
    e930:	003c6506 	br	dac8 <__alt_data_end+0xf800dac8>
    e934:	d9002303 	ldbu	r4,140(sp)
    e938:	d9001d85 	stb	r4,118(sp)
    e93c:	003d3d06 	br	de34 <__alt_data_end+0xf800de34>
    e940:	d8c02303 	ldbu	r3,140(sp)
    e944:	d8c01d85 	stb	r3,118(sp)
    e948:	003d1d06 	br	ddc0 <__alt_data_end+0xf800ddc0>
    e94c:	d8c02303 	ldbu	r3,140(sp)
    e950:	d8c01d85 	stb	r3,118(sp)
    e954:	003d0306 	br	dd64 <__alt_data_end+0xf800dd64>

0000e958 <__vfiprintf_internal>:
    e958:	008000b4 	movhi	r2,2
    e95c:	10a01704 	addi	r2,r2,-32676
    e960:	300f883a 	mov	r7,r6
    e964:	280d883a 	mov	r6,r5
    e968:	200b883a 	mov	r5,r4
    e96c:	11000017 	ldw	r4,0(r2)
    e970:	000d44c1 	jmpi	d44c <___vfiprintf_internal_r>

0000e974 <__sbprintf>:
    e974:	2880030b 	ldhu	r2,12(r5)
    e978:	2ac01917 	ldw	r11,100(r5)
    e97c:	2a80038b 	ldhu	r10,14(r5)
    e980:	2a400717 	ldw	r9,28(r5)
    e984:	2a000917 	ldw	r8,36(r5)
    e988:	defee204 	addi	sp,sp,-1144
    e98c:	00c10004 	movi	r3,1024
    e990:	dc011a15 	stw	r16,1128(sp)
    e994:	10bfff4c 	andi	r2,r2,65533
    e998:	2821883a 	mov	r16,r5
    e99c:	d8cb883a 	add	r5,sp,r3
    e9a0:	dc811c15 	stw	r18,1136(sp)
    e9a4:	dc411b15 	stw	r17,1132(sp)
    e9a8:	dfc11d15 	stw	ra,1140(sp)
    e9ac:	2025883a 	mov	r18,r4
    e9b0:	d881030d 	sth	r2,1036(sp)
    e9b4:	dac11915 	stw	r11,1124(sp)
    e9b8:	da81038d 	sth	r10,1038(sp)
    e9bc:	da410715 	stw	r9,1052(sp)
    e9c0:	da010915 	stw	r8,1060(sp)
    e9c4:	dec10015 	stw	sp,1024(sp)
    e9c8:	dec10415 	stw	sp,1040(sp)
    e9cc:	d8c10215 	stw	r3,1032(sp)
    e9d0:	d8c10515 	stw	r3,1044(sp)
    e9d4:	d8010615 	stw	zero,1048(sp)
    e9d8:	000d44c0 	call	d44c <___vfiprintf_internal_r>
    e9dc:	1023883a 	mov	r17,r2
    e9e0:	10000416 	blt	r2,zero,e9f4 <__sbprintf+0x80>
    e9e4:	d9410004 	addi	r5,sp,1024
    e9e8:	9009883a 	mov	r4,r18
    e9ec:	000169c0 	call	169c <_fflush_r>
    e9f0:	10000d1e 	bne	r2,zero,ea28 <__sbprintf+0xb4>
    e9f4:	d881030b 	ldhu	r2,1036(sp)
    e9f8:	1080100c 	andi	r2,r2,64
    e9fc:	10000326 	beq	r2,zero,ea0c <__sbprintf+0x98>
    ea00:	8080030b 	ldhu	r2,12(r16)
    ea04:	10801014 	ori	r2,r2,64
    ea08:	8080030d 	sth	r2,12(r16)
    ea0c:	8805883a 	mov	r2,r17
    ea10:	dfc11d17 	ldw	ra,1140(sp)
    ea14:	dc811c17 	ldw	r18,1136(sp)
    ea18:	dc411b17 	ldw	r17,1132(sp)
    ea1c:	dc011a17 	ldw	r16,1128(sp)
    ea20:	dec11e04 	addi	sp,sp,1144
    ea24:	f800283a 	ret
    ea28:	047fffc4 	movi	r17,-1
    ea2c:	003ff106 	br	e9f4 <__alt_data_end+0xf800e9f4>

0000ea30 <_calloc_r>:
    ea30:	defffe04 	addi	sp,sp,-8
    ea34:	2805883a 	mov	r2,r5
    ea38:	dc000015 	stw	r16,0(sp)
    ea3c:	300b883a 	mov	r5,r6
    ea40:	2021883a 	mov	r16,r4
    ea44:	1009883a 	mov	r4,r2
    ea48:	dfc00115 	stw	ra,4(sp)
    ea4c:	000fc140 	call	fc14 <__mulsi3>
    ea50:	100b883a 	mov	r5,r2
    ea54:	8009883a 	mov	r4,r16
    ea58:	00029940 	call	2994 <_malloc_r>
    ea5c:	10002926 	beq	r2,zero,eb04 <_calloc_r+0xd4>
    ea60:	11bfff17 	ldw	r6,-4(r2)
    ea64:	1021883a 	mov	r16,r2
    ea68:	00bfff04 	movi	r2,-4
    ea6c:	308c703a 	and	r6,r6,r2
    ea70:	00c00904 	movi	r3,36
    ea74:	308d883a 	add	r6,r6,r2
    ea78:	19801636 	bltu	r3,r6,ead4 <_calloc_r+0xa4>
    ea7c:	008004c4 	movi	r2,19
    ea80:	11800b2e 	bgeu	r2,r6,eab0 <_calloc_r+0x80>
    ea84:	80000015 	stw	zero,0(r16)
    ea88:	80000115 	stw	zero,4(r16)
    ea8c:	008006c4 	movi	r2,27
    ea90:	11801a2e 	bgeu	r2,r6,eafc <_calloc_r+0xcc>
    ea94:	80000215 	stw	zero,8(r16)
    ea98:	80000315 	stw	zero,12(r16)
    ea9c:	30c0151e 	bne	r6,r3,eaf4 <_calloc_r+0xc4>
    eaa0:	80000415 	stw	zero,16(r16)
    eaa4:	80800604 	addi	r2,r16,24
    eaa8:	80000515 	stw	zero,20(r16)
    eaac:	00000106 	br	eab4 <_calloc_r+0x84>
    eab0:	8005883a 	mov	r2,r16
    eab4:	10000015 	stw	zero,0(r2)
    eab8:	10000115 	stw	zero,4(r2)
    eabc:	10000215 	stw	zero,8(r2)
    eac0:	8005883a 	mov	r2,r16
    eac4:	dfc00117 	ldw	ra,4(sp)
    eac8:	dc000017 	ldw	r16,0(sp)
    eacc:	dec00204 	addi	sp,sp,8
    ead0:	f800283a 	ret
    ead4:	000b883a 	mov	r5,zero
    ead8:	8009883a 	mov	r4,r16
    eadc:	00031a00 	call	31a0 <memset>
    eae0:	8005883a 	mov	r2,r16
    eae4:	dfc00117 	ldw	ra,4(sp)
    eae8:	dc000017 	ldw	r16,0(sp)
    eaec:	dec00204 	addi	sp,sp,8
    eaf0:	f800283a 	ret
    eaf4:	80800404 	addi	r2,r16,16
    eaf8:	003fee06 	br	eab4 <__alt_data_end+0xf800eab4>
    eafc:	80800204 	addi	r2,r16,8
    eb00:	003fec06 	br	eab4 <__alt_data_end+0xf800eab4>
    eb04:	0005883a 	mov	r2,zero
    eb08:	003fee06 	br	eac4 <__alt_data_end+0xf800eac4>

0000eb0c <__fputwc>:
    eb0c:	defff804 	addi	sp,sp,-32
    eb10:	dcc00415 	stw	r19,16(sp)
    eb14:	dc800315 	stw	r18,12(sp)
    eb18:	dc000115 	stw	r16,4(sp)
    eb1c:	dfc00715 	stw	ra,28(sp)
    eb20:	dd400615 	stw	r21,24(sp)
    eb24:	dd000515 	stw	r20,20(sp)
    eb28:	dc400215 	stw	r17,8(sp)
    eb2c:	2027883a 	mov	r19,r4
    eb30:	2825883a 	mov	r18,r5
    eb34:	3021883a 	mov	r16,r6
    eb38:	000a1c00 	call	a1c0 <__locale_mb_cur_max>
    eb3c:	00c00044 	movi	r3,1
    eb40:	10c03e26 	beq	r2,r3,ec3c <__fputwc+0x130>
    eb44:	81c01704 	addi	r7,r16,92
    eb48:	900d883a 	mov	r6,r18
    eb4c:	d80b883a 	mov	r5,sp
    eb50:	9809883a 	mov	r4,r19
    eb54:	000ee6c0 	call	ee6c <_wcrtomb_r>
    eb58:	1029883a 	mov	r20,r2
    eb5c:	00bfffc4 	movi	r2,-1
    eb60:	a0802026 	beq	r20,r2,ebe4 <__fputwc+0xd8>
    eb64:	d9400003 	ldbu	r5,0(sp)
    eb68:	a0001c26 	beq	r20,zero,ebdc <__fputwc+0xd0>
    eb6c:	0023883a 	mov	r17,zero
    eb70:	05400284 	movi	r21,10
    eb74:	00000906 	br	eb9c <__fputwc+0x90>
    eb78:	80800017 	ldw	r2,0(r16)
    eb7c:	11400005 	stb	r5,0(r2)
    eb80:	80c00017 	ldw	r3,0(r16)
    eb84:	18c00044 	addi	r3,r3,1
    eb88:	80c00015 	stw	r3,0(r16)
    eb8c:	8c400044 	addi	r17,r17,1
    eb90:	dc45883a 	add	r2,sp,r17
    eb94:	8d00112e 	bgeu	r17,r20,ebdc <__fputwc+0xd0>
    eb98:	11400003 	ldbu	r5,0(r2)
    eb9c:	80c00217 	ldw	r3,8(r16)
    eba0:	18ffffc4 	addi	r3,r3,-1
    eba4:	80c00215 	stw	r3,8(r16)
    eba8:	183ff30e 	bge	r3,zero,eb78 <__alt_data_end+0xf800eb78>
    ebac:	80800617 	ldw	r2,24(r16)
    ebb0:	18801916 	blt	r3,r2,ec18 <__fputwc+0x10c>
    ebb4:	80800017 	ldw	r2,0(r16)
    ebb8:	11400005 	stb	r5,0(r2)
    ebbc:	80800017 	ldw	r2,0(r16)
    ebc0:	10c00003 	ldbu	r3,0(r2)
    ebc4:	10800044 	addi	r2,r2,1
    ebc8:	1d402326 	beq	r3,r21,ec58 <__fputwc+0x14c>
    ebcc:	80800015 	stw	r2,0(r16)
    ebd0:	8c400044 	addi	r17,r17,1
    ebd4:	dc45883a 	add	r2,sp,r17
    ebd8:	8d3fef36 	bltu	r17,r20,eb98 <__alt_data_end+0xf800eb98>
    ebdc:	9005883a 	mov	r2,r18
    ebe0:	00000406 	br	ebf4 <__fputwc+0xe8>
    ebe4:	80c0030b 	ldhu	r3,12(r16)
    ebe8:	a005883a 	mov	r2,r20
    ebec:	18c01014 	ori	r3,r3,64
    ebf0:	80c0030d 	sth	r3,12(r16)
    ebf4:	dfc00717 	ldw	ra,28(sp)
    ebf8:	dd400617 	ldw	r21,24(sp)
    ebfc:	dd000517 	ldw	r20,20(sp)
    ec00:	dcc00417 	ldw	r19,16(sp)
    ec04:	dc800317 	ldw	r18,12(sp)
    ec08:	dc400217 	ldw	r17,8(sp)
    ec0c:	dc000117 	ldw	r16,4(sp)
    ec10:	dec00804 	addi	sp,sp,32
    ec14:	f800283a 	ret
    ec18:	800d883a 	mov	r6,r16
    ec1c:	29403fcc 	andi	r5,r5,255
    ec20:	9809883a 	mov	r4,r19
    ec24:	000ed140 	call	ed14 <__swbuf_r>
    ec28:	10bfffe0 	cmpeqi	r2,r2,-1
    ec2c:	10803fcc 	andi	r2,r2,255
    ec30:	103fd626 	beq	r2,zero,eb8c <__alt_data_end+0xf800eb8c>
    ec34:	00bfffc4 	movi	r2,-1
    ec38:	003fee06 	br	ebf4 <__alt_data_end+0xf800ebf4>
    ec3c:	90ffffc4 	addi	r3,r18,-1
    ec40:	01003f84 	movi	r4,254
    ec44:	20ffbf36 	bltu	r4,r3,eb44 <__alt_data_end+0xf800eb44>
    ec48:	900b883a 	mov	r5,r18
    ec4c:	dc800005 	stb	r18,0(sp)
    ec50:	1029883a 	mov	r20,r2
    ec54:	003fc506 	br	eb6c <__alt_data_end+0xf800eb6c>
    ec58:	800d883a 	mov	r6,r16
    ec5c:	a80b883a 	mov	r5,r21
    ec60:	9809883a 	mov	r4,r19
    ec64:	000ed140 	call	ed14 <__swbuf_r>
    ec68:	10bfffe0 	cmpeqi	r2,r2,-1
    ec6c:	003fef06 	br	ec2c <__alt_data_end+0xf800ec2c>

0000ec70 <_fputwc_r>:
    ec70:	3080030b 	ldhu	r2,12(r6)
    ec74:	10c8000c 	andi	r3,r2,8192
    ec78:	1800051e 	bne	r3,zero,ec90 <_fputwc_r+0x20>
    ec7c:	30c01917 	ldw	r3,100(r6)
    ec80:	10880014 	ori	r2,r2,8192
    ec84:	3080030d 	sth	r2,12(r6)
    ec88:	18880014 	ori	r2,r3,8192
    ec8c:	30801915 	stw	r2,100(r6)
    ec90:	000eb0c1 	jmpi	eb0c <__fputwc>

0000ec94 <fputwc>:
    ec94:	008000b4 	movhi	r2,2
    ec98:	defffc04 	addi	sp,sp,-16
    ec9c:	10a01704 	addi	r2,r2,-32676
    eca0:	dc000115 	stw	r16,4(sp)
    eca4:	14000017 	ldw	r16,0(r2)
    eca8:	dc400215 	stw	r17,8(sp)
    ecac:	dfc00315 	stw	ra,12(sp)
    ecb0:	2023883a 	mov	r17,r4
    ecb4:	80000226 	beq	r16,zero,ecc0 <fputwc+0x2c>
    ecb8:	80800e17 	ldw	r2,56(r16)
    ecbc:	10001026 	beq	r2,zero,ed00 <fputwc+0x6c>
    ecc0:	2880030b 	ldhu	r2,12(r5)
    ecc4:	10c8000c 	andi	r3,r2,8192
    ecc8:	1800051e 	bne	r3,zero,ece0 <fputwc+0x4c>
    eccc:	28c01917 	ldw	r3,100(r5)
    ecd0:	10880014 	ori	r2,r2,8192
    ecd4:	2880030d 	sth	r2,12(r5)
    ecd8:	18880014 	ori	r2,r3,8192
    ecdc:	28801915 	stw	r2,100(r5)
    ece0:	280d883a 	mov	r6,r5
    ece4:	8009883a 	mov	r4,r16
    ece8:	880b883a 	mov	r5,r17
    ecec:	dfc00317 	ldw	ra,12(sp)
    ecf0:	dc400217 	ldw	r17,8(sp)
    ecf4:	dc000117 	ldw	r16,4(sp)
    ecf8:	dec00404 	addi	sp,sp,16
    ecfc:	000eb0c1 	jmpi	eb0c <__fputwc>
    ed00:	8009883a 	mov	r4,r16
    ed04:	d9400015 	stw	r5,0(sp)
    ed08:	0001a880 	call	1a88 <__sinit>
    ed0c:	d9400017 	ldw	r5,0(sp)
    ed10:	003feb06 	br	ecc0 <__alt_data_end+0xf800ecc0>

0000ed14 <__swbuf_r>:
    ed14:	defffb04 	addi	sp,sp,-20
    ed18:	dcc00315 	stw	r19,12(sp)
    ed1c:	dc800215 	stw	r18,8(sp)
    ed20:	dc000015 	stw	r16,0(sp)
    ed24:	dfc00415 	stw	ra,16(sp)
    ed28:	dc400115 	stw	r17,4(sp)
    ed2c:	2025883a 	mov	r18,r4
    ed30:	2827883a 	mov	r19,r5
    ed34:	3021883a 	mov	r16,r6
    ed38:	20000226 	beq	r4,zero,ed44 <__swbuf_r+0x30>
    ed3c:	20800e17 	ldw	r2,56(r4)
    ed40:	10004226 	beq	r2,zero,ee4c <__swbuf_r+0x138>
    ed44:	80800617 	ldw	r2,24(r16)
    ed48:	8100030b 	ldhu	r4,12(r16)
    ed4c:	80800215 	stw	r2,8(r16)
    ed50:	2080020c 	andi	r2,r4,8
    ed54:	10003626 	beq	r2,zero,ee30 <__swbuf_r+0x11c>
    ed58:	80c00417 	ldw	r3,16(r16)
    ed5c:	18003426 	beq	r3,zero,ee30 <__swbuf_r+0x11c>
    ed60:	2088000c 	andi	r2,r4,8192
    ed64:	9c403fcc 	andi	r17,r19,255
    ed68:	10001a26 	beq	r2,zero,edd4 <__swbuf_r+0xc0>
    ed6c:	80800017 	ldw	r2,0(r16)
    ed70:	81000517 	ldw	r4,20(r16)
    ed74:	10c7c83a 	sub	r3,r2,r3
    ed78:	1900200e 	bge	r3,r4,edfc <__swbuf_r+0xe8>
    ed7c:	18c00044 	addi	r3,r3,1
    ed80:	81000217 	ldw	r4,8(r16)
    ed84:	11400044 	addi	r5,r2,1
    ed88:	81400015 	stw	r5,0(r16)
    ed8c:	213fffc4 	addi	r4,r4,-1
    ed90:	81000215 	stw	r4,8(r16)
    ed94:	14c00005 	stb	r19,0(r2)
    ed98:	80800517 	ldw	r2,20(r16)
    ed9c:	10c01e26 	beq	r2,r3,ee18 <__swbuf_r+0x104>
    eda0:	8080030b 	ldhu	r2,12(r16)
    eda4:	1080004c 	andi	r2,r2,1
    eda8:	10000226 	beq	r2,zero,edb4 <__swbuf_r+0xa0>
    edac:	00800284 	movi	r2,10
    edb0:	88801926 	beq	r17,r2,ee18 <__swbuf_r+0x104>
    edb4:	8805883a 	mov	r2,r17
    edb8:	dfc00417 	ldw	ra,16(sp)
    edbc:	dcc00317 	ldw	r19,12(sp)
    edc0:	dc800217 	ldw	r18,8(sp)
    edc4:	dc400117 	ldw	r17,4(sp)
    edc8:	dc000017 	ldw	r16,0(sp)
    edcc:	dec00504 	addi	sp,sp,20
    edd0:	f800283a 	ret
    edd4:	81401917 	ldw	r5,100(r16)
    edd8:	00b7ffc4 	movi	r2,-8193
    eddc:	21080014 	ori	r4,r4,8192
    ede0:	2884703a 	and	r2,r5,r2
    ede4:	80801915 	stw	r2,100(r16)
    ede8:	80800017 	ldw	r2,0(r16)
    edec:	8100030d 	sth	r4,12(r16)
    edf0:	81000517 	ldw	r4,20(r16)
    edf4:	10c7c83a 	sub	r3,r2,r3
    edf8:	193fe016 	blt	r3,r4,ed7c <__alt_data_end+0xf800ed7c>
    edfc:	800b883a 	mov	r5,r16
    ee00:	9009883a 	mov	r4,r18
    ee04:	000169c0 	call	169c <_fflush_r>
    ee08:	1000071e 	bne	r2,zero,ee28 <__swbuf_r+0x114>
    ee0c:	80800017 	ldw	r2,0(r16)
    ee10:	00c00044 	movi	r3,1
    ee14:	003fda06 	br	ed80 <__alt_data_end+0xf800ed80>
    ee18:	800b883a 	mov	r5,r16
    ee1c:	9009883a 	mov	r4,r18
    ee20:	000169c0 	call	169c <_fflush_r>
    ee24:	103fe326 	beq	r2,zero,edb4 <__alt_data_end+0xf800edb4>
    ee28:	00bfffc4 	movi	r2,-1
    ee2c:	003fe206 	br	edb8 <__alt_data_end+0xf800edb8>
    ee30:	800b883a 	mov	r5,r16
    ee34:	9009883a 	mov	r4,r18
    ee38:	00080140 	call	8014 <__swsetup_r>
    ee3c:	103ffa1e 	bne	r2,zero,ee28 <__alt_data_end+0xf800ee28>
    ee40:	8100030b 	ldhu	r4,12(r16)
    ee44:	80c00417 	ldw	r3,16(r16)
    ee48:	003fc506 	br	ed60 <__alt_data_end+0xf800ed60>
    ee4c:	0001a880 	call	1a88 <__sinit>
    ee50:	003fbc06 	br	ed44 <__alt_data_end+0xf800ed44>

0000ee54 <__swbuf>:
    ee54:	008000b4 	movhi	r2,2
    ee58:	10a01704 	addi	r2,r2,-32676
    ee5c:	280d883a 	mov	r6,r5
    ee60:	200b883a 	mov	r5,r4
    ee64:	11000017 	ldw	r4,0(r2)
    ee68:	000ed141 	jmpi	ed14 <__swbuf_r>

0000ee6c <_wcrtomb_r>:
    ee6c:	defff604 	addi	sp,sp,-40
    ee70:	008000b4 	movhi	r2,2
    ee74:	dc800815 	stw	r18,32(sp)
    ee78:	dc400715 	stw	r17,28(sp)
    ee7c:	dc000615 	stw	r16,24(sp)
    ee80:	10a01b04 	addi	r2,r2,-32660
    ee84:	dfc00915 	stw	ra,36(sp)
    ee88:	2021883a 	mov	r16,r4
    ee8c:	3823883a 	mov	r17,r7
    ee90:	14800017 	ldw	r18,0(r2)
    ee94:	28001426 	beq	r5,zero,eee8 <_wcrtomb_r+0x7c>
    ee98:	d9400415 	stw	r5,16(sp)
    ee9c:	d9800515 	stw	r6,20(sp)
    eea0:	000a1b40 	call	a1b4 <__locale_charset>
    eea4:	d9800517 	ldw	r6,20(sp)
    eea8:	d9400417 	ldw	r5,16(sp)
    eeac:	100f883a 	mov	r7,r2
    eeb0:	dc400015 	stw	r17,0(sp)
    eeb4:	8009883a 	mov	r4,r16
    eeb8:	903ee83a 	callr	r18
    eebc:	00ffffc4 	movi	r3,-1
    eec0:	10c0031e 	bne	r2,r3,eed0 <_wcrtomb_r+0x64>
    eec4:	88000015 	stw	zero,0(r17)
    eec8:	00c02284 	movi	r3,138
    eecc:	80c00015 	stw	r3,0(r16)
    eed0:	dfc00917 	ldw	ra,36(sp)
    eed4:	dc800817 	ldw	r18,32(sp)
    eed8:	dc400717 	ldw	r17,28(sp)
    eedc:	dc000617 	ldw	r16,24(sp)
    eee0:	dec00a04 	addi	sp,sp,40
    eee4:	f800283a 	ret
    eee8:	000a1b40 	call	a1b4 <__locale_charset>
    eeec:	100f883a 	mov	r7,r2
    eef0:	dc400015 	stw	r17,0(sp)
    eef4:	000d883a 	mov	r6,zero
    eef8:	d9400104 	addi	r5,sp,4
    eefc:	8009883a 	mov	r4,r16
    ef00:	903ee83a 	callr	r18
    ef04:	003fed06 	br	eebc <__alt_data_end+0xf800eebc>

0000ef08 <wcrtomb>:
    ef08:	defff604 	addi	sp,sp,-40
    ef0c:	008000b4 	movhi	r2,2
    ef10:	dc800615 	stw	r18,24(sp)
    ef14:	dc400515 	stw	r17,20(sp)
    ef18:	10a01704 	addi	r2,r2,-32676
    ef1c:	dfc00915 	stw	ra,36(sp)
    ef20:	dd000815 	stw	r20,32(sp)
    ef24:	dcc00715 	stw	r19,28(sp)
    ef28:	dc000415 	stw	r16,16(sp)
    ef2c:	3025883a 	mov	r18,r6
    ef30:	14400017 	ldw	r17,0(r2)
    ef34:	20001926 	beq	r4,zero,ef9c <wcrtomb+0x94>
    ef38:	008000b4 	movhi	r2,2
    ef3c:	10a01b04 	addi	r2,r2,-32660
    ef40:	15000017 	ldw	r20,0(r2)
    ef44:	2021883a 	mov	r16,r4
    ef48:	2827883a 	mov	r19,r5
    ef4c:	000a1b40 	call	a1b4 <__locale_charset>
    ef50:	100f883a 	mov	r7,r2
    ef54:	dc800015 	stw	r18,0(sp)
    ef58:	980d883a 	mov	r6,r19
    ef5c:	800b883a 	mov	r5,r16
    ef60:	8809883a 	mov	r4,r17
    ef64:	a03ee83a 	callr	r20
    ef68:	00ffffc4 	movi	r3,-1
    ef6c:	10c0031e 	bne	r2,r3,ef7c <wcrtomb+0x74>
    ef70:	90000015 	stw	zero,0(r18)
    ef74:	00c02284 	movi	r3,138
    ef78:	88c00015 	stw	r3,0(r17)
    ef7c:	dfc00917 	ldw	ra,36(sp)
    ef80:	dd000817 	ldw	r20,32(sp)
    ef84:	dcc00717 	ldw	r19,28(sp)
    ef88:	dc800617 	ldw	r18,24(sp)
    ef8c:	dc400517 	ldw	r17,20(sp)
    ef90:	dc000417 	ldw	r16,16(sp)
    ef94:	dec00a04 	addi	sp,sp,40
    ef98:	f800283a 	ret
    ef9c:	008000b4 	movhi	r2,2
    efa0:	10a01b04 	addi	r2,r2,-32660
    efa4:	14000017 	ldw	r16,0(r2)
    efa8:	000a1b40 	call	a1b4 <__locale_charset>
    efac:	100f883a 	mov	r7,r2
    efb0:	dc800015 	stw	r18,0(sp)
    efb4:	000d883a 	mov	r6,zero
    efb8:	d9400104 	addi	r5,sp,4
    efbc:	8809883a 	mov	r4,r17
    efc0:	803ee83a 	callr	r16
    efc4:	003fe806 	br	ef68 <__alt_data_end+0xf800ef68>

0000efc8 <__ascii_wctomb>:
    efc8:	28000526 	beq	r5,zero,efe0 <__ascii_wctomb+0x18>
    efcc:	00803fc4 	movi	r2,255
    efd0:	11800536 	bltu	r2,r6,efe8 <__ascii_wctomb+0x20>
    efd4:	29800005 	stb	r6,0(r5)
    efd8:	00800044 	movi	r2,1
    efdc:	f800283a 	ret
    efe0:	0005883a 	mov	r2,zero
    efe4:	f800283a 	ret
    efe8:	00802284 	movi	r2,138
    efec:	20800015 	stw	r2,0(r4)
    eff0:	00bfffc4 	movi	r2,-1
    eff4:	f800283a 	ret

0000eff8 <_wctomb_r>:
    eff8:	008000b4 	movhi	r2,2
    effc:	defff904 	addi	sp,sp,-28
    f000:	10a01b04 	addi	r2,r2,-32660
    f004:	dfc00615 	stw	ra,24(sp)
    f008:	dc400515 	stw	r17,20(sp)
    f00c:	dc000415 	stw	r16,16(sp)
    f010:	3823883a 	mov	r17,r7
    f014:	14000017 	ldw	r16,0(r2)
    f018:	d9000115 	stw	r4,4(sp)
    f01c:	d9400215 	stw	r5,8(sp)
    f020:	d9800315 	stw	r6,12(sp)
    f024:	000a1b40 	call	a1b4 <__locale_charset>
    f028:	d9800317 	ldw	r6,12(sp)
    f02c:	d9400217 	ldw	r5,8(sp)
    f030:	d9000117 	ldw	r4,4(sp)
    f034:	100f883a 	mov	r7,r2
    f038:	dc400015 	stw	r17,0(sp)
    f03c:	803ee83a 	callr	r16
    f040:	dfc00617 	ldw	ra,24(sp)
    f044:	dc400517 	ldw	r17,20(sp)
    f048:	dc000417 	ldw	r16,16(sp)
    f04c:	dec00704 	addi	sp,sp,28
    f050:	f800283a 	ret

0000f054 <__udivdi3>:
    f054:	defff404 	addi	sp,sp,-48
    f058:	dcc00515 	stw	r19,20(sp)
    f05c:	dc000215 	stw	r16,8(sp)
    f060:	dfc00b15 	stw	ra,44(sp)
    f064:	df000a15 	stw	fp,40(sp)
    f068:	ddc00915 	stw	r23,36(sp)
    f06c:	dd800815 	stw	r22,32(sp)
    f070:	dd400715 	stw	r21,28(sp)
    f074:	dd000615 	stw	r20,24(sp)
    f078:	dc800415 	stw	r18,16(sp)
    f07c:	dc400315 	stw	r17,12(sp)
    f080:	2027883a 	mov	r19,r4
    f084:	2821883a 	mov	r16,r5
    f088:	3800461e 	bne	r7,zero,f1a4 <__udivdi3+0x150>
    f08c:	3023883a 	mov	r17,r6
    f090:	2025883a 	mov	r18,r4
    f094:	2980572e 	bgeu	r5,r6,f1f4 <__udivdi3+0x1a0>
    f098:	00bfffd4 	movui	r2,65535
    f09c:	282d883a 	mov	r22,r5
    f0a0:	1180b236 	bltu	r2,r6,f36c <__udivdi3+0x318>
    f0a4:	00803fc4 	movi	r2,255
    f0a8:	1185803a 	cmpltu	r2,r2,r6
    f0ac:	100490fa 	slli	r2,r2,3
    f0b0:	3086d83a 	srl	r3,r6,r2
    f0b4:	01000074 	movhi	r4,1
    f0b8:	21181e04 	addi	r4,r4,24696
    f0bc:	20c7883a 	add	r3,r4,r3
    f0c0:	18c00003 	ldbu	r3,0(r3)
    f0c4:	1885883a 	add	r2,r3,r2
    f0c8:	00c00804 	movi	r3,32
    f0cc:	1887c83a 	sub	r3,r3,r2
    f0d0:	18000526 	beq	r3,zero,f0e8 <__udivdi3+0x94>
    f0d4:	80e0983a 	sll	r16,r16,r3
    f0d8:	9884d83a 	srl	r2,r19,r2
    f0dc:	30e2983a 	sll	r17,r6,r3
    f0e0:	98e4983a 	sll	r18,r19,r3
    f0e4:	142cb03a 	or	r22,r2,r16
    f0e8:	882ad43a 	srli	r21,r17,16
    f0ec:	b009883a 	mov	r4,r22
    f0f0:	8d3fffcc 	andi	r20,r17,65535
    f0f4:	a80b883a 	mov	r5,r21
    f0f8:	00014280 	call	1428 <__umodsi3>
    f0fc:	b009883a 	mov	r4,r22
    f100:	a80b883a 	mov	r5,r21
    f104:	1027883a 	mov	r19,r2
    f108:	00013c40 	call	13c4 <__udivsi3>
    f10c:	100b883a 	mov	r5,r2
    f110:	a009883a 	mov	r4,r20
    f114:	102d883a 	mov	r22,r2
    f118:	000fc140 	call	fc14 <__mulsi3>
    f11c:	9826943a 	slli	r19,r19,16
    f120:	9006d43a 	srli	r3,r18,16
    f124:	1cc6b03a 	or	r3,r3,r19
    f128:	1880052e 	bgeu	r3,r2,f140 <__udivdi3+0xec>
    f12c:	1c47883a 	add	r3,r3,r17
    f130:	b13fffc4 	addi	r4,r22,-1
    f134:	1c400136 	bltu	r3,r17,f13c <__udivdi3+0xe8>
    f138:	18814236 	bltu	r3,r2,f644 <__udivdi3+0x5f0>
    f13c:	202d883a 	mov	r22,r4
    f140:	18a1c83a 	sub	r16,r3,r2
    f144:	8009883a 	mov	r4,r16
    f148:	a80b883a 	mov	r5,r21
    f14c:	00014280 	call	1428 <__umodsi3>
    f150:	1027883a 	mov	r19,r2
    f154:	8009883a 	mov	r4,r16
    f158:	a80b883a 	mov	r5,r21
    f15c:	9826943a 	slli	r19,r19,16
    f160:	00013c40 	call	13c4 <__udivsi3>
    f164:	100b883a 	mov	r5,r2
    f168:	a009883a 	mov	r4,r20
    f16c:	94bfffcc 	andi	r18,r18,65535
    f170:	1021883a 	mov	r16,r2
    f174:	94e4b03a 	or	r18,r18,r19
    f178:	000fc140 	call	fc14 <__mulsi3>
    f17c:	9080052e 	bgeu	r18,r2,f194 <__udivdi3+0x140>
    f180:	8ca5883a 	add	r18,r17,r18
    f184:	80ffffc4 	addi	r3,r16,-1
    f188:	94410c36 	bltu	r18,r17,f5bc <__udivdi3+0x568>
    f18c:	90810b2e 	bgeu	r18,r2,f5bc <__udivdi3+0x568>
    f190:	843fff84 	addi	r16,r16,-2
    f194:	b004943a 	slli	r2,r22,16
    f198:	0007883a 	mov	r3,zero
    f19c:	1404b03a 	or	r2,r2,r16
    f1a0:	00005e06 	br	f31c <__udivdi3+0x2c8>
    f1a4:	29c05b36 	bltu	r5,r7,f314 <__udivdi3+0x2c0>
    f1a8:	00bfffd4 	movui	r2,65535
    f1ac:	11c0672e 	bgeu	r2,r7,f34c <__udivdi3+0x2f8>
    f1b0:	00804034 	movhi	r2,256
    f1b4:	10bfffc4 	addi	r2,r2,-1
    f1b8:	11c10a36 	bltu	r2,r7,f5e4 <__udivdi3+0x590>
    f1bc:	00800404 	movi	r2,16
    f1c0:	3886d83a 	srl	r3,r7,r2
    f1c4:	01000074 	movhi	r4,1
    f1c8:	21181e04 	addi	r4,r4,24696
    f1cc:	20c7883a 	add	r3,r4,r3
    f1d0:	18c00003 	ldbu	r3,0(r3)
    f1d4:	05c00804 	movi	r23,32
    f1d8:	1885883a 	add	r2,r3,r2
    f1dc:	b8afc83a 	sub	r23,r23,r2
    f1e0:	b800671e 	bne	r23,zero,f380 <__udivdi3+0x32c>
    f1e4:	3c010536 	bltu	r7,r16,f5fc <__udivdi3+0x5a8>
    f1e8:	9985403a 	cmpgeu	r2,r19,r6
    f1ec:	0007883a 	mov	r3,zero
    f1f0:	00004a06 	br	f31c <__udivdi3+0x2c8>
    f1f4:	3000041e 	bne	r6,zero,f208 <__udivdi3+0x1b4>
    f1f8:	000b883a 	mov	r5,zero
    f1fc:	01000044 	movi	r4,1
    f200:	00013c40 	call	13c4 <__udivsi3>
    f204:	1023883a 	mov	r17,r2
    f208:	00bfffd4 	movui	r2,65535
    f20c:	1440532e 	bgeu	r2,r17,f35c <__udivdi3+0x308>
    f210:	00804034 	movhi	r2,256
    f214:	10bfffc4 	addi	r2,r2,-1
    f218:	1440f436 	bltu	r2,r17,f5ec <__udivdi3+0x598>
    f21c:	00800404 	movi	r2,16
    f220:	8886d83a 	srl	r3,r17,r2
    f224:	01000074 	movhi	r4,1
    f228:	21181e04 	addi	r4,r4,24696
    f22c:	20c7883a 	add	r3,r4,r3
    f230:	18c00003 	ldbu	r3,0(r3)
    f234:	1885883a 	add	r2,r3,r2
    f238:	00c00804 	movi	r3,32
    f23c:	1887c83a 	sub	r3,r3,r2
    f240:	1800a51e 	bne	r3,zero,f4d8 <__udivdi3+0x484>
    f244:	882ad43a 	srli	r21,r17,16
    f248:	8461c83a 	sub	r16,r16,r17
    f24c:	8d3fffcc 	andi	r20,r17,65535
    f250:	00c00044 	movi	r3,1
    f254:	a80b883a 	mov	r5,r21
    f258:	8009883a 	mov	r4,r16
    f25c:	d8c00115 	stw	r3,4(sp)
    f260:	00014280 	call	1428 <__umodsi3>
    f264:	a80b883a 	mov	r5,r21
    f268:	8009883a 	mov	r4,r16
    f26c:	1027883a 	mov	r19,r2
    f270:	00013c40 	call	13c4 <__udivsi3>
    f274:	a00b883a 	mov	r5,r20
    f278:	1009883a 	mov	r4,r2
    f27c:	102d883a 	mov	r22,r2
    f280:	000fc140 	call	fc14 <__mulsi3>
    f284:	9826943a 	slli	r19,r19,16
    f288:	900ed43a 	srli	r7,r18,16
    f28c:	d8c00117 	ldw	r3,4(sp)
    f290:	3cceb03a 	or	r7,r7,r19
    f294:	3880052e 	bgeu	r7,r2,f2ac <__udivdi3+0x258>
    f298:	3c4f883a 	add	r7,r7,r17
    f29c:	b13fffc4 	addi	r4,r22,-1
    f2a0:	3c400136 	bltu	r7,r17,f2a8 <__udivdi3+0x254>
    f2a4:	3880e436 	bltu	r7,r2,f638 <__udivdi3+0x5e4>
    f2a8:	202d883a 	mov	r22,r4
    f2ac:	38a1c83a 	sub	r16,r7,r2
    f2b0:	8009883a 	mov	r4,r16
    f2b4:	a80b883a 	mov	r5,r21
    f2b8:	d8c00115 	stw	r3,4(sp)
    f2bc:	00014280 	call	1428 <__umodsi3>
    f2c0:	1027883a 	mov	r19,r2
    f2c4:	8009883a 	mov	r4,r16
    f2c8:	a80b883a 	mov	r5,r21
    f2cc:	9826943a 	slli	r19,r19,16
    f2d0:	00013c40 	call	13c4 <__udivsi3>
    f2d4:	a00b883a 	mov	r5,r20
    f2d8:	1009883a 	mov	r4,r2
    f2dc:	94bfffcc 	andi	r18,r18,65535
    f2e0:	1021883a 	mov	r16,r2
    f2e4:	94e4b03a 	or	r18,r18,r19
    f2e8:	000fc140 	call	fc14 <__mulsi3>
    f2ec:	d8c00117 	ldw	r3,4(sp)
    f2f0:	9080052e 	bgeu	r18,r2,f308 <__udivdi3+0x2b4>
    f2f4:	8ca5883a 	add	r18,r17,r18
    f2f8:	813fffc4 	addi	r4,r16,-1
    f2fc:	9440ad36 	bltu	r18,r17,f5b4 <__udivdi3+0x560>
    f300:	9080ac2e 	bgeu	r18,r2,f5b4 <__udivdi3+0x560>
    f304:	843fff84 	addi	r16,r16,-2
    f308:	b004943a 	slli	r2,r22,16
    f30c:	1404b03a 	or	r2,r2,r16
    f310:	00000206 	br	f31c <__udivdi3+0x2c8>
    f314:	0007883a 	mov	r3,zero
    f318:	0005883a 	mov	r2,zero
    f31c:	dfc00b17 	ldw	ra,44(sp)
    f320:	df000a17 	ldw	fp,40(sp)
    f324:	ddc00917 	ldw	r23,36(sp)
    f328:	dd800817 	ldw	r22,32(sp)
    f32c:	dd400717 	ldw	r21,28(sp)
    f330:	dd000617 	ldw	r20,24(sp)
    f334:	dcc00517 	ldw	r19,20(sp)
    f338:	dc800417 	ldw	r18,16(sp)
    f33c:	dc400317 	ldw	r17,12(sp)
    f340:	dc000217 	ldw	r16,8(sp)
    f344:	dec00c04 	addi	sp,sp,48
    f348:	f800283a 	ret
    f34c:	00803fc4 	movi	r2,255
    f350:	11c5803a 	cmpltu	r2,r2,r7
    f354:	100490fa 	slli	r2,r2,3
    f358:	003f9906 	br	f1c0 <__alt_data_end+0xf800f1c0>
    f35c:	00803fc4 	movi	r2,255
    f360:	1445803a 	cmpltu	r2,r2,r17
    f364:	100490fa 	slli	r2,r2,3
    f368:	003fad06 	br	f220 <__alt_data_end+0xf800f220>
    f36c:	00804034 	movhi	r2,256
    f370:	10bfffc4 	addi	r2,r2,-1
    f374:	11809f36 	bltu	r2,r6,f5f4 <__udivdi3+0x5a0>
    f378:	00800404 	movi	r2,16
    f37c:	003f4c06 	br	f0b0 <__alt_data_end+0xf800f0b0>
    f380:	3dce983a 	sll	r7,r7,r23
    f384:	30b8d83a 	srl	fp,r6,r2
    f388:	80a2d83a 	srl	r17,r16,r2
    f38c:	35cc983a 	sll	r6,r6,r23
    f390:	3f38b03a 	or	fp,r7,fp
    f394:	e024d43a 	srli	r18,fp,16
    f398:	9884d83a 	srl	r2,r19,r2
    f39c:	85e0983a 	sll	r16,r16,r23
    f3a0:	8809883a 	mov	r4,r17
    f3a4:	900b883a 	mov	r5,r18
    f3a8:	d9800015 	stw	r6,0(sp)
    f3ac:	1420b03a 	or	r16,r2,r16
    f3b0:	00014280 	call	1428 <__umodsi3>
    f3b4:	900b883a 	mov	r5,r18
    f3b8:	8809883a 	mov	r4,r17
    f3bc:	1029883a 	mov	r20,r2
    f3c0:	e5bfffcc 	andi	r22,fp,65535
    f3c4:	00013c40 	call	13c4 <__udivsi3>
    f3c8:	100b883a 	mov	r5,r2
    f3cc:	b009883a 	mov	r4,r22
    f3d0:	102b883a 	mov	r21,r2
    f3d4:	000fc140 	call	fc14 <__mulsi3>
    f3d8:	a028943a 	slli	r20,r20,16
    f3dc:	8006d43a 	srli	r3,r16,16
    f3e0:	1d06b03a 	or	r3,r3,r20
    f3e4:	1880042e 	bgeu	r3,r2,f3f8 <__udivdi3+0x3a4>
    f3e8:	1f07883a 	add	r3,r3,fp
    f3ec:	a93fffc4 	addi	r4,r21,-1
    f3f0:	1f00892e 	bgeu	r3,fp,f618 <__udivdi3+0x5c4>
    f3f4:	202b883a 	mov	r21,r4
    f3f8:	18a3c83a 	sub	r17,r3,r2
    f3fc:	8809883a 	mov	r4,r17
    f400:	900b883a 	mov	r5,r18
    f404:	00014280 	call	1428 <__umodsi3>
    f408:	1029883a 	mov	r20,r2
    f40c:	8809883a 	mov	r4,r17
    f410:	900b883a 	mov	r5,r18
    f414:	a028943a 	slli	r20,r20,16
    f418:	00013c40 	call	13c4 <__udivsi3>
    f41c:	100b883a 	mov	r5,r2
    f420:	b009883a 	mov	r4,r22
    f424:	843fffcc 	andi	r16,r16,65535
    f428:	1023883a 	mov	r17,r2
    f42c:	8520b03a 	or	r16,r16,r20
    f430:	000fc140 	call	fc14 <__mulsi3>
    f434:	8080042e 	bgeu	r16,r2,f448 <__udivdi3+0x3f4>
    f438:	8721883a 	add	r16,r16,fp
    f43c:	88ffffc4 	addi	r3,r17,-1
    f440:	8700712e 	bgeu	r16,fp,f608 <__udivdi3+0x5b4>
    f444:	1823883a 	mov	r17,r3
    f448:	a80e943a 	slli	r7,r21,16
    f44c:	d8c00017 	ldw	r3,0(sp)
    f450:	80a1c83a 	sub	r16,r16,r2
    f454:	3c64b03a 	or	r18,r7,r17
    f458:	1d3fffcc 	andi	r20,r3,65535
    f45c:	9022d43a 	srli	r17,r18,16
    f460:	95bfffcc 	andi	r22,r18,65535
    f464:	a00b883a 	mov	r5,r20
    f468:	b009883a 	mov	r4,r22
    f46c:	182ad43a 	srli	r21,r3,16
    f470:	000fc140 	call	fc14 <__mulsi3>
    f474:	a00b883a 	mov	r5,r20
    f478:	8809883a 	mov	r4,r17
    f47c:	1039883a 	mov	fp,r2
    f480:	000fc140 	call	fc14 <__mulsi3>
    f484:	8809883a 	mov	r4,r17
    f488:	a80b883a 	mov	r5,r21
    f48c:	1029883a 	mov	r20,r2
    f490:	000fc140 	call	fc14 <__mulsi3>
    f494:	a80b883a 	mov	r5,r21
    f498:	b009883a 	mov	r4,r22
    f49c:	1023883a 	mov	r17,r2
    f4a0:	000fc140 	call	fc14 <__mulsi3>
    f4a4:	e006d43a 	srli	r3,fp,16
    f4a8:	1505883a 	add	r2,r2,r20
    f4ac:	1887883a 	add	r3,r3,r2
    f4b0:	1d00022e 	bgeu	r3,r20,f4bc <__udivdi3+0x468>
    f4b4:	00800074 	movhi	r2,1
    f4b8:	88a3883a 	add	r17,r17,r2
    f4bc:	1804d43a 	srli	r2,r3,16
    f4c0:	1463883a 	add	r17,r2,r17
    f4c4:	84404436 	bltu	r16,r17,f5d8 <__udivdi3+0x584>
    f4c8:	84403e26 	beq	r16,r17,f5c4 <__udivdi3+0x570>
    f4cc:	9005883a 	mov	r2,r18
    f4d0:	0007883a 	mov	r3,zero
    f4d4:	003f9106 	br	f31c <__alt_data_end+0xf800f31c>
    f4d8:	88e2983a 	sll	r17,r17,r3
    f4dc:	80aed83a 	srl	r23,r16,r2
    f4e0:	80e0983a 	sll	r16,r16,r3
    f4e4:	882ad43a 	srli	r21,r17,16
    f4e8:	9884d83a 	srl	r2,r19,r2
    f4ec:	b809883a 	mov	r4,r23
    f4f0:	a80b883a 	mov	r5,r21
    f4f4:	98e4983a 	sll	r18,r19,r3
    f4f8:	142cb03a 	or	r22,r2,r16
    f4fc:	00014280 	call	1428 <__umodsi3>
    f500:	b809883a 	mov	r4,r23
    f504:	a80b883a 	mov	r5,r21
    f508:	1027883a 	mov	r19,r2
    f50c:	8d3fffcc 	andi	r20,r17,65535
    f510:	00013c40 	call	13c4 <__udivsi3>
    f514:	a009883a 	mov	r4,r20
    f518:	100b883a 	mov	r5,r2
    f51c:	102f883a 	mov	r23,r2
    f520:	000fc140 	call	fc14 <__mulsi3>
    f524:	9826943a 	slli	r19,r19,16
    f528:	b008d43a 	srli	r4,r22,16
    f52c:	24c8b03a 	or	r4,r4,r19
    f530:	2080062e 	bgeu	r4,r2,f54c <__udivdi3+0x4f8>
    f534:	2449883a 	add	r4,r4,r17
    f538:	b8ffffc4 	addi	r3,r23,-1
    f53c:	24403c36 	bltu	r4,r17,f630 <__udivdi3+0x5dc>
    f540:	20803b2e 	bgeu	r4,r2,f630 <__udivdi3+0x5dc>
    f544:	bdffff84 	addi	r23,r23,-2
    f548:	2449883a 	add	r4,r4,r17
    f54c:	20a1c83a 	sub	r16,r4,r2
    f550:	a80b883a 	mov	r5,r21
    f554:	8009883a 	mov	r4,r16
    f558:	00014280 	call	1428 <__umodsi3>
    f55c:	a80b883a 	mov	r5,r21
    f560:	8009883a 	mov	r4,r16
    f564:	1027883a 	mov	r19,r2
    f568:	00013c40 	call	13c4 <__udivsi3>
    f56c:	a009883a 	mov	r4,r20
    f570:	100b883a 	mov	r5,r2
    f574:	9826943a 	slli	r19,r19,16
    f578:	1039883a 	mov	fp,r2
    f57c:	000fc140 	call	fc14 <__mulsi3>
    f580:	b13fffcc 	andi	r4,r22,65535
    f584:	24c8b03a 	or	r4,r4,r19
    f588:	2080062e 	bgeu	r4,r2,f5a4 <__udivdi3+0x550>
    f58c:	2449883a 	add	r4,r4,r17
    f590:	e0ffffc4 	addi	r3,fp,-1
    f594:	24402436 	bltu	r4,r17,f628 <__udivdi3+0x5d4>
    f598:	2080232e 	bgeu	r4,r2,f628 <__udivdi3+0x5d4>
    f59c:	e73fff84 	addi	fp,fp,-2
    f5a0:	2449883a 	add	r4,r4,r17
    f5a4:	b82e943a 	slli	r23,r23,16
    f5a8:	20a1c83a 	sub	r16,r4,r2
    f5ac:	bf06b03a 	or	r3,r23,fp
    f5b0:	003f2806 	br	f254 <__alt_data_end+0xf800f254>
    f5b4:	2021883a 	mov	r16,r4
    f5b8:	003f5306 	br	f308 <__alt_data_end+0xf800f308>
    f5bc:	1821883a 	mov	r16,r3
    f5c0:	003ef406 	br	f194 <__alt_data_end+0xf800f194>
    f5c4:	1806943a 	slli	r3,r3,16
    f5c8:	9de6983a 	sll	r19,r19,r23
    f5cc:	e73fffcc 	andi	fp,fp,65535
    f5d0:	1f07883a 	add	r3,r3,fp
    f5d4:	98ffbd2e 	bgeu	r19,r3,f4cc <__alt_data_end+0xf800f4cc>
    f5d8:	90bfffc4 	addi	r2,r18,-1
    f5dc:	0007883a 	mov	r3,zero
    f5e0:	003f4e06 	br	f31c <__alt_data_end+0xf800f31c>
    f5e4:	00800604 	movi	r2,24
    f5e8:	003ef506 	br	f1c0 <__alt_data_end+0xf800f1c0>
    f5ec:	00800604 	movi	r2,24
    f5f0:	003f0b06 	br	f220 <__alt_data_end+0xf800f220>
    f5f4:	00800604 	movi	r2,24
    f5f8:	003ead06 	br	f0b0 <__alt_data_end+0xf800f0b0>
    f5fc:	0007883a 	mov	r3,zero
    f600:	00800044 	movi	r2,1
    f604:	003f4506 	br	f31c <__alt_data_end+0xf800f31c>
    f608:	80bf8e2e 	bgeu	r16,r2,f444 <__alt_data_end+0xf800f444>
    f60c:	8c7fff84 	addi	r17,r17,-2
    f610:	8721883a 	add	r16,r16,fp
    f614:	003f8c06 	br	f448 <__alt_data_end+0xf800f448>
    f618:	18bf762e 	bgeu	r3,r2,f3f4 <__alt_data_end+0xf800f3f4>
    f61c:	ad7fff84 	addi	r21,r21,-2
    f620:	1f07883a 	add	r3,r3,fp
    f624:	003f7406 	br	f3f8 <__alt_data_end+0xf800f3f8>
    f628:	1839883a 	mov	fp,r3
    f62c:	003fdd06 	br	f5a4 <__alt_data_end+0xf800f5a4>
    f630:	182f883a 	mov	r23,r3
    f634:	003fc506 	br	f54c <__alt_data_end+0xf800f54c>
    f638:	b5bfff84 	addi	r22,r22,-2
    f63c:	3c4f883a 	add	r7,r7,r17
    f640:	003f1a06 	br	f2ac <__alt_data_end+0xf800f2ac>
    f644:	b5bfff84 	addi	r22,r22,-2
    f648:	1c47883a 	add	r3,r3,r17
    f64c:	003ebc06 	br	f140 <__alt_data_end+0xf800f140>

0000f650 <__umoddi3>:
    f650:	defff304 	addi	sp,sp,-52
    f654:	df000b15 	stw	fp,44(sp)
    f658:	dc400415 	stw	r17,16(sp)
    f65c:	dc000315 	stw	r16,12(sp)
    f660:	dfc00c15 	stw	ra,48(sp)
    f664:	ddc00a15 	stw	r23,40(sp)
    f668:	dd800915 	stw	r22,36(sp)
    f66c:	dd400815 	stw	r21,32(sp)
    f670:	dd000715 	stw	r20,28(sp)
    f674:	dcc00615 	stw	r19,24(sp)
    f678:	dc800515 	stw	r18,20(sp)
    f67c:	2021883a 	mov	r16,r4
    f680:	2823883a 	mov	r17,r5
    f684:	2839883a 	mov	fp,r5
    f688:	3800401e 	bne	r7,zero,f78c <__umoddi3+0x13c>
    f68c:	3027883a 	mov	r19,r6
    f690:	2029883a 	mov	r20,r4
    f694:	2980552e 	bgeu	r5,r6,f7ec <__umoddi3+0x19c>
    f698:	00bfffd4 	movui	r2,65535
    f69c:	1180a236 	bltu	r2,r6,f928 <__umoddi3+0x2d8>
    f6a0:	01003fc4 	movi	r4,255
    f6a4:	2189803a 	cmpltu	r4,r4,r6
    f6a8:	200890fa 	slli	r4,r4,3
    f6ac:	3104d83a 	srl	r2,r6,r4
    f6b0:	00c00074 	movhi	r3,1
    f6b4:	18d81e04 	addi	r3,r3,24696
    f6b8:	1885883a 	add	r2,r3,r2
    f6bc:	10c00003 	ldbu	r3,0(r2)
    f6c0:	00800804 	movi	r2,32
    f6c4:	1909883a 	add	r4,r3,r4
    f6c8:	1125c83a 	sub	r18,r2,r4
    f6cc:	90000526 	beq	r18,zero,f6e4 <__umoddi3+0x94>
    f6d0:	8ca2983a 	sll	r17,r17,r18
    f6d4:	8108d83a 	srl	r4,r16,r4
    f6d8:	34a6983a 	sll	r19,r6,r18
    f6dc:	84a8983a 	sll	r20,r16,r18
    f6e0:	2478b03a 	or	fp,r4,r17
    f6e4:	982cd43a 	srli	r22,r19,16
    f6e8:	e009883a 	mov	r4,fp
    f6ec:	9dffffcc 	andi	r23,r19,65535
    f6f0:	b00b883a 	mov	r5,r22
    f6f4:	00014280 	call	1428 <__umodsi3>
    f6f8:	b00b883a 	mov	r5,r22
    f6fc:	e009883a 	mov	r4,fp
    f700:	102b883a 	mov	r21,r2
    f704:	00013c40 	call	13c4 <__udivsi3>
    f708:	100b883a 	mov	r5,r2
    f70c:	b809883a 	mov	r4,r23
    f710:	000fc140 	call	fc14 <__mulsi3>
    f714:	a82a943a 	slli	r21,r21,16
    f718:	a006d43a 	srli	r3,r20,16
    f71c:	1d46b03a 	or	r3,r3,r21
    f720:	1880032e 	bgeu	r3,r2,f730 <__umoddi3+0xe0>
    f724:	1cc7883a 	add	r3,r3,r19
    f728:	1cc00136 	bltu	r3,r19,f730 <__umoddi3+0xe0>
    f72c:	18813136 	bltu	r3,r2,fbf4 <__umoddi3+0x5a4>
    f730:	18a1c83a 	sub	r16,r3,r2
    f734:	b00b883a 	mov	r5,r22
    f738:	8009883a 	mov	r4,r16
    f73c:	00014280 	call	1428 <__umodsi3>
    f740:	b00b883a 	mov	r5,r22
    f744:	8009883a 	mov	r4,r16
    f748:	1023883a 	mov	r17,r2
    f74c:	00013c40 	call	13c4 <__udivsi3>
    f750:	100b883a 	mov	r5,r2
    f754:	b809883a 	mov	r4,r23
    f758:	8822943a 	slli	r17,r17,16
    f75c:	000fc140 	call	fc14 <__mulsi3>
    f760:	a0ffffcc 	andi	r3,r20,65535
    f764:	1c46b03a 	or	r3,r3,r17
    f768:	1880042e 	bgeu	r3,r2,f77c <__umoddi3+0x12c>
    f76c:	1cc7883a 	add	r3,r3,r19
    f770:	1cc00236 	bltu	r3,r19,f77c <__umoddi3+0x12c>
    f774:	1880012e 	bgeu	r3,r2,f77c <__umoddi3+0x12c>
    f778:	1cc7883a 	add	r3,r3,r19
    f77c:	1885c83a 	sub	r2,r3,r2
    f780:	1484d83a 	srl	r2,r2,r18
    f784:	0007883a 	mov	r3,zero
    f788:	00005306 	br	f8d8 <__umoddi3+0x288>
    f78c:	29c05036 	bltu	r5,r7,f8d0 <__umoddi3+0x280>
    f790:	00bfffd4 	movui	r2,65535
    f794:	11c05c2e 	bgeu	r2,r7,f908 <__umoddi3+0x2b8>
    f798:	00804034 	movhi	r2,256
    f79c:	10bfffc4 	addi	r2,r2,-1
    f7a0:	11c10636 	bltu	r2,r7,fbbc <__umoddi3+0x56c>
    f7a4:	01000404 	movi	r4,16
    f7a8:	3904d83a 	srl	r2,r7,r4
    f7ac:	00c00074 	movhi	r3,1
    f7b0:	18d81e04 	addi	r3,r3,24696
    f7b4:	1885883a 	add	r2,r3,r2
    f7b8:	14c00003 	ldbu	r19,0(r2)
    f7bc:	00c00804 	movi	r3,32
    f7c0:	9927883a 	add	r19,r19,r4
    f7c4:	1ce9c83a 	sub	r20,r3,r19
    f7c8:	a0005c1e 	bne	r20,zero,f93c <__umoddi3+0x2ec>
    f7cc:	3c400136 	bltu	r7,r17,f7d4 <__umoddi3+0x184>
    f7d0:	81810a36 	bltu	r16,r6,fbfc <__umoddi3+0x5ac>
    f7d4:	8185c83a 	sub	r2,r16,r6
    f7d8:	89e3c83a 	sub	r17,r17,r7
    f7dc:	8089803a 	cmpltu	r4,r16,r2
    f7e0:	8939c83a 	sub	fp,r17,r4
    f7e4:	e007883a 	mov	r3,fp
    f7e8:	00003b06 	br	f8d8 <__umoddi3+0x288>
    f7ec:	3000041e 	bne	r6,zero,f800 <__umoddi3+0x1b0>
    f7f0:	000b883a 	mov	r5,zero
    f7f4:	01000044 	movi	r4,1
    f7f8:	00013c40 	call	13c4 <__udivsi3>
    f7fc:	1027883a 	mov	r19,r2
    f800:	00bfffd4 	movui	r2,65535
    f804:	14c0442e 	bgeu	r2,r19,f918 <__umoddi3+0x2c8>
    f808:	00804034 	movhi	r2,256
    f80c:	10bfffc4 	addi	r2,r2,-1
    f810:	14c0ec36 	bltu	r2,r19,fbc4 <__umoddi3+0x574>
    f814:	00800404 	movi	r2,16
    f818:	9886d83a 	srl	r3,r19,r2
    f81c:	01000074 	movhi	r4,1
    f820:	21181e04 	addi	r4,r4,24696
    f824:	20c7883a 	add	r3,r4,r3
    f828:	18c00003 	ldbu	r3,0(r3)
    f82c:	1887883a 	add	r3,r3,r2
    f830:	00800804 	movi	r2,32
    f834:	10e5c83a 	sub	r18,r2,r3
    f838:	9000ab1e 	bne	r18,zero,fae8 <__umoddi3+0x498>
    f83c:	982cd43a 	srli	r22,r19,16
    f840:	8ce3c83a 	sub	r17,r17,r19
    f844:	9dffffcc 	andi	r23,r19,65535
    f848:	b00b883a 	mov	r5,r22
    f84c:	8809883a 	mov	r4,r17
    f850:	00014280 	call	1428 <__umodsi3>
    f854:	b00b883a 	mov	r5,r22
    f858:	8809883a 	mov	r4,r17
    f85c:	102b883a 	mov	r21,r2
    f860:	00013c40 	call	13c4 <__udivsi3>
    f864:	b80b883a 	mov	r5,r23
    f868:	1009883a 	mov	r4,r2
    f86c:	000fc140 	call	fc14 <__mulsi3>
    f870:	a82a943a 	slli	r21,r21,16
    f874:	a006d43a 	srli	r3,r20,16
    f878:	1d46b03a 	or	r3,r3,r21
    f87c:	1880042e 	bgeu	r3,r2,f890 <__umoddi3+0x240>
    f880:	1cc7883a 	add	r3,r3,r19
    f884:	1cc00236 	bltu	r3,r19,f890 <__umoddi3+0x240>
    f888:	1880012e 	bgeu	r3,r2,f890 <__umoddi3+0x240>
    f88c:	1cc7883a 	add	r3,r3,r19
    f890:	18a1c83a 	sub	r16,r3,r2
    f894:	b00b883a 	mov	r5,r22
    f898:	8009883a 	mov	r4,r16
    f89c:	00014280 	call	1428 <__umodsi3>
    f8a0:	1023883a 	mov	r17,r2
    f8a4:	b00b883a 	mov	r5,r22
    f8a8:	8009883a 	mov	r4,r16
    f8ac:	00013c40 	call	13c4 <__udivsi3>
    f8b0:	8822943a 	slli	r17,r17,16
    f8b4:	b80b883a 	mov	r5,r23
    f8b8:	1009883a 	mov	r4,r2
    f8bc:	000fc140 	call	fc14 <__mulsi3>
    f8c0:	a53fffcc 	andi	r20,r20,65535
    f8c4:	a446b03a 	or	r3,r20,r17
    f8c8:	18bfac2e 	bgeu	r3,r2,f77c <__alt_data_end+0xf800f77c>
    f8cc:	003fa706 	br	f76c <__alt_data_end+0xf800f76c>
    f8d0:	2005883a 	mov	r2,r4
    f8d4:	2807883a 	mov	r3,r5
    f8d8:	dfc00c17 	ldw	ra,48(sp)
    f8dc:	df000b17 	ldw	fp,44(sp)
    f8e0:	ddc00a17 	ldw	r23,40(sp)
    f8e4:	dd800917 	ldw	r22,36(sp)
    f8e8:	dd400817 	ldw	r21,32(sp)
    f8ec:	dd000717 	ldw	r20,28(sp)
    f8f0:	dcc00617 	ldw	r19,24(sp)
    f8f4:	dc800517 	ldw	r18,20(sp)
    f8f8:	dc400417 	ldw	r17,16(sp)
    f8fc:	dc000317 	ldw	r16,12(sp)
    f900:	dec00d04 	addi	sp,sp,52
    f904:	f800283a 	ret
    f908:	04c03fc4 	movi	r19,255
    f90c:	99c9803a 	cmpltu	r4,r19,r7
    f910:	200890fa 	slli	r4,r4,3
    f914:	003fa406 	br	f7a8 <__alt_data_end+0xf800f7a8>
    f918:	00803fc4 	movi	r2,255
    f91c:	14c5803a 	cmpltu	r2,r2,r19
    f920:	100490fa 	slli	r2,r2,3
    f924:	003fbc06 	br	f818 <__alt_data_end+0xf800f818>
    f928:	00804034 	movhi	r2,256
    f92c:	10bfffc4 	addi	r2,r2,-1
    f930:	1180a636 	bltu	r2,r6,fbcc <__umoddi3+0x57c>
    f934:	01000404 	movi	r4,16
    f938:	003f5c06 	br	f6ac <__alt_data_end+0xf800f6ac>
    f93c:	3d0e983a 	sll	r7,r7,r20
    f940:	34ead83a 	srl	r21,r6,r19
    f944:	8cc6d83a 	srl	r3,r17,r19
    f948:	8d10983a 	sll	r8,r17,r20
    f94c:	3d6ab03a 	or	r21,r7,r21
    f950:	a82cd43a 	srli	r22,r21,16
    f954:	84e2d83a 	srl	r17,r16,r19
    f958:	1809883a 	mov	r4,r3
    f95c:	b00b883a 	mov	r5,r22
    f960:	8a22b03a 	or	r17,r17,r8
    f964:	3524983a 	sll	r18,r6,r20
    f968:	dc400015 	stw	r17,0(sp)
    f96c:	d8c00115 	stw	r3,4(sp)
    f970:	00014280 	call	1428 <__umodsi3>
    f974:	d8c00117 	ldw	r3,4(sp)
    f978:	b00b883a 	mov	r5,r22
    f97c:	1039883a 	mov	fp,r2
    f980:	1809883a 	mov	r4,r3
    f984:	00013c40 	call	13c4 <__udivsi3>
    f988:	adffffcc 	andi	r23,r21,65535
    f98c:	100b883a 	mov	r5,r2
    f990:	b809883a 	mov	r4,r23
    f994:	1023883a 	mov	r17,r2
    f998:	000fc140 	call	fc14 <__mulsi3>
    f99c:	d9400017 	ldw	r5,0(sp)
    f9a0:	e008943a 	slli	r4,fp,16
    f9a4:	8520983a 	sll	r16,r16,r20
    f9a8:	2806d43a 	srli	r3,r5,16
    f9ac:	1906b03a 	or	r3,r3,r4
    f9b0:	1880042e 	bgeu	r3,r2,f9c4 <__umoddi3+0x374>
    f9b4:	1d47883a 	add	r3,r3,r21
    f9b8:	893fffc4 	addi	r4,r17,-1
    f9bc:	1d40892e 	bgeu	r3,r21,fbe4 <__umoddi3+0x594>
    f9c0:	2023883a 	mov	r17,r4
    f9c4:	18b9c83a 	sub	fp,r3,r2
    f9c8:	b00b883a 	mov	r5,r22
    f9cc:	e009883a 	mov	r4,fp
    f9d0:	00014280 	call	1428 <__umodsi3>
    f9d4:	b00b883a 	mov	r5,r22
    f9d8:	e009883a 	mov	r4,fp
    f9dc:	d8800215 	stw	r2,8(sp)
    f9e0:	00013c40 	call	13c4 <__udivsi3>
    f9e4:	100b883a 	mov	r5,r2
    f9e8:	b809883a 	mov	r4,r23
    f9ec:	102d883a 	mov	r22,r2
    f9f0:	000fc140 	call	fc14 <__mulsi3>
    f9f4:	d9800217 	ldw	r6,8(sp)
    f9f8:	d8c00017 	ldw	r3,0(sp)
    f9fc:	300c943a 	slli	r6,r6,16
    fa00:	1a3fffcc 	andi	r8,r3,65535
    fa04:	4190b03a 	or	r8,r8,r6
    fa08:	4080042e 	bgeu	r8,r2,fa1c <__umoddi3+0x3cc>
    fa0c:	4551883a 	add	r8,r8,r21
    fa10:	b0ffffc4 	addi	r3,r22,-1
    fa14:	45406f2e 	bgeu	r8,r21,fbd4 <__umoddi3+0x584>
    fa18:	182d883a 	mov	r22,r3
    fa1c:	880e943a 	slli	r7,r17,16
    fa20:	9006d43a 	srli	r3,r18,16
    fa24:	91bfffcc 	andi	r6,r18,65535
    fa28:	3dacb03a 	or	r22,r7,r22
    fa2c:	b02ed43a 	srli	r23,r22,16
    fa30:	b5bfffcc 	andi	r22,r22,65535
    fa34:	300b883a 	mov	r5,r6
    fa38:	b009883a 	mov	r4,r22
    fa3c:	40a3c83a 	sub	r17,r8,r2
    fa40:	d8c00115 	stw	r3,4(sp)
    fa44:	d9800215 	stw	r6,8(sp)
    fa48:	000fc140 	call	fc14 <__mulsi3>
    fa4c:	d9800217 	ldw	r6,8(sp)
    fa50:	b809883a 	mov	r4,r23
    fa54:	1039883a 	mov	fp,r2
    fa58:	300b883a 	mov	r5,r6
    fa5c:	000fc140 	call	fc14 <__mulsi3>
    fa60:	d8c00117 	ldw	r3,4(sp)
    fa64:	b809883a 	mov	r4,r23
    fa68:	d8800215 	stw	r2,8(sp)
    fa6c:	180b883a 	mov	r5,r3
    fa70:	000fc140 	call	fc14 <__mulsi3>
    fa74:	d8c00117 	ldw	r3,4(sp)
    fa78:	b009883a 	mov	r4,r22
    fa7c:	102f883a 	mov	r23,r2
    fa80:	180b883a 	mov	r5,r3
    fa84:	000fc140 	call	fc14 <__mulsi3>
    fa88:	d9800217 	ldw	r6,8(sp)
    fa8c:	e006d43a 	srli	r3,fp,16
    fa90:	1185883a 	add	r2,r2,r6
    fa94:	1885883a 	add	r2,r3,r2
    fa98:	1180022e 	bgeu	r2,r6,faa4 <__umoddi3+0x454>
    fa9c:	00c00074 	movhi	r3,1
    faa0:	b8ef883a 	add	r23,r23,r3
    faa4:	1006d43a 	srli	r3,r2,16
    faa8:	1004943a 	slli	r2,r2,16
    faac:	e73fffcc 	andi	fp,fp,65535
    fab0:	1dc7883a 	add	r3,r3,r23
    fab4:	1739883a 	add	fp,r2,fp
    fab8:	88c03a36 	bltu	r17,r3,fba4 <__umoddi3+0x554>
    fabc:	88c05126 	beq	r17,r3,fc04 <__umoddi3+0x5b4>
    fac0:	88c9c83a 	sub	r4,r17,r3
    fac4:	e00f883a 	mov	r7,fp
    fac8:	81cfc83a 	sub	r7,r16,r7
    facc:	81c7803a 	cmpltu	r3,r16,r7
    fad0:	20c7c83a 	sub	r3,r4,r3
    fad4:	1cc4983a 	sll	r2,r3,r19
    fad8:	3d0ed83a 	srl	r7,r7,r20
    fadc:	1d06d83a 	srl	r3,r3,r20
    fae0:	11c4b03a 	or	r2,r2,r7
    fae4:	003f7c06 	br	f8d8 <__alt_data_end+0xf800f8d8>
    fae8:	9ca6983a 	sll	r19,r19,r18
    faec:	88f8d83a 	srl	fp,r17,r3
    faf0:	80c4d83a 	srl	r2,r16,r3
    faf4:	982cd43a 	srli	r22,r19,16
    faf8:	8ca2983a 	sll	r17,r17,r18
    fafc:	e009883a 	mov	r4,fp
    fb00:	b00b883a 	mov	r5,r22
    fb04:	146ab03a 	or	r21,r2,r17
    fb08:	00014280 	call	1428 <__umodsi3>
    fb0c:	b00b883a 	mov	r5,r22
    fb10:	e009883a 	mov	r4,fp
    fb14:	1029883a 	mov	r20,r2
    fb18:	9dffffcc 	andi	r23,r19,65535
    fb1c:	00013c40 	call	13c4 <__udivsi3>
    fb20:	b809883a 	mov	r4,r23
    fb24:	100b883a 	mov	r5,r2
    fb28:	000fc140 	call	fc14 <__mulsi3>
    fb2c:	a008943a 	slli	r4,r20,16
    fb30:	a806d43a 	srli	r3,r21,16
    fb34:	84a8983a 	sll	r20,r16,r18
    fb38:	1906b03a 	or	r3,r3,r4
    fb3c:	1880042e 	bgeu	r3,r2,fb50 <__umoddi3+0x500>
    fb40:	1cc7883a 	add	r3,r3,r19
    fb44:	1cc00236 	bltu	r3,r19,fb50 <__umoddi3+0x500>
    fb48:	1880012e 	bgeu	r3,r2,fb50 <__umoddi3+0x500>
    fb4c:	1cc7883a 	add	r3,r3,r19
    fb50:	18a3c83a 	sub	r17,r3,r2
    fb54:	b00b883a 	mov	r5,r22
    fb58:	8809883a 	mov	r4,r17
    fb5c:	00014280 	call	1428 <__umodsi3>
    fb60:	b00b883a 	mov	r5,r22
    fb64:	8809883a 	mov	r4,r17
    fb68:	1021883a 	mov	r16,r2
    fb6c:	00013c40 	call	13c4 <__udivsi3>
    fb70:	100b883a 	mov	r5,r2
    fb74:	b809883a 	mov	r4,r23
    fb78:	8020943a 	slli	r16,r16,16
    fb7c:	000fc140 	call	fc14 <__mulsi3>
    fb80:	a8ffffcc 	andi	r3,r21,65535
    fb84:	1c06b03a 	or	r3,r3,r16
    fb88:	1880042e 	bgeu	r3,r2,fb9c <__umoddi3+0x54c>
    fb8c:	1cc7883a 	add	r3,r3,r19
    fb90:	1cc00236 	bltu	r3,r19,fb9c <__umoddi3+0x54c>
    fb94:	1880012e 	bgeu	r3,r2,fb9c <__umoddi3+0x54c>
    fb98:	1cc7883a 	add	r3,r3,r19
    fb9c:	18a3c83a 	sub	r17,r3,r2
    fba0:	003f2906 	br	f848 <__alt_data_end+0xf800f848>
    fba4:	e48fc83a 	sub	r7,fp,r18
    fba8:	1d49c83a 	sub	r4,r3,r21
    fbac:	e1f9803a 	cmpltu	fp,fp,r7
    fbb0:	2739c83a 	sub	fp,r4,fp
    fbb4:	8f09c83a 	sub	r4,r17,fp
    fbb8:	003fc306 	br	fac8 <__alt_data_end+0xf800fac8>
    fbbc:	01000604 	movi	r4,24
    fbc0:	003ef906 	br	f7a8 <__alt_data_end+0xf800f7a8>
    fbc4:	00800604 	movi	r2,24
    fbc8:	003f1306 	br	f818 <__alt_data_end+0xf800f818>
    fbcc:	01000604 	movi	r4,24
    fbd0:	003eb606 	br	f6ac <__alt_data_end+0xf800f6ac>
    fbd4:	40bf902e 	bgeu	r8,r2,fa18 <__alt_data_end+0xf800fa18>
    fbd8:	b5bfff84 	addi	r22,r22,-2
    fbdc:	4551883a 	add	r8,r8,r21
    fbe0:	003f8e06 	br	fa1c <__alt_data_end+0xf800fa1c>
    fbe4:	18bf762e 	bgeu	r3,r2,f9c0 <__alt_data_end+0xf800f9c0>
    fbe8:	8c7fff84 	addi	r17,r17,-2
    fbec:	1d47883a 	add	r3,r3,r21
    fbf0:	003f7406 	br	f9c4 <__alt_data_end+0xf800f9c4>
    fbf4:	1cc7883a 	add	r3,r3,r19
    fbf8:	003ecd06 	br	f730 <__alt_data_end+0xf800f730>
    fbfc:	8005883a 	mov	r2,r16
    fc00:	003ef806 	br	f7e4 <__alt_data_end+0xf800f7e4>
    fc04:	873fe736 	bltu	r16,fp,fba4 <__alt_data_end+0xf800fba4>
    fc08:	e00f883a 	mov	r7,fp
    fc0c:	0009883a 	mov	r4,zero
    fc10:	003fad06 	br	fac8 <__alt_data_end+0xf800fac8>

0000fc14 <__mulsi3>:
    fc14:	0005883a 	mov	r2,zero
    fc18:	20000726 	beq	r4,zero,fc38 <__mulsi3+0x24>
    fc1c:	20c0004c 	andi	r3,r4,1
    fc20:	2008d07a 	srli	r4,r4,1
    fc24:	18000126 	beq	r3,zero,fc2c <__mulsi3+0x18>
    fc28:	1145883a 	add	r2,r2,r5
    fc2c:	294b883a 	add	r5,r5,r5
    fc30:	203ffa1e 	bne	r4,zero,fc1c <__alt_data_end+0xf800fc1c>
    fc34:	f800283a 	ret
    fc38:	f800283a 	ret

0000fc3c <__adddf3>:
    fc3c:	02c00434 	movhi	r11,16
    fc40:	5affffc4 	addi	r11,r11,-1
    fc44:	2806d7fa 	srli	r3,r5,31
    fc48:	2ad4703a 	and	r10,r5,r11
    fc4c:	3ad2703a 	and	r9,r7,r11
    fc50:	3804d53a 	srli	r2,r7,20
    fc54:	3018d77a 	srli	r12,r6,29
    fc58:	280ad53a 	srli	r5,r5,20
    fc5c:	501490fa 	slli	r10,r10,3
    fc60:	2010d77a 	srli	r8,r4,29
    fc64:	481290fa 	slli	r9,r9,3
    fc68:	380ed7fa 	srli	r7,r7,31
    fc6c:	defffb04 	addi	sp,sp,-20
    fc70:	dc800215 	stw	r18,8(sp)
    fc74:	dc400115 	stw	r17,4(sp)
    fc78:	dc000015 	stw	r16,0(sp)
    fc7c:	dfc00415 	stw	ra,16(sp)
    fc80:	dcc00315 	stw	r19,12(sp)
    fc84:	1c803fcc 	andi	r18,r3,255
    fc88:	2c01ffcc 	andi	r16,r5,2047
    fc8c:	5210b03a 	or	r8,r10,r8
    fc90:	202290fa 	slli	r17,r4,3
    fc94:	1081ffcc 	andi	r2,r2,2047
    fc98:	4b12b03a 	or	r9,r9,r12
    fc9c:	300c90fa 	slli	r6,r6,3
    fca0:	91c07526 	beq	r18,r7,fe78 <__adddf3+0x23c>
    fca4:	8087c83a 	sub	r3,r16,r2
    fca8:	00c0ab0e 	bge	zero,r3,ff58 <__adddf3+0x31c>
    fcac:	10002a1e 	bne	r2,zero,fd58 <__adddf3+0x11c>
    fcb0:	4984b03a 	or	r2,r9,r6
    fcb4:	1000961e 	bne	r2,zero,ff10 <__adddf3+0x2d4>
    fcb8:	888001cc 	andi	r2,r17,7
    fcbc:	10000726 	beq	r2,zero,fcdc <__adddf3+0xa0>
    fcc0:	888003cc 	andi	r2,r17,15
    fcc4:	00c00104 	movi	r3,4
    fcc8:	10c00426 	beq	r2,r3,fcdc <__adddf3+0xa0>
    fccc:	88c7883a 	add	r3,r17,r3
    fcd0:	1c63803a 	cmpltu	r17,r3,r17
    fcd4:	4451883a 	add	r8,r8,r17
    fcd8:	1823883a 	mov	r17,r3
    fcdc:	4080202c 	andhi	r2,r8,128
    fce0:	10005926 	beq	r2,zero,fe48 <__adddf3+0x20c>
    fce4:	84000044 	addi	r16,r16,1
    fce8:	0081ffc4 	movi	r2,2047
    fcec:	8080ba26 	beq	r16,r2,ffd8 <__adddf3+0x39c>
    fcf0:	00bfe034 	movhi	r2,65408
    fcf4:	10bfffc4 	addi	r2,r2,-1
    fcf8:	4090703a 	and	r8,r8,r2
    fcfc:	4004977a 	slli	r2,r8,29
    fd00:	4010927a 	slli	r8,r8,9
    fd04:	8822d0fa 	srli	r17,r17,3
    fd08:	8401ffcc 	andi	r16,r16,2047
    fd0c:	4010d33a 	srli	r8,r8,12
    fd10:	9007883a 	mov	r3,r18
    fd14:	1444b03a 	or	r2,r2,r17
    fd18:	8401ffcc 	andi	r16,r16,2047
    fd1c:	8020953a 	slli	r16,r16,20
    fd20:	18c03fcc 	andi	r3,r3,255
    fd24:	01000434 	movhi	r4,16
    fd28:	213fffc4 	addi	r4,r4,-1
    fd2c:	180697fa 	slli	r3,r3,31
    fd30:	4110703a 	and	r8,r8,r4
    fd34:	4410b03a 	or	r8,r8,r16
    fd38:	40c6b03a 	or	r3,r8,r3
    fd3c:	dfc00417 	ldw	ra,16(sp)
    fd40:	dcc00317 	ldw	r19,12(sp)
    fd44:	dc800217 	ldw	r18,8(sp)
    fd48:	dc400117 	ldw	r17,4(sp)
    fd4c:	dc000017 	ldw	r16,0(sp)
    fd50:	dec00504 	addi	sp,sp,20
    fd54:	f800283a 	ret
    fd58:	0081ffc4 	movi	r2,2047
    fd5c:	80bfd626 	beq	r16,r2,fcb8 <__alt_data_end+0xf800fcb8>
    fd60:	4a402034 	orhi	r9,r9,128
    fd64:	00800e04 	movi	r2,56
    fd68:	10c09f16 	blt	r2,r3,ffe8 <__adddf3+0x3ac>
    fd6c:	008007c4 	movi	r2,31
    fd70:	10c0c216 	blt	r2,r3,1007c <__adddf3+0x440>
    fd74:	00800804 	movi	r2,32
    fd78:	10c5c83a 	sub	r2,r2,r3
    fd7c:	488a983a 	sll	r5,r9,r2
    fd80:	30c8d83a 	srl	r4,r6,r3
    fd84:	3084983a 	sll	r2,r6,r2
    fd88:	48c6d83a 	srl	r3,r9,r3
    fd8c:	290cb03a 	or	r6,r5,r4
    fd90:	1004c03a 	cmpne	r2,r2,zero
    fd94:	308cb03a 	or	r6,r6,r2
    fd98:	898dc83a 	sub	r6,r17,r6
    fd9c:	89a3803a 	cmpltu	r17,r17,r6
    fda0:	40d1c83a 	sub	r8,r8,r3
    fda4:	4451c83a 	sub	r8,r8,r17
    fda8:	3023883a 	mov	r17,r6
    fdac:	4080202c 	andhi	r2,r8,128
    fdb0:	10002326 	beq	r2,zero,fe40 <__adddf3+0x204>
    fdb4:	04c02034 	movhi	r19,128
    fdb8:	9cffffc4 	addi	r19,r19,-1
    fdbc:	44e6703a 	and	r19,r8,r19
    fdc0:	98007626 	beq	r19,zero,ff9c <__adddf3+0x360>
    fdc4:	9809883a 	mov	r4,r19
    fdc8:	001247c0 	call	1247c <__clzsi2>
    fdcc:	10fffe04 	addi	r3,r2,-8
    fdd0:	010007c4 	movi	r4,31
    fdd4:	20c07716 	blt	r4,r3,ffb4 <__adddf3+0x378>
    fdd8:	00800804 	movi	r2,32
    fddc:	10c5c83a 	sub	r2,r2,r3
    fde0:	8884d83a 	srl	r2,r17,r2
    fde4:	98d0983a 	sll	r8,r19,r3
    fde8:	88e2983a 	sll	r17,r17,r3
    fdec:	1204b03a 	or	r2,r2,r8
    fdf0:	1c007416 	blt	r3,r16,ffc4 <__adddf3+0x388>
    fdf4:	1c21c83a 	sub	r16,r3,r16
    fdf8:	82000044 	addi	r8,r16,1
    fdfc:	00c007c4 	movi	r3,31
    fe00:	1a009116 	blt	r3,r8,10048 <__adddf3+0x40c>
    fe04:	00c00804 	movi	r3,32
    fe08:	1a07c83a 	sub	r3,r3,r8
    fe0c:	8a08d83a 	srl	r4,r17,r8
    fe10:	88e2983a 	sll	r17,r17,r3
    fe14:	10c6983a 	sll	r3,r2,r3
    fe18:	1210d83a 	srl	r8,r2,r8
    fe1c:	8804c03a 	cmpne	r2,r17,zero
    fe20:	1906b03a 	or	r3,r3,r4
    fe24:	18a2b03a 	or	r17,r3,r2
    fe28:	0021883a 	mov	r16,zero
    fe2c:	003fa206 	br	fcb8 <__alt_data_end+0xf800fcb8>
    fe30:	1890b03a 	or	r8,r3,r2
    fe34:	40017d26 	beq	r8,zero,1042c <__adddf3+0x7f0>
    fe38:	1011883a 	mov	r8,r2
    fe3c:	1823883a 	mov	r17,r3
    fe40:	888001cc 	andi	r2,r17,7
    fe44:	103f9e1e 	bne	r2,zero,fcc0 <__alt_data_end+0xf800fcc0>
    fe48:	4004977a 	slli	r2,r8,29
    fe4c:	8822d0fa 	srli	r17,r17,3
    fe50:	4010d0fa 	srli	r8,r8,3
    fe54:	9007883a 	mov	r3,r18
    fe58:	1444b03a 	or	r2,r2,r17
    fe5c:	0101ffc4 	movi	r4,2047
    fe60:	81002426 	beq	r16,r4,fef4 <__adddf3+0x2b8>
    fe64:	8120703a 	and	r16,r16,r4
    fe68:	01000434 	movhi	r4,16
    fe6c:	213fffc4 	addi	r4,r4,-1
    fe70:	4110703a 	and	r8,r8,r4
    fe74:	003fa806 	br	fd18 <__alt_data_end+0xf800fd18>
    fe78:	8089c83a 	sub	r4,r16,r2
    fe7c:	01005e0e 	bge	zero,r4,fff8 <__adddf3+0x3bc>
    fe80:	10002b26 	beq	r2,zero,ff30 <__adddf3+0x2f4>
    fe84:	0081ffc4 	movi	r2,2047
    fe88:	80bf8b26 	beq	r16,r2,fcb8 <__alt_data_end+0xf800fcb8>
    fe8c:	4a402034 	orhi	r9,r9,128
    fe90:	00800e04 	movi	r2,56
    fe94:	1100a40e 	bge	r2,r4,10128 <__adddf3+0x4ec>
    fe98:	498cb03a 	or	r6,r9,r6
    fe9c:	300ac03a 	cmpne	r5,r6,zero
    fea0:	0013883a 	mov	r9,zero
    fea4:	2c4b883a 	add	r5,r5,r17
    fea8:	2c63803a 	cmpltu	r17,r5,r17
    feac:	4a11883a 	add	r8,r9,r8
    feb0:	8a11883a 	add	r8,r17,r8
    feb4:	2823883a 	mov	r17,r5
    feb8:	4080202c 	andhi	r2,r8,128
    febc:	103fe026 	beq	r2,zero,fe40 <__alt_data_end+0xf800fe40>
    fec0:	84000044 	addi	r16,r16,1
    fec4:	0081ffc4 	movi	r2,2047
    fec8:	8080d226 	beq	r16,r2,10214 <__adddf3+0x5d8>
    fecc:	00bfe034 	movhi	r2,65408
    fed0:	10bfffc4 	addi	r2,r2,-1
    fed4:	4090703a 	and	r8,r8,r2
    fed8:	880ad07a 	srli	r5,r17,1
    fedc:	400897fa 	slli	r4,r8,31
    fee0:	88c0004c 	andi	r3,r17,1
    fee4:	28e2b03a 	or	r17,r5,r3
    fee8:	4010d07a 	srli	r8,r8,1
    feec:	2462b03a 	or	r17,r4,r17
    fef0:	003f7106 	br	fcb8 <__alt_data_end+0xf800fcb8>
    fef4:	4088b03a 	or	r4,r8,r2
    fef8:	20014526 	beq	r4,zero,10410 <__adddf3+0x7d4>
    fefc:	01000434 	movhi	r4,16
    ff00:	42000234 	orhi	r8,r8,8
    ff04:	213fffc4 	addi	r4,r4,-1
    ff08:	4110703a 	and	r8,r8,r4
    ff0c:	003f8206 	br	fd18 <__alt_data_end+0xf800fd18>
    ff10:	18ffffc4 	addi	r3,r3,-1
    ff14:	1800491e 	bne	r3,zero,1003c <__adddf3+0x400>
    ff18:	898bc83a 	sub	r5,r17,r6
    ff1c:	8963803a 	cmpltu	r17,r17,r5
    ff20:	4251c83a 	sub	r8,r8,r9
    ff24:	4451c83a 	sub	r8,r8,r17
    ff28:	2823883a 	mov	r17,r5
    ff2c:	003f9f06 	br	fdac <__alt_data_end+0xf800fdac>
    ff30:	4984b03a 	or	r2,r9,r6
    ff34:	103f6026 	beq	r2,zero,fcb8 <__alt_data_end+0xf800fcb8>
    ff38:	213fffc4 	addi	r4,r4,-1
    ff3c:	2000931e 	bne	r4,zero,1018c <__adddf3+0x550>
    ff40:	898d883a 	add	r6,r17,r6
    ff44:	3463803a 	cmpltu	r17,r6,r17
    ff48:	4251883a 	add	r8,r8,r9
    ff4c:	8a11883a 	add	r8,r17,r8
    ff50:	3023883a 	mov	r17,r6
    ff54:	003fd806 	br	feb8 <__alt_data_end+0xf800feb8>
    ff58:	1800541e 	bne	r3,zero,100ac <__adddf3+0x470>
    ff5c:	80800044 	addi	r2,r16,1
    ff60:	1081ffcc 	andi	r2,r2,2047
    ff64:	00c00044 	movi	r3,1
    ff68:	1880a00e 	bge	r3,r2,101ec <__adddf3+0x5b0>
    ff6c:	8989c83a 	sub	r4,r17,r6
    ff70:	8905803a 	cmpltu	r2,r17,r4
    ff74:	4267c83a 	sub	r19,r8,r9
    ff78:	98a7c83a 	sub	r19,r19,r2
    ff7c:	9880202c 	andhi	r2,r19,128
    ff80:	10006326 	beq	r2,zero,10110 <__adddf3+0x4d4>
    ff84:	3463c83a 	sub	r17,r6,r17
    ff88:	4a07c83a 	sub	r3,r9,r8
    ff8c:	344d803a 	cmpltu	r6,r6,r17
    ff90:	19a7c83a 	sub	r19,r3,r6
    ff94:	3825883a 	mov	r18,r7
    ff98:	983f8a1e 	bne	r19,zero,fdc4 <__alt_data_end+0xf800fdc4>
    ff9c:	8809883a 	mov	r4,r17
    ffa0:	001247c0 	call	1247c <__clzsi2>
    ffa4:	10800804 	addi	r2,r2,32
    ffa8:	10fffe04 	addi	r3,r2,-8
    ffac:	010007c4 	movi	r4,31
    ffb0:	20ff890e 	bge	r4,r3,fdd8 <__alt_data_end+0xf800fdd8>
    ffb4:	10bff604 	addi	r2,r2,-40
    ffb8:	8884983a 	sll	r2,r17,r2
    ffbc:	0023883a 	mov	r17,zero
    ffc0:	1c3f8c0e 	bge	r3,r16,fdf4 <__alt_data_end+0xf800fdf4>
    ffc4:	023fe034 	movhi	r8,65408
    ffc8:	423fffc4 	addi	r8,r8,-1
    ffcc:	80e1c83a 	sub	r16,r16,r3
    ffd0:	1210703a 	and	r8,r2,r8
    ffd4:	003f3806 	br	fcb8 <__alt_data_end+0xf800fcb8>
    ffd8:	9007883a 	mov	r3,r18
    ffdc:	0011883a 	mov	r8,zero
    ffe0:	0005883a 	mov	r2,zero
    ffe4:	003f4c06 	br	fd18 <__alt_data_end+0xf800fd18>
    ffe8:	498cb03a 	or	r6,r9,r6
    ffec:	300cc03a 	cmpne	r6,r6,zero
    fff0:	0007883a 	mov	r3,zero
    fff4:	003f6806 	br	fd98 <__alt_data_end+0xf800fd98>
    fff8:	20009c1e 	bne	r4,zero,1026c <__adddf3+0x630>
    fffc:	80800044 	addi	r2,r16,1
   10000:	1141ffcc 	andi	r5,r2,2047
   10004:	01000044 	movi	r4,1
   10008:	2140670e 	bge	r4,r5,101a8 <__adddf3+0x56c>
   1000c:	0101ffc4 	movi	r4,2047
   10010:	11007f26 	beq	r2,r4,10210 <__adddf3+0x5d4>
   10014:	898d883a 	add	r6,r17,r6
   10018:	4247883a 	add	r3,r8,r9
   1001c:	3451803a 	cmpltu	r8,r6,r17
   10020:	40d1883a 	add	r8,r8,r3
   10024:	402297fa 	slli	r17,r8,31
   10028:	300cd07a 	srli	r6,r6,1
   1002c:	4010d07a 	srli	r8,r8,1
   10030:	1021883a 	mov	r16,r2
   10034:	89a2b03a 	or	r17,r17,r6
   10038:	003f1f06 	br	fcb8 <__alt_data_end+0xf800fcb8>
   1003c:	0081ffc4 	movi	r2,2047
   10040:	80bf481e 	bne	r16,r2,fd64 <__alt_data_end+0xf800fd64>
   10044:	003f1c06 	br	fcb8 <__alt_data_end+0xf800fcb8>
   10048:	843ff844 	addi	r16,r16,-31
   1004c:	01000804 	movi	r4,32
   10050:	1406d83a 	srl	r3,r2,r16
   10054:	41005026 	beq	r8,r4,10198 <__adddf3+0x55c>
   10058:	01001004 	movi	r4,64
   1005c:	2211c83a 	sub	r8,r4,r8
   10060:	1204983a 	sll	r2,r2,r8
   10064:	88a2b03a 	or	r17,r17,r2
   10068:	8822c03a 	cmpne	r17,r17,zero
   1006c:	1c62b03a 	or	r17,r3,r17
   10070:	0011883a 	mov	r8,zero
   10074:	0021883a 	mov	r16,zero
   10078:	003f7106 	br	fe40 <__alt_data_end+0xf800fe40>
   1007c:	193ff804 	addi	r4,r3,-32
   10080:	00800804 	movi	r2,32
   10084:	4908d83a 	srl	r4,r9,r4
   10088:	18804526 	beq	r3,r2,101a0 <__adddf3+0x564>
   1008c:	00801004 	movi	r2,64
   10090:	10c5c83a 	sub	r2,r2,r3
   10094:	4886983a 	sll	r3,r9,r2
   10098:	198cb03a 	or	r6,r3,r6
   1009c:	300cc03a 	cmpne	r6,r6,zero
   100a0:	218cb03a 	or	r6,r4,r6
   100a4:	0007883a 	mov	r3,zero
   100a8:	003f3b06 	br	fd98 <__alt_data_end+0xf800fd98>
   100ac:	80002a26 	beq	r16,zero,10158 <__adddf3+0x51c>
   100b0:	0101ffc4 	movi	r4,2047
   100b4:	11006826 	beq	r2,r4,10258 <__adddf3+0x61c>
   100b8:	00c7c83a 	sub	r3,zero,r3
   100bc:	42002034 	orhi	r8,r8,128
   100c0:	01000e04 	movi	r4,56
   100c4:	20c07c16 	blt	r4,r3,102b8 <__adddf3+0x67c>
   100c8:	010007c4 	movi	r4,31
   100cc:	20c0da16 	blt	r4,r3,10438 <__adddf3+0x7fc>
   100d0:	01000804 	movi	r4,32
   100d4:	20c9c83a 	sub	r4,r4,r3
   100d8:	4114983a 	sll	r10,r8,r4
   100dc:	88cad83a 	srl	r5,r17,r3
   100e0:	8908983a 	sll	r4,r17,r4
   100e4:	40c6d83a 	srl	r3,r8,r3
   100e8:	5162b03a 	or	r17,r10,r5
   100ec:	2008c03a 	cmpne	r4,r4,zero
   100f0:	8922b03a 	or	r17,r17,r4
   100f4:	3463c83a 	sub	r17,r6,r17
   100f8:	48c7c83a 	sub	r3,r9,r3
   100fc:	344d803a 	cmpltu	r6,r6,r17
   10100:	1991c83a 	sub	r8,r3,r6
   10104:	1021883a 	mov	r16,r2
   10108:	3825883a 	mov	r18,r7
   1010c:	003f2706 	br	fdac <__alt_data_end+0xf800fdac>
   10110:	24d0b03a 	or	r8,r4,r19
   10114:	40001b1e 	bne	r8,zero,10184 <__adddf3+0x548>
   10118:	0005883a 	mov	r2,zero
   1011c:	0007883a 	mov	r3,zero
   10120:	0021883a 	mov	r16,zero
   10124:	003f4d06 	br	fe5c <__alt_data_end+0xf800fe5c>
   10128:	008007c4 	movi	r2,31
   1012c:	11003c16 	blt	r2,r4,10220 <__adddf3+0x5e4>
   10130:	00800804 	movi	r2,32
   10134:	1105c83a 	sub	r2,r2,r4
   10138:	488e983a 	sll	r7,r9,r2
   1013c:	310ad83a 	srl	r5,r6,r4
   10140:	3084983a 	sll	r2,r6,r2
   10144:	4912d83a 	srl	r9,r9,r4
   10148:	394ab03a 	or	r5,r7,r5
   1014c:	1004c03a 	cmpne	r2,r2,zero
   10150:	288ab03a 	or	r5,r5,r2
   10154:	003f5306 	br	fea4 <__alt_data_end+0xf800fea4>
   10158:	4448b03a 	or	r4,r8,r17
   1015c:	20003e26 	beq	r4,zero,10258 <__adddf3+0x61c>
   10160:	00c6303a 	nor	r3,zero,r3
   10164:	18003a1e 	bne	r3,zero,10250 <__adddf3+0x614>
   10168:	3463c83a 	sub	r17,r6,r17
   1016c:	4a07c83a 	sub	r3,r9,r8
   10170:	344d803a 	cmpltu	r6,r6,r17
   10174:	1991c83a 	sub	r8,r3,r6
   10178:	1021883a 	mov	r16,r2
   1017c:	3825883a 	mov	r18,r7
   10180:	003f0a06 	br	fdac <__alt_data_end+0xf800fdac>
   10184:	2023883a 	mov	r17,r4
   10188:	003f0d06 	br	fdc0 <__alt_data_end+0xf800fdc0>
   1018c:	0081ffc4 	movi	r2,2047
   10190:	80bf3f1e 	bne	r16,r2,fe90 <__alt_data_end+0xf800fe90>
   10194:	003ec806 	br	fcb8 <__alt_data_end+0xf800fcb8>
   10198:	0005883a 	mov	r2,zero
   1019c:	003fb106 	br	10064 <__alt_data_end+0xf8010064>
   101a0:	0007883a 	mov	r3,zero
   101a4:	003fbc06 	br	10098 <__alt_data_end+0xf8010098>
   101a8:	4444b03a 	or	r2,r8,r17
   101ac:	8000871e 	bne	r16,zero,103cc <__adddf3+0x790>
   101b0:	1000ba26 	beq	r2,zero,1049c <__adddf3+0x860>
   101b4:	4984b03a 	or	r2,r9,r6
   101b8:	103ebf26 	beq	r2,zero,fcb8 <__alt_data_end+0xf800fcb8>
   101bc:	8985883a 	add	r2,r17,r6
   101c0:	4247883a 	add	r3,r8,r9
   101c4:	1451803a 	cmpltu	r8,r2,r17
   101c8:	40d1883a 	add	r8,r8,r3
   101cc:	40c0202c 	andhi	r3,r8,128
   101d0:	1023883a 	mov	r17,r2
   101d4:	183f1a26 	beq	r3,zero,fe40 <__alt_data_end+0xf800fe40>
   101d8:	00bfe034 	movhi	r2,65408
   101dc:	10bfffc4 	addi	r2,r2,-1
   101e0:	2021883a 	mov	r16,r4
   101e4:	4090703a 	and	r8,r8,r2
   101e8:	003eb306 	br	fcb8 <__alt_data_end+0xf800fcb8>
   101ec:	4444b03a 	or	r2,r8,r17
   101f0:	8000291e 	bne	r16,zero,10298 <__adddf3+0x65c>
   101f4:	10004b1e 	bne	r2,zero,10324 <__adddf3+0x6e8>
   101f8:	4990b03a 	or	r8,r9,r6
   101fc:	40008b26 	beq	r8,zero,1042c <__adddf3+0x7f0>
   10200:	4811883a 	mov	r8,r9
   10204:	3023883a 	mov	r17,r6
   10208:	3825883a 	mov	r18,r7
   1020c:	003eaa06 	br	fcb8 <__alt_data_end+0xf800fcb8>
   10210:	1021883a 	mov	r16,r2
   10214:	0011883a 	mov	r8,zero
   10218:	0005883a 	mov	r2,zero
   1021c:	003f0f06 	br	fe5c <__alt_data_end+0xf800fe5c>
   10220:	217ff804 	addi	r5,r4,-32
   10224:	00800804 	movi	r2,32
   10228:	494ad83a 	srl	r5,r9,r5
   1022c:	20807d26 	beq	r4,r2,10424 <__adddf3+0x7e8>
   10230:	00801004 	movi	r2,64
   10234:	1109c83a 	sub	r4,r2,r4
   10238:	4912983a 	sll	r9,r9,r4
   1023c:	498cb03a 	or	r6,r9,r6
   10240:	300cc03a 	cmpne	r6,r6,zero
   10244:	298ab03a 	or	r5,r5,r6
   10248:	0013883a 	mov	r9,zero
   1024c:	003f1506 	br	fea4 <__alt_data_end+0xf800fea4>
   10250:	0101ffc4 	movi	r4,2047
   10254:	113f9a1e 	bne	r2,r4,100c0 <__alt_data_end+0xf80100c0>
   10258:	4811883a 	mov	r8,r9
   1025c:	3023883a 	mov	r17,r6
   10260:	1021883a 	mov	r16,r2
   10264:	3825883a 	mov	r18,r7
   10268:	003e9306 	br	fcb8 <__alt_data_end+0xf800fcb8>
   1026c:	8000161e 	bne	r16,zero,102c8 <__adddf3+0x68c>
   10270:	444ab03a 	or	r5,r8,r17
   10274:	28005126 	beq	r5,zero,103bc <__adddf3+0x780>
   10278:	0108303a 	nor	r4,zero,r4
   1027c:	20004d1e 	bne	r4,zero,103b4 <__adddf3+0x778>
   10280:	89a3883a 	add	r17,r17,r6
   10284:	4253883a 	add	r9,r8,r9
   10288:	898d803a 	cmpltu	r6,r17,r6
   1028c:	3251883a 	add	r8,r6,r9
   10290:	1021883a 	mov	r16,r2
   10294:	003f0806 	br	feb8 <__alt_data_end+0xf800feb8>
   10298:	1000301e 	bne	r2,zero,1035c <__adddf3+0x720>
   1029c:	4984b03a 	or	r2,r9,r6
   102a0:	10007126 	beq	r2,zero,10468 <__adddf3+0x82c>
   102a4:	4811883a 	mov	r8,r9
   102a8:	3023883a 	mov	r17,r6
   102ac:	3825883a 	mov	r18,r7
   102b0:	0401ffc4 	movi	r16,2047
   102b4:	003e8006 	br	fcb8 <__alt_data_end+0xf800fcb8>
   102b8:	4462b03a 	or	r17,r8,r17
   102bc:	8822c03a 	cmpne	r17,r17,zero
   102c0:	0007883a 	mov	r3,zero
   102c4:	003f8b06 	br	100f4 <__alt_data_end+0xf80100f4>
   102c8:	0141ffc4 	movi	r5,2047
   102cc:	11403b26 	beq	r2,r5,103bc <__adddf3+0x780>
   102d0:	0109c83a 	sub	r4,zero,r4
   102d4:	42002034 	orhi	r8,r8,128
   102d8:	01400e04 	movi	r5,56
   102dc:	29006716 	blt	r5,r4,1047c <__adddf3+0x840>
   102e0:	014007c4 	movi	r5,31
   102e4:	29007016 	blt	r5,r4,104a8 <__adddf3+0x86c>
   102e8:	01400804 	movi	r5,32
   102ec:	290bc83a 	sub	r5,r5,r4
   102f0:	4154983a 	sll	r10,r8,r5
   102f4:	890ed83a 	srl	r7,r17,r4
   102f8:	894a983a 	sll	r5,r17,r5
   102fc:	4108d83a 	srl	r4,r8,r4
   10300:	51e2b03a 	or	r17,r10,r7
   10304:	280ac03a 	cmpne	r5,r5,zero
   10308:	8962b03a 	or	r17,r17,r5
   1030c:	89a3883a 	add	r17,r17,r6
   10310:	2253883a 	add	r9,r4,r9
   10314:	898d803a 	cmpltu	r6,r17,r6
   10318:	3251883a 	add	r8,r6,r9
   1031c:	1021883a 	mov	r16,r2
   10320:	003ee506 	br	feb8 <__alt_data_end+0xf800feb8>
   10324:	4984b03a 	or	r2,r9,r6
   10328:	103e6326 	beq	r2,zero,fcb8 <__alt_data_end+0xf800fcb8>
   1032c:	8987c83a 	sub	r3,r17,r6
   10330:	88c9803a 	cmpltu	r4,r17,r3
   10334:	4245c83a 	sub	r2,r8,r9
   10338:	1105c83a 	sub	r2,r2,r4
   1033c:	1100202c 	andhi	r4,r2,128
   10340:	203ebb26 	beq	r4,zero,fe30 <__alt_data_end+0xf800fe30>
   10344:	3463c83a 	sub	r17,r6,r17
   10348:	4a07c83a 	sub	r3,r9,r8
   1034c:	344d803a 	cmpltu	r6,r6,r17
   10350:	1991c83a 	sub	r8,r3,r6
   10354:	3825883a 	mov	r18,r7
   10358:	003e5706 	br	fcb8 <__alt_data_end+0xf800fcb8>
   1035c:	4984b03a 	or	r2,r9,r6
   10360:	10002e26 	beq	r2,zero,1041c <__adddf3+0x7e0>
   10364:	4004d0fa 	srli	r2,r8,3
   10368:	8822d0fa 	srli	r17,r17,3
   1036c:	4010977a 	slli	r8,r8,29
   10370:	10c0022c 	andhi	r3,r2,8
   10374:	4462b03a 	or	r17,r8,r17
   10378:	18000826 	beq	r3,zero,1039c <__adddf3+0x760>
   1037c:	4808d0fa 	srli	r4,r9,3
   10380:	20c0022c 	andhi	r3,r4,8
   10384:	1800051e 	bne	r3,zero,1039c <__adddf3+0x760>
   10388:	300cd0fa 	srli	r6,r6,3
   1038c:	4806977a 	slli	r3,r9,29
   10390:	2005883a 	mov	r2,r4
   10394:	3825883a 	mov	r18,r7
   10398:	19a2b03a 	or	r17,r3,r6
   1039c:	8810d77a 	srli	r8,r17,29
   103a0:	100490fa 	slli	r2,r2,3
   103a4:	882290fa 	slli	r17,r17,3
   103a8:	0401ffc4 	movi	r16,2047
   103ac:	4090b03a 	or	r8,r8,r2
   103b0:	003e4106 	br	fcb8 <__alt_data_end+0xf800fcb8>
   103b4:	0141ffc4 	movi	r5,2047
   103b8:	117fc71e 	bne	r2,r5,102d8 <__alt_data_end+0xf80102d8>
   103bc:	4811883a 	mov	r8,r9
   103c0:	3023883a 	mov	r17,r6
   103c4:	1021883a 	mov	r16,r2
   103c8:	003e3b06 	br	fcb8 <__alt_data_end+0xf800fcb8>
   103cc:	10002f26 	beq	r2,zero,1048c <__adddf3+0x850>
   103d0:	4984b03a 	or	r2,r9,r6
   103d4:	10001126 	beq	r2,zero,1041c <__adddf3+0x7e0>
   103d8:	4004d0fa 	srli	r2,r8,3
   103dc:	8822d0fa 	srli	r17,r17,3
   103e0:	4010977a 	slli	r8,r8,29
   103e4:	10c0022c 	andhi	r3,r2,8
   103e8:	4462b03a 	or	r17,r8,r17
   103ec:	183feb26 	beq	r3,zero,1039c <__alt_data_end+0xf801039c>
   103f0:	4808d0fa 	srli	r4,r9,3
   103f4:	20c0022c 	andhi	r3,r4,8
   103f8:	183fe81e 	bne	r3,zero,1039c <__alt_data_end+0xf801039c>
   103fc:	300cd0fa 	srli	r6,r6,3
   10400:	4806977a 	slli	r3,r9,29
   10404:	2005883a 	mov	r2,r4
   10408:	19a2b03a 	or	r17,r3,r6
   1040c:	003fe306 	br	1039c <__alt_data_end+0xf801039c>
   10410:	0011883a 	mov	r8,zero
   10414:	0005883a 	mov	r2,zero
   10418:	003e3f06 	br	fd18 <__alt_data_end+0xf800fd18>
   1041c:	0401ffc4 	movi	r16,2047
   10420:	003e2506 	br	fcb8 <__alt_data_end+0xf800fcb8>
   10424:	0013883a 	mov	r9,zero
   10428:	003f8406 	br	1023c <__alt_data_end+0xf801023c>
   1042c:	0005883a 	mov	r2,zero
   10430:	0007883a 	mov	r3,zero
   10434:	003e8906 	br	fe5c <__alt_data_end+0xf800fe5c>
   10438:	197ff804 	addi	r5,r3,-32
   1043c:	01000804 	movi	r4,32
   10440:	414ad83a 	srl	r5,r8,r5
   10444:	19002426 	beq	r3,r4,104d8 <__adddf3+0x89c>
   10448:	01001004 	movi	r4,64
   1044c:	20c7c83a 	sub	r3,r4,r3
   10450:	40c6983a 	sll	r3,r8,r3
   10454:	1c46b03a 	or	r3,r3,r17
   10458:	1806c03a 	cmpne	r3,r3,zero
   1045c:	28e2b03a 	or	r17,r5,r3
   10460:	0007883a 	mov	r3,zero
   10464:	003f2306 	br	100f4 <__alt_data_end+0xf80100f4>
   10468:	0007883a 	mov	r3,zero
   1046c:	5811883a 	mov	r8,r11
   10470:	00bfffc4 	movi	r2,-1
   10474:	0401ffc4 	movi	r16,2047
   10478:	003e7806 	br	fe5c <__alt_data_end+0xf800fe5c>
   1047c:	4462b03a 	or	r17,r8,r17
   10480:	8822c03a 	cmpne	r17,r17,zero
   10484:	0009883a 	mov	r4,zero
   10488:	003fa006 	br	1030c <__alt_data_end+0xf801030c>
   1048c:	4811883a 	mov	r8,r9
   10490:	3023883a 	mov	r17,r6
   10494:	0401ffc4 	movi	r16,2047
   10498:	003e0706 	br	fcb8 <__alt_data_end+0xf800fcb8>
   1049c:	4811883a 	mov	r8,r9
   104a0:	3023883a 	mov	r17,r6
   104a4:	003e0406 	br	fcb8 <__alt_data_end+0xf800fcb8>
   104a8:	21fff804 	addi	r7,r4,-32
   104ac:	01400804 	movi	r5,32
   104b0:	41ced83a 	srl	r7,r8,r7
   104b4:	21400a26 	beq	r4,r5,104e0 <__adddf3+0x8a4>
   104b8:	01401004 	movi	r5,64
   104bc:	2909c83a 	sub	r4,r5,r4
   104c0:	4108983a 	sll	r4,r8,r4
   104c4:	2448b03a 	or	r4,r4,r17
   104c8:	2008c03a 	cmpne	r4,r4,zero
   104cc:	3922b03a 	or	r17,r7,r4
   104d0:	0009883a 	mov	r4,zero
   104d4:	003f8d06 	br	1030c <__alt_data_end+0xf801030c>
   104d8:	0007883a 	mov	r3,zero
   104dc:	003fdd06 	br	10454 <__alt_data_end+0xf8010454>
   104e0:	0009883a 	mov	r4,zero
   104e4:	003ff706 	br	104c4 <__alt_data_end+0xf80104c4>

000104e8 <__divdf3>:
   104e8:	defff004 	addi	sp,sp,-64
   104ec:	dc800815 	stw	r18,32(sp)
   104f0:	2824d53a 	srli	r18,r5,20
   104f4:	dd800c15 	stw	r22,48(sp)
   104f8:	282cd7fa 	srli	r22,r5,31
   104fc:	dc000615 	stw	r16,24(sp)
   10500:	04000434 	movhi	r16,16
   10504:	843fffc4 	addi	r16,r16,-1
   10508:	dfc00f15 	stw	ra,60(sp)
   1050c:	df000e15 	stw	fp,56(sp)
   10510:	ddc00d15 	stw	r23,52(sp)
   10514:	dd400b15 	stw	r21,44(sp)
   10518:	dd000a15 	stw	r20,40(sp)
   1051c:	dcc00915 	stw	r19,36(sp)
   10520:	dc400715 	stw	r17,28(sp)
   10524:	9481ffcc 	andi	r18,r18,2047
   10528:	2c20703a 	and	r16,r5,r16
   1052c:	b2003fcc 	andi	r8,r22,255
   10530:	90006126 	beq	r18,zero,106b8 <__divdf3+0x1d0>
   10534:	0081ffc4 	movi	r2,2047
   10538:	202b883a 	mov	r21,r4
   1053c:	90803726 	beq	r18,r2,1061c <__divdf3+0x134>
   10540:	80800434 	orhi	r2,r16,16
   10544:	100490fa 	slli	r2,r2,3
   10548:	2020d77a 	srli	r16,r4,29
   1054c:	202a90fa 	slli	r21,r4,3
   10550:	94bf0044 	addi	r18,r18,-1023
   10554:	80a0b03a 	or	r16,r16,r2
   10558:	0013883a 	mov	r9,zero
   1055c:	000b883a 	mov	r5,zero
   10560:	3806d53a 	srli	r3,r7,20
   10564:	382ed7fa 	srli	r23,r7,31
   10568:	04400434 	movhi	r17,16
   1056c:	8c7fffc4 	addi	r17,r17,-1
   10570:	18c1ffcc 	andi	r3,r3,2047
   10574:	3029883a 	mov	r20,r6
   10578:	3c62703a 	and	r17,r7,r17
   1057c:	bf003fcc 	andi	fp,r23,255
   10580:	18006e26 	beq	r3,zero,1073c <__divdf3+0x254>
   10584:	0081ffc4 	movi	r2,2047
   10588:	18806626 	beq	r3,r2,10724 <__divdf3+0x23c>
   1058c:	88800434 	orhi	r2,r17,16
   10590:	100490fa 	slli	r2,r2,3
   10594:	3022d77a 	srli	r17,r6,29
   10598:	302890fa 	slli	r20,r6,3
   1059c:	18ff0044 	addi	r3,r3,-1023
   105a0:	88a2b03a 	or	r17,r17,r2
   105a4:	000f883a 	mov	r7,zero
   105a8:	b5e6f03a 	xor	r19,r22,r23
   105ac:	3a4cb03a 	or	r6,r7,r9
   105b0:	008003c4 	movi	r2,15
   105b4:	9809883a 	mov	r4,r19
   105b8:	90c7c83a 	sub	r3,r18,r3
   105bc:	9cc03fcc 	andi	r19,r19,255
   105c0:	11809636 	bltu	r2,r6,1081c <__divdf3+0x334>
   105c4:	300c90ba 	slli	r6,r6,2
   105c8:	00800074 	movhi	r2,1
   105cc:	10817704 	addi	r2,r2,1500
   105d0:	308d883a 	add	r6,r6,r2
   105d4:	30800017 	ldw	r2,0(r6)
   105d8:	1000683a 	jmp	r2
   105dc:	0001081c 	xori	zero,zero,1056
   105e0:	00010654 	movui	zero,1049
   105e4:	0001080c 	andi	zero,zero,1056
   105e8:	00010648 	cmpgei	zero,zero,1049
   105ec:	0001080c 	andi	zero,zero,1056
   105f0:	000107e0 	cmpeqi	zero,zero,1055
   105f4:	0001080c 	andi	zero,zero,1056
   105f8:	00010648 	cmpgei	zero,zero,1049
   105fc:	00010654 	movui	zero,1049
   10600:	00010654 	movui	zero,1049
   10604:	000107e0 	cmpeqi	zero,zero,1055
   10608:	00010648 	cmpgei	zero,zero,1049
   1060c:	00010638 	rdprs	zero,zero,1048
   10610:	00010638 	rdprs	zero,zero,1048
   10614:	00010638 	rdprs	zero,zero,1048
   10618:	00010ba4 	muli	zero,zero,1070
   1061c:	2404b03a 	or	r2,r4,r16
   10620:	10006c1e 	bne	r2,zero,107d4 <__divdf3+0x2ec>
   10624:	02400204 	movi	r9,8
   10628:	0021883a 	mov	r16,zero
   1062c:	002b883a 	mov	r21,zero
   10630:	01400084 	movi	r5,2
   10634:	003fca06 	br	10560 <__alt_data_end+0xf8010560>
   10638:	8023883a 	mov	r17,r16
   1063c:	a829883a 	mov	r20,r21
   10640:	4039883a 	mov	fp,r8
   10644:	280f883a 	mov	r7,r5
   10648:	00800084 	movi	r2,2
   1064c:	3881601e 	bne	r7,r2,10bd0 <__divdf3+0x6e8>
   10650:	e027883a 	mov	r19,fp
   10654:	9900004c 	andi	r4,r19,1
   10658:	0081ffc4 	movi	r2,2047
   1065c:	0021883a 	mov	r16,zero
   10660:	002b883a 	mov	r21,zero
   10664:	1004953a 	slli	r2,r2,20
   10668:	20c03fcc 	andi	r3,r4,255
   1066c:	01400434 	movhi	r5,16
   10670:	297fffc4 	addi	r5,r5,-1
   10674:	180697fa 	slli	r3,r3,31
   10678:	8160703a 	and	r16,r16,r5
   1067c:	80a0b03a 	or	r16,r16,r2
   10680:	80c6b03a 	or	r3,r16,r3
   10684:	a805883a 	mov	r2,r21
   10688:	dfc00f17 	ldw	ra,60(sp)
   1068c:	df000e17 	ldw	fp,56(sp)
   10690:	ddc00d17 	ldw	r23,52(sp)
   10694:	dd800c17 	ldw	r22,48(sp)
   10698:	dd400b17 	ldw	r21,44(sp)
   1069c:	dd000a17 	ldw	r20,40(sp)
   106a0:	dcc00917 	ldw	r19,36(sp)
   106a4:	dc800817 	ldw	r18,32(sp)
   106a8:	dc400717 	ldw	r17,28(sp)
   106ac:	dc000617 	ldw	r16,24(sp)
   106b0:	dec01004 	addi	sp,sp,64
   106b4:	f800283a 	ret
   106b8:	2404b03a 	or	r2,r4,r16
   106bc:	2023883a 	mov	r17,r4
   106c0:	10003f26 	beq	r2,zero,107c0 <__divdf3+0x2d8>
   106c4:	80015e26 	beq	r16,zero,10c40 <__divdf3+0x758>
   106c8:	8009883a 	mov	r4,r16
   106cc:	d9800215 	stw	r6,8(sp)
   106d0:	d9c00515 	stw	r7,20(sp)
   106d4:	da000415 	stw	r8,16(sp)
   106d8:	001247c0 	call	1247c <__clzsi2>
   106dc:	d9800217 	ldw	r6,8(sp)
   106e0:	d9c00517 	ldw	r7,20(sp)
   106e4:	da000417 	ldw	r8,16(sp)
   106e8:	113ffd44 	addi	r4,r2,-11
   106ec:	00c00704 	movi	r3,28
   106f0:	19014f16 	blt	r3,r4,10c30 <__divdf3+0x748>
   106f4:	00c00744 	movi	r3,29
   106f8:	157ffe04 	addi	r21,r2,-8
   106fc:	1907c83a 	sub	r3,r3,r4
   10700:	8560983a 	sll	r16,r16,r21
   10704:	88c6d83a 	srl	r3,r17,r3
   10708:	8d6a983a 	sll	r21,r17,r21
   1070c:	1c20b03a 	or	r16,r3,r16
   10710:	1080fcc4 	addi	r2,r2,1011
   10714:	00a5c83a 	sub	r18,zero,r2
   10718:	0013883a 	mov	r9,zero
   1071c:	000b883a 	mov	r5,zero
   10720:	003f8f06 	br	10560 <__alt_data_end+0xf8010560>
   10724:	3444b03a 	or	r2,r6,r17
   10728:	1000231e 	bne	r2,zero,107b8 <__divdf3+0x2d0>
   1072c:	0023883a 	mov	r17,zero
   10730:	0029883a 	mov	r20,zero
   10734:	01c00084 	movi	r7,2
   10738:	003f9b06 	br	105a8 <__alt_data_end+0xf80105a8>
   1073c:	3444b03a 	or	r2,r6,r17
   10740:	10001926 	beq	r2,zero,107a8 <__divdf3+0x2c0>
   10744:	88014b26 	beq	r17,zero,10c74 <__divdf3+0x78c>
   10748:	8809883a 	mov	r4,r17
   1074c:	d9400115 	stw	r5,4(sp)
   10750:	d9800215 	stw	r6,8(sp)
   10754:	da000415 	stw	r8,16(sp)
   10758:	da400315 	stw	r9,12(sp)
   1075c:	001247c0 	call	1247c <__clzsi2>
   10760:	d9400117 	ldw	r5,4(sp)
   10764:	d9800217 	ldw	r6,8(sp)
   10768:	da000417 	ldw	r8,16(sp)
   1076c:	da400317 	ldw	r9,12(sp)
   10770:	113ffd44 	addi	r4,r2,-11
   10774:	00c00704 	movi	r3,28
   10778:	19013a16 	blt	r3,r4,10c64 <__divdf3+0x77c>
   1077c:	00c00744 	movi	r3,29
   10780:	153ffe04 	addi	r20,r2,-8
   10784:	1907c83a 	sub	r3,r3,r4
   10788:	8d22983a 	sll	r17,r17,r20
   1078c:	30c6d83a 	srl	r3,r6,r3
   10790:	3528983a 	sll	r20,r6,r20
   10794:	1c62b03a 	or	r17,r3,r17
   10798:	1080fcc4 	addi	r2,r2,1011
   1079c:	0087c83a 	sub	r3,zero,r2
   107a0:	000f883a 	mov	r7,zero
   107a4:	003f8006 	br	105a8 <__alt_data_end+0xf80105a8>
   107a8:	0023883a 	mov	r17,zero
   107ac:	0029883a 	mov	r20,zero
   107b0:	01c00044 	movi	r7,1
   107b4:	003f7c06 	br	105a8 <__alt_data_end+0xf80105a8>
   107b8:	01c000c4 	movi	r7,3
   107bc:	003f7a06 	br	105a8 <__alt_data_end+0xf80105a8>
   107c0:	02400104 	movi	r9,4
   107c4:	0021883a 	mov	r16,zero
   107c8:	002b883a 	mov	r21,zero
   107cc:	01400044 	movi	r5,1
   107d0:	003f6306 	br	10560 <__alt_data_end+0xf8010560>
   107d4:	02400304 	movi	r9,12
   107d8:	014000c4 	movi	r5,3
   107dc:	003f6006 	br	10560 <__alt_data_end+0xf8010560>
   107e0:	04000434 	movhi	r16,16
   107e4:	0009883a 	mov	r4,zero
   107e8:	843fffc4 	addi	r16,r16,-1
   107ec:	057fffc4 	movi	r21,-1
   107f0:	0081ffc4 	movi	r2,2047
   107f4:	003f9b06 	br	10664 <__alt_data_end+0xf8010664>
   107f8:	00c00044 	movi	r3,1
   107fc:	1887c83a 	sub	r3,r3,r2
   10800:	01000e04 	movi	r4,56
   10804:	20c1530e 	bge	r4,r3,10d54 <__divdf3+0x86c>
   10808:	9900004c 	andi	r4,r19,1
   1080c:	0005883a 	mov	r2,zero
   10810:	0021883a 	mov	r16,zero
   10814:	002b883a 	mov	r21,zero
   10818:	003f9206 	br	10664 <__alt_data_end+0xf8010664>
   1081c:	8c012e36 	bltu	r17,r16,10cd8 <__divdf3+0x7f0>
   10820:	84412c26 	beq	r16,r17,10cd4 <__divdf3+0x7ec>
   10824:	a82f883a 	mov	r23,r21
   10828:	18ffffc4 	addi	r3,r3,-1
   1082c:	002b883a 	mov	r21,zero
   10830:	a004d63a 	srli	r2,r20,24
   10834:	8822923a 	slli	r17,r17,8
   10838:	a028923a 	slli	r20,r20,8
   1083c:	8009883a 	mov	r4,r16
   10840:	88acb03a 	or	r22,r17,r2
   10844:	dd000015 	stw	r20,0(sp)
   10848:	b028d43a 	srli	r20,r22,16
   1084c:	d8c00215 	stw	r3,8(sp)
   10850:	b4bfffcc 	andi	r18,r22,65535
   10854:	a00b883a 	mov	r5,r20
   10858:	00013c40 	call	13c4 <__udivsi3>
   1085c:	100b883a 	mov	r5,r2
   10860:	9009883a 	mov	r4,r18
   10864:	1023883a 	mov	r17,r2
   10868:	000fc140 	call	fc14 <__mulsi3>
   1086c:	8009883a 	mov	r4,r16
   10870:	a00b883a 	mov	r5,r20
   10874:	1039883a 	mov	fp,r2
   10878:	00014280 	call	1428 <__umodsi3>
   1087c:	1004943a 	slli	r2,r2,16
   10880:	b808d43a 	srli	r4,r23,16
   10884:	d8c00217 	ldw	r3,8(sp)
   10888:	2084b03a 	or	r2,r4,r2
   1088c:	1700062e 	bgeu	r2,fp,108a8 <__divdf3+0x3c0>
   10890:	1585883a 	add	r2,r2,r22
   10894:	893fffc4 	addi	r4,r17,-1
   10898:	15811d36 	bltu	r2,r22,10d10 <__divdf3+0x828>
   1089c:	17011c2e 	bgeu	r2,fp,10d10 <__divdf3+0x828>
   108a0:	8c7fff84 	addi	r17,r17,-2
   108a4:	1585883a 	add	r2,r2,r22
   108a8:	1739c83a 	sub	fp,r2,fp
   108ac:	a00b883a 	mov	r5,r20
   108b0:	e009883a 	mov	r4,fp
   108b4:	d8c00215 	stw	r3,8(sp)
   108b8:	00013c40 	call	13c4 <__udivsi3>
   108bc:	100b883a 	mov	r5,r2
   108c0:	9009883a 	mov	r4,r18
   108c4:	1021883a 	mov	r16,r2
   108c8:	000fc140 	call	fc14 <__mulsi3>
   108cc:	a00b883a 	mov	r5,r20
   108d0:	e009883a 	mov	r4,fp
   108d4:	d8800415 	stw	r2,16(sp)
   108d8:	00014280 	call	1428 <__umodsi3>
   108dc:	1004943a 	slli	r2,r2,16
   108e0:	da000417 	ldw	r8,16(sp)
   108e4:	bdffffcc 	andi	r23,r23,65535
   108e8:	b884b03a 	or	r2,r23,r2
   108ec:	d8c00217 	ldw	r3,8(sp)
   108f0:	1200062e 	bgeu	r2,r8,1090c <__divdf3+0x424>
   108f4:	1585883a 	add	r2,r2,r22
   108f8:	813fffc4 	addi	r4,r16,-1
   108fc:	15810236 	bltu	r2,r22,10d08 <__divdf3+0x820>
   10900:	1201012e 	bgeu	r2,r8,10d08 <__divdf3+0x820>
   10904:	843fff84 	addi	r16,r16,-2
   10908:	1585883a 	add	r2,r2,r22
   1090c:	8822943a 	slli	r17,r17,16
   10910:	d9800017 	ldw	r6,0(sp)
   10914:	1211c83a 	sub	r8,r2,r8
   10918:	8c22b03a 	or	r17,r17,r16
   1091c:	373fffcc 	andi	fp,r6,65535
   10920:	8abfffcc 	andi	r10,r17,65535
   10924:	8820d43a 	srli	r16,r17,16
   10928:	5009883a 	mov	r4,r10
   1092c:	e00b883a 	mov	r5,fp
   10930:	302ed43a 	srli	r23,r6,16
   10934:	d8c00215 	stw	r3,8(sp)
   10938:	da000415 	stw	r8,16(sp)
   1093c:	da800115 	stw	r10,4(sp)
   10940:	000fc140 	call	fc14 <__mulsi3>
   10944:	800b883a 	mov	r5,r16
   10948:	e009883a 	mov	r4,fp
   1094c:	d8800515 	stw	r2,20(sp)
   10950:	000fc140 	call	fc14 <__mulsi3>
   10954:	8009883a 	mov	r4,r16
   10958:	b80b883a 	mov	r5,r23
   1095c:	d8800315 	stw	r2,12(sp)
   10960:	000fc140 	call	fc14 <__mulsi3>
   10964:	da800117 	ldw	r10,4(sp)
   10968:	b80b883a 	mov	r5,r23
   1096c:	1021883a 	mov	r16,r2
   10970:	5009883a 	mov	r4,r10
   10974:	000fc140 	call	fc14 <__mulsi3>
   10978:	d9c00517 	ldw	r7,20(sp)
   1097c:	da400317 	ldw	r9,12(sp)
   10980:	d8c00217 	ldw	r3,8(sp)
   10984:	3808d43a 	srli	r4,r7,16
   10988:	1245883a 	add	r2,r2,r9
   1098c:	da000417 	ldw	r8,16(sp)
   10990:	2085883a 	add	r2,r4,r2
   10994:	1240022e 	bgeu	r2,r9,109a0 <__divdf3+0x4b8>
   10998:	01000074 	movhi	r4,1
   1099c:	8121883a 	add	r16,r16,r4
   109a0:	1008d43a 	srli	r4,r2,16
   109a4:	1004943a 	slli	r2,r2,16
   109a8:	39ffffcc 	andi	r7,r7,65535
   109ac:	2409883a 	add	r4,r4,r16
   109b0:	11c5883a 	add	r2,r2,r7
   109b4:	4100bb36 	bltu	r8,r4,10ca4 <__divdf3+0x7bc>
   109b8:	4100d726 	beq	r8,r4,10d18 <__divdf3+0x830>
   109bc:	4109c83a 	sub	r4,r8,r4
   109c0:	a8a1c83a 	sub	r16,r21,r2
   109c4:	ac2b803a 	cmpltu	r21,r21,r16
   109c8:	256bc83a 	sub	r21,r4,r21
   109cc:	b540d926 	beq	r22,r21,10d34 <__divdf3+0x84c>
   109d0:	a00b883a 	mov	r5,r20
   109d4:	a809883a 	mov	r4,r21
   109d8:	d8c00215 	stw	r3,8(sp)
   109dc:	00013c40 	call	13c4 <__udivsi3>
   109e0:	100b883a 	mov	r5,r2
   109e4:	9009883a 	mov	r4,r18
   109e8:	d8800515 	stw	r2,20(sp)
   109ec:	000fc140 	call	fc14 <__mulsi3>
   109f0:	a809883a 	mov	r4,r21
   109f4:	a00b883a 	mov	r5,r20
   109f8:	d8800415 	stw	r2,16(sp)
   109fc:	00014280 	call	1428 <__umodsi3>
   10a00:	1004943a 	slli	r2,r2,16
   10a04:	8008d43a 	srli	r4,r16,16
   10a08:	da000417 	ldw	r8,16(sp)
   10a0c:	d8c00217 	ldw	r3,8(sp)
   10a10:	2084b03a 	or	r2,r4,r2
   10a14:	d9c00517 	ldw	r7,20(sp)
   10a18:	1200062e 	bgeu	r2,r8,10a34 <__divdf3+0x54c>
   10a1c:	1585883a 	add	r2,r2,r22
   10a20:	393fffc4 	addi	r4,r7,-1
   10a24:	1580c536 	bltu	r2,r22,10d3c <__divdf3+0x854>
   10a28:	1200c42e 	bgeu	r2,r8,10d3c <__divdf3+0x854>
   10a2c:	39ffff84 	addi	r7,r7,-2
   10a30:	1585883a 	add	r2,r2,r22
   10a34:	122bc83a 	sub	r21,r2,r8
   10a38:	a00b883a 	mov	r5,r20
   10a3c:	a809883a 	mov	r4,r21
   10a40:	d8c00215 	stw	r3,8(sp)
   10a44:	d9c00515 	stw	r7,20(sp)
   10a48:	00013c40 	call	13c4 <__udivsi3>
   10a4c:	9009883a 	mov	r4,r18
   10a50:	100b883a 	mov	r5,r2
   10a54:	d8800415 	stw	r2,16(sp)
   10a58:	000fc140 	call	fc14 <__mulsi3>
   10a5c:	a809883a 	mov	r4,r21
   10a60:	a00b883a 	mov	r5,r20
   10a64:	1025883a 	mov	r18,r2
   10a68:	00014280 	call	1428 <__umodsi3>
   10a6c:	1004943a 	slli	r2,r2,16
   10a70:	813fffcc 	andi	r4,r16,65535
   10a74:	d8c00217 	ldw	r3,8(sp)
   10a78:	20a0b03a 	or	r16,r4,r2
   10a7c:	d9c00517 	ldw	r7,20(sp)
   10a80:	da000417 	ldw	r8,16(sp)
   10a84:	8480062e 	bgeu	r16,r18,10aa0 <__divdf3+0x5b8>
   10a88:	85a1883a 	add	r16,r16,r22
   10a8c:	40bfffc4 	addi	r2,r8,-1
   10a90:	8580ac36 	bltu	r16,r22,10d44 <__divdf3+0x85c>
   10a94:	8480ab2e 	bgeu	r16,r18,10d44 <__divdf3+0x85c>
   10a98:	423fff84 	addi	r8,r8,-2
   10a9c:	85a1883a 	add	r16,r16,r22
   10aa0:	3804943a 	slli	r2,r7,16
   10aa4:	84a1c83a 	sub	r16,r16,r18
   10aa8:	e009883a 	mov	r4,fp
   10aac:	1228b03a 	or	r20,r2,r8
   10ab0:	a1ffffcc 	andi	r7,r20,65535
   10ab4:	a024d43a 	srli	r18,r20,16
   10ab8:	380b883a 	mov	r5,r7
   10abc:	d8c00215 	stw	r3,8(sp)
   10ac0:	d9c00515 	stw	r7,20(sp)
   10ac4:	000fc140 	call	fc14 <__mulsi3>
   10ac8:	900b883a 	mov	r5,r18
   10acc:	e009883a 	mov	r4,fp
   10ad0:	102b883a 	mov	r21,r2
   10ad4:	000fc140 	call	fc14 <__mulsi3>
   10ad8:	900b883a 	mov	r5,r18
   10adc:	b809883a 	mov	r4,r23
   10ae0:	1039883a 	mov	fp,r2
   10ae4:	000fc140 	call	fc14 <__mulsi3>
   10ae8:	d9c00517 	ldw	r7,20(sp)
   10aec:	b80b883a 	mov	r5,r23
   10af0:	1025883a 	mov	r18,r2
   10af4:	3809883a 	mov	r4,r7
   10af8:	000fc140 	call	fc14 <__mulsi3>
   10afc:	a808d43a 	srli	r4,r21,16
   10b00:	1705883a 	add	r2,r2,fp
   10b04:	d8c00217 	ldw	r3,8(sp)
   10b08:	2085883a 	add	r2,r4,r2
   10b0c:	1700022e 	bgeu	r2,fp,10b18 <__divdf3+0x630>
   10b10:	01000074 	movhi	r4,1
   10b14:	9125883a 	add	r18,r18,r4
   10b18:	1008d43a 	srli	r4,r2,16
   10b1c:	1004943a 	slli	r2,r2,16
   10b20:	ad7fffcc 	andi	r21,r21,65535
   10b24:	2489883a 	add	r4,r4,r18
   10b28:	1545883a 	add	r2,r2,r21
   10b2c:	81003836 	bltu	r16,r4,10c10 <__divdf3+0x728>
   10b30:	81003626 	beq	r16,r4,10c0c <__divdf3+0x724>
   10b34:	a5000054 	ori	r20,r20,1
   10b38:	1880ffc4 	addi	r2,r3,1023
   10b3c:	00bf2e0e 	bge	zero,r2,107f8 <__alt_data_end+0xf80107f8>
   10b40:	a10001cc 	andi	r4,r20,7
   10b44:	20000726 	beq	r4,zero,10b64 <__divdf3+0x67c>
   10b48:	a10003cc 	andi	r4,r20,15
   10b4c:	01400104 	movi	r5,4
   10b50:	21400426 	beq	r4,r5,10b64 <__divdf3+0x67c>
   10b54:	a149883a 	add	r4,r20,r5
   10b58:	2529803a 	cmpltu	r20,r4,r20
   10b5c:	8d23883a 	add	r17,r17,r20
   10b60:	2029883a 	mov	r20,r4
   10b64:	8900402c 	andhi	r4,r17,256
   10b68:	20000426 	beq	r4,zero,10b7c <__divdf3+0x694>
   10b6c:	18810004 	addi	r2,r3,1024
   10b70:	00ffc034 	movhi	r3,65280
   10b74:	18ffffc4 	addi	r3,r3,-1
   10b78:	88e2703a 	and	r17,r17,r3
   10b7c:	00c1ff84 	movi	r3,2046
   10b80:	18beb416 	blt	r3,r2,10654 <__alt_data_end+0xf8010654>
   10b84:	a028d0fa 	srli	r20,r20,3
   10b88:	882a977a 	slli	r21,r17,29
   10b8c:	8820927a 	slli	r16,r17,9
   10b90:	1081ffcc 	andi	r2,r2,2047
   10b94:	ad2ab03a 	or	r21,r21,r20
   10b98:	8020d33a 	srli	r16,r16,12
   10b9c:	9900004c 	andi	r4,r19,1
   10ba0:	003eb006 	br	10664 <__alt_data_end+0xf8010664>
   10ba4:	8080022c 	andhi	r2,r16,8
   10ba8:	10001226 	beq	r2,zero,10bf4 <__divdf3+0x70c>
   10bac:	8880022c 	andhi	r2,r17,8
   10bb0:	1000101e 	bne	r2,zero,10bf4 <__divdf3+0x70c>
   10bb4:	00800434 	movhi	r2,16
   10bb8:	8c000234 	orhi	r16,r17,8
   10bbc:	10bfffc4 	addi	r2,r2,-1
   10bc0:	b809883a 	mov	r4,r23
   10bc4:	80a0703a 	and	r16,r16,r2
   10bc8:	a02b883a 	mov	r21,r20
   10bcc:	003f0806 	br	107f0 <__alt_data_end+0xf80107f0>
   10bd0:	008000c4 	movi	r2,3
   10bd4:	3880b126 	beq	r7,r2,10e9c <__divdf3+0x9b4>
   10bd8:	00800044 	movi	r2,1
   10bdc:	38805b1e 	bne	r7,r2,10d4c <__divdf3+0x864>
   10be0:	e009883a 	mov	r4,fp
   10be4:	0005883a 	mov	r2,zero
   10be8:	0021883a 	mov	r16,zero
   10bec:	002b883a 	mov	r21,zero
   10bf0:	003e9c06 	br	10664 <__alt_data_end+0xf8010664>
   10bf4:	00800434 	movhi	r2,16
   10bf8:	84000234 	orhi	r16,r16,8
   10bfc:	10bfffc4 	addi	r2,r2,-1
   10c00:	b009883a 	mov	r4,r22
   10c04:	80a0703a 	and	r16,r16,r2
   10c08:	003ef906 	br	107f0 <__alt_data_end+0xf80107f0>
   10c0c:	103fca26 	beq	r2,zero,10b38 <__alt_data_end+0xf8010b38>
   10c10:	b421883a 	add	r16,r22,r16
   10c14:	a17fffc4 	addi	r5,r20,-1
   10c18:	8580422e 	bgeu	r16,r22,10d24 <__divdf3+0x83c>
   10c1c:	2829883a 	mov	r20,r5
   10c20:	813fc41e 	bne	r16,r4,10b34 <__alt_data_end+0xf8010b34>
   10c24:	d9800017 	ldw	r6,0(sp)
   10c28:	30bfc21e 	bne	r6,r2,10b34 <__alt_data_end+0xf8010b34>
   10c2c:	003fc206 	br	10b38 <__alt_data_end+0xf8010b38>
   10c30:	143ff604 	addi	r16,r2,-40
   10c34:	8c20983a 	sll	r16,r17,r16
   10c38:	002b883a 	mov	r21,zero
   10c3c:	003eb406 	br	10710 <__alt_data_end+0xf8010710>
   10c40:	d9800215 	stw	r6,8(sp)
   10c44:	d9c00515 	stw	r7,20(sp)
   10c48:	da000415 	stw	r8,16(sp)
   10c4c:	001247c0 	call	1247c <__clzsi2>
   10c50:	10800804 	addi	r2,r2,32
   10c54:	da000417 	ldw	r8,16(sp)
   10c58:	d9c00517 	ldw	r7,20(sp)
   10c5c:	d9800217 	ldw	r6,8(sp)
   10c60:	003ea106 	br	106e8 <__alt_data_end+0xf80106e8>
   10c64:	147ff604 	addi	r17,r2,-40
   10c68:	3462983a 	sll	r17,r6,r17
   10c6c:	0029883a 	mov	r20,zero
   10c70:	003ec906 	br	10798 <__alt_data_end+0xf8010798>
   10c74:	3009883a 	mov	r4,r6
   10c78:	d9400115 	stw	r5,4(sp)
   10c7c:	d9800215 	stw	r6,8(sp)
   10c80:	da000415 	stw	r8,16(sp)
   10c84:	da400315 	stw	r9,12(sp)
   10c88:	001247c0 	call	1247c <__clzsi2>
   10c8c:	10800804 	addi	r2,r2,32
   10c90:	da400317 	ldw	r9,12(sp)
   10c94:	da000417 	ldw	r8,16(sp)
   10c98:	d9800217 	ldw	r6,8(sp)
   10c9c:	d9400117 	ldw	r5,4(sp)
   10ca0:	003eb306 	br	10770 <__alt_data_end+0xf8010770>
   10ca4:	d9800017 	ldw	r6,0(sp)
   10ca8:	a9ab883a 	add	r21,r21,r6
   10cac:	a98b803a 	cmpltu	r5,r21,r6
   10cb0:	2d8b883a 	add	r5,r5,r22
   10cb4:	2a11883a 	add	r8,r5,r8
   10cb8:	897fffc4 	addi	r5,r17,-1
   10cbc:	b2000c2e 	bgeu	r22,r8,10cf0 <__divdf3+0x808>
   10cc0:	41003f36 	bltu	r8,r4,10dc0 <__divdf3+0x8d8>
   10cc4:	22006c26 	beq	r4,r8,10e78 <__divdf3+0x990>
   10cc8:	4109c83a 	sub	r4,r8,r4
   10ccc:	2823883a 	mov	r17,r5
   10cd0:	003f3b06 	br	109c0 <__alt_data_end+0xf80109c0>
   10cd4:	ad3ed336 	bltu	r21,r20,10824 <__alt_data_end+0xf8010824>
   10cd8:	a804d07a 	srli	r2,r21,1
   10cdc:	802e97fa 	slli	r23,r16,31
   10ce0:	a82a97fa 	slli	r21,r21,31
   10ce4:	8020d07a 	srli	r16,r16,1
   10ce8:	b8aeb03a 	or	r23,r23,r2
   10cec:	003ed006 	br	10830 <__alt_data_end+0xf8010830>
   10cf0:	b23ff51e 	bne	r22,r8,10cc8 <__alt_data_end+0xf8010cc8>
   10cf4:	d9800017 	ldw	r6,0(sp)
   10cf8:	a9bff12e 	bgeu	r21,r6,10cc0 <__alt_data_end+0xf8010cc0>
   10cfc:	b109c83a 	sub	r4,r22,r4
   10d00:	2823883a 	mov	r17,r5
   10d04:	003f2e06 	br	109c0 <__alt_data_end+0xf80109c0>
   10d08:	2021883a 	mov	r16,r4
   10d0c:	003eff06 	br	1090c <__alt_data_end+0xf801090c>
   10d10:	2023883a 	mov	r17,r4
   10d14:	003ee406 	br	108a8 <__alt_data_end+0xf80108a8>
   10d18:	a8bfe236 	bltu	r21,r2,10ca4 <__alt_data_end+0xf8010ca4>
   10d1c:	0009883a 	mov	r4,zero
   10d20:	003f2706 	br	109c0 <__alt_data_end+0xf80109c0>
   10d24:	81002d36 	bltu	r16,r4,10ddc <__divdf3+0x8f4>
   10d28:	24005626 	beq	r4,r16,10e84 <__divdf3+0x99c>
   10d2c:	2829883a 	mov	r20,r5
   10d30:	003f8006 	br	10b34 <__alt_data_end+0xf8010b34>
   10d34:	053fffc4 	movi	r20,-1
   10d38:	003f7f06 	br	10b38 <__alt_data_end+0xf8010b38>
   10d3c:	200f883a 	mov	r7,r4
   10d40:	003f3c06 	br	10a34 <__alt_data_end+0xf8010a34>
   10d44:	1011883a 	mov	r8,r2
   10d48:	003f5506 	br	10aa0 <__alt_data_end+0xf8010aa0>
   10d4c:	e027883a 	mov	r19,fp
   10d50:	003f7906 	br	10b38 <__alt_data_end+0xf8010b38>
   10d54:	010007c4 	movi	r4,31
   10d58:	20c02816 	blt	r4,r3,10dfc <__divdf3+0x914>
   10d5c:	00800804 	movi	r2,32
   10d60:	10c5c83a 	sub	r2,r2,r3
   10d64:	888a983a 	sll	r5,r17,r2
   10d68:	a0c8d83a 	srl	r4,r20,r3
   10d6c:	a084983a 	sll	r2,r20,r2
   10d70:	88e2d83a 	srl	r17,r17,r3
   10d74:	2906b03a 	or	r3,r5,r4
   10d78:	1004c03a 	cmpne	r2,r2,zero
   10d7c:	1886b03a 	or	r3,r3,r2
   10d80:	188001cc 	andi	r2,r3,7
   10d84:	10000726 	beq	r2,zero,10da4 <__divdf3+0x8bc>
   10d88:	188003cc 	andi	r2,r3,15
   10d8c:	01000104 	movi	r4,4
   10d90:	11000426 	beq	r2,r4,10da4 <__divdf3+0x8bc>
   10d94:	1805883a 	mov	r2,r3
   10d98:	10c00104 	addi	r3,r2,4
   10d9c:	1885803a 	cmpltu	r2,r3,r2
   10da0:	88a3883a 	add	r17,r17,r2
   10da4:	8880202c 	andhi	r2,r17,128
   10da8:	10002926 	beq	r2,zero,10e50 <__divdf3+0x968>
   10dac:	9900004c 	andi	r4,r19,1
   10db0:	00800044 	movi	r2,1
   10db4:	0021883a 	mov	r16,zero
   10db8:	002b883a 	mov	r21,zero
   10dbc:	003e2906 	br	10664 <__alt_data_end+0xf8010664>
   10dc0:	d9800017 	ldw	r6,0(sp)
   10dc4:	8c7fff84 	addi	r17,r17,-2
   10dc8:	a9ab883a 	add	r21,r21,r6
   10dcc:	a98b803a 	cmpltu	r5,r21,r6
   10dd0:	2d8b883a 	add	r5,r5,r22
   10dd4:	2a11883a 	add	r8,r5,r8
   10dd8:	003ef806 	br	109bc <__alt_data_end+0xf80109bc>
   10ddc:	d9800017 	ldw	r6,0(sp)
   10de0:	318f883a 	add	r7,r6,r6
   10de4:	398b803a 	cmpltu	r5,r7,r6
   10de8:	2d8d883a 	add	r6,r5,r22
   10dec:	81a1883a 	add	r16,r16,r6
   10df0:	a17fff84 	addi	r5,r20,-2
   10df4:	d9c00015 	stw	r7,0(sp)
   10df8:	003f8806 	br	10c1c <__alt_data_end+0xf8010c1c>
   10dfc:	013ff844 	movi	r4,-31
   10e00:	2085c83a 	sub	r2,r4,r2
   10e04:	8888d83a 	srl	r4,r17,r2
   10e08:	00800804 	movi	r2,32
   10e0c:	18802126 	beq	r3,r2,10e94 <__divdf3+0x9ac>
   10e10:	04001004 	movi	r16,64
   10e14:	80c7c83a 	sub	r3,r16,r3
   10e18:	88e0983a 	sll	r16,r17,r3
   10e1c:	8504b03a 	or	r2,r16,r20
   10e20:	1004c03a 	cmpne	r2,r2,zero
   10e24:	2084b03a 	or	r2,r4,r2
   10e28:	144001cc 	andi	r17,r2,7
   10e2c:	88000d1e 	bne	r17,zero,10e64 <__divdf3+0x97c>
   10e30:	0021883a 	mov	r16,zero
   10e34:	102ad0fa 	srli	r21,r2,3
   10e38:	9900004c 	andi	r4,r19,1
   10e3c:	0005883a 	mov	r2,zero
   10e40:	ac6ab03a 	or	r21,r21,r17
   10e44:	003e0706 	br	10664 <__alt_data_end+0xf8010664>
   10e48:	1007883a 	mov	r3,r2
   10e4c:	0023883a 	mov	r17,zero
   10e50:	8820927a 	slli	r16,r17,9
   10e54:	1805883a 	mov	r2,r3
   10e58:	8822977a 	slli	r17,r17,29
   10e5c:	8020d33a 	srli	r16,r16,12
   10e60:	003ff406 	br	10e34 <__alt_data_end+0xf8010e34>
   10e64:	10c003cc 	andi	r3,r2,15
   10e68:	01000104 	movi	r4,4
   10e6c:	193ff626 	beq	r3,r4,10e48 <__alt_data_end+0xf8010e48>
   10e70:	0023883a 	mov	r17,zero
   10e74:	003fc806 	br	10d98 <__alt_data_end+0xf8010d98>
   10e78:	a8bfd136 	bltu	r21,r2,10dc0 <__alt_data_end+0xf8010dc0>
   10e7c:	2823883a 	mov	r17,r5
   10e80:	003fa606 	br	10d1c <__alt_data_end+0xf8010d1c>
   10e84:	d9800017 	ldw	r6,0(sp)
   10e88:	30bfd436 	bltu	r6,r2,10ddc <__alt_data_end+0xf8010ddc>
   10e8c:	2829883a 	mov	r20,r5
   10e90:	003f6406 	br	10c24 <__alt_data_end+0xf8010c24>
   10e94:	0021883a 	mov	r16,zero
   10e98:	003fe006 	br	10e1c <__alt_data_end+0xf8010e1c>
   10e9c:	00800434 	movhi	r2,16
   10ea0:	8c000234 	orhi	r16,r17,8
   10ea4:	10bfffc4 	addi	r2,r2,-1
   10ea8:	e009883a 	mov	r4,fp
   10eac:	80a0703a 	and	r16,r16,r2
   10eb0:	a02b883a 	mov	r21,r20
   10eb4:	003e4e06 	br	107f0 <__alt_data_end+0xf80107f0>

00010eb8 <__eqdf2>:
   10eb8:	2804d53a 	srli	r2,r5,20
   10ebc:	3806d53a 	srli	r3,r7,20
   10ec0:	02000434 	movhi	r8,16
   10ec4:	423fffc4 	addi	r8,r8,-1
   10ec8:	1081ffcc 	andi	r2,r2,2047
   10ecc:	0281ffc4 	movi	r10,2047
   10ed0:	2a12703a 	and	r9,r5,r8
   10ed4:	18c1ffcc 	andi	r3,r3,2047
   10ed8:	3a10703a 	and	r8,r7,r8
   10edc:	280ad7fa 	srli	r5,r5,31
   10ee0:	380ed7fa 	srli	r7,r7,31
   10ee4:	12801026 	beq	r2,r10,10f28 <__eqdf2+0x70>
   10ee8:	0281ffc4 	movi	r10,2047
   10eec:	1a800a26 	beq	r3,r10,10f18 <__eqdf2+0x60>
   10ef0:	10c00226 	beq	r2,r3,10efc <__eqdf2+0x44>
   10ef4:	00800044 	movi	r2,1
   10ef8:	f800283a 	ret
   10efc:	4a3ffd1e 	bne	r9,r8,10ef4 <__alt_data_end+0xf8010ef4>
   10f00:	21bffc1e 	bne	r4,r6,10ef4 <__alt_data_end+0xf8010ef4>
   10f04:	29c00c26 	beq	r5,r7,10f38 <__eqdf2+0x80>
   10f08:	103ffa1e 	bne	r2,zero,10ef4 <__alt_data_end+0xf8010ef4>
   10f0c:	2244b03a 	or	r2,r4,r9
   10f10:	1004c03a 	cmpne	r2,r2,zero
   10f14:	f800283a 	ret
   10f18:	3214b03a 	or	r10,r6,r8
   10f1c:	503ff426 	beq	r10,zero,10ef0 <__alt_data_end+0xf8010ef0>
   10f20:	00800044 	movi	r2,1
   10f24:	f800283a 	ret
   10f28:	2254b03a 	or	r10,r4,r9
   10f2c:	503fee26 	beq	r10,zero,10ee8 <__alt_data_end+0xf8010ee8>
   10f30:	00800044 	movi	r2,1
   10f34:	f800283a 	ret
   10f38:	0005883a 	mov	r2,zero
   10f3c:	f800283a 	ret

00010f40 <__gedf2>:
   10f40:	2804d53a 	srli	r2,r5,20
   10f44:	3806d53a 	srli	r3,r7,20
   10f48:	02000434 	movhi	r8,16
   10f4c:	423fffc4 	addi	r8,r8,-1
   10f50:	1081ffcc 	andi	r2,r2,2047
   10f54:	0241ffc4 	movi	r9,2047
   10f58:	2a14703a 	and	r10,r5,r8
   10f5c:	18c1ffcc 	andi	r3,r3,2047
   10f60:	3a10703a 	and	r8,r7,r8
   10f64:	280ad7fa 	srli	r5,r5,31
   10f68:	380ed7fa 	srli	r7,r7,31
   10f6c:	12401d26 	beq	r2,r9,10fe4 <__gedf2+0xa4>
   10f70:	0241ffc4 	movi	r9,2047
   10f74:	1a401226 	beq	r3,r9,10fc0 <__gedf2+0x80>
   10f78:	1000081e 	bne	r2,zero,10f9c <__gedf2+0x5c>
   10f7c:	2296b03a 	or	r11,r4,r10
   10f80:	5813003a 	cmpeq	r9,r11,zero
   10f84:	1800091e 	bne	r3,zero,10fac <__gedf2+0x6c>
   10f88:	3218b03a 	or	r12,r6,r8
   10f8c:	6000071e 	bne	r12,zero,10fac <__gedf2+0x6c>
   10f90:	0005883a 	mov	r2,zero
   10f94:	5800101e 	bne	r11,zero,10fd8 <__gedf2+0x98>
   10f98:	f800283a 	ret
   10f9c:	18000c1e 	bne	r3,zero,10fd0 <__gedf2+0x90>
   10fa0:	3212b03a 	or	r9,r6,r8
   10fa4:	48000c26 	beq	r9,zero,10fd8 <__gedf2+0x98>
   10fa8:	0013883a 	mov	r9,zero
   10fac:	39c03fcc 	andi	r7,r7,255
   10fb0:	48000826 	beq	r9,zero,10fd4 <__gedf2+0x94>
   10fb4:	38000926 	beq	r7,zero,10fdc <__gedf2+0x9c>
   10fb8:	00800044 	movi	r2,1
   10fbc:	f800283a 	ret
   10fc0:	3212b03a 	or	r9,r6,r8
   10fc4:	483fec26 	beq	r9,zero,10f78 <__alt_data_end+0xf8010f78>
   10fc8:	00bfff84 	movi	r2,-2
   10fcc:	f800283a 	ret
   10fd0:	39c03fcc 	andi	r7,r7,255
   10fd4:	29c00626 	beq	r5,r7,10ff0 <__gedf2+0xb0>
   10fd8:	283ff726 	beq	r5,zero,10fb8 <__alt_data_end+0xf8010fb8>
   10fdc:	00bfffc4 	movi	r2,-1
   10fe0:	f800283a 	ret
   10fe4:	2292b03a 	or	r9,r4,r10
   10fe8:	483fe126 	beq	r9,zero,10f70 <__alt_data_end+0xf8010f70>
   10fec:	003ff606 	br	10fc8 <__alt_data_end+0xf8010fc8>
   10ff0:	18bff916 	blt	r3,r2,10fd8 <__alt_data_end+0xf8010fd8>
   10ff4:	10c00316 	blt	r2,r3,11004 <__gedf2+0xc4>
   10ff8:	42bff736 	bltu	r8,r10,10fd8 <__alt_data_end+0xf8010fd8>
   10ffc:	52000326 	beq	r10,r8,1100c <__gedf2+0xcc>
   11000:	5200042e 	bgeu	r10,r8,11014 <__gedf2+0xd4>
   11004:	283fec1e 	bne	r5,zero,10fb8 <__alt_data_end+0xf8010fb8>
   11008:	003ff406 	br	10fdc <__alt_data_end+0xf8010fdc>
   1100c:	313ff236 	bltu	r6,r4,10fd8 <__alt_data_end+0xf8010fd8>
   11010:	21bffc36 	bltu	r4,r6,11004 <__alt_data_end+0xf8011004>
   11014:	0005883a 	mov	r2,zero
   11018:	f800283a 	ret

0001101c <__ledf2>:
   1101c:	2804d53a 	srli	r2,r5,20
   11020:	3810d53a 	srli	r8,r7,20
   11024:	00c00434 	movhi	r3,16
   11028:	18ffffc4 	addi	r3,r3,-1
   1102c:	1081ffcc 	andi	r2,r2,2047
   11030:	0241ffc4 	movi	r9,2047
   11034:	28d4703a 	and	r10,r5,r3
   11038:	4201ffcc 	andi	r8,r8,2047
   1103c:	38c6703a 	and	r3,r7,r3
   11040:	280ad7fa 	srli	r5,r5,31
   11044:	380ed7fa 	srli	r7,r7,31
   11048:	12401f26 	beq	r2,r9,110c8 <__ledf2+0xac>
   1104c:	0241ffc4 	movi	r9,2047
   11050:	42401426 	beq	r8,r9,110a4 <__ledf2+0x88>
   11054:	1000091e 	bne	r2,zero,1107c <__ledf2+0x60>
   11058:	2296b03a 	or	r11,r4,r10
   1105c:	5813003a 	cmpeq	r9,r11,zero
   11060:	29403fcc 	andi	r5,r5,255
   11064:	40000a1e 	bne	r8,zero,11090 <__ledf2+0x74>
   11068:	30d8b03a 	or	r12,r6,r3
   1106c:	6000081e 	bne	r12,zero,11090 <__ledf2+0x74>
   11070:	0005883a 	mov	r2,zero
   11074:	5800111e 	bne	r11,zero,110bc <__ledf2+0xa0>
   11078:	f800283a 	ret
   1107c:	29403fcc 	andi	r5,r5,255
   11080:	40000c1e 	bne	r8,zero,110b4 <__ledf2+0x98>
   11084:	30d2b03a 	or	r9,r6,r3
   11088:	48000c26 	beq	r9,zero,110bc <__ledf2+0xa0>
   1108c:	0013883a 	mov	r9,zero
   11090:	39c03fcc 	andi	r7,r7,255
   11094:	48000826 	beq	r9,zero,110b8 <__ledf2+0x9c>
   11098:	38001126 	beq	r7,zero,110e0 <__ledf2+0xc4>
   1109c:	00800044 	movi	r2,1
   110a0:	f800283a 	ret
   110a4:	30d2b03a 	or	r9,r6,r3
   110a8:	483fea26 	beq	r9,zero,11054 <__alt_data_end+0xf8011054>
   110ac:	00800084 	movi	r2,2
   110b0:	f800283a 	ret
   110b4:	39c03fcc 	andi	r7,r7,255
   110b8:	39400726 	beq	r7,r5,110d8 <__ledf2+0xbc>
   110bc:	2800081e 	bne	r5,zero,110e0 <__ledf2+0xc4>
   110c0:	00800044 	movi	r2,1
   110c4:	f800283a 	ret
   110c8:	2292b03a 	or	r9,r4,r10
   110cc:	483fdf26 	beq	r9,zero,1104c <__alt_data_end+0xf801104c>
   110d0:	00800084 	movi	r2,2
   110d4:	f800283a 	ret
   110d8:	4080030e 	bge	r8,r2,110e8 <__ledf2+0xcc>
   110dc:	383fef26 	beq	r7,zero,1109c <__alt_data_end+0xf801109c>
   110e0:	00bfffc4 	movi	r2,-1
   110e4:	f800283a 	ret
   110e8:	123feb16 	blt	r2,r8,11098 <__alt_data_end+0xf8011098>
   110ec:	1abff336 	bltu	r3,r10,110bc <__alt_data_end+0xf80110bc>
   110f0:	50c00326 	beq	r10,r3,11100 <__ledf2+0xe4>
   110f4:	50c0042e 	bgeu	r10,r3,11108 <__ledf2+0xec>
   110f8:	283fe81e 	bne	r5,zero,1109c <__alt_data_end+0xf801109c>
   110fc:	003ff806 	br	110e0 <__alt_data_end+0xf80110e0>
   11100:	313fee36 	bltu	r6,r4,110bc <__alt_data_end+0xf80110bc>
   11104:	21bffc36 	bltu	r4,r6,110f8 <__alt_data_end+0xf80110f8>
   11108:	0005883a 	mov	r2,zero
   1110c:	f800283a 	ret

00011110 <__muldf3>:
   11110:	deffee04 	addi	sp,sp,-72
   11114:	dd000c15 	stw	r20,48(sp)
   11118:	2828d53a 	srli	r20,r5,20
   1111c:	ddc00f15 	stw	r23,60(sp)
   11120:	282ed7fa 	srli	r23,r5,31
   11124:	dc000815 	stw	r16,32(sp)
   11128:	04000434 	movhi	r16,16
   1112c:	dcc00b15 	stw	r19,44(sp)
   11130:	843fffc4 	addi	r16,r16,-1
   11134:	dfc01115 	stw	ra,68(sp)
   11138:	df001015 	stw	fp,64(sp)
   1113c:	dd800e15 	stw	r22,56(sp)
   11140:	dd400d15 	stw	r21,52(sp)
   11144:	dc800a15 	stw	r18,40(sp)
   11148:	dc400915 	stw	r17,36(sp)
   1114c:	a501ffcc 	andi	r20,r20,2047
   11150:	2c20703a 	and	r16,r5,r16
   11154:	b827883a 	mov	r19,r23
   11158:	ba403fcc 	andi	r9,r23,255
   1115c:	a0006026 	beq	r20,zero,112e0 <__muldf3+0x1d0>
   11160:	0081ffc4 	movi	r2,2047
   11164:	202d883a 	mov	r22,r4
   11168:	a0803626 	beq	r20,r2,11244 <__muldf3+0x134>
   1116c:	84000434 	orhi	r16,r16,16
   11170:	200ad77a 	srli	r5,r4,29
   11174:	800490fa 	slli	r2,r16,3
   11178:	202c90fa 	slli	r22,r4,3
   1117c:	a53f0044 	addi	r20,r20,-1023
   11180:	28a0b03a 	or	r16,r5,r2
   11184:	002b883a 	mov	r21,zero
   11188:	000b883a 	mov	r5,zero
   1118c:	3804d53a 	srli	r2,r7,20
   11190:	3838d7fa 	srli	fp,r7,31
   11194:	04400434 	movhi	r17,16
   11198:	8c7fffc4 	addi	r17,r17,-1
   1119c:	1081ffcc 	andi	r2,r2,2047
   111a0:	3025883a 	mov	r18,r6
   111a4:	3c62703a 	and	r17,r7,r17
   111a8:	e2803fcc 	andi	r10,fp,255
   111ac:	10006d26 	beq	r2,zero,11364 <__muldf3+0x254>
   111b0:	00c1ffc4 	movi	r3,2047
   111b4:	10c06526 	beq	r2,r3,1134c <__muldf3+0x23c>
   111b8:	8c400434 	orhi	r17,r17,16
   111bc:	300ed77a 	srli	r7,r6,29
   111c0:	880690fa 	slli	r3,r17,3
   111c4:	302490fa 	slli	r18,r6,3
   111c8:	10bf0044 	addi	r2,r2,-1023
   111cc:	38e2b03a 	or	r17,r7,r3
   111d0:	000f883a 	mov	r7,zero
   111d4:	a087883a 	add	r3,r20,r2
   111d8:	010003c4 	movi	r4,15
   111dc:	3d44b03a 	or	r2,r7,r21
   111e0:	e5ccf03a 	xor	r6,fp,r23
   111e4:	1a000044 	addi	r8,r3,1
   111e8:	20809b36 	bltu	r4,r2,11458 <__muldf3+0x348>
   111ec:	100490ba 	slli	r2,r2,2
   111f0:	01000074 	movhi	r4,1
   111f4:	21048104 	addi	r4,r4,4612
   111f8:	1105883a 	add	r2,r2,r4
   111fc:	10800017 	ldw	r2,0(r2)
   11200:	1000683a 	jmp	r2
   11204:	00011458 	cmpnei	zero,zero,1105
   11208:	00011264 	muli	zero,zero,1097
   1120c:	00011264 	muli	zero,zero,1097
   11210:	00011260 	cmpeqi	zero,zero,1097
   11214:	00011434 	movhi	zero,1104
   11218:	00011434 	movhi	zero,1104
   1121c:	0001141c 	xori	zero,zero,1104
   11220:	00011260 	cmpeqi	zero,zero,1097
   11224:	00011434 	movhi	zero,1104
   11228:	0001141c 	xori	zero,zero,1104
   1122c:	00011434 	movhi	zero,1104
   11230:	00011260 	cmpeqi	zero,zero,1097
   11234:	00011444 	movi	zero,1105
   11238:	00011444 	movi	zero,1105
   1123c:	00011444 	movi	zero,1105
   11240:	000117a4 	muli	zero,zero,1118
   11244:	2404b03a 	or	r2,r4,r16
   11248:	1000711e 	bne	r2,zero,11410 <__muldf3+0x300>
   1124c:	05400204 	movi	r21,8
   11250:	0021883a 	mov	r16,zero
   11254:	002d883a 	mov	r22,zero
   11258:	01400084 	movi	r5,2
   1125c:	003fcb06 	br	1118c <__alt_data_end+0xf801118c>
   11260:	500d883a 	mov	r6,r10
   11264:	00800084 	movi	r2,2
   11268:	38805926 	beq	r7,r2,113d0 <__muldf3+0x2c0>
   1126c:	008000c4 	movi	r2,3
   11270:	3881bb26 	beq	r7,r2,11960 <__muldf3+0x850>
   11274:	00800044 	movi	r2,1
   11278:	3881961e 	bne	r7,r2,118d4 <__muldf3+0x7c4>
   1127c:	3027883a 	mov	r19,r6
   11280:	0005883a 	mov	r2,zero
   11284:	0021883a 	mov	r16,zero
   11288:	002d883a 	mov	r22,zero
   1128c:	1004953a 	slli	r2,r2,20
   11290:	98c03fcc 	andi	r3,r19,255
   11294:	04400434 	movhi	r17,16
   11298:	8c7fffc4 	addi	r17,r17,-1
   1129c:	180697fa 	slli	r3,r3,31
   112a0:	8460703a 	and	r16,r16,r17
   112a4:	80a0b03a 	or	r16,r16,r2
   112a8:	80c6b03a 	or	r3,r16,r3
   112ac:	b005883a 	mov	r2,r22
   112b0:	dfc01117 	ldw	ra,68(sp)
   112b4:	df001017 	ldw	fp,64(sp)
   112b8:	ddc00f17 	ldw	r23,60(sp)
   112bc:	dd800e17 	ldw	r22,56(sp)
   112c0:	dd400d17 	ldw	r21,52(sp)
   112c4:	dd000c17 	ldw	r20,48(sp)
   112c8:	dcc00b17 	ldw	r19,44(sp)
   112cc:	dc800a17 	ldw	r18,40(sp)
   112d0:	dc400917 	ldw	r17,36(sp)
   112d4:	dc000817 	ldw	r16,32(sp)
   112d8:	dec01204 	addi	sp,sp,72
   112dc:	f800283a 	ret
   112e0:	2404b03a 	or	r2,r4,r16
   112e4:	202b883a 	mov	r21,r4
   112e8:	10004426 	beq	r2,zero,113fc <__muldf3+0x2ec>
   112ec:	80015126 	beq	r16,zero,11834 <__muldf3+0x724>
   112f0:	8009883a 	mov	r4,r16
   112f4:	d9800715 	stw	r6,28(sp)
   112f8:	d9c00215 	stw	r7,8(sp)
   112fc:	da400415 	stw	r9,16(sp)
   11300:	001247c0 	call	1247c <__clzsi2>
   11304:	d9800717 	ldw	r6,28(sp)
   11308:	d9c00217 	ldw	r7,8(sp)
   1130c:	da400417 	ldw	r9,16(sp)
   11310:	113ffd44 	addi	r4,r2,-11
   11314:	00c00704 	movi	r3,28
   11318:	19014216 	blt	r3,r4,11824 <__muldf3+0x714>
   1131c:	00c00744 	movi	r3,29
   11320:	15bffe04 	addi	r22,r2,-8
   11324:	1907c83a 	sub	r3,r3,r4
   11328:	85a0983a 	sll	r16,r16,r22
   1132c:	a8c6d83a 	srl	r3,r21,r3
   11330:	adac983a 	sll	r22,r21,r22
   11334:	1c20b03a 	or	r16,r3,r16
   11338:	1080fcc4 	addi	r2,r2,1011
   1133c:	00a9c83a 	sub	r20,zero,r2
   11340:	002b883a 	mov	r21,zero
   11344:	000b883a 	mov	r5,zero
   11348:	003f9006 	br	1118c <__alt_data_end+0xf801118c>
   1134c:	3446b03a 	or	r3,r6,r17
   11350:	1800281e 	bne	r3,zero,113f4 <__muldf3+0x2e4>
   11354:	0023883a 	mov	r17,zero
   11358:	0025883a 	mov	r18,zero
   1135c:	01c00084 	movi	r7,2
   11360:	003f9c06 	br	111d4 <__alt_data_end+0xf80111d4>
   11364:	3446b03a 	or	r3,r6,r17
   11368:	18001e26 	beq	r3,zero,113e4 <__muldf3+0x2d4>
   1136c:	88012126 	beq	r17,zero,117f4 <__muldf3+0x6e4>
   11370:	8809883a 	mov	r4,r17
   11374:	d9400215 	stw	r5,8(sp)
   11378:	d9800715 	stw	r6,28(sp)
   1137c:	da400415 	stw	r9,16(sp)
   11380:	da800315 	stw	r10,12(sp)
   11384:	001247c0 	call	1247c <__clzsi2>
   11388:	d9400217 	ldw	r5,8(sp)
   1138c:	d9800717 	ldw	r6,28(sp)
   11390:	da400417 	ldw	r9,16(sp)
   11394:	da800317 	ldw	r10,12(sp)
   11398:	113ffd44 	addi	r4,r2,-11
   1139c:	00c00704 	movi	r3,28
   113a0:	19011016 	blt	r3,r4,117e4 <__muldf3+0x6d4>
   113a4:	00c00744 	movi	r3,29
   113a8:	14bffe04 	addi	r18,r2,-8
   113ac:	1907c83a 	sub	r3,r3,r4
   113b0:	8ca2983a 	sll	r17,r17,r18
   113b4:	30c6d83a 	srl	r3,r6,r3
   113b8:	34a4983a 	sll	r18,r6,r18
   113bc:	1c62b03a 	or	r17,r3,r17
   113c0:	1080fcc4 	addi	r2,r2,1011
   113c4:	0085c83a 	sub	r2,zero,r2
   113c8:	000f883a 	mov	r7,zero
   113cc:	003f8106 	br	111d4 <__alt_data_end+0xf80111d4>
   113d0:	3027883a 	mov	r19,r6
   113d4:	0081ffc4 	movi	r2,2047
   113d8:	0021883a 	mov	r16,zero
   113dc:	002d883a 	mov	r22,zero
   113e0:	003faa06 	br	1128c <__alt_data_end+0xf801128c>
   113e4:	0023883a 	mov	r17,zero
   113e8:	0025883a 	mov	r18,zero
   113ec:	01c00044 	movi	r7,1
   113f0:	003f7806 	br	111d4 <__alt_data_end+0xf80111d4>
   113f4:	01c000c4 	movi	r7,3
   113f8:	003f7606 	br	111d4 <__alt_data_end+0xf80111d4>
   113fc:	05400104 	movi	r21,4
   11400:	0021883a 	mov	r16,zero
   11404:	002d883a 	mov	r22,zero
   11408:	01400044 	movi	r5,1
   1140c:	003f5f06 	br	1118c <__alt_data_end+0xf801118c>
   11410:	05400304 	movi	r21,12
   11414:	014000c4 	movi	r5,3
   11418:	003f5c06 	br	1118c <__alt_data_end+0xf801118c>
   1141c:	04000434 	movhi	r16,16
   11420:	0027883a 	mov	r19,zero
   11424:	843fffc4 	addi	r16,r16,-1
   11428:	05bfffc4 	movi	r22,-1
   1142c:	0081ffc4 	movi	r2,2047
   11430:	003f9606 	br	1128c <__alt_data_end+0xf801128c>
   11434:	8023883a 	mov	r17,r16
   11438:	b025883a 	mov	r18,r22
   1143c:	280f883a 	mov	r7,r5
   11440:	003f8806 	br	11264 <__alt_data_end+0xf8011264>
   11444:	8023883a 	mov	r17,r16
   11448:	b025883a 	mov	r18,r22
   1144c:	480d883a 	mov	r6,r9
   11450:	280f883a 	mov	r7,r5
   11454:	003f8306 	br	11264 <__alt_data_end+0xf8011264>
   11458:	b026d43a 	srli	r19,r22,16
   1145c:	902ed43a 	srli	r23,r18,16
   11460:	b5bfffcc 	andi	r22,r22,65535
   11464:	94bfffcc 	andi	r18,r18,65535
   11468:	b00b883a 	mov	r5,r22
   1146c:	9009883a 	mov	r4,r18
   11470:	d8c00515 	stw	r3,20(sp)
   11474:	d9800715 	stw	r6,28(sp)
   11478:	da000615 	stw	r8,24(sp)
   1147c:	000fc140 	call	fc14 <__mulsi3>
   11480:	980b883a 	mov	r5,r19
   11484:	9009883a 	mov	r4,r18
   11488:	1029883a 	mov	r20,r2
   1148c:	000fc140 	call	fc14 <__mulsi3>
   11490:	b80b883a 	mov	r5,r23
   11494:	9809883a 	mov	r4,r19
   11498:	102b883a 	mov	r21,r2
   1149c:	000fc140 	call	fc14 <__mulsi3>
   114a0:	b809883a 	mov	r4,r23
   114a4:	b00b883a 	mov	r5,r22
   114a8:	1039883a 	mov	fp,r2
   114ac:	000fc140 	call	fc14 <__mulsi3>
   114b0:	a008d43a 	srli	r4,r20,16
   114b4:	1545883a 	add	r2,r2,r21
   114b8:	d8c00517 	ldw	r3,20(sp)
   114bc:	2085883a 	add	r2,r4,r2
   114c0:	d9800717 	ldw	r6,28(sp)
   114c4:	da000617 	ldw	r8,24(sp)
   114c8:	1540022e 	bgeu	r2,r21,114d4 <__muldf3+0x3c4>
   114cc:	01000074 	movhi	r4,1
   114d0:	e139883a 	add	fp,fp,r4
   114d4:	100e943a 	slli	r7,r2,16
   114d8:	1004d43a 	srli	r2,r2,16
   114dc:	882ad43a 	srli	r21,r17,16
   114e0:	a53fffcc 	andi	r20,r20,65535
   114e4:	8c7fffcc 	andi	r17,r17,65535
   114e8:	3d29883a 	add	r20,r7,r20
   114ec:	b00b883a 	mov	r5,r22
   114f0:	8809883a 	mov	r4,r17
   114f4:	d8c00515 	stw	r3,20(sp)
   114f8:	d9800715 	stw	r6,28(sp)
   114fc:	da000615 	stw	r8,24(sp)
   11500:	dd000115 	stw	r20,4(sp)
   11504:	d8800015 	stw	r2,0(sp)
   11508:	000fc140 	call	fc14 <__mulsi3>
   1150c:	980b883a 	mov	r5,r19
   11510:	8809883a 	mov	r4,r17
   11514:	d8800215 	stw	r2,8(sp)
   11518:	000fc140 	call	fc14 <__mulsi3>
   1151c:	9809883a 	mov	r4,r19
   11520:	a80b883a 	mov	r5,r21
   11524:	1029883a 	mov	r20,r2
   11528:	000fc140 	call	fc14 <__mulsi3>
   1152c:	b00b883a 	mov	r5,r22
   11530:	a809883a 	mov	r4,r21
   11534:	d8800415 	stw	r2,16(sp)
   11538:	000fc140 	call	fc14 <__mulsi3>
   1153c:	d9c00217 	ldw	r7,8(sp)
   11540:	1505883a 	add	r2,r2,r20
   11544:	d8c00517 	ldw	r3,20(sp)
   11548:	3826d43a 	srli	r19,r7,16
   1154c:	d9800717 	ldw	r6,28(sp)
   11550:	da000617 	ldw	r8,24(sp)
   11554:	9885883a 	add	r2,r19,r2
   11558:	da400417 	ldw	r9,16(sp)
   1155c:	1500022e 	bgeu	r2,r20,11568 <__muldf3+0x458>
   11560:	01000074 	movhi	r4,1
   11564:	4913883a 	add	r9,r9,r4
   11568:	1028d43a 	srli	r20,r2,16
   1156c:	1004943a 	slli	r2,r2,16
   11570:	802cd43a 	srli	r22,r16,16
   11574:	843fffcc 	andi	r16,r16,65535
   11578:	3cffffcc 	andi	r19,r7,65535
   1157c:	9009883a 	mov	r4,r18
   11580:	800b883a 	mov	r5,r16
   11584:	a269883a 	add	r20,r20,r9
   11588:	d8c00515 	stw	r3,20(sp)
   1158c:	d9800715 	stw	r6,28(sp)
   11590:	da000615 	stw	r8,24(sp)
   11594:	14e7883a 	add	r19,r2,r19
   11598:	000fc140 	call	fc14 <__mulsi3>
   1159c:	9009883a 	mov	r4,r18
   115a0:	b00b883a 	mov	r5,r22
   115a4:	d8800315 	stw	r2,12(sp)
   115a8:	000fc140 	call	fc14 <__mulsi3>
   115ac:	b809883a 	mov	r4,r23
   115b0:	b00b883a 	mov	r5,r22
   115b4:	d8800215 	stw	r2,8(sp)
   115b8:	000fc140 	call	fc14 <__mulsi3>
   115bc:	b80b883a 	mov	r5,r23
   115c0:	8009883a 	mov	r4,r16
   115c4:	d8800415 	stw	r2,16(sp)
   115c8:	000fc140 	call	fc14 <__mulsi3>
   115cc:	da800317 	ldw	r10,12(sp)
   115d0:	d9c00217 	ldw	r7,8(sp)
   115d4:	d9000017 	ldw	r4,0(sp)
   115d8:	502ed43a 	srli	r23,r10,16
   115dc:	11c5883a 	add	r2,r2,r7
   115e0:	24e5883a 	add	r18,r4,r19
   115e4:	b885883a 	add	r2,r23,r2
   115e8:	d8c00517 	ldw	r3,20(sp)
   115ec:	d9800717 	ldw	r6,28(sp)
   115f0:	da000617 	ldw	r8,24(sp)
   115f4:	da400417 	ldw	r9,16(sp)
   115f8:	11c0022e 	bgeu	r2,r7,11604 <__muldf3+0x4f4>
   115fc:	01000074 	movhi	r4,1
   11600:	4913883a 	add	r9,r9,r4
   11604:	100ed43a 	srli	r7,r2,16
   11608:	1004943a 	slli	r2,r2,16
   1160c:	55ffffcc 	andi	r23,r10,65535
   11610:	3a53883a 	add	r9,r7,r9
   11614:	8809883a 	mov	r4,r17
   11618:	800b883a 	mov	r5,r16
   1161c:	d8c00515 	stw	r3,20(sp)
   11620:	d9800715 	stw	r6,28(sp)
   11624:	da000615 	stw	r8,24(sp)
   11628:	da400415 	stw	r9,16(sp)
   1162c:	15ef883a 	add	r23,r2,r23
   11630:	000fc140 	call	fc14 <__mulsi3>
   11634:	8809883a 	mov	r4,r17
   11638:	b00b883a 	mov	r5,r22
   1163c:	d8800215 	stw	r2,8(sp)
   11640:	000fc140 	call	fc14 <__mulsi3>
   11644:	b00b883a 	mov	r5,r22
   11648:	a809883a 	mov	r4,r21
   1164c:	d8800315 	stw	r2,12(sp)
   11650:	000fc140 	call	fc14 <__mulsi3>
   11654:	8009883a 	mov	r4,r16
   11658:	a80b883a 	mov	r5,r21
   1165c:	1023883a 	mov	r17,r2
   11660:	000fc140 	call	fc14 <__mulsi3>
   11664:	d9c00217 	ldw	r7,8(sp)
   11668:	da800317 	ldw	r10,12(sp)
   1166c:	d8c00517 	ldw	r3,20(sp)
   11670:	3808d43a 	srli	r4,r7,16
   11674:	1285883a 	add	r2,r2,r10
   11678:	d9800717 	ldw	r6,28(sp)
   1167c:	2085883a 	add	r2,r4,r2
   11680:	da000617 	ldw	r8,24(sp)
   11684:	da400417 	ldw	r9,16(sp)
   11688:	1280022e 	bgeu	r2,r10,11694 <__muldf3+0x584>
   1168c:	01000074 	movhi	r4,1
   11690:	8923883a 	add	r17,r17,r4
   11694:	1008943a 	slli	r4,r2,16
   11698:	39ffffcc 	andi	r7,r7,65535
   1169c:	e4b9883a 	add	fp,fp,r18
   116a0:	21cf883a 	add	r7,r4,r7
   116a4:	e4e7803a 	cmpltu	r19,fp,r19
   116a8:	3d0f883a 	add	r7,r7,r20
   116ac:	bf39883a 	add	fp,r23,fp
   116b0:	99c9883a 	add	r4,r19,r7
   116b4:	e5ef803a 	cmpltu	r23,fp,r23
   116b8:	490b883a 	add	r5,r9,r4
   116bc:	1004d43a 	srli	r2,r2,16
   116c0:	b965883a 	add	r18,r23,r5
   116c4:	24c9803a 	cmpltu	r4,r4,r19
   116c8:	3d29803a 	cmpltu	r20,r7,r20
   116cc:	a128b03a 	or	r20,r20,r4
   116d0:	95ef803a 	cmpltu	r23,r18,r23
   116d4:	2a53803a 	cmpltu	r9,r5,r9
   116d8:	a0a9883a 	add	r20,r20,r2
   116dc:	4deeb03a 	or	r23,r9,r23
   116e0:	a5ef883a 	add	r23,r20,r23
   116e4:	bc63883a 	add	r17,r23,r17
   116e8:	e004927a 	slli	r2,fp,9
   116ec:	d9000117 	ldw	r4,4(sp)
   116f0:	882e927a 	slli	r23,r17,9
   116f4:	9022d5fa 	srli	r17,r18,23
   116f8:	e038d5fa 	srli	fp,fp,23
   116fc:	1104b03a 	or	r2,r2,r4
   11700:	9024927a 	slli	r18,r18,9
   11704:	1004c03a 	cmpne	r2,r2,zero
   11708:	bc62b03a 	or	r17,r23,r17
   1170c:	1738b03a 	or	fp,r2,fp
   11710:	8880402c 	andhi	r2,r17,256
   11714:	e4a4b03a 	or	r18,fp,r18
   11718:	10000726 	beq	r2,zero,11738 <__muldf3+0x628>
   1171c:	9006d07a 	srli	r3,r18,1
   11720:	880497fa 	slli	r2,r17,31
   11724:	9480004c 	andi	r18,r18,1
   11728:	8822d07a 	srli	r17,r17,1
   1172c:	1ca4b03a 	or	r18,r3,r18
   11730:	14a4b03a 	or	r18,r2,r18
   11734:	4007883a 	mov	r3,r8
   11738:	1880ffc4 	addi	r2,r3,1023
   1173c:	0080460e 	bge	zero,r2,11858 <__muldf3+0x748>
   11740:	910001cc 	andi	r4,r18,7
   11744:	20000726 	beq	r4,zero,11764 <__muldf3+0x654>
   11748:	910003cc 	andi	r4,r18,15
   1174c:	01400104 	movi	r5,4
   11750:	21400426 	beq	r4,r5,11764 <__muldf3+0x654>
   11754:	9149883a 	add	r4,r18,r5
   11758:	24a5803a 	cmpltu	r18,r4,r18
   1175c:	8ca3883a 	add	r17,r17,r18
   11760:	2025883a 	mov	r18,r4
   11764:	8900402c 	andhi	r4,r17,256
   11768:	20000426 	beq	r4,zero,1177c <__muldf3+0x66c>
   1176c:	18810004 	addi	r2,r3,1024
   11770:	00ffc034 	movhi	r3,65280
   11774:	18ffffc4 	addi	r3,r3,-1
   11778:	88e2703a 	and	r17,r17,r3
   1177c:	00c1ff84 	movi	r3,2046
   11780:	18bf1316 	blt	r3,r2,113d0 <__alt_data_end+0xf80113d0>
   11784:	882c977a 	slli	r22,r17,29
   11788:	9024d0fa 	srli	r18,r18,3
   1178c:	8822927a 	slli	r17,r17,9
   11790:	1081ffcc 	andi	r2,r2,2047
   11794:	b4acb03a 	or	r22,r22,r18
   11798:	8820d33a 	srli	r16,r17,12
   1179c:	3027883a 	mov	r19,r6
   117a0:	003eba06 	br	1128c <__alt_data_end+0xf801128c>
   117a4:	8080022c 	andhi	r2,r16,8
   117a8:	10000926 	beq	r2,zero,117d0 <__muldf3+0x6c0>
   117ac:	8880022c 	andhi	r2,r17,8
   117b0:	1000071e 	bne	r2,zero,117d0 <__muldf3+0x6c0>
   117b4:	00800434 	movhi	r2,16
   117b8:	8c000234 	orhi	r16,r17,8
   117bc:	10bfffc4 	addi	r2,r2,-1
   117c0:	e027883a 	mov	r19,fp
   117c4:	80a0703a 	and	r16,r16,r2
   117c8:	902d883a 	mov	r22,r18
   117cc:	003f1706 	br	1142c <__alt_data_end+0xf801142c>
   117d0:	00800434 	movhi	r2,16
   117d4:	84000234 	orhi	r16,r16,8
   117d8:	10bfffc4 	addi	r2,r2,-1
   117dc:	80a0703a 	and	r16,r16,r2
   117e0:	003f1206 	br	1142c <__alt_data_end+0xf801142c>
   117e4:	147ff604 	addi	r17,r2,-40
   117e8:	3462983a 	sll	r17,r6,r17
   117ec:	0025883a 	mov	r18,zero
   117f0:	003ef306 	br	113c0 <__alt_data_end+0xf80113c0>
   117f4:	3009883a 	mov	r4,r6
   117f8:	d9400215 	stw	r5,8(sp)
   117fc:	d9800715 	stw	r6,28(sp)
   11800:	da400415 	stw	r9,16(sp)
   11804:	da800315 	stw	r10,12(sp)
   11808:	001247c0 	call	1247c <__clzsi2>
   1180c:	10800804 	addi	r2,r2,32
   11810:	da800317 	ldw	r10,12(sp)
   11814:	da400417 	ldw	r9,16(sp)
   11818:	d9800717 	ldw	r6,28(sp)
   1181c:	d9400217 	ldw	r5,8(sp)
   11820:	003edd06 	br	11398 <__alt_data_end+0xf8011398>
   11824:	143ff604 	addi	r16,r2,-40
   11828:	ac20983a 	sll	r16,r21,r16
   1182c:	002d883a 	mov	r22,zero
   11830:	003ec106 	br	11338 <__alt_data_end+0xf8011338>
   11834:	d9800715 	stw	r6,28(sp)
   11838:	d9c00215 	stw	r7,8(sp)
   1183c:	da400415 	stw	r9,16(sp)
   11840:	001247c0 	call	1247c <__clzsi2>
   11844:	10800804 	addi	r2,r2,32
   11848:	da400417 	ldw	r9,16(sp)
   1184c:	d9c00217 	ldw	r7,8(sp)
   11850:	d9800717 	ldw	r6,28(sp)
   11854:	003eae06 	br	11310 <__alt_data_end+0xf8011310>
   11858:	00c00044 	movi	r3,1
   1185c:	1887c83a 	sub	r3,r3,r2
   11860:	01000e04 	movi	r4,56
   11864:	20fe8516 	blt	r4,r3,1127c <__alt_data_end+0xf801127c>
   11868:	010007c4 	movi	r4,31
   1186c:	20c01b16 	blt	r4,r3,118dc <__muldf3+0x7cc>
   11870:	00800804 	movi	r2,32
   11874:	10c5c83a 	sub	r2,r2,r3
   11878:	888a983a 	sll	r5,r17,r2
   1187c:	90c8d83a 	srl	r4,r18,r3
   11880:	9084983a 	sll	r2,r18,r2
   11884:	88e2d83a 	srl	r17,r17,r3
   11888:	2906b03a 	or	r3,r5,r4
   1188c:	1004c03a 	cmpne	r2,r2,zero
   11890:	1886b03a 	or	r3,r3,r2
   11894:	188001cc 	andi	r2,r3,7
   11898:	10000726 	beq	r2,zero,118b8 <__muldf3+0x7a8>
   1189c:	188003cc 	andi	r2,r3,15
   118a0:	01000104 	movi	r4,4
   118a4:	11000426 	beq	r2,r4,118b8 <__muldf3+0x7a8>
   118a8:	1805883a 	mov	r2,r3
   118ac:	10c00104 	addi	r3,r2,4
   118b0:	1885803a 	cmpltu	r2,r3,r2
   118b4:	88a3883a 	add	r17,r17,r2
   118b8:	8880202c 	andhi	r2,r17,128
   118bc:	10001c26 	beq	r2,zero,11930 <__muldf3+0x820>
   118c0:	3027883a 	mov	r19,r6
   118c4:	00800044 	movi	r2,1
   118c8:	0021883a 	mov	r16,zero
   118cc:	002d883a 	mov	r22,zero
   118d0:	003e6e06 	br	1128c <__alt_data_end+0xf801128c>
   118d4:	4007883a 	mov	r3,r8
   118d8:	003f9706 	br	11738 <__alt_data_end+0xf8011738>
   118dc:	017ff844 	movi	r5,-31
   118e0:	2885c83a 	sub	r2,r5,r2
   118e4:	888ad83a 	srl	r5,r17,r2
   118e8:	00800804 	movi	r2,32
   118ec:	18801a26 	beq	r3,r2,11958 <__muldf3+0x848>
   118f0:	01001004 	movi	r4,64
   118f4:	20c7c83a 	sub	r3,r4,r3
   118f8:	88e2983a 	sll	r17,r17,r3
   118fc:	8ca4b03a 	or	r18,r17,r18
   11900:	9004c03a 	cmpne	r2,r18,zero
   11904:	2884b03a 	or	r2,r5,r2
   11908:	144001cc 	andi	r17,r2,7
   1190c:	88000d1e 	bne	r17,zero,11944 <__muldf3+0x834>
   11910:	0021883a 	mov	r16,zero
   11914:	102cd0fa 	srli	r22,r2,3
   11918:	3027883a 	mov	r19,r6
   1191c:	0005883a 	mov	r2,zero
   11920:	b46cb03a 	or	r22,r22,r17
   11924:	003e5906 	br	1128c <__alt_data_end+0xf801128c>
   11928:	1007883a 	mov	r3,r2
   1192c:	0023883a 	mov	r17,zero
   11930:	8820927a 	slli	r16,r17,9
   11934:	1805883a 	mov	r2,r3
   11938:	8822977a 	slli	r17,r17,29
   1193c:	8020d33a 	srli	r16,r16,12
   11940:	003ff406 	br	11914 <__alt_data_end+0xf8011914>
   11944:	10c003cc 	andi	r3,r2,15
   11948:	01000104 	movi	r4,4
   1194c:	193ff626 	beq	r3,r4,11928 <__alt_data_end+0xf8011928>
   11950:	0023883a 	mov	r17,zero
   11954:	003fd506 	br	118ac <__alt_data_end+0xf80118ac>
   11958:	0023883a 	mov	r17,zero
   1195c:	003fe706 	br	118fc <__alt_data_end+0xf80118fc>
   11960:	00800434 	movhi	r2,16
   11964:	8c000234 	orhi	r16,r17,8
   11968:	10bfffc4 	addi	r2,r2,-1
   1196c:	3027883a 	mov	r19,r6
   11970:	80a0703a 	and	r16,r16,r2
   11974:	902d883a 	mov	r22,r18
   11978:	003eac06 	br	1142c <__alt_data_end+0xf801142c>

0001197c <__subdf3>:
   1197c:	02000434 	movhi	r8,16
   11980:	423fffc4 	addi	r8,r8,-1
   11984:	defffb04 	addi	sp,sp,-20
   11988:	2a14703a 	and	r10,r5,r8
   1198c:	3812d53a 	srli	r9,r7,20
   11990:	3a10703a 	and	r8,r7,r8
   11994:	2006d77a 	srli	r3,r4,29
   11998:	3004d77a 	srli	r2,r6,29
   1199c:	dc000015 	stw	r16,0(sp)
   119a0:	501490fa 	slli	r10,r10,3
   119a4:	2820d53a 	srli	r16,r5,20
   119a8:	401090fa 	slli	r8,r8,3
   119ac:	dc800215 	stw	r18,8(sp)
   119b0:	dc400115 	stw	r17,4(sp)
   119b4:	dfc00415 	stw	ra,16(sp)
   119b8:	202290fa 	slli	r17,r4,3
   119bc:	dcc00315 	stw	r19,12(sp)
   119c0:	4a41ffcc 	andi	r9,r9,2047
   119c4:	0101ffc4 	movi	r4,2047
   119c8:	2824d7fa 	srli	r18,r5,31
   119cc:	8401ffcc 	andi	r16,r16,2047
   119d0:	50c6b03a 	or	r3,r10,r3
   119d4:	380ed7fa 	srli	r7,r7,31
   119d8:	408ab03a 	or	r5,r8,r2
   119dc:	300c90fa 	slli	r6,r6,3
   119e0:	49009626 	beq	r9,r4,11c3c <__subdf3+0x2c0>
   119e4:	39c0005c 	xori	r7,r7,1
   119e8:	8245c83a 	sub	r2,r16,r9
   119ec:	3c807426 	beq	r7,r18,11bc0 <__subdf3+0x244>
   119f0:	0080af0e 	bge	zero,r2,11cb0 <__subdf3+0x334>
   119f4:	48002a1e 	bne	r9,zero,11aa0 <__subdf3+0x124>
   119f8:	2988b03a 	or	r4,r5,r6
   119fc:	20009a1e 	bne	r4,zero,11c68 <__subdf3+0x2ec>
   11a00:	888001cc 	andi	r2,r17,7
   11a04:	10000726 	beq	r2,zero,11a24 <__subdf3+0xa8>
   11a08:	888003cc 	andi	r2,r17,15
   11a0c:	01000104 	movi	r4,4
   11a10:	11000426 	beq	r2,r4,11a24 <__subdf3+0xa8>
   11a14:	890b883a 	add	r5,r17,r4
   11a18:	2c63803a 	cmpltu	r17,r5,r17
   11a1c:	1c47883a 	add	r3,r3,r17
   11a20:	2823883a 	mov	r17,r5
   11a24:	1880202c 	andhi	r2,r3,128
   11a28:	10005926 	beq	r2,zero,11b90 <__subdf3+0x214>
   11a2c:	84000044 	addi	r16,r16,1
   11a30:	0081ffc4 	movi	r2,2047
   11a34:	8080be26 	beq	r16,r2,11d30 <__subdf3+0x3b4>
   11a38:	017fe034 	movhi	r5,65408
   11a3c:	297fffc4 	addi	r5,r5,-1
   11a40:	1946703a 	and	r3,r3,r5
   11a44:	1804977a 	slli	r2,r3,29
   11a48:	1806927a 	slli	r3,r3,9
   11a4c:	8822d0fa 	srli	r17,r17,3
   11a50:	8401ffcc 	andi	r16,r16,2047
   11a54:	180ad33a 	srli	r5,r3,12
   11a58:	9100004c 	andi	r4,r18,1
   11a5c:	1444b03a 	or	r2,r2,r17
   11a60:	80c1ffcc 	andi	r3,r16,2047
   11a64:	1820953a 	slli	r16,r3,20
   11a68:	20c03fcc 	andi	r3,r4,255
   11a6c:	180897fa 	slli	r4,r3,31
   11a70:	00c00434 	movhi	r3,16
   11a74:	18ffffc4 	addi	r3,r3,-1
   11a78:	28c6703a 	and	r3,r5,r3
   11a7c:	1c06b03a 	or	r3,r3,r16
   11a80:	1906b03a 	or	r3,r3,r4
   11a84:	dfc00417 	ldw	ra,16(sp)
   11a88:	dcc00317 	ldw	r19,12(sp)
   11a8c:	dc800217 	ldw	r18,8(sp)
   11a90:	dc400117 	ldw	r17,4(sp)
   11a94:	dc000017 	ldw	r16,0(sp)
   11a98:	dec00504 	addi	sp,sp,20
   11a9c:	f800283a 	ret
   11aa0:	0101ffc4 	movi	r4,2047
   11aa4:	813fd626 	beq	r16,r4,11a00 <__alt_data_end+0xf8011a00>
   11aa8:	29402034 	orhi	r5,r5,128
   11aac:	01000e04 	movi	r4,56
   11ab0:	2080a316 	blt	r4,r2,11d40 <__subdf3+0x3c4>
   11ab4:	010007c4 	movi	r4,31
   11ab8:	2080c616 	blt	r4,r2,11dd4 <__subdf3+0x458>
   11abc:	01000804 	movi	r4,32
   11ac0:	2089c83a 	sub	r4,r4,r2
   11ac4:	2910983a 	sll	r8,r5,r4
   11ac8:	308ed83a 	srl	r7,r6,r2
   11acc:	3108983a 	sll	r4,r6,r4
   11ad0:	2884d83a 	srl	r2,r5,r2
   11ad4:	41ccb03a 	or	r6,r8,r7
   11ad8:	2008c03a 	cmpne	r4,r4,zero
   11adc:	310cb03a 	or	r6,r6,r4
   11ae0:	898dc83a 	sub	r6,r17,r6
   11ae4:	89a3803a 	cmpltu	r17,r17,r6
   11ae8:	1887c83a 	sub	r3,r3,r2
   11aec:	1c47c83a 	sub	r3,r3,r17
   11af0:	3023883a 	mov	r17,r6
   11af4:	1880202c 	andhi	r2,r3,128
   11af8:	10002326 	beq	r2,zero,11b88 <__subdf3+0x20c>
   11afc:	04c02034 	movhi	r19,128
   11b00:	9cffffc4 	addi	r19,r19,-1
   11b04:	1ce6703a 	and	r19,r3,r19
   11b08:	98007a26 	beq	r19,zero,11cf4 <__subdf3+0x378>
   11b0c:	9809883a 	mov	r4,r19
   11b10:	001247c0 	call	1247c <__clzsi2>
   11b14:	113ffe04 	addi	r4,r2,-8
   11b18:	00c007c4 	movi	r3,31
   11b1c:	19007b16 	blt	r3,r4,11d0c <__subdf3+0x390>
   11b20:	00800804 	movi	r2,32
   11b24:	1105c83a 	sub	r2,r2,r4
   11b28:	8884d83a 	srl	r2,r17,r2
   11b2c:	9906983a 	sll	r3,r19,r4
   11b30:	8922983a 	sll	r17,r17,r4
   11b34:	10c4b03a 	or	r2,r2,r3
   11b38:	24007816 	blt	r4,r16,11d1c <__subdf3+0x3a0>
   11b3c:	2421c83a 	sub	r16,r4,r16
   11b40:	80c00044 	addi	r3,r16,1
   11b44:	010007c4 	movi	r4,31
   11b48:	20c09516 	blt	r4,r3,11da0 <__subdf3+0x424>
   11b4c:	01400804 	movi	r5,32
   11b50:	28cbc83a 	sub	r5,r5,r3
   11b54:	88c8d83a 	srl	r4,r17,r3
   11b58:	8962983a 	sll	r17,r17,r5
   11b5c:	114a983a 	sll	r5,r2,r5
   11b60:	10c6d83a 	srl	r3,r2,r3
   11b64:	8804c03a 	cmpne	r2,r17,zero
   11b68:	290ab03a 	or	r5,r5,r4
   11b6c:	28a2b03a 	or	r17,r5,r2
   11b70:	0021883a 	mov	r16,zero
   11b74:	003fa206 	br	11a00 <__alt_data_end+0xf8011a00>
   11b78:	2090b03a 	or	r8,r4,r2
   11b7c:	40018e26 	beq	r8,zero,121b8 <__subdf3+0x83c>
   11b80:	1007883a 	mov	r3,r2
   11b84:	2023883a 	mov	r17,r4
   11b88:	888001cc 	andi	r2,r17,7
   11b8c:	103f9e1e 	bne	r2,zero,11a08 <__alt_data_end+0xf8011a08>
   11b90:	1804977a 	slli	r2,r3,29
   11b94:	8822d0fa 	srli	r17,r17,3
   11b98:	1810d0fa 	srli	r8,r3,3
   11b9c:	9100004c 	andi	r4,r18,1
   11ba0:	1444b03a 	or	r2,r2,r17
   11ba4:	00c1ffc4 	movi	r3,2047
   11ba8:	80c02826 	beq	r16,r3,11c4c <__subdf3+0x2d0>
   11bac:	01400434 	movhi	r5,16
   11bb0:	297fffc4 	addi	r5,r5,-1
   11bb4:	80e0703a 	and	r16,r16,r3
   11bb8:	414a703a 	and	r5,r8,r5
   11bbc:	003fa806 	br	11a60 <__alt_data_end+0xf8011a60>
   11bc0:	0080630e 	bge	zero,r2,11d50 <__subdf3+0x3d4>
   11bc4:	48003026 	beq	r9,zero,11c88 <__subdf3+0x30c>
   11bc8:	0101ffc4 	movi	r4,2047
   11bcc:	813f8c26 	beq	r16,r4,11a00 <__alt_data_end+0xf8011a00>
   11bd0:	29402034 	orhi	r5,r5,128
   11bd4:	01000e04 	movi	r4,56
   11bd8:	2080a90e 	bge	r4,r2,11e80 <__subdf3+0x504>
   11bdc:	298cb03a 	or	r6,r5,r6
   11be0:	3012c03a 	cmpne	r9,r6,zero
   11be4:	0005883a 	mov	r2,zero
   11be8:	4c53883a 	add	r9,r9,r17
   11bec:	4c63803a 	cmpltu	r17,r9,r17
   11bf0:	10c7883a 	add	r3,r2,r3
   11bf4:	88c7883a 	add	r3,r17,r3
   11bf8:	4823883a 	mov	r17,r9
   11bfc:	1880202c 	andhi	r2,r3,128
   11c00:	1000d026 	beq	r2,zero,11f44 <__subdf3+0x5c8>
   11c04:	84000044 	addi	r16,r16,1
   11c08:	0081ffc4 	movi	r2,2047
   11c0c:	8080fe26 	beq	r16,r2,12008 <__subdf3+0x68c>
   11c10:	00bfe034 	movhi	r2,65408
   11c14:	10bfffc4 	addi	r2,r2,-1
   11c18:	1886703a 	and	r3,r3,r2
   11c1c:	880ad07a 	srli	r5,r17,1
   11c20:	180497fa 	slli	r2,r3,31
   11c24:	8900004c 	andi	r4,r17,1
   11c28:	2922b03a 	or	r17,r5,r4
   11c2c:	1806d07a 	srli	r3,r3,1
   11c30:	1462b03a 	or	r17,r2,r17
   11c34:	3825883a 	mov	r18,r7
   11c38:	003f7106 	br	11a00 <__alt_data_end+0xf8011a00>
   11c3c:	2984b03a 	or	r2,r5,r6
   11c40:	103f6826 	beq	r2,zero,119e4 <__alt_data_end+0xf80119e4>
   11c44:	39c03fcc 	andi	r7,r7,255
   11c48:	003f6706 	br	119e8 <__alt_data_end+0xf80119e8>
   11c4c:	4086b03a 	or	r3,r8,r2
   11c50:	18015226 	beq	r3,zero,1219c <__subdf3+0x820>
   11c54:	00c00434 	movhi	r3,16
   11c58:	41400234 	orhi	r5,r8,8
   11c5c:	18ffffc4 	addi	r3,r3,-1
   11c60:	28ca703a 	and	r5,r5,r3
   11c64:	003f7e06 	br	11a60 <__alt_data_end+0xf8011a60>
   11c68:	10bfffc4 	addi	r2,r2,-1
   11c6c:	1000491e 	bne	r2,zero,11d94 <__subdf3+0x418>
   11c70:	898fc83a 	sub	r7,r17,r6
   11c74:	89e3803a 	cmpltu	r17,r17,r7
   11c78:	1947c83a 	sub	r3,r3,r5
   11c7c:	1c47c83a 	sub	r3,r3,r17
   11c80:	3823883a 	mov	r17,r7
   11c84:	003f9b06 	br	11af4 <__alt_data_end+0xf8011af4>
   11c88:	2988b03a 	or	r4,r5,r6
   11c8c:	203f5c26 	beq	r4,zero,11a00 <__alt_data_end+0xf8011a00>
   11c90:	10bfffc4 	addi	r2,r2,-1
   11c94:	1000931e 	bne	r2,zero,11ee4 <__subdf3+0x568>
   11c98:	898d883a 	add	r6,r17,r6
   11c9c:	3463803a 	cmpltu	r17,r6,r17
   11ca0:	1947883a 	add	r3,r3,r5
   11ca4:	88c7883a 	add	r3,r17,r3
   11ca8:	3023883a 	mov	r17,r6
   11cac:	003fd306 	br	11bfc <__alt_data_end+0xf8011bfc>
   11cb0:	1000541e 	bne	r2,zero,11e04 <__subdf3+0x488>
   11cb4:	80800044 	addi	r2,r16,1
   11cb8:	1081ffcc 	andi	r2,r2,2047
   11cbc:	01000044 	movi	r4,1
   11cc0:	2080a20e 	bge	r4,r2,11f4c <__subdf3+0x5d0>
   11cc4:	8989c83a 	sub	r4,r17,r6
   11cc8:	8905803a 	cmpltu	r2,r17,r4
   11ccc:	1967c83a 	sub	r19,r3,r5
   11cd0:	98a7c83a 	sub	r19,r19,r2
   11cd4:	9880202c 	andhi	r2,r19,128
   11cd8:	10006326 	beq	r2,zero,11e68 <__subdf3+0x4ec>
   11cdc:	3463c83a 	sub	r17,r6,r17
   11ce0:	28c7c83a 	sub	r3,r5,r3
   11ce4:	344d803a 	cmpltu	r6,r6,r17
   11ce8:	19a7c83a 	sub	r19,r3,r6
   11cec:	3825883a 	mov	r18,r7
   11cf0:	983f861e 	bne	r19,zero,11b0c <__alt_data_end+0xf8011b0c>
   11cf4:	8809883a 	mov	r4,r17
   11cf8:	001247c0 	call	1247c <__clzsi2>
   11cfc:	10800804 	addi	r2,r2,32
   11d00:	113ffe04 	addi	r4,r2,-8
   11d04:	00c007c4 	movi	r3,31
   11d08:	193f850e 	bge	r3,r4,11b20 <__alt_data_end+0xf8011b20>
   11d0c:	10bff604 	addi	r2,r2,-40
   11d10:	8884983a 	sll	r2,r17,r2
   11d14:	0023883a 	mov	r17,zero
   11d18:	243f880e 	bge	r4,r16,11b3c <__alt_data_end+0xf8011b3c>
   11d1c:	00ffe034 	movhi	r3,65408
   11d20:	18ffffc4 	addi	r3,r3,-1
   11d24:	8121c83a 	sub	r16,r16,r4
   11d28:	10c6703a 	and	r3,r2,r3
   11d2c:	003f3406 	br	11a00 <__alt_data_end+0xf8011a00>
   11d30:	9100004c 	andi	r4,r18,1
   11d34:	000b883a 	mov	r5,zero
   11d38:	0005883a 	mov	r2,zero
   11d3c:	003f4806 	br	11a60 <__alt_data_end+0xf8011a60>
   11d40:	298cb03a 	or	r6,r5,r6
   11d44:	300cc03a 	cmpne	r6,r6,zero
   11d48:	0005883a 	mov	r2,zero
   11d4c:	003f6406 	br	11ae0 <__alt_data_end+0xf8011ae0>
   11d50:	10009a1e 	bne	r2,zero,11fbc <__subdf3+0x640>
   11d54:	82400044 	addi	r9,r16,1
   11d58:	4881ffcc 	andi	r2,r9,2047
   11d5c:	02800044 	movi	r10,1
   11d60:	5080670e 	bge	r10,r2,11f00 <__subdf3+0x584>
   11d64:	0081ffc4 	movi	r2,2047
   11d68:	4880af26 	beq	r9,r2,12028 <__subdf3+0x6ac>
   11d6c:	898d883a 	add	r6,r17,r6
   11d70:	1945883a 	add	r2,r3,r5
   11d74:	3447803a 	cmpltu	r3,r6,r17
   11d78:	1887883a 	add	r3,r3,r2
   11d7c:	182297fa 	slli	r17,r3,31
   11d80:	300cd07a 	srli	r6,r6,1
   11d84:	1806d07a 	srli	r3,r3,1
   11d88:	4821883a 	mov	r16,r9
   11d8c:	89a2b03a 	or	r17,r17,r6
   11d90:	003f1b06 	br	11a00 <__alt_data_end+0xf8011a00>
   11d94:	0101ffc4 	movi	r4,2047
   11d98:	813f441e 	bne	r16,r4,11aac <__alt_data_end+0xf8011aac>
   11d9c:	003f1806 	br	11a00 <__alt_data_end+0xf8011a00>
   11da0:	843ff844 	addi	r16,r16,-31
   11da4:	01400804 	movi	r5,32
   11da8:	1408d83a 	srl	r4,r2,r16
   11dac:	19405026 	beq	r3,r5,11ef0 <__subdf3+0x574>
   11db0:	01401004 	movi	r5,64
   11db4:	28c7c83a 	sub	r3,r5,r3
   11db8:	10c4983a 	sll	r2,r2,r3
   11dbc:	88a2b03a 	or	r17,r17,r2
   11dc0:	8822c03a 	cmpne	r17,r17,zero
   11dc4:	2462b03a 	or	r17,r4,r17
   11dc8:	0007883a 	mov	r3,zero
   11dcc:	0021883a 	mov	r16,zero
   11dd0:	003f6d06 	br	11b88 <__alt_data_end+0xf8011b88>
   11dd4:	11fff804 	addi	r7,r2,-32
   11dd8:	01000804 	movi	r4,32
   11ddc:	29ced83a 	srl	r7,r5,r7
   11de0:	11004526 	beq	r2,r4,11ef8 <__subdf3+0x57c>
   11de4:	01001004 	movi	r4,64
   11de8:	2089c83a 	sub	r4,r4,r2
   11dec:	2904983a 	sll	r2,r5,r4
   11df0:	118cb03a 	or	r6,r2,r6
   11df4:	300cc03a 	cmpne	r6,r6,zero
   11df8:	398cb03a 	or	r6,r7,r6
   11dfc:	0005883a 	mov	r2,zero
   11e00:	003f3706 	br	11ae0 <__alt_data_end+0xf8011ae0>
   11e04:	80002a26 	beq	r16,zero,11eb0 <__subdf3+0x534>
   11e08:	0101ffc4 	movi	r4,2047
   11e0c:	49006626 	beq	r9,r4,11fa8 <__subdf3+0x62c>
   11e10:	0085c83a 	sub	r2,zero,r2
   11e14:	18c02034 	orhi	r3,r3,128
   11e18:	01000e04 	movi	r4,56
   11e1c:	20807e16 	blt	r4,r2,12018 <__subdf3+0x69c>
   11e20:	010007c4 	movi	r4,31
   11e24:	2080e716 	blt	r4,r2,121c4 <__subdf3+0x848>
   11e28:	01000804 	movi	r4,32
   11e2c:	2089c83a 	sub	r4,r4,r2
   11e30:	1914983a 	sll	r10,r3,r4
   11e34:	8890d83a 	srl	r8,r17,r2
   11e38:	8908983a 	sll	r4,r17,r4
   11e3c:	1884d83a 	srl	r2,r3,r2
   11e40:	5222b03a 	or	r17,r10,r8
   11e44:	2006c03a 	cmpne	r3,r4,zero
   11e48:	88e2b03a 	or	r17,r17,r3
   11e4c:	3463c83a 	sub	r17,r6,r17
   11e50:	2885c83a 	sub	r2,r5,r2
   11e54:	344d803a 	cmpltu	r6,r6,r17
   11e58:	1187c83a 	sub	r3,r2,r6
   11e5c:	4821883a 	mov	r16,r9
   11e60:	3825883a 	mov	r18,r7
   11e64:	003f2306 	br	11af4 <__alt_data_end+0xf8011af4>
   11e68:	24d0b03a 	or	r8,r4,r19
   11e6c:	40001b1e 	bne	r8,zero,11edc <__subdf3+0x560>
   11e70:	0005883a 	mov	r2,zero
   11e74:	0009883a 	mov	r4,zero
   11e78:	0021883a 	mov	r16,zero
   11e7c:	003f4906 	br	11ba4 <__alt_data_end+0xf8011ba4>
   11e80:	010007c4 	movi	r4,31
   11e84:	20803a16 	blt	r4,r2,11f70 <__subdf3+0x5f4>
   11e88:	01000804 	movi	r4,32
   11e8c:	2089c83a 	sub	r4,r4,r2
   11e90:	2912983a 	sll	r9,r5,r4
   11e94:	3090d83a 	srl	r8,r6,r2
   11e98:	3108983a 	sll	r4,r6,r4
   11e9c:	2884d83a 	srl	r2,r5,r2
   11ea0:	4a12b03a 	or	r9,r9,r8
   11ea4:	2008c03a 	cmpne	r4,r4,zero
   11ea8:	4912b03a 	or	r9,r9,r4
   11eac:	003f4e06 	br	11be8 <__alt_data_end+0xf8011be8>
   11eb0:	1c48b03a 	or	r4,r3,r17
   11eb4:	20003c26 	beq	r4,zero,11fa8 <__subdf3+0x62c>
   11eb8:	0084303a 	nor	r2,zero,r2
   11ebc:	1000381e 	bne	r2,zero,11fa0 <__subdf3+0x624>
   11ec0:	3463c83a 	sub	r17,r6,r17
   11ec4:	28c5c83a 	sub	r2,r5,r3
   11ec8:	344d803a 	cmpltu	r6,r6,r17
   11ecc:	1187c83a 	sub	r3,r2,r6
   11ed0:	4821883a 	mov	r16,r9
   11ed4:	3825883a 	mov	r18,r7
   11ed8:	003f0606 	br	11af4 <__alt_data_end+0xf8011af4>
   11edc:	2023883a 	mov	r17,r4
   11ee0:	003f0906 	br	11b08 <__alt_data_end+0xf8011b08>
   11ee4:	0101ffc4 	movi	r4,2047
   11ee8:	813f3a1e 	bne	r16,r4,11bd4 <__alt_data_end+0xf8011bd4>
   11eec:	003ec406 	br	11a00 <__alt_data_end+0xf8011a00>
   11ef0:	0005883a 	mov	r2,zero
   11ef4:	003fb106 	br	11dbc <__alt_data_end+0xf8011dbc>
   11ef8:	0005883a 	mov	r2,zero
   11efc:	003fbc06 	br	11df0 <__alt_data_end+0xf8011df0>
   11f00:	1c44b03a 	or	r2,r3,r17
   11f04:	80008e1e 	bne	r16,zero,12140 <__subdf3+0x7c4>
   11f08:	1000c826 	beq	r2,zero,1222c <__subdf3+0x8b0>
   11f0c:	2984b03a 	or	r2,r5,r6
   11f10:	103ebb26 	beq	r2,zero,11a00 <__alt_data_end+0xf8011a00>
   11f14:	8989883a 	add	r4,r17,r6
   11f18:	1945883a 	add	r2,r3,r5
   11f1c:	2447803a 	cmpltu	r3,r4,r17
   11f20:	1887883a 	add	r3,r3,r2
   11f24:	1880202c 	andhi	r2,r3,128
   11f28:	2023883a 	mov	r17,r4
   11f2c:	103f1626 	beq	r2,zero,11b88 <__alt_data_end+0xf8011b88>
   11f30:	00bfe034 	movhi	r2,65408
   11f34:	10bfffc4 	addi	r2,r2,-1
   11f38:	5021883a 	mov	r16,r10
   11f3c:	1886703a 	and	r3,r3,r2
   11f40:	003eaf06 	br	11a00 <__alt_data_end+0xf8011a00>
   11f44:	3825883a 	mov	r18,r7
   11f48:	003f0f06 	br	11b88 <__alt_data_end+0xf8011b88>
   11f4c:	1c44b03a 	or	r2,r3,r17
   11f50:	8000251e 	bne	r16,zero,11fe8 <__subdf3+0x66c>
   11f54:	1000661e 	bne	r2,zero,120f0 <__subdf3+0x774>
   11f58:	2990b03a 	or	r8,r5,r6
   11f5c:	40009626 	beq	r8,zero,121b8 <__subdf3+0x83c>
   11f60:	2807883a 	mov	r3,r5
   11f64:	3023883a 	mov	r17,r6
   11f68:	3825883a 	mov	r18,r7
   11f6c:	003ea406 	br	11a00 <__alt_data_end+0xf8011a00>
   11f70:	127ff804 	addi	r9,r2,-32
   11f74:	01000804 	movi	r4,32
   11f78:	2a52d83a 	srl	r9,r5,r9
   11f7c:	11008c26 	beq	r2,r4,121b0 <__subdf3+0x834>
   11f80:	01001004 	movi	r4,64
   11f84:	2085c83a 	sub	r2,r4,r2
   11f88:	2884983a 	sll	r2,r5,r2
   11f8c:	118cb03a 	or	r6,r2,r6
   11f90:	300cc03a 	cmpne	r6,r6,zero
   11f94:	4992b03a 	or	r9,r9,r6
   11f98:	0005883a 	mov	r2,zero
   11f9c:	003f1206 	br	11be8 <__alt_data_end+0xf8011be8>
   11fa0:	0101ffc4 	movi	r4,2047
   11fa4:	493f9c1e 	bne	r9,r4,11e18 <__alt_data_end+0xf8011e18>
   11fa8:	2807883a 	mov	r3,r5
   11fac:	3023883a 	mov	r17,r6
   11fb0:	4821883a 	mov	r16,r9
   11fb4:	3825883a 	mov	r18,r7
   11fb8:	003e9106 	br	11a00 <__alt_data_end+0xf8011a00>
   11fbc:	80001f1e 	bne	r16,zero,1203c <__subdf3+0x6c0>
   11fc0:	1c48b03a 	or	r4,r3,r17
   11fc4:	20005a26 	beq	r4,zero,12130 <__subdf3+0x7b4>
   11fc8:	0084303a 	nor	r2,zero,r2
   11fcc:	1000561e 	bne	r2,zero,12128 <__subdf3+0x7ac>
   11fd0:	89a3883a 	add	r17,r17,r6
   11fd4:	1945883a 	add	r2,r3,r5
   11fd8:	898d803a 	cmpltu	r6,r17,r6
   11fdc:	3087883a 	add	r3,r6,r2
   11fe0:	4821883a 	mov	r16,r9
   11fe4:	003f0506 	br	11bfc <__alt_data_end+0xf8011bfc>
   11fe8:	10002b1e 	bne	r2,zero,12098 <__subdf3+0x71c>
   11fec:	2984b03a 	or	r2,r5,r6
   11ff0:	10008026 	beq	r2,zero,121f4 <__subdf3+0x878>
   11ff4:	2807883a 	mov	r3,r5
   11ff8:	3023883a 	mov	r17,r6
   11ffc:	3825883a 	mov	r18,r7
   12000:	0401ffc4 	movi	r16,2047
   12004:	003e7e06 	br	11a00 <__alt_data_end+0xf8011a00>
   12008:	3809883a 	mov	r4,r7
   1200c:	0011883a 	mov	r8,zero
   12010:	0005883a 	mov	r2,zero
   12014:	003ee306 	br	11ba4 <__alt_data_end+0xf8011ba4>
   12018:	1c62b03a 	or	r17,r3,r17
   1201c:	8822c03a 	cmpne	r17,r17,zero
   12020:	0005883a 	mov	r2,zero
   12024:	003f8906 	br	11e4c <__alt_data_end+0xf8011e4c>
   12028:	3809883a 	mov	r4,r7
   1202c:	4821883a 	mov	r16,r9
   12030:	0011883a 	mov	r8,zero
   12034:	0005883a 	mov	r2,zero
   12038:	003eda06 	br	11ba4 <__alt_data_end+0xf8011ba4>
   1203c:	0101ffc4 	movi	r4,2047
   12040:	49003b26 	beq	r9,r4,12130 <__subdf3+0x7b4>
   12044:	0085c83a 	sub	r2,zero,r2
   12048:	18c02034 	orhi	r3,r3,128
   1204c:	01000e04 	movi	r4,56
   12050:	20806e16 	blt	r4,r2,1220c <__subdf3+0x890>
   12054:	010007c4 	movi	r4,31
   12058:	20807716 	blt	r4,r2,12238 <__subdf3+0x8bc>
   1205c:	01000804 	movi	r4,32
   12060:	2089c83a 	sub	r4,r4,r2
   12064:	1914983a 	sll	r10,r3,r4
   12068:	8890d83a 	srl	r8,r17,r2
   1206c:	8908983a 	sll	r4,r17,r4
   12070:	1884d83a 	srl	r2,r3,r2
   12074:	5222b03a 	or	r17,r10,r8
   12078:	2006c03a 	cmpne	r3,r4,zero
   1207c:	88e2b03a 	or	r17,r17,r3
   12080:	89a3883a 	add	r17,r17,r6
   12084:	1145883a 	add	r2,r2,r5
   12088:	898d803a 	cmpltu	r6,r17,r6
   1208c:	3087883a 	add	r3,r6,r2
   12090:	4821883a 	mov	r16,r9
   12094:	003ed906 	br	11bfc <__alt_data_end+0xf8011bfc>
   12098:	2984b03a 	or	r2,r5,r6
   1209c:	10004226 	beq	r2,zero,121a8 <__subdf3+0x82c>
   120a0:	1808d0fa 	srli	r4,r3,3
   120a4:	8822d0fa 	srli	r17,r17,3
   120a8:	1806977a 	slli	r3,r3,29
   120ac:	2080022c 	andhi	r2,r4,8
   120b0:	1c62b03a 	or	r17,r3,r17
   120b4:	10000826 	beq	r2,zero,120d8 <__subdf3+0x75c>
   120b8:	2812d0fa 	srli	r9,r5,3
   120bc:	4880022c 	andhi	r2,r9,8
   120c0:	1000051e 	bne	r2,zero,120d8 <__subdf3+0x75c>
   120c4:	300cd0fa 	srli	r6,r6,3
   120c8:	2804977a 	slli	r2,r5,29
   120cc:	4809883a 	mov	r4,r9
   120d0:	3825883a 	mov	r18,r7
   120d4:	11a2b03a 	or	r17,r2,r6
   120d8:	8806d77a 	srli	r3,r17,29
   120dc:	200890fa 	slli	r4,r4,3
   120e0:	882290fa 	slli	r17,r17,3
   120e4:	0401ffc4 	movi	r16,2047
   120e8:	1906b03a 	or	r3,r3,r4
   120ec:	003e4406 	br	11a00 <__alt_data_end+0xf8011a00>
   120f0:	2984b03a 	or	r2,r5,r6
   120f4:	103e4226 	beq	r2,zero,11a00 <__alt_data_end+0xf8011a00>
   120f8:	8989c83a 	sub	r4,r17,r6
   120fc:	8911803a 	cmpltu	r8,r17,r4
   12100:	1945c83a 	sub	r2,r3,r5
   12104:	1205c83a 	sub	r2,r2,r8
   12108:	1200202c 	andhi	r8,r2,128
   1210c:	403e9a26 	beq	r8,zero,11b78 <__alt_data_end+0xf8011b78>
   12110:	3463c83a 	sub	r17,r6,r17
   12114:	28c5c83a 	sub	r2,r5,r3
   12118:	344d803a 	cmpltu	r6,r6,r17
   1211c:	1187c83a 	sub	r3,r2,r6
   12120:	3825883a 	mov	r18,r7
   12124:	003e3606 	br	11a00 <__alt_data_end+0xf8011a00>
   12128:	0101ffc4 	movi	r4,2047
   1212c:	493fc71e 	bne	r9,r4,1204c <__alt_data_end+0xf801204c>
   12130:	2807883a 	mov	r3,r5
   12134:	3023883a 	mov	r17,r6
   12138:	4821883a 	mov	r16,r9
   1213c:	003e3006 	br	11a00 <__alt_data_end+0xf8011a00>
   12140:	10003626 	beq	r2,zero,1221c <__subdf3+0x8a0>
   12144:	2984b03a 	or	r2,r5,r6
   12148:	10001726 	beq	r2,zero,121a8 <__subdf3+0x82c>
   1214c:	1808d0fa 	srli	r4,r3,3
   12150:	8822d0fa 	srli	r17,r17,3
   12154:	1806977a 	slli	r3,r3,29
   12158:	2080022c 	andhi	r2,r4,8
   1215c:	1c62b03a 	or	r17,r3,r17
   12160:	10000726 	beq	r2,zero,12180 <__subdf3+0x804>
   12164:	2812d0fa 	srli	r9,r5,3
   12168:	4880022c 	andhi	r2,r9,8
   1216c:	1000041e 	bne	r2,zero,12180 <__subdf3+0x804>
   12170:	300cd0fa 	srli	r6,r6,3
   12174:	2804977a 	slli	r2,r5,29
   12178:	4809883a 	mov	r4,r9
   1217c:	11a2b03a 	or	r17,r2,r6
   12180:	8806d77a 	srli	r3,r17,29
   12184:	200890fa 	slli	r4,r4,3
   12188:	882290fa 	slli	r17,r17,3
   1218c:	3825883a 	mov	r18,r7
   12190:	1906b03a 	or	r3,r3,r4
   12194:	0401ffc4 	movi	r16,2047
   12198:	003e1906 	br	11a00 <__alt_data_end+0xf8011a00>
   1219c:	000b883a 	mov	r5,zero
   121a0:	0005883a 	mov	r2,zero
   121a4:	003e2e06 	br	11a60 <__alt_data_end+0xf8011a60>
   121a8:	0401ffc4 	movi	r16,2047
   121ac:	003e1406 	br	11a00 <__alt_data_end+0xf8011a00>
   121b0:	0005883a 	mov	r2,zero
   121b4:	003f7506 	br	11f8c <__alt_data_end+0xf8011f8c>
   121b8:	0005883a 	mov	r2,zero
   121bc:	0009883a 	mov	r4,zero
   121c0:	003e7806 	br	11ba4 <__alt_data_end+0xf8011ba4>
   121c4:	123ff804 	addi	r8,r2,-32
   121c8:	01000804 	movi	r4,32
   121cc:	1a10d83a 	srl	r8,r3,r8
   121d0:	11002526 	beq	r2,r4,12268 <__subdf3+0x8ec>
   121d4:	01001004 	movi	r4,64
   121d8:	2085c83a 	sub	r2,r4,r2
   121dc:	1884983a 	sll	r2,r3,r2
   121e0:	1444b03a 	or	r2,r2,r17
   121e4:	1004c03a 	cmpne	r2,r2,zero
   121e8:	40a2b03a 	or	r17,r8,r2
   121ec:	0005883a 	mov	r2,zero
   121f0:	003f1606 	br	11e4c <__alt_data_end+0xf8011e4c>
   121f4:	02000434 	movhi	r8,16
   121f8:	0009883a 	mov	r4,zero
   121fc:	423fffc4 	addi	r8,r8,-1
   12200:	00bfffc4 	movi	r2,-1
   12204:	0401ffc4 	movi	r16,2047
   12208:	003e6606 	br	11ba4 <__alt_data_end+0xf8011ba4>
   1220c:	1c62b03a 	or	r17,r3,r17
   12210:	8822c03a 	cmpne	r17,r17,zero
   12214:	0005883a 	mov	r2,zero
   12218:	003f9906 	br	12080 <__alt_data_end+0xf8012080>
   1221c:	2807883a 	mov	r3,r5
   12220:	3023883a 	mov	r17,r6
   12224:	0401ffc4 	movi	r16,2047
   12228:	003df506 	br	11a00 <__alt_data_end+0xf8011a00>
   1222c:	2807883a 	mov	r3,r5
   12230:	3023883a 	mov	r17,r6
   12234:	003df206 	br	11a00 <__alt_data_end+0xf8011a00>
   12238:	123ff804 	addi	r8,r2,-32
   1223c:	01000804 	movi	r4,32
   12240:	1a10d83a 	srl	r8,r3,r8
   12244:	11000a26 	beq	r2,r4,12270 <__subdf3+0x8f4>
   12248:	01001004 	movi	r4,64
   1224c:	2085c83a 	sub	r2,r4,r2
   12250:	1884983a 	sll	r2,r3,r2
   12254:	1444b03a 	or	r2,r2,r17
   12258:	1004c03a 	cmpne	r2,r2,zero
   1225c:	40a2b03a 	or	r17,r8,r2
   12260:	0005883a 	mov	r2,zero
   12264:	003f8606 	br	12080 <__alt_data_end+0xf8012080>
   12268:	0005883a 	mov	r2,zero
   1226c:	003fdc06 	br	121e0 <__alt_data_end+0xf80121e0>
   12270:	0005883a 	mov	r2,zero
   12274:	003ff706 	br	12254 <__alt_data_end+0xf8012254>

00012278 <__fixdfsi>:
   12278:	280cd53a 	srli	r6,r5,20
   1227c:	00c00434 	movhi	r3,16
   12280:	18ffffc4 	addi	r3,r3,-1
   12284:	3181ffcc 	andi	r6,r6,2047
   12288:	01c0ff84 	movi	r7,1022
   1228c:	28c6703a 	and	r3,r5,r3
   12290:	280ad7fa 	srli	r5,r5,31
   12294:	3980120e 	bge	r7,r6,122e0 <__fixdfsi+0x68>
   12298:	00810744 	movi	r2,1053
   1229c:	11800c16 	blt	r2,r6,122d0 <__fixdfsi+0x58>
   122a0:	00810cc4 	movi	r2,1075
   122a4:	1185c83a 	sub	r2,r2,r6
   122a8:	01c007c4 	movi	r7,31
   122ac:	18c00434 	orhi	r3,r3,16
   122b0:	38800d16 	blt	r7,r2,122e8 <__fixdfsi+0x70>
   122b4:	31befb44 	addi	r6,r6,-1043
   122b8:	2084d83a 	srl	r2,r4,r2
   122bc:	1986983a 	sll	r3,r3,r6
   122c0:	1884b03a 	or	r2,r3,r2
   122c4:	28000726 	beq	r5,zero,122e4 <__fixdfsi+0x6c>
   122c8:	0085c83a 	sub	r2,zero,r2
   122cc:	f800283a 	ret
   122d0:	00a00034 	movhi	r2,32768
   122d4:	10bfffc4 	addi	r2,r2,-1
   122d8:	2885883a 	add	r2,r5,r2
   122dc:	f800283a 	ret
   122e0:	0005883a 	mov	r2,zero
   122e4:	f800283a 	ret
   122e8:	008104c4 	movi	r2,1043
   122ec:	1185c83a 	sub	r2,r2,r6
   122f0:	1884d83a 	srl	r2,r3,r2
   122f4:	003ff306 	br	122c4 <__alt_data_end+0xf80122c4>

000122f8 <__floatsidf>:
   122f8:	defffd04 	addi	sp,sp,-12
   122fc:	dfc00215 	stw	ra,8(sp)
   12300:	dc400115 	stw	r17,4(sp)
   12304:	dc000015 	stw	r16,0(sp)
   12308:	20002b26 	beq	r4,zero,123b8 <__floatsidf+0xc0>
   1230c:	2023883a 	mov	r17,r4
   12310:	2020d7fa 	srli	r16,r4,31
   12314:	20002d16 	blt	r4,zero,123cc <__floatsidf+0xd4>
   12318:	8809883a 	mov	r4,r17
   1231c:	001247c0 	call	1247c <__clzsi2>
   12320:	01410784 	movi	r5,1054
   12324:	288bc83a 	sub	r5,r5,r2
   12328:	01010cc4 	movi	r4,1075
   1232c:	2149c83a 	sub	r4,r4,r5
   12330:	00c007c4 	movi	r3,31
   12334:	1900160e 	bge	r3,r4,12390 <__floatsidf+0x98>
   12338:	00c104c4 	movi	r3,1043
   1233c:	1947c83a 	sub	r3,r3,r5
   12340:	88c6983a 	sll	r3,r17,r3
   12344:	00800434 	movhi	r2,16
   12348:	10bfffc4 	addi	r2,r2,-1
   1234c:	1886703a 	and	r3,r3,r2
   12350:	2941ffcc 	andi	r5,r5,2047
   12354:	800d883a 	mov	r6,r16
   12358:	0005883a 	mov	r2,zero
   1235c:	280a953a 	slli	r5,r5,20
   12360:	31803fcc 	andi	r6,r6,255
   12364:	01000434 	movhi	r4,16
   12368:	300c97fa 	slli	r6,r6,31
   1236c:	213fffc4 	addi	r4,r4,-1
   12370:	1906703a 	and	r3,r3,r4
   12374:	1946b03a 	or	r3,r3,r5
   12378:	1986b03a 	or	r3,r3,r6
   1237c:	dfc00217 	ldw	ra,8(sp)
   12380:	dc400117 	ldw	r17,4(sp)
   12384:	dc000017 	ldw	r16,0(sp)
   12388:	dec00304 	addi	sp,sp,12
   1238c:	f800283a 	ret
   12390:	00c002c4 	movi	r3,11
   12394:	1887c83a 	sub	r3,r3,r2
   12398:	88c6d83a 	srl	r3,r17,r3
   1239c:	8904983a 	sll	r2,r17,r4
   123a0:	01000434 	movhi	r4,16
   123a4:	213fffc4 	addi	r4,r4,-1
   123a8:	2941ffcc 	andi	r5,r5,2047
   123ac:	1906703a 	and	r3,r3,r4
   123b0:	800d883a 	mov	r6,r16
   123b4:	003fe906 	br	1235c <__alt_data_end+0xf801235c>
   123b8:	000d883a 	mov	r6,zero
   123bc:	000b883a 	mov	r5,zero
   123c0:	0007883a 	mov	r3,zero
   123c4:	0005883a 	mov	r2,zero
   123c8:	003fe406 	br	1235c <__alt_data_end+0xf801235c>
   123cc:	0123c83a 	sub	r17,zero,r4
   123d0:	003fd106 	br	12318 <__alt_data_end+0xf8012318>

000123d4 <__floatunsidf>:
   123d4:	defffe04 	addi	sp,sp,-8
   123d8:	dc000015 	stw	r16,0(sp)
   123dc:	dfc00115 	stw	ra,4(sp)
   123e0:	2021883a 	mov	r16,r4
   123e4:	20002226 	beq	r4,zero,12470 <__floatunsidf+0x9c>
   123e8:	001247c0 	call	1247c <__clzsi2>
   123ec:	01010784 	movi	r4,1054
   123f0:	2089c83a 	sub	r4,r4,r2
   123f4:	01810cc4 	movi	r6,1075
   123f8:	310dc83a 	sub	r6,r6,r4
   123fc:	00c007c4 	movi	r3,31
   12400:	1980120e 	bge	r3,r6,1244c <__floatunsidf+0x78>
   12404:	00c104c4 	movi	r3,1043
   12408:	1907c83a 	sub	r3,r3,r4
   1240c:	80ca983a 	sll	r5,r16,r3
   12410:	00800434 	movhi	r2,16
   12414:	10bfffc4 	addi	r2,r2,-1
   12418:	2101ffcc 	andi	r4,r4,2047
   1241c:	0021883a 	mov	r16,zero
   12420:	288a703a 	and	r5,r5,r2
   12424:	2008953a 	slli	r4,r4,20
   12428:	00c00434 	movhi	r3,16
   1242c:	18ffffc4 	addi	r3,r3,-1
   12430:	28c6703a 	and	r3,r5,r3
   12434:	8005883a 	mov	r2,r16
   12438:	1906b03a 	or	r3,r3,r4
   1243c:	dfc00117 	ldw	ra,4(sp)
   12440:	dc000017 	ldw	r16,0(sp)
   12444:	dec00204 	addi	sp,sp,8
   12448:	f800283a 	ret
   1244c:	00c002c4 	movi	r3,11
   12450:	188bc83a 	sub	r5,r3,r2
   12454:	814ad83a 	srl	r5,r16,r5
   12458:	00c00434 	movhi	r3,16
   1245c:	18ffffc4 	addi	r3,r3,-1
   12460:	81a0983a 	sll	r16,r16,r6
   12464:	2101ffcc 	andi	r4,r4,2047
   12468:	28ca703a 	and	r5,r5,r3
   1246c:	003fed06 	br	12424 <__alt_data_end+0xf8012424>
   12470:	0009883a 	mov	r4,zero
   12474:	000b883a 	mov	r5,zero
   12478:	003fea06 	br	12424 <__alt_data_end+0xf8012424>

0001247c <__clzsi2>:
   1247c:	00bfffd4 	movui	r2,65535
   12480:	11000536 	bltu	r2,r4,12498 <__clzsi2+0x1c>
   12484:	00803fc4 	movi	r2,255
   12488:	11000f36 	bltu	r2,r4,124c8 <__clzsi2+0x4c>
   1248c:	00800804 	movi	r2,32
   12490:	0007883a 	mov	r3,zero
   12494:	00000506 	br	124ac <__clzsi2+0x30>
   12498:	00804034 	movhi	r2,256
   1249c:	10bfffc4 	addi	r2,r2,-1
   124a0:	11000c2e 	bgeu	r2,r4,124d4 <__clzsi2+0x58>
   124a4:	00800204 	movi	r2,8
   124a8:	00c00604 	movi	r3,24
   124ac:	20c8d83a 	srl	r4,r4,r3
   124b0:	00c00074 	movhi	r3,1
   124b4:	18d81e04 	addi	r3,r3,24696
   124b8:	1909883a 	add	r4,r3,r4
   124bc:	20c00003 	ldbu	r3,0(r4)
   124c0:	10c5c83a 	sub	r2,r2,r3
   124c4:	f800283a 	ret
   124c8:	00800604 	movi	r2,24
   124cc:	00c00204 	movi	r3,8
   124d0:	003ff606 	br	124ac <__alt_data_end+0xf80124ac>
   124d4:	00800404 	movi	r2,16
   124d8:	1007883a 	mov	r3,r2
   124dc:	003ff306 	br	124ac <__alt_data_end+0xf80124ac>

000124e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   124e0:	defffe04 	addi	sp,sp,-8
   124e4:	dfc00115 	stw	ra,4(sp)
   124e8:	df000015 	stw	fp,0(sp)
   124ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   124f0:	d0a00c17 	ldw	r2,-32720(gp)
   124f4:	10000326 	beq	r2,zero,12504 <alt_get_errno+0x24>
   124f8:	d0a00c17 	ldw	r2,-32720(gp)
   124fc:	103ee83a 	callr	r2
   12500:	00000106 	br	12508 <alt_get_errno+0x28>
   12504:	d0a73104 	addi	r2,gp,-25404
}
   12508:	e037883a 	mov	sp,fp
   1250c:	dfc00117 	ldw	ra,4(sp)
   12510:	df000017 	ldw	fp,0(sp)
   12514:	dec00204 	addi	sp,sp,8
   12518:	f800283a 	ret

0001251c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1251c:	defffb04 	addi	sp,sp,-20
   12520:	dfc00415 	stw	ra,16(sp)
   12524:	df000315 	stw	fp,12(sp)
   12528:	df000304 	addi	fp,sp,12
   1252c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12530:	e0bfff17 	ldw	r2,-4(fp)
   12534:	10000816 	blt	r2,zero,12558 <close+0x3c>
   12538:	01400304 	movi	r5,12
   1253c:	e13fff17 	ldw	r4,-4(fp)
   12540:	000fc140 	call	fc14 <__mulsi3>
   12544:	1007883a 	mov	r3,r2
   12548:	00800074 	movhi	r2,1
   1254c:	109b5504 	addi	r2,r2,27988
   12550:	1885883a 	add	r2,r3,r2
   12554:	00000106 	br	1255c <close+0x40>
   12558:	0005883a 	mov	r2,zero
   1255c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12560:	e0bffd17 	ldw	r2,-12(fp)
   12564:	10001926 	beq	r2,zero,125cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12568:	e0bffd17 	ldw	r2,-12(fp)
   1256c:	10800017 	ldw	r2,0(r2)
   12570:	10800417 	ldw	r2,16(r2)
   12574:	10000626 	beq	r2,zero,12590 <close+0x74>
   12578:	e0bffd17 	ldw	r2,-12(fp)
   1257c:	10800017 	ldw	r2,0(r2)
   12580:	10800417 	ldw	r2,16(r2)
   12584:	e13ffd17 	ldw	r4,-12(fp)
   12588:	103ee83a 	callr	r2
   1258c:	00000106 	br	12594 <close+0x78>
   12590:	0005883a 	mov	r2,zero
   12594:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12598:	e13fff17 	ldw	r4,-4(fp)
   1259c:	00131280 	call	13128 <alt_release_fd>
    if (rval < 0)
   125a0:	e0bffe17 	ldw	r2,-8(fp)
   125a4:	1000070e 	bge	r2,zero,125c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   125a8:	00124e00 	call	124e0 <alt_get_errno>
   125ac:	1007883a 	mov	r3,r2
   125b0:	e0bffe17 	ldw	r2,-8(fp)
   125b4:	0085c83a 	sub	r2,zero,r2
   125b8:	18800015 	stw	r2,0(r3)
      return -1;
   125bc:	00bfffc4 	movi	r2,-1
   125c0:	00000706 	br	125e0 <close+0xc4>
    }
    return 0;
   125c4:	0005883a 	mov	r2,zero
   125c8:	00000506 	br	125e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   125cc:	00124e00 	call	124e0 <alt_get_errno>
   125d0:	1007883a 	mov	r3,r2
   125d4:	00801444 	movi	r2,81
   125d8:	18800015 	stw	r2,0(r3)
    return -1;
   125dc:	00bfffc4 	movi	r2,-1
  }
}
   125e0:	e037883a 	mov	sp,fp
   125e4:	dfc00117 	ldw	ra,4(sp)
   125e8:	df000017 	ldw	fp,0(sp)
   125ec:	dec00204 	addi	sp,sp,8
   125f0:	f800283a 	ret

000125f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   125f4:	defffc04 	addi	sp,sp,-16
   125f8:	df000315 	stw	fp,12(sp)
   125fc:	df000304 	addi	fp,sp,12
   12600:	e13ffd15 	stw	r4,-12(fp)
   12604:	e17ffe15 	stw	r5,-8(fp)
   12608:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1260c:	e0bfff17 	ldw	r2,-4(fp)
}
   12610:	e037883a 	mov	sp,fp
   12614:	df000017 	ldw	fp,0(sp)
   12618:	dec00104 	addi	sp,sp,4
   1261c:	f800283a 	ret

00012620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12620:	defffe04 	addi	sp,sp,-8
   12624:	dfc00115 	stw	ra,4(sp)
   12628:	df000015 	stw	fp,0(sp)
   1262c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12630:	d0a00c17 	ldw	r2,-32720(gp)
   12634:	10000326 	beq	r2,zero,12644 <alt_get_errno+0x24>
   12638:	d0a00c17 	ldw	r2,-32720(gp)
   1263c:	103ee83a 	callr	r2
   12640:	00000106 	br	12648 <alt_get_errno+0x28>
   12644:	d0a73104 	addi	r2,gp,-25404
}
   12648:	e037883a 	mov	sp,fp
   1264c:	dfc00117 	ldw	ra,4(sp)
   12650:	df000017 	ldw	fp,0(sp)
   12654:	dec00204 	addi	sp,sp,8
   12658:	f800283a 	ret

0001265c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1265c:	defffb04 	addi	sp,sp,-20
   12660:	dfc00415 	stw	ra,16(sp)
   12664:	df000315 	stw	fp,12(sp)
   12668:	df000304 	addi	fp,sp,12
   1266c:	e13ffe15 	stw	r4,-8(fp)
   12670:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12674:	e0bffe17 	ldw	r2,-8(fp)
   12678:	10000816 	blt	r2,zero,1269c <fstat+0x40>
   1267c:	01400304 	movi	r5,12
   12680:	e13ffe17 	ldw	r4,-8(fp)
   12684:	000fc140 	call	fc14 <__mulsi3>
   12688:	1007883a 	mov	r3,r2
   1268c:	00800074 	movhi	r2,1
   12690:	109b5504 	addi	r2,r2,27988
   12694:	1885883a 	add	r2,r3,r2
   12698:	00000106 	br	126a0 <fstat+0x44>
   1269c:	0005883a 	mov	r2,zero
   126a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   126a4:	e0bffd17 	ldw	r2,-12(fp)
   126a8:	10001026 	beq	r2,zero,126ec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   126ac:	e0bffd17 	ldw	r2,-12(fp)
   126b0:	10800017 	ldw	r2,0(r2)
   126b4:	10800817 	ldw	r2,32(r2)
   126b8:	10000726 	beq	r2,zero,126d8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   126bc:	e0bffd17 	ldw	r2,-12(fp)
   126c0:	10800017 	ldw	r2,0(r2)
   126c4:	10800817 	ldw	r2,32(r2)
   126c8:	e17fff17 	ldw	r5,-4(fp)
   126cc:	e13ffd17 	ldw	r4,-12(fp)
   126d0:	103ee83a 	callr	r2
   126d4:	00000a06 	br	12700 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   126d8:	e0bfff17 	ldw	r2,-4(fp)
   126dc:	00c80004 	movi	r3,8192
   126e0:	10c00115 	stw	r3,4(r2)
      return 0;
   126e4:	0005883a 	mov	r2,zero
   126e8:	00000506 	br	12700 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   126ec:	00126200 	call	12620 <alt_get_errno>
   126f0:	1007883a 	mov	r3,r2
   126f4:	00801444 	movi	r2,81
   126f8:	18800015 	stw	r2,0(r3)
    return -1;
   126fc:	00bfffc4 	movi	r2,-1
  }
}
   12700:	e037883a 	mov	sp,fp
   12704:	dfc00117 	ldw	ra,4(sp)
   12708:	df000017 	ldw	fp,0(sp)
   1270c:	dec00204 	addi	sp,sp,8
   12710:	f800283a 	ret

00012714 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12714:	defff904 	addi	sp,sp,-28
   12718:	dfc00615 	stw	ra,24(sp)
   1271c:	df000515 	stw	fp,20(sp)
   12720:	df000504 	addi	fp,sp,20
   12724:	e13ffc15 	stw	r4,-16(fp)
   12728:	e17ffd15 	stw	r5,-12(fp)
   1272c:	e1bffe15 	stw	r6,-8(fp)
   12730:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12734:	e0800217 	ldw	r2,8(fp)
   12738:	d8800015 	stw	r2,0(sp)
   1273c:	e1ffff17 	ldw	r7,-4(fp)
   12740:	e1bffe17 	ldw	r6,-8(fp)
   12744:	e17ffd17 	ldw	r5,-12(fp)
   12748:	e13ffc17 	ldw	r4,-16(fp)
   1274c:	00128c40 	call	128c4 <alt_iic_isr_register>
}  
   12750:	e037883a 	mov	sp,fp
   12754:	dfc00117 	ldw	ra,4(sp)
   12758:	df000017 	ldw	fp,0(sp)
   1275c:	dec00204 	addi	sp,sp,8
   12760:	f800283a 	ret

00012764 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12764:	defff904 	addi	sp,sp,-28
   12768:	df000615 	stw	fp,24(sp)
   1276c:	df000604 	addi	fp,sp,24
   12770:	e13ffe15 	stw	r4,-8(fp)
   12774:	e17fff15 	stw	r5,-4(fp)
   12778:	e0bfff17 	ldw	r2,-4(fp)
   1277c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12780:	0005303a 	rdctl	r2,status
   12784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12788:	e0fffb17 	ldw	r3,-20(fp)
   1278c:	00bfff84 	movi	r2,-2
   12790:	1884703a 	and	r2,r3,r2
   12794:	1001703a 	wrctl	status,r2
  
  return context;
   12798:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1279c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   127a0:	00c00044 	movi	r3,1
   127a4:	e0bffa17 	ldw	r2,-24(fp)
   127a8:	1884983a 	sll	r2,r3,r2
   127ac:	1007883a 	mov	r3,r2
   127b0:	d0a73817 	ldw	r2,-25376(gp)
   127b4:	1884b03a 	or	r2,r3,r2
   127b8:	d0a73815 	stw	r2,-25376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   127bc:	d0a73817 	ldw	r2,-25376(gp)
   127c0:	100170fa 	wrctl	ienable,r2
   127c4:	e0bffc17 	ldw	r2,-16(fp)
   127c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127cc:	e0bffd17 	ldw	r2,-12(fp)
   127d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   127d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   127d8:	0001883a 	nop
}
   127dc:	e037883a 	mov	sp,fp
   127e0:	df000017 	ldw	fp,0(sp)
   127e4:	dec00104 	addi	sp,sp,4
   127e8:	f800283a 	ret

000127ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   127ec:	defff904 	addi	sp,sp,-28
   127f0:	df000615 	stw	fp,24(sp)
   127f4:	df000604 	addi	fp,sp,24
   127f8:	e13ffe15 	stw	r4,-8(fp)
   127fc:	e17fff15 	stw	r5,-4(fp)
   12800:	e0bfff17 	ldw	r2,-4(fp)
   12804:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12808:	0005303a 	rdctl	r2,status
   1280c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12810:	e0fffb17 	ldw	r3,-20(fp)
   12814:	00bfff84 	movi	r2,-2
   12818:	1884703a 	and	r2,r3,r2
   1281c:	1001703a 	wrctl	status,r2
  
  return context;
   12820:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12824:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12828:	00c00044 	movi	r3,1
   1282c:	e0bffa17 	ldw	r2,-24(fp)
   12830:	1884983a 	sll	r2,r3,r2
   12834:	0084303a 	nor	r2,zero,r2
   12838:	1007883a 	mov	r3,r2
   1283c:	d0a73817 	ldw	r2,-25376(gp)
   12840:	1884703a 	and	r2,r3,r2
   12844:	d0a73815 	stw	r2,-25376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12848:	d0a73817 	ldw	r2,-25376(gp)
   1284c:	100170fa 	wrctl	ienable,r2
   12850:	e0bffc17 	ldw	r2,-16(fp)
   12854:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12858:	e0bffd17 	ldw	r2,-12(fp)
   1285c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12860:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   12864:	0001883a 	nop
}
   12868:	e037883a 	mov	sp,fp
   1286c:	df000017 	ldw	fp,0(sp)
   12870:	dec00104 	addi	sp,sp,4
   12874:	f800283a 	ret

00012878 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12878:	defffc04 	addi	sp,sp,-16
   1287c:	df000315 	stw	fp,12(sp)
   12880:	df000304 	addi	fp,sp,12
   12884:	e13ffe15 	stw	r4,-8(fp)
   12888:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1288c:	000530fa 	rdctl	r2,ienable
   12890:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12894:	00c00044 	movi	r3,1
   12898:	e0bfff17 	ldw	r2,-4(fp)
   1289c:	1884983a 	sll	r2,r3,r2
   128a0:	1007883a 	mov	r3,r2
   128a4:	e0bffd17 	ldw	r2,-12(fp)
   128a8:	1884703a 	and	r2,r3,r2
   128ac:	1004c03a 	cmpne	r2,r2,zero
   128b0:	10803fcc 	andi	r2,r2,255
}
   128b4:	e037883a 	mov	sp,fp
   128b8:	df000017 	ldw	fp,0(sp)
   128bc:	dec00104 	addi	sp,sp,4
   128c0:	f800283a 	ret

000128c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   128c4:	defff504 	addi	sp,sp,-44
   128c8:	dfc00a15 	stw	ra,40(sp)
   128cc:	df000915 	stw	fp,36(sp)
   128d0:	df000904 	addi	fp,sp,36
   128d4:	e13ffc15 	stw	r4,-16(fp)
   128d8:	e17ffd15 	stw	r5,-12(fp)
   128dc:	e1bffe15 	stw	r6,-8(fp)
   128e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   128e4:	00bffa84 	movi	r2,-22
   128e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   128ec:	e0bffd17 	ldw	r2,-12(fp)
   128f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   128f4:	e0bff817 	ldw	r2,-32(fp)
   128f8:	10800808 	cmpgei	r2,r2,32
   128fc:	1000271e 	bne	r2,zero,1299c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12900:	0005303a 	rdctl	r2,status
   12904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12908:	e0fffb17 	ldw	r3,-20(fp)
   1290c:	00bfff84 	movi	r2,-2
   12910:	1884703a 	and	r2,r3,r2
   12914:	1001703a 	wrctl	status,r2
  
  return context;
   12918:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1291c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   12920:	008000b4 	movhi	r2,2
   12924:	10a76004 	addi	r2,r2,-25216
   12928:	e0fff817 	ldw	r3,-32(fp)
   1292c:	180690fa 	slli	r3,r3,3
   12930:	10c5883a 	add	r2,r2,r3
   12934:	e0fffe17 	ldw	r3,-8(fp)
   12938:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1293c:	008000b4 	movhi	r2,2
   12940:	10a76004 	addi	r2,r2,-25216
   12944:	e0fff817 	ldw	r3,-32(fp)
   12948:	180690fa 	slli	r3,r3,3
   1294c:	10c5883a 	add	r2,r2,r3
   12950:	10800104 	addi	r2,r2,4
   12954:	e0ffff17 	ldw	r3,-4(fp)
   12958:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1295c:	e0bffe17 	ldw	r2,-8(fp)
   12960:	10000526 	beq	r2,zero,12978 <alt_iic_isr_register+0xb4>
   12964:	e0bff817 	ldw	r2,-32(fp)
   12968:	100b883a 	mov	r5,r2
   1296c:	e13ffc17 	ldw	r4,-16(fp)
   12970:	00127640 	call	12764 <alt_ic_irq_enable>
   12974:	00000406 	br	12988 <alt_iic_isr_register+0xc4>
   12978:	e0bff817 	ldw	r2,-32(fp)
   1297c:	100b883a 	mov	r5,r2
   12980:	e13ffc17 	ldw	r4,-16(fp)
   12984:	00127ec0 	call	127ec <alt_ic_irq_disable>
   12988:	e0bff715 	stw	r2,-36(fp)
   1298c:	e0bffa17 	ldw	r2,-24(fp)
   12990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12994:	e0bff917 	ldw	r2,-28(fp)
   12998:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1299c:	e0bff717 	ldw	r2,-36(fp)
}
   129a0:	e037883a 	mov	sp,fp
   129a4:	dfc00117 	ldw	ra,4(sp)
   129a8:	df000017 	ldw	fp,0(sp)
   129ac:	dec00204 	addi	sp,sp,8
   129b0:	f800283a 	ret

000129b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   129b4:	defffe04 	addi	sp,sp,-8
   129b8:	dfc00115 	stw	ra,4(sp)
   129bc:	df000015 	stw	fp,0(sp)
   129c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   129c4:	d0a00c17 	ldw	r2,-32720(gp)
   129c8:	10000326 	beq	r2,zero,129d8 <alt_get_errno+0x24>
   129cc:	d0a00c17 	ldw	r2,-32720(gp)
   129d0:	103ee83a 	callr	r2
   129d4:	00000106 	br	129dc <alt_get_errno+0x28>
   129d8:	d0a73104 	addi	r2,gp,-25404
}
   129dc:	e037883a 	mov	sp,fp
   129e0:	dfc00117 	ldw	ra,4(sp)
   129e4:	df000017 	ldw	fp,0(sp)
   129e8:	dec00204 	addi	sp,sp,8
   129ec:	f800283a 	ret

000129f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   129f0:	deffed04 	addi	sp,sp,-76
   129f4:	dfc01215 	stw	ra,72(sp)
   129f8:	df001115 	stw	fp,68(sp)
   129fc:	df001104 	addi	fp,sp,68
   12a00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12a04:	e0bfff17 	ldw	r2,-4(fp)
   12a08:	10000816 	blt	r2,zero,12a2c <isatty+0x3c>
   12a0c:	01400304 	movi	r5,12
   12a10:	e13fff17 	ldw	r4,-4(fp)
   12a14:	000fc140 	call	fc14 <__mulsi3>
   12a18:	1007883a 	mov	r3,r2
   12a1c:	00800074 	movhi	r2,1
   12a20:	109b5504 	addi	r2,r2,27988
   12a24:	1885883a 	add	r2,r3,r2
   12a28:	00000106 	br	12a30 <isatty+0x40>
   12a2c:	0005883a 	mov	r2,zero
   12a30:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   12a34:	e0bfef17 	ldw	r2,-68(fp)
   12a38:	10000e26 	beq	r2,zero,12a74 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12a3c:	e0bfef17 	ldw	r2,-68(fp)
   12a40:	10800017 	ldw	r2,0(r2)
   12a44:	10800817 	ldw	r2,32(r2)
   12a48:	1000021e 	bne	r2,zero,12a54 <isatty+0x64>
    {
      return 1;
   12a4c:	00800044 	movi	r2,1
   12a50:	00000d06 	br	12a88 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12a54:	e0bff004 	addi	r2,fp,-64
   12a58:	100b883a 	mov	r5,r2
   12a5c:	e13fff17 	ldw	r4,-4(fp)
   12a60:	001265c0 	call	1265c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12a64:	e0bff117 	ldw	r2,-60(fp)
   12a68:	10880020 	cmpeqi	r2,r2,8192
   12a6c:	10803fcc 	andi	r2,r2,255
   12a70:	00000506 	br	12a88 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12a74:	00129b40 	call	129b4 <alt_get_errno>
   12a78:	1007883a 	mov	r3,r2
   12a7c:	00801444 	movi	r2,81
   12a80:	18800015 	stw	r2,0(r3)
    return 0;
   12a84:	0005883a 	mov	r2,zero
  }
}
   12a88:	e037883a 	mov	sp,fp
   12a8c:	dfc00117 	ldw	ra,4(sp)
   12a90:	df000017 	ldw	fp,0(sp)
   12a94:	dec00204 	addi	sp,sp,8
   12a98:	f800283a 	ret

00012a9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12a9c:	defffc04 	addi	sp,sp,-16
   12aa0:	df000315 	stw	fp,12(sp)
   12aa4:	df000304 	addi	fp,sp,12
   12aa8:	e13ffd15 	stw	r4,-12(fp)
   12aac:	e17ffe15 	stw	r5,-8(fp)
   12ab0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12ab4:	e0fffe17 	ldw	r3,-8(fp)
   12ab8:	e0bffd17 	ldw	r2,-12(fp)
   12abc:	18800c26 	beq	r3,r2,12af0 <alt_load_section+0x54>
  {
    while( to != end )
   12ac0:	00000806 	br	12ae4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12ac4:	e0bffe17 	ldw	r2,-8(fp)
   12ac8:	10c00104 	addi	r3,r2,4
   12acc:	e0fffe15 	stw	r3,-8(fp)
   12ad0:	e0fffd17 	ldw	r3,-12(fp)
   12ad4:	19000104 	addi	r4,r3,4
   12ad8:	e13ffd15 	stw	r4,-12(fp)
   12adc:	18c00017 	ldw	r3,0(r3)
   12ae0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12ae4:	e0fffe17 	ldw	r3,-8(fp)
   12ae8:	e0bfff17 	ldw	r2,-4(fp)
   12aec:	18bff51e 	bne	r3,r2,12ac4 <__alt_data_end+0xf8012ac4>
    {
      *to++ = *from++;
    }
  }
}
   12af0:	0001883a 	nop
   12af4:	e037883a 	mov	sp,fp
   12af8:	df000017 	ldw	fp,0(sp)
   12afc:	dec00104 	addi	sp,sp,4
   12b00:	f800283a 	ret

00012b04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12b04:	defffe04 	addi	sp,sp,-8
   12b08:	dfc00115 	stw	ra,4(sp)
   12b0c:	df000015 	stw	fp,0(sp)
   12b10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12b14:	018000b4 	movhi	r6,2
   12b18:	31a02804 	addi	r6,r6,-32608
   12b1c:	01400074 	movhi	r5,1
   12b20:	29590e04 	addi	r5,r5,25656
   12b24:	010000b4 	movhi	r4,2
   12b28:	21202804 	addi	r4,r4,-32608
   12b2c:	0012a9c0 	call	12a9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12b30:	01800034 	movhi	r6,0
   12b34:	31808c04 	addi	r6,r6,560
   12b38:	01400034 	movhi	r5,0
   12b3c:	29400804 	addi	r5,r5,32
   12b40:	01000034 	movhi	r4,0
   12b44:	21000804 	addi	r4,r4,32
   12b48:	0012a9c0 	call	12a9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12b4c:	01800074 	movhi	r6,1
   12b50:	31990e04 	addi	r6,r6,25656
   12b54:	01400074 	movhi	r5,1
   12b58:	29577904 	addi	r5,r5,24036
   12b5c:	01000074 	movhi	r4,1
   12b60:	21177904 	addi	r4,r4,24036
   12b64:	0012a9c0 	call	12a9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12b68:	00152500 	call	15250 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12b6c:	001566c0 	call	1566c <alt_icache_flush_all>
}
   12b70:	0001883a 	nop
   12b74:	e037883a 	mov	sp,fp
   12b78:	dfc00117 	ldw	ra,4(sp)
   12b7c:	df000017 	ldw	fp,0(sp)
   12b80:	dec00204 	addi	sp,sp,8
   12b84:	f800283a 	ret

00012b88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12b88:	defffe04 	addi	sp,sp,-8
   12b8c:	dfc00115 	stw	ra,4(sp)
   12b90:	df000015 	stw	fp,0(sp)
   12b94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12b98:	d0a00c17 	ldw	r2,-32720(gp)
   12b9c:	10000326 	beq	r2,zero,12bac <alt_get_errno+0x24>
   12ba0:	d0a00c17 	ldw	r2,-32720(gp)
   12ba4:	103ee83a 	callr	r2
   12ba8:	00000106 	br	12bb0 <alt_get_errno+0x28>
   12bac:	d0a73104 	addi	r2,gp,-25404
}
   12bb0:	e037883a 	mov	sp,fp
   12bb4:	dfc00117 	ldw	ra,4(sp)
   12bb8:	df000017 	ldw	fp,0(sp)
   12bbc:	dec00204 	addi	sp,sp,8
   12bc0:	f800283a 	ret

00012bc4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12bc4:	defff904 	addi	sp,sp,-28
   12bc8:	dfc00615 	stw	ra,24(sp)
   12bcc:	df000515 	stw	fp,20(sp)
   12bd0:	df000504 	addi	fp,sp,20
   12bd4:	e13ffd15 	stw	r4,-12(fp)
   12bd8:	e17ffe15 	stw	r5,-8(fp)
   12bdc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12be0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12be4:	e0bffd17 	ldw	r2,-12(fp)
   12be8:	10000816 	blt	r2,zero,12c0c <lseek+0x48>
   12bec:	01400304 	movi	r5,12
   12bf0:	e13ffd17 	ldw	r4,-12(fp)
   12bf4:	000fc140 	call	fc14 <__mulsi3>
   12bf8:	1007883a 	mov	r3,r2
   12bfc:	00800074 	movhi	r2,1
   12c00:	109b5504 	addi	r2,r2,27988
   12c04:	1885883a 	add	r2,r3,r2
   12c08:	00000106 	br	12c10 <lseek+0x4c>
   12c0c:	0005883a 	mov	r2,zero
   12c10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12c14:	e0bffc17 	ldw	r2,-16(fp)
   12c18:	10001026 	beq	r2,zero,12c5c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12c1c:	e0bffc17 	ldw	r2,-16(fp)
   12c20:	10800017 	ldw	r2,0(r2)
   12c24:	10800717 	ldw	r2,28(r2)
   12c28:	10000926 	beq	r2,zero,12c50 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12c2c:	e0bffc17 	ldw	r2,-16(fp)
   12c30:	10800017 	ldw	r2,0(r2)
   12c34:	10800717 	ldw	r2,28(r2)
   12c38:	e1bfff17 	ldw	r6,-4(fp)
   12c3c:	e17ffe17 	ldw	r5,-8(fp)
   12c40:	e13ffc17 	ldw	r4,-16(fp)
   12c44:	103ee83a 	callr	r2
   12c48:	e0bffb15 	stw	r2,-20(fp)
   12c4c:	00000506 	br	12c64 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12c50:	00bfde84 	movi	r2,-134
   12c54:	e0bffb15 	stw	r2,-20(fp)
   12c58:	00000206 	br	12c64 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   12c5c:	00bfebc4 	movi	r2,-81
   12c60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12c64:	e0bffb17 	ldw	r2,-20(fp)
   12c68:	1000070e 	bge	r2,zero,12c88 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   12c6c:	0012b880 	call	12b88 <alt_get_errno>
   12c70:	1007883a 	mov	r3,r2
   12c74:	e0bffb17 	ldw	r2,-20(fp)
   12c78:	0085c83a 	sub	r2,zero,r2
   12c7c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12c80:	00bfffc4 	movi	r2,-1
   12c84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12c88:	e0bffb17 	ldw	r2,-20(fp)
}
   12c8c:	e037883a 	mov	sp,fp
   12c90:	dfc00117 	ldw	ra,4(sp)
   12c94:	df000017 	ldw	fp,0(sp)
   12c98:	dec00204 	addi	sp,sp,8
   12c9c:	f800283a 	ret

00012ca0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12ca0:	defffd04 	addi	sp,sp,-12
   12ca4:	dfc00215 	stw	ra,8(sp)
   12ca8:	df000115 	stw	fp,4(sp)
   12cac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12cb0:	0009883a 	mov	r4,zero
   12cb4:	00133fc0 	call	133fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12cb8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12cbc:	00134340 	call	13434 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12cc0:	01800074 	movhi	r6,1
   12cc4:	31986104 	addi	r6,r6,24964
   12cc8:	01400074 	movhi	r5,1
   12ccc:	29586104 	addi	r5,r5,24964
   12cd0:	01000074 	movhi	r4,1
   12cd4:	21186104 	addi	r4,r4,24964
   12cd8:	001580c0 	call	1580c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12cdc:	00153500 	call	15350 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12ce0:	01000074 	movhi	r4,1
   12ce4:	2114ec04 	addi	r4,r4,21424
   12ce8:	0015a500 	call	15a50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12cec:	d0a73917 	ldw	r2,-25372(gp)
   12cf0:	d0e73a17 	ldw	r3,-25368(gp)
   12cf4:	d1273b17 	ldw	r4,-25364(gp)
   12cf8:	200d883a 	mov	r6,r4
   12cfc:	180b883a 	mov	r5,r3
   12d00:	1009883a 	mov	r4,r2
   12d04:	00005540 	call	554 <main>
   12d08:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   12d0c:	01000044 	movi	r4,1
   12d10:	001251c0 	call	1251c <close>
  exit (result);
   12d14:	e13fff17 	ldw	r4,-4(fp)
   12d18:	0015a640 	call	15a64 <exit>

00012d1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   12d1c:	defffe04 	addi	sp,sp,-8
   12d20:	df000115 	stw	fp,4(sp)
   12d24:	df000104 	addi	fp,sp,4
   12d28:	e13fff15 	stw	r4,-4(fp)
}
   12d2c:	0001883a 	nop
   12d30:	e037883a 	mov	sp,fp
   12d34:	df000017 	ldw	fp,0(sp)
   12d38:	dec00104 	addi	sp,sp,4
   12d3c:	f800283a 	ret

00012d40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   12d40:	defffe04 	addi	sp,sp,-8
   12d44:	df000115 	stw	fp,4(sp)
   12d48:	df000104 	addi	fp,sp,4
   12d4c:	e13fff15 	stw	r4,-4(fp)
}
   12d50:	0001883a 	nop
   12d54:	e037883a 	mov	sp,fp
   12d58:	df000017 	ldw	fp,0(sp)
   12d5c:	dec00104 	addi	sp,sp,4
   12d60:	f800283a 	ret

00012d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d64:	defffe04 	addi	sp,sp,-8
   12d68:	dfc00115 	stw	ra,4(sp)
   12d6c:	df000015 	stw	fp,0(sp)
   12d70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d74:	d0a00c17 	ldw	r2,-32720(gp)
   12d78:	10000326 	beq	r2,zero,12d88 <alt_get_errno+0x24>
   12d7c:	d0a00c17 	ldw	r2,-32720(gp)
   12d80:	103ee83a 	callr	r2
   12d84:	00000106 	br	12d8c <alt_get_errno+0x28>
   12d88:	d0a73104 	addi	r2,gp,-25404
}
   12d8c:	e037883a 	mov	sp,fp
   12d90:	dfc00117 	ldw	ra,4(sp)
   12d94:	df000017 	ldw	fp,0(sp)
   12d98:	dec00204 	addi	sp,sp,8
   12d9c:	f800283a 	ret

00012da0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12da0:	defffb04 	addi	sp,sp,-20
   12da4:	dfc00415 	stw	ra,16(sp)
   12da8:	df000315 	stw	fp,12(sp)
   12dac:	dc000215 	stw	r16,8(sp)
   12db0:	df000304 	addi	fp,sp,12
   12db4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12db8:	e0bffe17 	ldw	r2,-8(fp)
   12dbc:	10800217 	ldw	r2,8(r2)
   12dc0:	10d00034 	orhi	r3,r2,16384
   12dc4:	e0bffe17 	ldw	r2,-8(fp)
   12dc8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12dcc:	e03ffd15 	stw	zero,-12(fp)
   12dd0:	00002306 	br	12e60 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12dd4:	04000074 	movhi	r16,1
   12dd8:	841b5504 	addi	r16,r16,27988
   12ddc:	e0bffd17 	ldw	r2,-12(fp)
   12de0:	01400304 	movi	r5,12
   12de4:	1009883a 	mov	r4,r2
   12de8:	000fc140 	call	fc14 <__mulsi3>
   12dec:	8085883a 	add	r2,r16,r2
   12df0:	10c00017 	ldw	r3,0(r2)
   12df4:	e0bffe17 	ldw	r2,-8(fp)
   12df8:	10800017 	ldw	r2,0(r2)
   12dfc:	1880151e 	bne	r3,r2,12e54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12e00:	04000074 	movhi	r16,1
   12e04:	841b5504 	addi	r16,r16,27988
   12e08:	e0bffd17 	ldw	r2,-12(fp)
   12e0c:	01400304 	movi	r5,12
   12e10:	1009883a 	mov	r4,r2
   12e14:	000fc140 	call	fc14 <__mulsi3>
   12e18:	8085883a 	add	r2,r16,r2
   12e1c:	10800204 	addi	r2,r2,8
   12e20:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12e24:	10000b0e 	bge	r2,zero,12e54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   12e28:	01400304 	movi	r5,12
   12e2c:	e13ffd17 	ldw	r4,-12(fp)
   12e30:	000fc140 	call	fc14 <__mulsi3>
   12e34:	1007883a 	mov	r3,r2
   12e38:	00800074 	movhi	r2,1
   12e3c:	109b5504 	addi	r2,r2,27988
   12e40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12e44:	e0bffe17 	ldw	r2,-8(fp)
   12e48:	18800226 	beq	r3,r2,12e54 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12e4c:	00bffcc4 	movi	r2,-13
   12e50:	00000806 	br	12e74 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12e54:	e0bffd17 	ldw	r2,-12(fp)
   12e58:	10800044 	addi	r2,r2,1
   12e5c:	e0bffd15 	stw	r2,-12(fp)
   12e60:	d0a00b17 	ldw	r2,-32724(gp)
   12e64:	1007883a 	mov	r3,r2
   12e68:	e0bffd17 	ldw	r2,-12(fp)
   12e6c:	18bfd92e 	bgeu	r3,r2,12dd4 <__alt_data_end+0xf8012dd4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12e70:	0005883a 	mov	r2,zero
}
   12e74:	e6ffff04 	addi	sp,fp,-4
   12e78:	dfc00217 	ldw	ra,8(sp)
   12e7c:	df000117 	ldw	fp,4(sp)
   12e80:	dc000017 	ldw	r16,0(sp)
   12e84:	dec00304 	addi	sp,sp,12
   12e88:	f800283a 	ret

00012e8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12e8c:	defff604 	addi	sp,sp,-40
   12e90:	dfc00915 	stw	ra,36(sp)
   12e94:	df000815 	stw	fp,32(sp)
   12e98:	df000804 	addi	fp,sp,32
   12e9c:	e13ffd15 	stw	r4,-12(fp)
   12ea0:	e17ffe15 	stw	r5,-8(fp)
   12ea4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12ea8:	00bfffc4 	movi	r2,-1
   12eac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12eb0:	00bffb44 	movi	r2,-19
   12eb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12eb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12ebc:	d1600904 	addi	r5,gp,-32732
   12ec0:	e13ffd17 	ldw	r4,-12(fp)
   12ec4:	00154100 	call	15410 <alt_find_dev>
   12ec8:	e0bff815 	stw	r2,-32(fp)
   12ecc:	e0bff817 	ldw	r2,-32(fp)
   12ed0:	1000051e 	bne	r2,zero,12ee8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12ed4:	e13ffd17 	ldw	r4,-12(fp)
   12ed8:	00154a00 	call	154a0 <alt_find_file>
   12edc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12ee0:	00800044 	movi	r2,1
   12ee4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12ee8:	e0bff817 	ldw	r2,-32(fp)
   12eec:	10002b26 	beq	r2,zero,12f9c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12ef0:	e13ff817 	ldw	r4,-32(fp)
   12ef4:	00155a80 	call	155a8 <alt_get_fd>
   12ef8:	e0bff915 	stw	r2,-28(fp)
   12efc:	e0bff917 	ldw	r2,-28(fp)
   12f00:	1000030e 	bge	r2,zero,12f10 <open+0x84>
    {
      status = index;
   12f04:	e0bff917 	ldw	r2,-28(fp)
   12f08:	e0bffa15 	stw	r2,-24(fp)
   12f0c:	00002506 	br	12fa4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   12f10:	01400304 	movi	r5,12
   12f14:	e13ff917 	ldw	r4,-28(fp)
   12f18:	000fc140 	call	fc14 <__mulsi3>
   12f1c:	1007883a 	mov	r3,r2
   12f20:	00800074 	movhi	r2,1
   12f24:	109b5504 	addi	r2,r2,27988
   12f28:	1885883a 	add	r2,r3,r2
   12f2c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12f30:	e0fffe17 	ldw	r3,-8(fp)
   12f34:	00900034 	movhi	r2,16384
   12f38:	10bfffc4 	addi	r2,r2,-1
   12f3c:	1886703a 	and	r3,r3,r2
   12f40:	e0bffc17 	ldw	r2,-16(fp)
   12f44:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12f48:	e0bffb17 	ldw	r2,-20(fp)
   12f4c:	1000051e 	bne	r2,zero,12f64 <open+0xd8>
   12f50:	e13ffc17 	ldw	r4,-16(fp)
   12f54:	0012da00 	call	12da0 <alt_file_locked>
   12f58:	e0bffa15 	stw	r2,-24(fp)
   12f5c:	e0bffa17 	ldw	r2,-24(fp)
   12f60:	10001016 	blt	r2,zero,12fa4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12f64:	e0bff817 	ldw	r2,-32(fp)
   12f68:	10800317 	ldw	r2,12(r2)
   12f6c:	10000826 	beq	r2,zero,12f90 <open+0x104>
   12f70:	e0bff817 	ldw	r2,-32(fp)
   12f74:	10800317 	ldw	r2,12(r2)
   12f78:	e1ffff17 	ldw	r7,-4(fp)
   12f7c:	e1bffe17 	ldw	r6,-8(fp)
   12f80:	e17ffd17 	ldw	r5,-12(fp)
   12f84:	e13ffc17 	ldw	r4,-16(fp)
   12f88:	103ee83a 	callr	r2
   12f8c:	00000106 	br	12f94 <open+0x108>
   12f90:	0005883a 	mov	r2,zero
   12f94:	e0bffa15 	stw	r2,-24(fp)
   12f98:	00000206 	br	12fa4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12f9c:	00bffb44 	movi	r2,-19
   12fa0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12fa4:	e0bffa17 	ldw	r2,-24(fp)
   12fa8:	1000090e 	bge	r2,zero,12fd0 <open+0x144>
  {
    alt_release_fd (index);  
   12fac:	e13ff917 	ldw	r4,-28(fp)
   12fb0:	00131280 	call	13128 <alt_release_fd>
    ALT_ERRNO = -status;
   12fb4:	0012d640 	call	12d64 <alt_get_errno>
   12fb8:	1007883a 	mov	r3,r2
   12fbc:	e0bffa17 	ldw	r2,-24(fp)
   12fc0:	0085c83a 	sub	r2,zero,r2
   12fc4:	18800015 	stw	r2,0(r3)
    return -1;
   12fc8:	00bfffc4 	movi	r2,-1
   12fcc:	00000106 	br	12fd4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   12fd0:	e0bff917 	ldw	r2,-28(fp)
}
   12fd4:	e037883a 	mov	sp,fp
   12fd8:	dfc00117 	ldw	ra,4(sp)
   12fdc:	df000017 	ldw	fp,0(sp)
   12fe0:	dec00204 	addi	sp,sp,8
   12fe4:	f800283a 	ret

00012fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12fe8:	defffe04 	addi	sp,sp,-8
   12fec:	dfc00115 	stw	ra,4(sp)
   12ff0:	df000015 	stw	fp,0(sp)
   12ff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ff8:	d0a00c17 	ldw	r2,-32720(gp)
   12ffc:	10000326 	beq	r2,zero,1300c <alt_get_errno+0x24>
   13000:	d0a00c17 	ldw	r2,-32720(gp)
   13004:	103ee83a 	callr	r2
   13008:	00000106 	br	13010 <alt_get_errno+0x28>
   1300c:	d0a73104 	addi	r2,gp,-25404
}
   13010:	e037883a 	mov	sp,fp
   13014:	dfc00117 	ldw	ra,4(sp)
   13018:	df000017 	ldw	fp,0(sp)
   1301c:	dec00204 	addi	sp,sp,8
   13020:	f800283a 	ret

00013024 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13024:	defff904 	addi	sp,sp,-28
   13028:	dfc00615 	stw	ra,24(sp)
   1302c:	df000515 	stw	fp,20(sp)
   13030:	df000504 	addi	fp,sp,20
   13034:	e13ffd15 	stw	r4,-12(fp)
   13038:	e17ffe15 	stw	r5,-8(fp)
   1303c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13040:	e0bffd17 	ldw	r2,-12(fp)
   13044:	10000816 	blt	r2,zero,13068 <read+0x44>
   13048:	01400304 	movi	r5,12
   1304c:	e13ffd17 	ldw	r4,-12(fp)
   13050:	000fc140 	call	fc14 <__mulsi3>
   13054:	1007883a 	mov	r3,r2
   13058:	00800074 	movhi	r2,1
   1305c:	109b5504 	addi	r2,r2,27988
   13060:	1885883a 	add	r2,r3,r2
   13064:	00000106 	br	1306c <read+0x48>
   13068:	0005883a 	mov	r2,zero
   1306c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13070:	e0bffb17 	ldw	r2,-20(fp)
   13074:	10002226 	beq	r2,zero,13100 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13078:	e0bffb17 	ldw	r2,-20(fp)
   1307c:	10800217 	ldw	r2,8(r2)
   13080:	108000cc 	andi	r2,r2,3
   13084:	10800060 	cmpeqi	r2,r2,1
   13088:	1000181e 	bne	r2,zero,130ec <read+0xc8>
        (fd->dev->read))
   1308c:	e0bffb17 	ldw	r2,-20(fp)
   13090:	10800017 	ldw	r2,0(r2)
   13094:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13098:	10001426 	beq	r2,zero,130ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1309c:	e0bffb17 	ldw	r2,-20(fp)
   130a0:	10800017 	ldw	r2,0(r2)
   130a4:	10800517 	ldw	r2,20(r2)
   130a8:	e0ffff17 	ldw	r3,-4(fp)
   130ac:	180d883a 	mov	r6,r3
   130b0:	e17ffe17 	ldw	r5,-8(fp)
   130b4:	e13ffb17 	ldw	r4,-20(fp)
   130b8:	103ee83a 	callr	r2
   130bc:	e0bffc15 	stw	r2,-16(fp)
   130c0:	e0bffc17 	ldw	r2,-16(fp)
   130c4:	1000070e 	bge	r2,zero,130e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   130c8:	0012fe80 	call	12fe8 <alt_get_errno>
   130cc:	1007883a 	mov	r3,r2
   130d0:	e0bffc17 	ldw	r2,-16(fp)
   130d4:	0085c83a 	sub	r2,zero,r2
   130d8:	18800015 	stw	r2,0(r3)
          return -1;
   130dc:	00bfffc4 	movi	r2,-1
   130e0:	00000c06 	br	13114 <read+0xf0>
        }
        return rval;
   130e4:	e0bffc17 	ldw	r2,-16(fp)
   130e8:	00000a06 	br	13114 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   130ec:	0012fe80 	call	12fe8 <alt_get_errno>
   130f0:	1007883a 	mov	r3,r2
   130f4:	00800344 	movi	r2,13
   130f8:	18800015 	stw	r2,0(r3)
   130fc:	00000406 	br	13110 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13100:	0012fe80 	call	12fe8 <alt_get_errno>
   13104:	1007883a 	mov	r3,r2
   13108:	00801444 	movi	r2,81
   1310c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13110:	00bfffc4 	movi	r2,-1
}
   13114:	e037883a 	mov	sp,fp
   13118:	dfc00117 	ldw	ra,4(sp)
   1311c:	df000017 	ldw	fp,0(sp)
   13120:	dec00204 	addi	sp,sp,8
   13124:	f800283a 	ret

00013128 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13128:	defffc04 	addi	sp,sp,-16
   1312c:	dfc00315 	stw	ra,12(sp)
   13130:	df000215 	stw	fp,8(sp)
   13134:	dc000115 	stw	r16,4(sp)
   13138:	df000204 	addi	fp,sp,8
   1313c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   13140:	e0bffe17 	ldw	r2,-8(fp)
   13144:	108000d0 	cmplti	r2,r2,3
   13148:	1000111e 	bne	r2,zero,13190 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1314c:	04000074 	movhi	r16,1
   13150:	841b5504 	addi	r16,r16,27988
   13154:	e0bffe17 	ldw	r2,-8(fp)
   13158:	01400304 	movi	r5,12
   1315c:	1009883a 	mov	r4,r2
   13160:	000fc140 	call	fc14 <__mulsi3>
   13164:	8085883a 	add	r2,r16,r2
   13168:	10800204 	addi	r2,r2,8
   1316c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13170:	04000074 	movhi	r16,1
   13174:	841b5504 	addi	r16,r16,27988
   13178:	e0bffe17 	ldw	r2,-8(fp)
   1317c:	01400304 	movi	r5,12
   13180:	1009883a 	mov	r4,r2
   13184:	000fc140 	call	fc14 <__mulsi3>
   13188:	8085883a 	add	r2,r16,r2
   1318c:	10000015 	stw	zero,0(r2)
  }
}
   13190:	0001883a 	nop
   13194:	e6ffff04 	addi	sp,fp,-4
   13198:	dfc00217 	ldw	ra,8(sp)
   1319c:	df000117 	ldw	fp,4(sp)
   131a0:	dc000017 	ldw	r16,0(sp)
   131a4:	dec00304 	addi	sp,sp,12
   131a8:	f800283a 	ret

000131ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   131ac:	defff904 	addi	sp,sp,-28
   131b0:	df000615 	stw	fp,24(sp)
   131b4:	df000604 	addi	fp,sp,24
   131b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131bc:	0005303a 	rdctl	r2,status
   131c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131c4:	e0fffe17 	ldw	r3,-8(fp)
   131c8:	00bfff84 	movi	r2,-2
   131cc:	1884703a 	and	r2,r3,r2
   131d0:	1001703a 	wrctl	status,r2
  
  return context;
   131d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   131d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   131dc:	d0a00e17 	ldw	r2,-32712(gp)
   131e0:	10c000c4 	addi	r3,r2,3
   131e4:	00bfff04 	movi	r2,-4
   131e8:	1884703a 	and	r2,r3,r2
   131ec:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   131f0:	d0e00e17 	ldw	r3,-32712(gp)
   131f4:	e0bfff17 	ldw	r2,-4(fp)
   131f8:	1887883a 	add	r3,r3,r2
   131fc:	00820034 	movhi	r2,2048
   13200:	10800004 	addi	r2,r2,0
   13204:	10c0062e 	bgeu	r2,r3,13220 <sbrk+0x74>
   13208:	e0bffb17 	ldw	r2,-20(fp)
   1320c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13210:	e0bffa17 	ldw	r2,-24(fp)
   13214:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13218:	00bfffc4 	movi	r2,-1
   1321c:	00000b06 	br	1324c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13220:	d0a00e17 	ldw	r2,-32712(gp)
   13224:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   13228:	d0e00e17 	ldw	r3,-32712(gp)
   1322c:	e0bfff17 	ldw	r2,-4(fp)
   13230:	1885883a 	add	r2,r3,r2
   13234:	d0a00e15 	stw	r2,-32712(gp)
   13238:	e0bffb17 	ldw	r2,-20(fp)
   1323c:	e0bffc15 	stw	r2,-16(fp)
   13240:	e0bffc17 	ldw	r2,-16(fp)
   13244:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13248:	e0bffd17 	ldw	r2,-12(fp)
} 
   1324c:	e037883a 	mov	sp,fp
   13250:	df000017 	ldw	fp,0(sp)
   13254:	dec00104 	addi	sp,sp,4
   13258:	f800283a 	ret

0001325c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   1325c:	defffd04 	addi	sp,sp,-12
   13260:	dfc00215 	stw	ra,8(sp)
   13264:	df000115 	stw	fp,4(sp)
   13268:	df000104 	addi	fp,sp,4
   1326c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   13270:	e13fff17 	ldw	r4,-4(fp)
   13274:	00150f80 	call	150f8 <alt_busy_sleep>
}
   13278:	e037883a 	mov	sp,fp
   1327c:	dfc00117 	ldw	ra,4(sp)
   13280:	df000017 	ldw	fp,0(sp)
   13284:	dec00204 	addi	sp,sp,8
   13288:	f800283a 	ret

0001328c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1328c:	defffe04 	addi	sp,sp,-8
   13290:	dfc00115 	stw	ra,4(sp)
   13294:	df000015 	stw	fp,0(sp)
   13298:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1329c:	d0a00c17 	ldw	r2,-32720(gp)
   132a0:	10000326 	beq	r2,zero,132b0 <alt_get_errno+0x24>
   132a4:	d0a00c17 	ldw	r2,-32720(gp)
   132a8:	103ee83a 	callr	r2
   132ac:	00000106 	br	132b4 <alt_get_errno+0x28>
   132b0:	d0a73104 	addi	r2,gp,-25404
}
   132b4:	e037883a 	mov	sp,fp
   132b8:	dfc00117 	ldw	ra,4(sp)
   132bc:	df000017 	ldw	fp,0(sp)
   132c0:	dec00204 	addi	sp,sp,8
   132c4:	f800283a 	ret

000132c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   132c8:	defff904 	addi	sp,sp,-28
   132cc:	dfc00615 	stw	ra,24(sp)
   132d0:	df000515 	stw	fp,20(sp)
   132d4:	df000504 	addi	fp,sp,20
   132d8:	e13ffd15 	stw	r4,-12(fp)
   132dc:	e17ffe15 	stw	r5,-8(fp)
   132e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   132e4:	e0bffd17 	ldw	r2,-12(fp)
   132e8:	10000816 	blt	r2,zero,1330c <write+0x44>
   132ec:	01400304 	movi	r5,12
   132f0:	e13ffd17 	ldw	r4,-12(fp)
   132f4:	000fc140 	call	fc14 <__mulsi3>
   132f8:	1007883a 	mov	r3,r2
   132fc:	00800074 	movhi	r2,1
   13300:	109b5504 	addi	r2,r2,27988
   13304:	1885883a 	add	r2,r3,r2
   13308:	00000106 	br	13310 <write+0x48>
   1330c:	0005883a 	mov	r2,zero
   13310:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13314:	e0bffb17 	ldw	r2,-20(fp)
   13318:	10002126 	beq	r2,zero,133a0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1331c:	e0bffb17 	ldw	r2,-20(fp)
   13320:	10800217 	ldw	r2,8(r2)
   13324:	108000cc 	andi	r2,r2,3
   13328:	10001826 	beq	r2,zero,1338c <write+0xc4>
   1332c:	e0bffb17 	ldw	r2,-20(fp)
   13330:	10800017 	ldw	r2,0(r2)
   13334:	10800617 	ldw	r2,24(r2)
   13338:	10001426 	beq	r2,zero,1338c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1333c:	e0bffb17 	ldw	r2,-20(fp)
   13340:	10800017 	ldw	r2,0(r2)
   13344:	10800617 	ldw	r2,24(r2)
   13348:	e0ffff17 	ldw	r3,-4(fp)
   1334c:	180d883a 	mov	r6,r3
   13350:	e17ffe17 	ldw	r5,-8(fp)
   13354:	e13ffb17 	ldw	r4,-20(fp)
   13358:	103ee83a 	callr	r2
   1335c:	e0bffc15 	stw	r2,-16(fp)
   13360:	e0bffc17 	ldw	r2,-16(fp)
   13364:	1000070e 	bge	r2,zero,13384 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   13368:	001328c0 	call	1328c <alt_get_errno>
   1336c:	1007883a 	mov	r3,r2
   13370:	e0bffc17 	ldw	r2,-16(fp)
   13374:	0085c83a 	sub	r2,zero,r2
   13378:	18800015 	stw	r2,0(r3)
        return -1;
   1337c:	00bfffc4 	movi	r2,-1
   13380:	00000c06 	br	133b4 <write+0xec>
      }
      return rval;
   13384:	e0bffc17 	ldw	r2,-16(fp)
   13388:	00000a06 	br	133b4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1338c:	001328c0 	call	1328c <alt_get_errno>
   13390:	1007883a 	mov	r3,r2
   13394:	00800344 	movi	r2,13
   13398:	18800015 	stw	r2,0(r3)
   1339c:	00000406 	br	133b0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   133a0:	001328c0 	call	1328c <alt_get_errno>
   133a4:	1007883a 	mov	r3,r2
   133a8:	00801444 	movi	r2,81
   133ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   133b0:	00bfffc4 	movi	r2,-1
}
   133b4:	e037883a 	mov	sp,fp
   133b8:	dfc00117 	ldw	ra,4(sp)
   133bc:	df000017 	ldw	fp,0(sp)
   133c0:	dec00204 	addi	sp,sp,8
   133c4:	f800283a 	ret

000133c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   133c8:	defffd04 	addi	sp,sp,-12
   133cc:	dfc00215 	stw	ra,8(sp)
   133d0:	df000115 	stw	fp,4(sp)
   133d4:	df000104 	addi	fp,sp,4
   133d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   133dc:	d1600904 	addi	r5,gp,-32732
   133e0:	e13fff17 	ldw	r4,-4(fp)
   133e4:	00152ac0 	call	152ac <alt_dev_llist_insert>
}
   133e8:	e037883a 	mov	sp,fp
   133ec:	dfc00117 	ldw	ra,4(sp)
   133f0:	df000017 	ldw	fp,0(sp)
   133f4:	dec00204 	addi	sp,sp,8
   133f8:	f800283a 	ret

000133fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   133fc:	defffd04 	addi	sp,sp,-12
   13400:	dfc00215 	stw	ra,8(sp)
   13404:	df000115 	stw	fp,4(sp)
   13408:	df000104 	addi	fp,sp,4
   1340c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MAINCPU, MainCPU);
   13410:	0015a2c0 	call	15a2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13414:	00800044 	movi	r2,1
   13418:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1341c:	0001883a 	nop
   13420:	e037883a 	mov	sp,fp
   13424:	dfc00117 	ldw	ra,4(sp)
   13428:	df000017 	ldw	fp,0(sp)
   1342c:	dec00204 	addi	sp,sp,8
   13430:	f800283a 	ret

00013434 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13434:	defffe04 	addi	sp,sp,-8
   13438:	dfc00115 	stw	ra,4(sp)
   1343c:	df000015 	stw	fp,0(sp)
   13440:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHRESTIMER, HighResTimer);
   13444:	00820034 	movhi	r2,2048
   13448:	10840004 	addi	r2,r2,4096
   1344c:	d0a73c15 	stw	r2,-25360(gp)
   13450:	00817db4 	movhi	r2,1526
   13454:	10b84004 	addi	r2,r2,-7936
   13458:	d0a73d15 	stw	r2,-25356(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTEMTIMER, SystemTimer);
   1345c:	01c0fa04 	movi	r7,1000
   13460:	01800184 	movi	r6,6
   13464:	000b883a 	mov	r5,zero
   13468:	01020034 	movhi	r4,2048
   1346c:	21040804 	addi	r4,r4,4128
   13470:	0014f500 	call	14f50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART, JtagUART);
   13474:	01800144 	movi	r6,5
   13478:	000b883a 	mov	r5,zero
   1347c:	01000074 	movhi	r4,1
   13480:	211bbf04 	addi	r4,r4,28412
   13484:	00136280 	call	13628 <altera_avalon_jtag_uart_init>
   13488:	01000074 	movhi	r4,1
   1348c:	211bb504 	addi	r4,r4,28372
   13490:	00133c80 	call	133c8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
   13494:	01000074 	movhi	r4,1
   13498:	211fd704 	addi	r4,r4,32604
   1349c:	0014d440 	call	14d44 <altera_avalon_lcd_16207_init>
   134a0:	01000074 	movhi	r4,1
   134a4:	211fcd04 	addi	r4,r4,32564
   134a8:	00133c80 	call	133c8 <alt_dev_reg>
}
   134ac:	0001883a 	nop
   134b0:	e037883a 	mov	sp,fp
   134b4:	dfc00117 	ldw	ra,4(sp)
   134b8:	df000017 	ldw	fp,0(sp)
   134bc:	dec00204 	addi	sp,sp,8
   134c0:	f800283a 	ret

000134c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   134c4:	defffa04 	addi	sp,sp,-24
   134c8:	dfc00515 	stw	ra,20(sp)
   134cc:	df000415 	stw	fp,16(sp)
   134d0:	df000404 	addi	fp,sp,16
   134d4:	e13ffd15 	stw	r4,-12(fp)
   134d8:	e17ffe15 	stw	r5,-8(fp)
   134dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   134e0:	e0bffd17 	ldw	r2,-12(fp)
   134e4:	10800017 	ldw	r2,0(r2)
   134e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   134ec:	e0bffc17 	ldw	r2,-16(fp)
   134f0:	10c00a04 	addi	r3,r2,40
   134f4:	e0bffd17 	ldw	r2,-12(fp)
   134f8:	10800217 	ldw	r2,8(r2)
   134fc:	100f883a 	mov	r7,r2
   13500:	e1bfff17 	ldw	r6,-4(fp)
   13504:	e17ffe17 	ldw	r5,-8(fp)
   13508:	1809883a 	mov	r4,r3
   1350c:	0013aec0 	call	13aec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13510:	e037883a 	mov	sp,fp
   13514:	dfc00117 	ldw	ra,4(sp)
   13518:	df000017 	ldw	fp,0(sp)
   1351c:	dec00204 	addi	sp,sp,8
   13520:	f800283a 	ret

00013524 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13524:	defffa04 	addi	sp,sp,-24
   13528:	dfc00515 	stw	ra,20(sp)
   1352c:	df000415 	stw	fp,16(sp)
   13530:	df000404 	addi	fp,sp,16
   13534:	e13ffd15 	stw	r4,-12(fp)
   13538:	e17ffe15 	stw	r5,-8(fp)
   1353c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13540:	e0bffd17 	ldw	r2,-12(fp)
   13544:	10800017 	ldw	r2,0(r2)
   13548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1354c:	e0bffc17 	ldw	r2,-16(fp)
   13550:	10c00a04 	addi	r3,r2,40
   13554:	e0bffd17 	ldw	r2,-12(fp)
   13558:	10800217 	ldw	r2,8(r2)
   1355c:	100f883a 	mov	r7,r2
   13560:	e1bfff17 	ldw	r6,-4(fp)
   13564:	e17ffe17 	ldw	r5,-8(fp)
   13568:	1809883a 	mov	r4,r3
   1356c:	0013d080 	call	13d08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13570:	e037883a 	mov	sp,fp
   13574:	dfc00117 	ldw	ra,4(sp)
   13578:	df000017 	ldw	fp,0(sp)
   1357c:	dec00204 	addi	sp,sp,8
   13580:	f800283a 	ret

00013584 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13584:	defffc04 	addi	sp,sp,-16
   13588:	dfc00315 	stw	ra,12(sp)
   1358c:	df000215 	stw	fp,8(sp)
   13590:	df000204 	addi	fp,sp,8
   13594:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13598:	e0bfff17 	ldw	r2,-4(fp)
   1359c:	10800017 	ldw	r2,0(r2)
   135a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   135a4:	e0bffe17 	ldw	r2,-8(fp)
   135a8:	10c00a04 	addi	r3,r2,40
   135ac:	e0bfff17 	ldw	r2,-4(fp)
   135b0:	10800217 	ldw	r2,8(r2)
   135b4:	100b883a 	mov	r5,r2
   135b8:	1809883a 	mov	r4,r3
   135bc:	00139940 	call	13994 <altera_avalon_jtag_uart_close>
}
   135c0:	e037883a 	mov	sp,fp
   135c4:	dfc00117 	ldw	ra,4(sp)
   135c8:	df000017 	ldw	fp,0(sp)
   135cc:	dec00204 	addi	sp,sp,8
   135d0:	f800283a 	ret

000135d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   135d4:	defffa04 	addi	sp,sp,-24
   135d8:	dfc00515 	stw	ra,20(sp)
   135dc:	df000415 	stw	fp,16(sp)
   135e0:	df000404 	addi	fp,sp,16
   135e4:	e13ffd15 	stw	r4,-12(fp)
   135e8:	e17ffe15 	stw	r5,-8(fp)
   135ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   135f0:	e0bffd17 	ldw	r2,-12(fp)
   135f4:	10800017 	ldw	r2,0(r2)
   135f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   135fc:	e0bffc17 	ldw	r2,-16(fp)
   13600:	10800a04 	addi	r2,r2,40
   13604:	e1bfff17 	ldw	r6,-4(fp)
   13608:	e17ffe17 	ldw	r5,-8(fp)
   1360c:	1009883a 	mov	r4,r2
   13610:	00139fc0 	call	139fc <altera_avalon_jtag_uart_ioctl>
}
   13614:	e037883a 	mov	sp,fp
   13618:	dfc00117 	ldw	ra,4(sp)
   1361c:	df000017 	ldw	fp,0(sp)
   13620:	dec00204 	addi	sp,sp,8
   13624:	f800283a 	ret

00013628 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13628:	defffa04 	addi	sp,sp,-24
   1362c:	dfc00515 	stw	ra,20(sp)
   13630:	df000415 	stw	fp,16(sp)
   13634:	df000404 	addi	fp,sp,16
   13638:	e13ffd15 	stw	r4,-12(fp)
   1363c:	e17ffe15 	stw	r5,-8(fp)
   13640:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13644:	e0bffd17 	ldw	r2,-12(fp)
   13648:	00c00044 	movi	r3,1
   1364c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13650:	e0bffd17 	ldw	r2,-12(fp)
   13654:	10800017 	ldw	r2,0(r2)
   13658:	10800104 	addi	r2,r2,4
   1365c:	1007883a 	mov	r3,r2
   13660:	e0bffd17 	ldw	r2,-12(fp)
   13664:	10800817 	ldw	r2,32(r2)
   13668:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1366c:	e0bffe17 	ldw	r2,-8(fp)
   13670:	e0ffff17 	ldw	r3,-4(fp)
   13674:	d8000015 	stw	zero,0(sp)
   13678:	e1fffd17 	ldw	r7,-12(fp)
   1367c:	01800074 	movhi	r6,1
   13680:	318dba04 	addi	r6,r6,14056
   13684:	180b883a 	mov	r5,r3
   13688:	1009883a 	mov	r4,r2
   1368c:	00127140 	call	12714 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13690:	e0bffd17 	ldw	r2,-12(fp)
   13694:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13698:	e0bffd17 	ldw	r2,-12(fp)
   1369c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   136a0:	d0e73f17 	ldw	r3,-25348(gp)
   136a4:	e1fffd17 	ldw	r7,-12(fp)
   136a8:	01800074 	movhi	r6,1
   136ac:	318e3d04 	addi	r6,r6,14580
   136b0:	180b883a 	mov	r5,r3
   136b4:	1009883a 	mov	r4,r2
   136b8:	0014fcc0 	call	14fcc <alt_alarm_start>
   136bc:	1000040e 	bge	r2,zero,136d0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   136c0:	e0fffd17 	ldw	r3,-12(fp)
   136c4:	00a00034 	movhi	r2,32768
   136c8:	10bfffc4 	addi	r2,r2,-1
   136cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   136d0:	0001883a 	nop
   136d4:	e037883a 	mov	sp,fp
   136d8:	dfc00117 	ldw	ra,4(sp)
   136dc:	df000017 	ldw	fp,0(sp)
   136e0:	dec00204 	addi	sp,sp,8
   136e4:	f800283a 	ret

000136e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   136e8:	defff804 	addi	sp,sp,-32
   136ec:	df000715 	stw	fp,28(sp)
   136f0:	df000704 	addi	fp,sp,28
   136f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   136f8:	e0bfff17 	ldw	r2,-4(fp)
   136fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13700:	e0bffb17 	ldw	r2,-20(fp)
   13704:	10800017 	ldw	r2,0(r2)
   13708:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1370c:	e0bffc17 	ldw	r2,-16(fp)
   13710:	10800104 	addi	r2,r2,4
   13714:	10800037 	ldwio	r2,0(r2)
   13718:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1371c:	e0bffd17 	ldw	r2,-12(fp)
   13720:	1080c00c 	andi	r2,r2,768
   13724:	10006d26 	beq	r2,zero,138dc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	1080400c 	andi	r2,r2,256
   13730:	10003526 	beq	r2,zero,13808 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13734:	00800074 	movhi	r2,1
   13738:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1373c:	e0bffb17 	ldw	r2,-20(fp)
   13740:	10800a17 	ldw	r2,40(r2)
   13744:	10800044 	addi	r2,r2,1
   13748:	1081ffcc 	andi	r2,r2,2047
   1374c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13750:	e0bffb17 	ldw	r2,-20(fp)
   13754:	10c00b17 	ldw	r3,44(r2)
   13758:	e0bffe17 	ldw	r2,-8(fp)
   1375c:	18801526 	beq	r3,r2,137b4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13760:	e0bffc17 	ldw	r2,-16(fp)
   13764:	10800037 	ldwio	r2,0(r2)
   13768:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1376c:	e0bff917 	ldw	r2,-28(fp)
   13770:	10a0000c 	andi	r2,r2,32768
   13774:	10001126 	beq	r2,zero,137bc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13778:	e0bffb17 	ldw	r2,-20(fp)
   1377c:	10800a17 	ldw	r2,40(r2)
   13780:	e0fff917 	ldw	r3,-28(fp)
   13784:	1809883a 	mov	r4,r3
   13788:	e0fffb17 	ldw	r3,-20(fp)
   1378c:	1885883a 	add	r2,r3,r2
   13790:	10800e04 	addi	r2,r2,56
   13794:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13798:	e0bffb17 	ldw	r2,-20(fp)
   1379c:	10800a17 	ldw	r2,40(r2)
   137a0:	10800044 	addi	r2,r2,1
   137a4:	10c1ffcc 	andi	r3,r2,2047
   137a8:	e0bffb17 	ldw	r2,-20(fp)
   137ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   137b0:	003fe206 	br	1373c <__alt_data_end+0xf801373c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   137b4:	0001883a 	nop
   137b8:	00000106 	br	137c0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   137bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   137c0:	e0bff917 	ldw	r2,-28(fp)
   137c4:	10bfffec 	andhi	r2,r2,65535
   137c8:	10000f26 	beq	r2,zero,13808 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   137cc:	e0bffb17 	ldw	r2,-20(fp)
   137d0:	10c00817 	ldw	r3,32(r2)
   137d4:	00bfff84 	movi	r2,-2
   137d8:	1886703a 	and	r3,r3,r2
   137dc:	e0bffb17 	ldw	r2,-20(fp)
   137e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   137e4:	e0bffc17 	ldw	r2,-16(fp)
   137e8:	10800104 	addi	r2,r2,4
   137ec:	1007883a 	mov	r3,r2
   137f0:	e0bffb17 	ldw	r2,-20(fp)
   137f4:	10800817 	ldw	r2,32(r2)
   137f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   137fc:	e0bffc17 	ldw	r2,-16(fp)
   13800:	10800104 	addi	r2,r2,4
   13804:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13808:	e0bffd17 	ldw	r2,-12(fp)
   1380c:	1080800c 	andi	r2,r2,512
   13810:	103fbe26 	beq	r2,zero,1370c <__alt_data_end+0xf801370c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13814:	e0bffd17 	ldw	r2,-12(fp)
   13818:	1004d43a 	srli	r2,r2,16
   1381c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13820:	00001406 	br	13874 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13824:	e0bffc17 	ldw	r2,-16(fp)
   13828:	e0fffb17 	ldw	r3,-20(fp)
   1382c:	18c00d17 	ldw	r3,52(r3)
   13830:	e13ffb17 	ldw	r4,-20(fp)
   13834:	20c7883a 	add	r3,r4,r3
   13838:	18c20e04 	addi	r3,r3,2104
   1383c:	18c00003 	ldbu	r3,0(r3)
   13840:	18c03fcc 	andi	r3,r3,255
   13844:	18c0201c 	xori	r3,r3,128
   13848:	18ffe004 	addi	r3,r3,-128
   1384c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13850:	e0bffb17 	ldw	r2,-20(fp)
   13854:	10800d17 	ldw	r2,52(r2)
   13858:	10800044 	addi	r2,r2,1
   1385c:	10c1ffcc 	andi	r3,r2,2047
   13860:	e0bffb17 	ldw	r2,-20(fp)
   13864:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13868:	e0bffa17 	ldw	r2,-24(fp)
   1386c:	10bfffc4 	addi	r2,r2,-1
   13870:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13874:	e0bffa17 	ldw	r2,-24(fp)
   13878:	10000526 	beq	r2,zero,13890 <altera_avalon_jtag_uart_irq+0x1a8>
   1387c:	e0bffb17 	ldw	r2,-20(fp)
   13880:	10c00d17 	ldw	r3,52(r2)
   13884:	e0bffb17 	ldw	r2,-20(fp)
   13888:	10800c17 	ldw	r2,48(r2)
   1388c:	18bfe51e 	bne	r3,r2,13824 <__alt_data_end+0xf8013824>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13890:	e0bffa17 	ldw	r2,-24(fp)
   13894:	103f9d26 	beq	r2,zero,1370c <__alt_data_end+0xf801370c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13898:	e0bffb17 	ldw	r2,-20(fp)
   1389c:	10c00817 	ldw	r3,32(r2)
   138a0:	00bfff44 	movi	r2,-3
   138a4:	1886703a 	and	r3,r3,r2
   138a8:	e0bffb17 	ldw	r2,-20(fp)
   138ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   138b0:	e0bffb17 	ldw	r2,-20(fp)
   138b4:	10800017 	ldw	r2,0(r2)
   138b8:	10800104 	addi	r2,r2,4
   138bc:	1007883a 	mov	r3,r2
   138c0:	e0bffb17 	ldw	r2,-20(fp)
   138c4:	10800817 	ldw	r2,32(r2)
   138c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   138cc:	e0bffc17 	ldw	r2,-16(fp)
   138d0:	10800104 	addi	r2,r2,4
   138d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   138d8:	003f8c06 	br	1370c <__alt_data_end+0xf801370c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   138dc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   138e0:	0001883a 	nop
   138e4:	e037883a 	mov	sp,fp
   138e8:	df000017 	ldw	fp,0(sp)
   138ec:	dec00104 	addi	sp,sp,4
   138f0:	f800283a 	ret

000138f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   138f4:	defff804 	addi	sp,sp,-32
   138f8:	df000715 	stw	fp,28(sp)
   138fc:	df000704 	addi	fp,sp,28
   13900:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13904:	e0bffb17 	ldw	r2,-20(fp)
   13908:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1390c:	e0bff917 	ldw	r2,-28(fp)
   13910:	10800017 	ldw	r2,0(r2)
   13914:	10800104 	addi	r2,r2,4
   13918:	10800037 	ldwio	r2,0(r2)
   1391c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13920:	e0bffa17 	ldw	r2,-24(fp)
   13924:	1081000c 	andi	r2,r2,1024
   13928:	10000b26 	beq	r2,zero,13958 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1392c:	e0bff917 	ldw	r2,-28(fp)
   13930:	10800017 	ldw	r2,0(r2)
   13934:	10800104 	addi	r2,r2,4
   13938:	1007883a 	mov	r3,r2
   1393c:	e0bff917 	ldw	r2,-28(fp)
   13940:	10800817 	ldw	r2,32(r2)
   13944:	10810014 	ori	r2,r2,1024
   13948:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1394c:	e0bff917 	ldw	r2,-28(fp)
   13950:	10000915 	stw	zero,36(r2)
   13954:	00000a06 	br	13980 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13958:	e0bff917 	ldw	r2,-28(fp)
   1395c:	10c00917 	ldw	r3,36(r2)
   13960:	00a00034 	movhi	r2,32768
   13964:	10bfff04 	addi	r2,r2,-4
   13968:	10c00536 	bltu	r2,r3,13980 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1396c:	e0bff917 	ldw	r2,-28(fp)
   13970:	10800917 	ldw	r2,36(r2)
   13974:	10c00044 	addi	r3,r2,1
   13978:	e0bff917 	ldw	r2,-28(fp)
   1397c:	10c00915 	stw	r3,36(r2)
   13980:	d0a73f17 	ldw	r2,-25348(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13984:	e037883a 	mov	sp,fp
   13988:	df000017 	ldw	fp,0(sp)
   1398c:	dec00104 	addi	sp,sp,4
   13990:	f800283a 	ret

00013994 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13994:	defffd04 	addi	sp,sp,-12
   13998:	df000215 	stw	fp,8(sp)
   1399c:	df000204 	addi	fp,sp,8
   139a0:	e13ffe15 	stw	r4,-8(fp)
   139a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   139a8:	00000506 	br	139c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   139ac:	e0bfff17 	ldw	r2,-4(fp)
   139b0:	1090000c 	andi	r2,r2,16384
   139b4:	10000226 	beq	r2,zero,139c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   139b8:	00bffd44 	movi	r2,-11
   139bc:	00000b06 	br	139ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   139c0:	e0bffe17 	ldw	r2,-8(fp)
   139c4:	10c00d17 	ldw	r3,52(r2)
   139c8:	e0bffe17 	ldw	r2,-8(fp)
   139cc:	10800c17 	ldw	r2,48(r2)
   139d0:	18800526 	beq	r3,r2,139e8 <altera_avalon_jtag_uart_close+0x54>
   139d4:	e0bffe17 	ldw	r2,-8(fp)
   139d8:	10c00917 	ldw	r3,36(r2)
   139dc:	e0bffe17 	ldw	r2,-8(fp)
   139e0:	10800117 	ldw	r2,4(r2)
   139e4:	18bff136 	bltu	r3,r2,139ac <__alt_data_end+0xf80139ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   139e8:	0005883a 	mov	r2,zero
}
   139ec:	e037883a 	mov	sp,fp
   139f0:	df000017 	ldw	fp,0(sp)
   139f4:	dec00104 	addi	sp,sp,4
   139f8:	f800283a 	ret

000139fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   139fc:	defffa04 	addi	sp,sp,-24
   13a00:	df000515 	stw	fp,20(sp)
   13a04:	df000504 	addi	fp,sp,20
   13a08:	e13ffd15 	stw	r4,-12(fp)
   13a0c:	e17ffe15 	stw	r5,-8(fp)
   13a10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13a14:	00bff9c4 	movi	r2,-25
   13a18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13a1c:	e0bffe17 	ldw	r2,-8(fp)
   13a20:	10da8060 	cmpeqi	r3,r2,27137
   13a24:	1800031e 	bne	r3,zero,13a34 <altera_avalon_jtag_uart_ioctl+0x38>
   13a28:	109a80a0 	cmpeqi	r2,r2,27138
   13a2c:	1000181e 	bne	r2,zero,13a90 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   13a30:	00002906 	br	13ad8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13a34:	e0bffd17 	ldw	r2,-12(fp)
   13a38:	10c00117 	ldw	r3,4(r2)
   13a3c:	00a00034 	movhi	r2,32768
   13a40:	10bfffc4 	addi	r2,r2,-1
   13a44:	18802126 	beq	r3,r2,13acc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   13a48:	e0bfff17 	ldw	r2,-4(fp)
   13a4c:	10800017 	ldw	r2,0(r2)
   13a50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13a54:	e0bffc17 	ldw	r2,-16(fp)
   13a58:	10800090 	cmplti	r2,r2,2
   13a5c:	1000061e 	bne	r2,zero,13a78 <altera_avalon_jtag_uart_ioctl+0x7c>
   13a60:	e0fffc17 	ldw	r3,-16(fp)
   13a64:	00a00034 	movhi	r2,32768
   13a68:	10bfffc4 	addi	r2,r2,-1
   13a6c:	18800226 	beq	r3,r2,13a78 <altera_avalon_jtag_uart_ioctl+0x7c>
   13a70:	e0bffc17 	ldw	r2,-16(fp)
   13a74:	00000206 	br	13a80 <altera_avalon_jtag_uart_ioctl+0x84>
   13a78:	00a00034 	movhi	r2,32768
   13a7c:	10bfff84 	addi	r2,r2,-2
   13a80:	e0fffd17 	ldw	r3,-12(fp)
   13a84:	18800115 	stw	r2,4(r3)
      rc = 0;
   13a88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13a8c:	00000f06 	br	13acc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13a90:	e0bffd17 	ldw	r2,-12(fp)
   13a94:	10c00117 	ldw	r3,4(r2)
   13a98:	00a00034 	movhi	r2,32768
   13a9c:	10bfffc4 	addi	r2,r2,-1
   13aa0:	18800c26 	beq	r3,r2,13ad4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13aa4:	e0bffd17 	ldw	r2,-12(fp)
   13aa8:	10c00917 	ldw	r3,36(r2)
   13aac:	e0bffd17 	ldw	r2,-12(fp)
   13ab0:	10800117 	ldw	r2,4(r2)
   13ab4:	1885803a 	cmpltu	r2,r3,r2
   13ab8:	10c03fcc 	andi	r3,r2,255
   13abc:	e0bfff17 	ldw	r2,-4(fp)
   13ac0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13ac4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13ac8:	00000206 	br	13ad4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   13acc:	0001883a 	nop
   13ad0:	00000106 	br	13ad8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   13ad4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13ad8:	e0bffb17 	ldw	r2,-20(fp)
}
   13adc:	e037883a 	mov	sp,fp
   13ae0:	df000017 	ldw	fp,0(sp)
   13ae4:	dec00104 	addi	sp,sp,4
   13ae8:	f800283a 	ret

00013aec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13aec:	defff304 	addi	sp,sp,-52
   13af0:	dfc00c15 	stw	ra,48(sp)
   13af4:	df000b15 	stw	fp,44(sp)
   13af8:	df000b04 	addi	fp,sp,44
   13afc:	e13ffc15 	stw	r4,-16(fp)
   13b00:	e17ffd15 	stw	r5,-12(fp)
   13b04:	e1bffe15 	stw	r6,-8(fp)
   13b08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13b0c:	e0bffd17 	ldw	r2,-12(fp)
   13b10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13b14:	00004706 	br	13c34 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13b18:	e0bffc17 	ldw	r2,-16(fp)
   13b1c:	10800a17 	ldw	r2,40(r2)
   13b20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13b24:	e0bffc17 	ldw	r2,-16(fp)
   13b28:	10800b17 	ldw	r2,44(r2)
   13b2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   13b30:	e0fff717 	ldw	r3,-36(fp)
   13b34:	e0bff817 	ldw	r2,-32(fp)
   13b38:	18800536 	bltu	r3,r2,13b50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13b3c:	e0fff717 	ldw	r3,-36(fp)
   13b40:	e0bff817 	ldw	r2,-32(fp)
   13b44:	1885c83a 	sub	r2,r3,r2
   13b48:	e0bff615 	stw	r2,-40(fp)
   13b4c:	00000406 	br	13b60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13b50:	00c20004 	movi	r3,2048
   13b54:	e0bff817 	ldw	r2,-32(fp)
   13b58:	1885c83a 	sub	r2,r3,r2
   13b5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13b60:	e0bff617 	ldw	r2,-40(fp)
   13b64:	10001e26 	beq	r2,zero,13be0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   13b68:	e0fffe17 	ldw	r3,-8(fp)
   13b6c:	e0bff617 	ldw	r2,-40(fp)
   13b70:	1880022e 	bgeu	r3,r2,13b7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   13b74:	e0bffe17 	ldw	r2,-8(fp)
   13b78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13b7c:	e0bffc17 	ldw	r2,-16(fp)
   13b80:	10c00e04 	addi	r3,r2,56
   13b84:	e0bff817 	ldw	r2,-32(fp)
   13b88:	1885883a 	add	r2,r3,r2
   13b8c:	e1bff617 	ldw	r6,-40(fp)
   13b90:	100b883a 	mov	r5,r2
   13b94:	e13ff517 	ldw	r4,-44(fp)
   13b98:	000a3580 	call	a358 <memcpy>
      ptr   += n;
   13b9c:	e0fff517 	ldw	r3,-44(fp)
   13ba0:	e0bff617 	ldw	r2,-40(fp)
   13ba4:	1885883a 	add	r2,r3,r2
   13ba8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13bac:	e0fffe17 	ldw	r3,-8(fp)
   13bb0:	e0bff617 	ldw	r2,-40(fp)
   13bb4:	1885c83a 	sub	r2,r3,r2
   13bb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13bbc:	e0fff817 	ldw	r3,-32(fp)
   13bc0:	e0bff617 	ldw	r2,-40(fp)
   13bc4:	1885883a 	add	r2,r3,r2
   13bc8:	10c1ffcc 	andi	r3,r2,2047
   13bcc:	e0bffc17 	ldw	r2,-16(fp)
   13bd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13bd4:	e0bffe17 	ldw	r2,-8(fp)
   13bd8:	00bfcf16 	blt	zero,r2,13b18 <__alt_data_end+0xf8013b18>
   13bdc:	00000106 	br	13be4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   13be0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   13be4:	e0fff517 	ldw	r3,-44(fp)
   13be8:	e0bffd17 	ldw	r2,-12(fp)
   13bec:	1880141e 	bne	r3,r2,13c40 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13bf0:	e0bfff17 	ldw	r2,-4(fp)
   13bf4:	1090000c 	andi	r2,r2,16384
   13bf8:	1000131e 	bne	r2,zero,13c48 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13bfc:	0001883a 	nop
   13c00:	e0bffc17 	ldw	r2,-16(fp)
   13c04:	10c00a17 	ldw	r3,40(r2)
   13c08:	e0bff717 	ldw	r2,-36(fp)
   13c0c:	1880051e 	bne	r3,r2,13c24 <altera_avalon_jtag_uart_read+0x138>
   13c10:	e0bffc17 	ldw	r2,-16(fp)
   13c14:	10c00917 	ldw	r3,36(r2)
   13c18:	e0bffc17 	ldw	r2,-16(fp)
   13c1c:	10800117 	ldw	r2,4(r2)
   13c20:	18bff736 	bltu	r3,r2,13c00 <__alt_data_end+0xf8013c00>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13c24:	e0bffc17 	ldw	r2,-16(fp)
   13c28:	10c00a17 	ldw	r3,40(r2)
   13c2c:	e0bff717 	ldw	r2,-36(fp)
   13c30:	18800726 	beq	r3,r2,13c50 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13c34:	e0bffe17 	ldw	r2,-8(fp)
   13c38:	00bfb716 	blt	zero,r2,13b18 <__alt_data_end+0xf8013b18>
   13c3c:	00000506 	br	13c54 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   13c40:	0001883a 	nop
   13c44:	00000306 	br	13c54 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   13c48:	0001883a 	nop
   13c4c:	00000106 	br	13c54 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   13c50:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13c54:	e0fff517 	ldw	r3,-44(fp)
   13c58:	e0bffd17 	ldw	r2,-12(fp)
   13c5c:	18801826 	beq	r3,r2,13cc0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c60:	0005303a 	rdctl	r2,status
   13c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c68:	e0fffb17 	ldw	r3,-20(fp)
   13c6c:	00bfff84 	movi	r2,-2
   13c70:	1884703a 	and	r2,r3,r2
   13c74:	1001703a 	wrctl	status,r2
  
  return context;
   13c78:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13c7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13c80:	e0bffc17 	ldw	r2,-16(fp)
   13c84:	10800817 	ldw	r2,32(r2)
   13c88:	10c00054 	ori	r3,r2,1
   13c8c:	e0bffc17 	ldw	r2,-16(fp)
   13c90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13c94:	e0bffc17 	ldw	r2,-16(fp)
   13c98:	10800017 	ldw	r2,0(r2)
   13c9c:	10800104 	addi	r2,r2,4
   13ca0:	1007883a 	mov	r3,r2
   13ca4:	e0bffc17 	ldw	r2,-16(fp)
   13ca8:	10800817 	ldw	r2,32(r2)
   13cac:	18800035 	stwio	r2,0(r3)
   13cb0:	e0bffa17 	ldw	r2,-24(fp)
   13cb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cb8:	e0bff917 	ldw	r2,-28(fp)
   13cbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13cc0:	e0fff517 	ldw	r3,-44(fp)
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	18800426 	beq	r3,r2,13cdc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   13ccc:	e0fff517 	ldw	r3,-44(fp)
   13cd0:	e0bffd17 	ldw	r2,-12(fp)
   13cd4:	1885c83a 	sub	r2,r3,r2
   13cd8:	00000606 	br	13cf4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   13cdc:	e0bfff17 	ldw	r2,-4(fp)
   13ce0:	1090000c 	andi	r2,r2,16384
   13ce4:	10000226 	beq	r2,zero,13cf0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13ce8:	00bffd44 	movi	r2,-11
   13cec:	00000106 	br	13cf4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   13cf0:	00bffec4 	movi	r2,-5
}
   13cf4:	e037883a 	mov	sp,fp
   13cf8:	dfc00117 	ldw	ra,4(sp)
   13cfc:	df000017 	ldw	fp,0(sp)
   13d00:	dec00204 	addi	sp,sp,8
   13d04:	f800283a 	ret

00013d08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13d08:	defff304 	addi	sp,sp,-52
   13d0c:	dfc00c15 	stw	ra,48(sp)
   13d10:	df000b15 	stw	fp,44(sp)
   13d14:	df000b04 	addi	fp,sp,44
   13d18:	e13ffc15 	stw	r4,-16(fp)
   13d1c:	e17ffd15 	stw	r5,-12(fp)
   13d20:	e1bffe15 	stw	r6,-8(fp)
   13d24:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   13d28:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13d2c:	e0bffd17 	ldw	r2,-12(fp)
   13d30:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13d34:	00003706 	br	13e14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   13d38:	e0bffc17 	ldw	r2,-16(fp)
   13d3c:	10800c17 	ldw	r2,48(r2)
   13d40:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   13d44:	e0bffc17 	ldw	r2,-16(fp)
   13d48:	10800d17 	ldw	r2,52(r2)
   13d4c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   13d50:	e0fff917 	ldw	r3,-28(fp)
   13d54:	e0bff517 	ldw	r2,-44(fp)
   13d58:	1880062e 	bgeu	r3,r2,13d74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   13d5c:	e0fff517 	ldw	r3,-44(fp)
   13d60:	e0bff917 	ldw	r2,-28(fp)
   13d64:	1885c83a 	sub	r2,r3,r2
   13d68:	10bfffc4 	addi	r2,r2,-1
   13d6c:	e0bff615 	stw	r2,-40(fp)
   13d70:	00000b06 	br	13da0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   13d74:	e0bff517 	ldw	r2,-44(fp)
   13d78:	10000526 	beq	r2,zero,13d90 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   13d7c:	00c20004 	movi	r3,2048
   13d80:	e0bff917 	ldw	r2,-28(fp)
   13d84:	1885c83a 	sub	r2,r3,r2
   13d88:	e0bff615 	stw	r2,-40(fp)
   13d8c:	00000406 	br	13da0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   13d90:	00c1ffc4 	movi	r3,2047
   13d94:	e0bff917 	ldw	r2,-28(fp)
   13d98:	1885c83a 	sub	r2,r3,r2
   13d9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13da0:	e0bff617 	ldw	r2,-40(fp)
   13da4:	10001e26 	beq	r2,zero,13e20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   13da8:	e0fffe17 	ldw	r3,-8(fp)
   13dac:	e0bff617 	ldw	r2,-40(fp)
   13db0:	1880022e 	bgeu	r3,r2,13dbc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   13db4:	e0bffe17 	ldw	r2,-8(fp)
   13db8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   13dbc:	e0bffc17 	ldw	r2,-16(fp)
   13dc0:	10c20e04 	addi	r3,r2,2104
   13dc4:	e0bff917 	ldw	r2,-28(fp)
   13dc8:	1885883a 	add	r2,r3,r2
   13dcc:	e1bff617 	ldw	r6,-40(fp)
   13dd0:	e17ffd17 	ldw	r5,-12(fp)
   13dd4:	1009883a 	mov	r4,r2
   13dd8:	000a3580 	call	a358 <memcpy>
      ptr   += n;
   13ddc:	e0fffd17 	ldw	r3,-12(fp)
   13de0:	e0bff617 	ldw	r2,-40(fp)
   13de4:	1885883a 	add	r2,r3,r2
   13de8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   13dec:	e0fffe17 	ldw	r3,-8(fp)
   13df0:	e0bff617 	ldw	r2,-40(fp)
   13df4:	1885c83a 	sub	r2,r3,r2
   13df8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13dfc:	e0fff917 	ldw	r3,-28(fp)
   13e00:	e0bff617 	ldw	r2,-40(fp)
   13e04:	1885883a 	add	r2,r3,r2
   13e08:	10c1ffcc 	andi	r3,r2,2047
   13e0c:	e0bffc17 	ldw	r2,-16(fp)
   13e10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13e14:	e0bffe17 	ldw	r2,-8(fp)
   13e18:	00bfc716 	blt	zero,r2,13d38 <__alt_data_end+0xf8013d38>
   13e1c:	00000106 	br	13e24 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   13e20:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e24:	0005303a 	rdctl	r2,status
   13e28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e2c:	e0fffb17 	ldw	r3,-20(fp)
   13e30:	00bfff84 	movi	r2,-2
   13e34:	1884703a 	and	r2,r3,r2
   13e38:	1001703a 	wrctl	status,r2
  
  return context;
   13e3c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   13e40:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13e44:	e0bffc17 	ldw	r2,-16(fp)
   13e48:	10800817 	ldw	r2,32(r2)
   13e4c:	10c00094 	ori	r3,r2,2
   13e50:	e0bffc17 	ldw	r2,-16(fp)
   13e54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13e58:	e0bffc17 	ldw	r2,-16(fp)
   13e5c:	10800017 	ldw	r2,0(r2)
   13e60:	10800104 	addi	r2,r2,4
   13e64:	1007883a 	mov	r3,r2
   13e68:	e0bffc17 	ldw	r2,-16(fp)
   13e6c:	10800817 	ldw	r2,32(r2)
   13e70:	18800035 	stwio	r2,0(r3)
   13e74:	e0bffa17 	ldw	r2,-24(fp)
   13e78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e7c:	e0bff817 	ldw	r2,-32(fp)
   13e80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   13e84:	e0bffe17 	ldw	r2,-8(fp)
   13e88:	0080100e 	bge	zero,r2,13ecc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   13e8c:	e0bfff17 	ldw	r2,-4(fp)
   13e90:	1090000c 	andi	r2,r2,16384
   13e94:	1000101e 	bne	r2,zero,13ed8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   13e98:	0001883a 	nop
   13e9c:	e0bffc17 	ldw	r2,-16(fp)
   13ea0:	10c00d17 	ldw	r3,52(r2)
   13ea4:	e0bff517 	ldw	r2,-44(fp)
   13ea8:	1880051e 	bne	r3,r2,13ec0 <altera_avalon_jtag_uart_write+0x1b8>
   13eac:	e0bffc17 	ldw	r2,-16(fp)
   13eb0:	10c00917 	ldw	r3,36(r2)
   13eb4:	e0bffc17 	ldw	r2,-16(fp)
   13eb8:	10800117 	ldw	r2,4(r2)
   13ebc:	18bff736 	bltu	r3,r2,13e9c <__alt_data_end+0xf8013e9c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   13ec0:	e0bffc17 	ldw	r2,-16(fp)
   13ec4:	10800917 	ldw	r2,36(r2)
   13ec8:	1000051e 	bne	r2,zero,13ee0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   13ecc:	e0bffe17 	ldw	r2,-8(fp)
   13ed0:	00bfd016 	blt	zero,r2,13e14 <__alt_data_end+0xf8013e14>
   13ed4:	00000306 	br	13ee4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   13ed8:	0001883a 	nop
   13edc:	00000106 	br	13ee4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   13ee0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   13ee4:	e0fffd17 	ldw	r3,-12(fp)
   13ee8:	e0bff717 	ldw	r2,-36(fp)
   13eec:	18800426 	beq	r3,r2,13f00 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   13ef0:	e0fffd17 	ldw	r3,-12(fp)
   13ef4:	e0bff717 	ldw	r2,-36(fp)
   13ef8:	1885c83a 	sub	r2,r3,r2
   13efc:	00000606 	br	13f18 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   13f00:	e0bfff17 	ldw	r2,-4(fp)
   13f04:	1090000c 	andi	r2,r2,16384
   13f08:	10000226 	beq	r2,zero,13f14 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   13f0c:	00bffd44 	movi	r2,-11
   13f10:	00000106 	br	13f18 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   13f14:	00bffec4 	movi	r2,-5
}
   13f18:	e037883a 	mov	sp,fp
   13f1c:	dfc00117 	ldw	ra,4(sp)
   13f20:	df000017 	ldw	fp,0(sp)
   13f24:	dec00204 	addi	sp,sp,8
   13f28:	f800283a 	ret

00013f2c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   13f2c:	defffa04 	addi	sp,sp,-24
   13f30:	dfc00515 	stw	ra,20(sp)
   13f34:	df000415 	stw	fp,16(sp)
   13f38:	df000404 	addi	fp,sp,16
   13f3c:	e13ffe15 	stw	r4,-8(fp)
   13f40:	2805883a 	mov	r2,r5
   13f44:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   13f48:	e0bffe17 	ldw	r2,-8(fp)
   13f4c:	10800017 	ldw	r2,0(r2)
   13f50:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   13f54:	008003f4 	movhi	r2,15
   13f58:	10909004 	addi	r2,r2,16960
   13f5c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   13f60:	e0bffe17 	ldw	r2,-8(fp)
   13f64:	10800803 	ldbu	r2,32(r2)
   13f68:	10803fcc 	andi	r2,r2,255
   13f6c:	1080201c 	xori	r2,r2,128
   13f70:	10bfe004 	addi	r2,r2,-128
   13f74:	1000151e 	bne	r2,zero,13fcc <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   13f78:	00000906 	br	13fa0 <lcd_write_command+0x74>
    if (--i == 0)
   13f7c:	e0bffc17 	ldw	r2,-16(fp)
   13f80:	10bfffc4 	addi	r2,r2,-1
   13f84:	e0bffc15 	stw	r2,-16(fp)
   13f88:	e0bffc17 	ldw	r2,-16(fp)
   13f8c:	1000041e 	bne	r2,zero,13fa0 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   13f90:	e0bffe17 	ldw	r2,-8(fp)
   13f94:	00c00044 	movi	r3,1
   13f98:	10c00805 	stb	r3,32(r2)
      return;
   13f9c:	00000c06 	br	13fd0 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   13fa0:	e0bffd17 	ldw	r2,-12(fp)
   13fa4:	10800104 	addi	r2,r2,4
   13fa8:	10800037 	ldwio	r2,0(r2)
   13fac:	1080200c 	andi	r2,r2,128
   13fb0:	103ff21e 	bne	r2,zero,13f7c <__alt_data_end+0xf8013f7c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   13fb4:	01001904 	movi	r4,100
   13fb8:	001325c0 	call	1325c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   13fbc:	e0bffd17 	ldw	r2,-12(fp)
   13fc0:	e0ffff03 	ldbu	r3,-4(fp)
   13fc4:	10c00035 	stwio	r3,0(r2)
   13fc8:	00000106 	br	13fd0 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   13fcc:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   13fd0:	e037883a 	mov	sp,fp
   13fd4:	dfc00117 	ldw	ra,4(sp)
   13fd8:	df000017 	ldw	fp,0(sp)
   13fdc:	dec00204 	addi	sp,sp,8
   13fe0:	f800283a 	ret

00013fe4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   13fe4:	defffa04 	addi	sp,sp,-24
   13fe8:	dfc00515 	stw	ra,20(sp)
   13fec:	df000415 	stw	fp,16(sp)
   13ff0:	df000404 	addi	fp,sp,16
   13ff4:	e13ffe15 	stw	r4,-8(fp)
   13ff8:	2805883a 	mov	r2,r5
   13ffc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   14000:	e0bffe17 	ldw	r2,-8(fp)
   14004:	10800017 	ldw	r2,0(r2)
   14008:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   1400c:	008003f4 	movhi	r2,15
   14010:	10909004 	addi	r2,r2,16960
   14014:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   14018:	e0bffe17 	ldw	r2,-8(fp)
   1401c:	10800803 	ldbu	r2,32(r2)
   14020:	10803fcc 	andi	r2,r2,255
   14024:	1080201c 	xori	r2,r2,128
   14028:	10bfe004 	addi	r2,r2,-128
   1402c:	10001d1e 	bne	r2,zero,140a4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   14030:	00000906 	br	14058 <lcd_write_data+0x74>
    if (--i == 0)
   14034:	e0bffc17 	ldw	r2,-16(fp)
   14038:	10bfffc4 	addi	r2,r2,-1
   1403c:	e0bffc15 	stw	r2,-16(fp)
   14040:	e0bffc17 	ldw	r2,-16(fp)
   14044:	1000041e 	bne	r2,zero,14058 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   14048:	e0bffe17 	ldw	r2,-8(fp)
   1404c:	00c00044 	movi	r3,1
   14050:	10c00805 	stb	r3,32(r2)
      return;
   14054:	00001406 	br	140a8 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   14058:	e0bffd17 	ldw	r2,-12(fp)
   1405c:	10800104 	addi	r2,r2,4
   14060:	10800037 	ldwio	r2,0(r2)
   14064:	1080200c 	andi	r2,r2,128
   14068:	103ff21e 	bne	r2,zero,14034 <__alt_data_end+0xf8014034>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   1406c:	01001904 	movi	r4,100
   14070:	001325c0 	call	1325c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   14074:	e0bffd17 	ldw	r2,-12(fp)
   14078:	10800204 	addi	r2,r2,8
   1407c:	1007883a 	mov	r3,r2
   14080:	e0bfff03 	ldbu	r2,-4(fp)
   14084:	18800035 	stwio	r2,0(r3)

  sp->address++;
   14088:	e0bffe17 	ldw	r2,-8(fp)
   1408c:	108008c3 	ldbu	r2,35(r2)
   14090:	10800044 	addi	r2,r2,1
   14094:	1007883a 	mov	r3,r2
   14098:	e0bffe17 	ldw	r2,-8(fp)
   1409c:	10c008c5 	stb	r3,35(r2)
   140a0:	00000106 	br	140a8 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   140a4:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   140a8:	e037883a 	mov	sp,fp
   140ac:	dfc00117 	ldw	ra,4(sp)
   140b0:	df000017 	ldw	fp,0(sp)
   140b4:	dec00204 	addi	sp,sp,8
   140b8:	f800283a 	ret

000140bc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   140bc:	defffb04 	addi	sp,sp,-20
   140c0:	dfc00415 	stw	ra,16(sp)
   140c4:	df000315 	stw	fp,12(sp)
   140c8:	dc000215 	stw	r16,8(sp)
   140cc:	df000304 	addi	fp,sp,12
   140d0:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   140d4:	01400044 	movi	r5,1
   140d8:	e13ffe17 	ldw	r4,-8(fp)
   140dc:	0013f2c0 	call	13f2c <lcd_write_command>

  sp->x = 0;
   140e0:	e0bffe17 	ldw	r2,-8(fp)
   140e4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   140e8:	e0bffe17 	ldw	r2,-8(fp)
   140ec:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   140f0:	e0bffe17 	ldw	r2,-8(fp)
   140f4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   140f8:	e03ffd15 	stw	zero,-12(fp)
   140fc:	00001f06 	br	1417c <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   14100:	014018c4 	movi	r5,99
   14104:	e13ffd17 	ldw	r4,-12(fp)
   14108:	000fc140 	call	fc14 <__mulsi3>
   1410c:	10801004 	addi	r2,r2,64
   14110:	e0fffe17 	ldw	r3,-8(fp)
   14114:	1885883a 	add	r2,r3,r2
   14118:	01801444 	movi	r6,81
   1411c:	01400804 	movi	r5,32
   14120:	1009883a 	mov	r4,r2
   14124:	00031a00 	call	31a0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   14128:	014018c4 	movi	r5,99
   1412c:	e13ffd17 	ldw	r4,-12(fp)
   14130:	000fc140 	call	fc14 <__mulsi3>
   14134:	10800c04 	addi	r2,r2,48
   14138:	e0fffe17 	ldw	r3,-8(fp)
   1413c:	1885883a 	add	r2,r3,r2
   14140:	01800404 	movi	r6,16
   14144:	01400804 	movi	r5,32
   14148:	1009883a 	mov	r4,r2
   1414c:	00031a00 	call	31a0 <memset>
    sp->line[y].width = 0;
   14150:	e43ffe17 	ldw	r16,-8(fp)
   14154:	e0bffd17 	ldw	r2,-12(fp)
   14158:	014018c4 	movi	r5,99
   1415c:	1009883a 	mov	r4,r2
   14160:	000fc140 	call	fc14 <__mulsi3>
   14164:	8085883a 	add	r2,r16,r2
   14168:	10802444 	addi	r2,r2,145
   1416c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14170:	e0bffd17 	ldw	r2,-12(fp)
   14174:	10800044 	addi	r2,r2,1
   14178:	e0bffd15 	stw	r2,-12(fp)
   1417c:	e0bffd17 	ldw	r2,-12(fp)
   14180:	10800090 	cmplti	r2,r2,2
   14184:	103fde1e 	bne	r2,zero,14100 <__alt_data_end+0xf8014100>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   14188:	0001883a 	nop
   1418c:	e6ffff04 	addi	sp,fp,-4
   14190:	dfc00217 	ldw	ra,8(sp)
   14194:	df000117 	ldw	fp,4(sp)
   14198:	dc000017 	ldw	r16,0(sp)
   1419c:	dec00304 	addi	sp,sp,12
   141a0:	f800283a 	ret

000141a4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   141a4:	defff504 	addi	sp,sp,-44
   141a8:	dfc00a15 	stw	ra,40(sp)
   141ac:	df000915 	stw	fp,36(sp)
   141b0:	dc400815 	stw	r17,32(sp)
   141b4:	dc000715 	stw	r16,28(sp)
   141b8:	df000904 	addi	fp,sp,36
   141bc:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   141c0:	e0bffd17 	ldw	r2,-12(fp)
   141c4:	10800943 	ldbu	r2,37(r2)
   141c8:	10803fcc 	andi	r2,r2,255
   141cc:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   141d0:	e03ff715 	stw	zero,-36(fp)
   141d4:	00007206 	br	143a0 <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
   141d8:	e43ffd17 	ldw	r16,-12(fp)
   141dc:	e0bff717 	ldw	r2,-36(fp)
   141e0:	014018c4 	movi	r5,99
   141e4:	1009883a 	mov	r4,r2
   141e8:	000fc140 	call	fc14 <__mulsi3>
   141ec:	8085883a 	add	r2,r16,r2
   141f0:	10802444 	addi	r2,r2,145
   141f4:	10800003 	ldbu	r2,0(r2)
   141f8:	10803fcc 	andi	r2,r2,255
   141fc:	1080201c 	xori	r2,r2,128
   14200:	10bfe004 	addi	r2,r2,-128
   14204:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   14208:	e43ffd17 	ldw	r16,-12(fp)
   1420c:	e0bff717 	ldw	r2,-36(fp)
   14210:	014018c4 	movi	r5,99
   14214:	1009883a 	mov	r4,r2
   14218:	000fc140 	call	fc14 <__mulsi3>
   1421c:	8085883a 	add	r2,r16,r2
   14220:	10802484 	addi	r2,r2,146
   14224:	10800003 	ldbu	r2,0(r2)
   14228:	10803fcc 	andi	r2,r2,255
   1422c:	e17ffa17 	ldw	r5,-24(fp)
   14230:	1009883a 	mov	r4,r2
   14234:	000fc140 	call	fc14 <__mulsi3>
   14238:	1005d23a 	srai	r2,r2,8
   1423c:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   14240:	e0fff917 	ldw	r3,-28(fp)
   14244:	e0bffb17 	ldw	r2,-20(fp)
   14248:	18800116 	blt	r3,r2,14250 <lcd_repaint_screen+0xac>
      offset = 0;
   1424c:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   14250:	e03ff815 	stw	zero,-32(fp)
   14254:	00004c06 	br	14388 <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   14258:	e0fff817 	ldw	r3,-32(fp)
   1425c:	e0bff917 	ldw	r2,-28(fp)
   14260:	1885883a 	add	r2,r3,r2
   14264:	e17ffb17 	ldw	r5,-20(fp)
   14268:	1009883a 	mov	r4,r2
   1426c:	00013500 	call	1350 <__modsi3>
   14270:	1023883a 	mov	r17,r2
   14274:	e43ffd17 	ldw	r16,-12(fp)
   14278:	e0bff717 	ldw	r2,-36(fp)
   1427c:	014018c4 	movi	r5,99
   14280:	1009883a 	mov	r4,r2
   14284:	000fc140 	call	fc14 <__mulsi3>
   14288:	8085883a 	add	r2,r16,r2
   1428c:	1445883a 	add	r2,r2,r17
   14290:	10801004 	addi	r2,r2,64
   14294:	10800003 	ldbu	r2,0(r2)
   14298:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   1429c:	e43ffd17 	ldw	r16,-12(fp)
   142a0:	e0bff717 	ldw	r2,-36(fp)
   142a4:	014018c4 	movi	r5,99
   142a8:	1009883a 	mov	r4,r2
   142ac:	000fc140 	call	fc14 <__mulsi3>
   142b0:	8087883a 	add	r3,r16,r2
   142b4:	e0bff817 	ldw	r2,-32(fp)
   142b8:	1885883a 	add	r2,r3,r2
   142bc:	10800c04 	addi	r2,r2,48
   142c0:	10800003 	ldbu	r2,0(r2)
   142c4:	10c03fcc 	andi	r3,r2,255
   142c8:	18c0201c 	xori	r3,r3,128
   142cc:	18ffe004 	addi	r3,r3,-128
   142d0:	e0bffc07 	ldb	r2,-16(fp)
   142d4:	18802926 	beq	r3,r2,1437c <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   142d8:	e0fff717 	ldw	r3,-36(fp)
   142dc:	d0a00f04 	addi	r2,gp,-32708
   142e0:	1885883a 	add	r2,r3,r2
   142e4:	10800003 	ldbu	r2,0(r2)
   142e8:	1007883a 	mov	r3,r2
   142ec:	e0bff817 	ldw	r2,-32(fp)
   142f0:	1885883a 	add	r2,r3,r2
   142f4:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   142f8:	e0fffc43 	ldbu	r3,-15(fp)
   142fc:	e0bffd17 	ldw	r2,-12(fp)
   14300:	108008c3 	ldbu	r2,35(r2)
   14304:	10803fcc 	andi	r2,r2,255
   14308:	1080201c 	xori	r2,r2,128
   1430c:	10bfe004 	addi	r2,r2,-128
   14310:	18800a26 	beq	r3,r2,1433c <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   14314:	e0fffc43 	ldbu	r3,-15(fp)
   14318:	00bfe004 	movi	r2,-128
   1431c:	1884b03a 	or	r2,r3,r2
   14320:	10803fcc 	andi	r2,r2,255
   14324:	100b883a 	mov	r5,r2
   14328:	e13ffd17 	ldw	r4,-12(fp)
   1432c:	0013f2c0 	call	13f2c <lcd_write_command>
          sp->address = address;
   14330:	e0fffc43 	ldbu	r3,-15(fp)
   14334:	e0bffd17 	ldw	r2,-12(fp)
   14338:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   1433c:	e0bffc03 	ldbu	r2,-16(fp)
   14340:	10803fcc 	andi	r2,r2,255
   14344:	100b883a 	mov	r5,r2
   14348:	e13ffd17 	ldw	r4,-12(fp)
   1434c:	0013fe40 	call	13fe4 <lcd_write_data>
        sp->line[y].visible[x] = c;
   14350:	e43ffd17 	ldw	r16,-12(fp)
   14354:	e0bff717 	ldw	r2,-36(fp)
   14358:	014018c4 	movi	r5,99
   1435c:	1009883a 	mov	r4,r2
   14360:	000fc140 	call	fc14 <__mulsi3>
   14364:	8087883a 	add	r3,r16,r2
   14368:	e0bff817 	ldw	r2,-32(fp)
   1436c:	1885883a 	add	r2,r3,r2
   14370:	10800c04 	addi	r2,r2,48
   14374:	e0fffc03 	ldbu	r3,-16(fp)
   14378:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   1437c:	e0bff817 	ldw	r2,-32(fp)
   14380:	10800044 	addi	r2,r2,1
   14384:	e0bff815 	stw	r2,-32(fp)
   14388:	e0bff817 	ldw	r2,-32(fp)
   1438c:	10800410 	cmplti	r2,r2,16
   14390:	103fb11e 	bne	r2,zero,14258 <__alt_data_end+0xf8014258>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14394:	e0bff717 	ldw	r2,-36(fp)
   14398:	10800044 	addi	r2,r2,1
   1439c:	e0bff715 	stw	r2,-36(fp)
   143a0:	e0bff717 	ldw	r2,-36(fp)
   143a4:	10800090 	cmplti	r2,r2,2
   143a8:	103f8b1e 	bne	r2,zero,141d8 <__alt_data_end+0xf80141d8>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   143ac:	0001883a 	nop
   143b0:	e6fffe04 	addi	sp,fp,-8
   143b4:	dfc00317 	ldw	ra,12(sp)
   143b8:	df000217 	ldw	fp,8(sp)
   143bc:	dc400117 	ldw	r17,4(sp)
   143c0:	dc000017 	ldw	r16,0(sp)
   143c4:	dec00404 	addi	sp,sp,16
   143c8:	f800283a 	ret

000143cc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   143cc:	defffb04 	addi	sp,sp,-20
   143d0:	dfc00415 	stw	ra,16(sp)
   143d4:	df000315 	stw	fp,12(sp)
   143d8:	dc000215 	stw	r16,8(sp)
   143dc:	df000304 	addi	fp,sp,12
   143e0:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   143e4:	e03ffd15 	stw	zero,-12(fp)
   143e8:	00002206 	br	14474 <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   143ec:	e0bffd17 	ldw	r2,-12(fp)
   143f0:	00801316 	blt	zero,r2,14440 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   143f4:	014018c4 	movi	r5,99
   143f8:	e13ffd17 	ldw	r4,-12(fp)
   143fc:	000fc140 	call	fc14 <__mulsi3>
   14400:	10801004 	addi	r2,r2,64
   14404:	e0fffe17 	ldw	r3,-8(fp)
   14408:	18a1883a 	add	r16,r3,r2
   1440c:	e0bffd17 	ldw	r2,-12(fp)
   14410:	10800044 	addi	r2,r2,1
   14414:	014018c4 	movi	r5,99
   14418:	1009883a 	mov	r4,r2
   1441c:	000fc140 	call	fc14 <__mulsi3>
   14420:	10801004 	addi	r2,r2,64
   14424:	e0fffe17 	ldw	r3,-8(fp)
   14428:	1885883a 	add	r2,r3,r2
   1442c:	01801404 	movi	r6,80
   14430:	100b883a 	mov	r5,r2
   14434:	8009883a 	mov	r4,r16
   14438:	000a3580 	call	a358 <memcpy>
   1443c:	00000a06 	br	14468 <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   14440:	014018c4 	movi	r5,99
   14444:	e13ffd17 	ldw	r4,-12(fp)
   14448:	000fc140 	call	fc14 <__mulsi3>
   1444c:	10801004 	addi	r2,r2,64
   14450:	e0fffe17 	ldw	r3,-8(fp)
   14454:	1885883a 	add	r2,r3,r2
   14458:	01801404 	movi	r6,80
   1445c:	01400804 	movi	r5,32
   14460:	1009883a 	mov	r4,r2
   14464:	00031a00 	call	31a0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14468:	e0bffd17 	ldw	r2,-12(fp)
   1446c:	10800044 	addi	r2,r2,1
   14470:	e0bffd15 	stw	r2,-12(fp)
   14474:	e0bffd17 	ldw	r2,-12(fp)
   14478:	10800090 	cmplti	r2,r2,2
   1447c:	103fdb1e 	bne	r2,zero,143ec <__alt_data_end+0xf80143ec>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   14480:	e0bffe17 	ldw	r2,-8(fp)
   14484:	10800883 	ldbu	r2,34(r2)
   14488:	10bfffc4 	addi	r2,r2,-1
   1448c:	1007883a 	mov	r3,r2
   14490:	e0bffe17 	ldw	r2,-8(fp)
   14494:	10c00885 	stb	r3,34(r2)
}
   14498:	0001883a 	nop
   1449c:	e6ffff04 	addi	sp,fp,-4
   144a0:	dfc00217 	ldw	ra,8(sp)
   144a4:	df000117 	ldw	fp,4(sp)
   144a8:	dc000017 	ldw	r16,0(sp)
   144ac:	dec00304 	addi	sp,sp,12
   144b0:	f800283a 	ret

000144b4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   144b4:	defff904 	addi	sp,sp,-28
   144b8:	dfc00615 	stw	ra,24(sp)
   144bc:	df000515 	stw	fp,20(sp)
   144c0:	df000504 	addi	fp,sp,20
   144c4:	e13ffe15 	stw	r4,-8(fp)
   144c8:	2805883a 	mov	r2,r5
   144cc:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   144d0:	e03ffb15 	stw	zero,-20(fp)
   144d4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   144d8:	e0bffe17 	ldw	r2,-8(fp)
   144dc:	10800a03 	ldbu	r2,40(r2)
   144e0:	10803fcc 	andi	r2,r2,255
   144e4:	1080201c 	xori	r2,r2,128
   144e8:	10bfe004 	addi	r2,r2,-128
   144ec:	108016d8 	cmpnei	r2,r2,91
   144f0:	1000451e 	bne	r2,zero,14608 <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   144f4:	e0bffe17 	ldw	r2,-8(fp)
   144f8:	10800a04 	addi	r2,r2,40
   144fc:	10800044 	addi	r2,r2,1
   14500:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   14504:	00000e06 	br	14540 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   14508:	01400284 	movi	r5,10
   1450c:	e13ffb17 	ldw	r4,-20(fp)
   14510:	000fc140 	call	fc14 <__mulsi3>
   14514:	1009883a 	mov	r4,r2
   14518:	e0bffd17 	ldw	r2,-12(fp)
   1451c:	10c00044 	addi	r3,r2,1
   14520:	e0fffd15 	stw	r3,-12(fp)
   14524:	10800003 	ldbu	r2,0(r2)
   14528:	10803fcc 	andi	r2,r2,255
   1452c:	1080201c 	xori	r2,r2,128
   14530:	10bfe004 	addi	r2,r2,-128
   14534:	10bff404 	addi	r2,r2,-48
   14538:	2085883a 	add	r2,r4,r2
   1453c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   14540:	d0e01217 	ldw	r3,-32696(gp)
   14544:	e0bffd17 	ldw	r2,-12(fp)
   14548:	10800003 	ldbu	r2,0(r2)
   1454c:	10803fcc 	andi	r2,r2,255
   14550:	1080201c 	xori	r2,r2,128
   14554:	10bfe004 	addi	r2,r2,-128
   14558:	10800044 	addi	r2,r2,1
   1455c:	1885883a 	add	r2,r3,r2
   14560:	10800003 	ldbu	r2,0(r2)
   14564:	10803fcc 	andi	r2,r2,255
   14568:	1080010c 	andi	r2,r2,4
   1456c:	103fe61e 	bne	r2,zero,14508 <__alt_data_end+0xf8014508>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   14570:	e0bffd17 	ldw	r2,-12(fp)
   14574:	10800003 	ldbu	r2,0(r2)
   14578:	10803fcc 	andi	r2,r2,255
   1457c:	1080201c 	xori	r2,r2,128
   14580:	10bfe004 	addi	r2,r2,-128
   14584:	10800ed8 	cmpnei	r2,r2,59
   14588:	1000211e 	bne	r2,zero,14610 <lcd_handle_escape+0x15c>
    {
      ptr++;
   1458c:	e0bffd17 	ldw	r2,-12(fp)
   14590:	10800044 	addi	r2,r2,1
   14594:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   14598:	00000e06 	br	145d4 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   1459c:	01400284 	movi	r5,10
   145a0:	e13ffc17 	ldw	r4,-16(fp)
   145a4:	000fc140 	call	fc14 <__mulsi3>
   145a8:	1009883a 	mov	r4,r2
   145ac:	e0bffd17 	ldw	r2,-12(fp)
   145b0:	10c00044 	addi	r3,r2,1
   145b4:	e0fffd15 	stw	r3,-12(fp)
   145b8:	10800003 	ldbu	r2,0(r2)
   145bc:	10803fcc 	andi	r2,r2,255
   145c0:	1080201c 	xori	r2,r2,128
   145c4:	10bfe004 	addi	r2,r2,-128
   145c8:	10bff404 	addi	r2,r2,-48
   145cc:	2085883a 	add	r2,r4,r2
   145d0:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   145d4:	d0e01217 	ldw	r3,-32696(gp)
   145d8:	e0bffd17 	ldw	r2,-12(fp)
   145dc:	10800003 	ldbu	r2,0(r2)
   145e0:	10803fcc 	andi	r2,r2,255
   145e4:	1080201c 	xori	r2,r2,128
   145e8:	10bfe004 	addi	r2,r2,-128
   145ec:	10800044 	addi	r2,r2,1
   145f0:	1885883a 	add	r2,r3,r2
   145f4:	10800003 	ldbu	r2,0(r2)
   145f8:	10803fcc 	andi	r2,r2,255
   145fc:	1080010c 	andi	r2,r2,4
   14600:	103fe61e 	bne	r2,zero,1459c <__alt_data_end+0xf801459c>
   14604:	00000206 	br	14610 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   14608:	00bfffc4 	movi	r2,-1
   1460c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   14610:	e0bfff07 	ldb	r2,-4(fp)
   14614:	10c012a0 	cmpeqi	r3,r2,74
   14618:	1800291e 	bne	r3,zero,146c0 <lcd_handle_escape+0x20c>
   1461c:	10c012c8 	cmpgei	r3,r2,75
   14620:	1800031e 	bne	r3,zero,14630 <lcd_handle_escape+0x17c>
   14624:	10801220 	cmpeqi	r2,r2,72
   14628:	1000061e 	bne	r2,zero,14644 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   1462c:	00004c06 	br	14760 <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   14630:	10c012e0 	cmpeqi	r3,r2,75
   14634:	1800281e 	bne	r3,zero,146d8 <lcd_handle_escape+0x224>
   14638:	108019a0 	cmpeqi	r2,r2,102
   1463c:	1000011e 	bne	r2,zero,14644 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   14640:	00004706 	br	14760 <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   14644:	e0bffc17 	ldw	r2,-16(fp)
   14648:	0080050e 	bge	zero,r2,14660 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   1464c:	e0bffc17 	ldw	r2,-16(fp)
   14650:	10bfffc4 	addi	r2,r2,-1
   14654:	1007883a 	mov	r3,r2
   14658:	e0bffe17 	ldw	r2,-8(fp)
   1465c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   14660:	e0bffb17 	ldw	r2,-20(fp)
   14664:	0080390e 	bge	zero,r2,1474c <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   14668:	e0bffb17 	ldw	r2,-20(fp)
   1466c:	10bfffc4 	addi	r2,r2,-1
   14670:	1007883a 	mov	r3,r2
   14674:	e0bffe17 	ldw	r2,-8(fp)
   14678:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   1467c:	e0bffe17 	ldw	r2,-8(fp)
   14680:	10800883 	ldbu	r2,34(r2)
   14684:	10803fcc 	andi	r2,r2,255
   14688:	10800170 	cmpltui	r2,r2,5
   1468c:	1000061e 	bne	r2,zero,146a8 <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   14690:	e0bffe17 	ldw	r2,-8(fp)
   14694:	00c00104 	movi	r3,4
   14698:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   1469c:	00000206 	br	146a8 <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   146a0:	e13ffe17 	ldw	r4,-8(fp)
   146a4:	00143cc0 	call	143cc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   146a8:	e0bffe17 	ldw	r2,-8(fp)
   146ac:	10800883 	ldbu	r2,34(r2)
   146b0:	10803fcc 	andi	r2,r2,255
   146b4:	108000e8 	cmpgeui	r2,r2,3
   146b8:	103ff91e 	bne	r2,zero,146a0 <__alt_data_end+0xf80146a0>
        lcd_scroll_up(sp);
    }
    break;
   146bc:	00002306 	br	1474c <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   146c0:	e0bffb17 	ldw	r2,-20(fp)
   146c4:	10800098 	cmpnei	r2,r2,2
   146c8:	1000221e 	bne	r2,zero,14754 <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   146cc:	e13ffe17 	ldw	r4,-8(fp)
   146d0:	00140bc0 	call	140bc <lcd_clear_screen>
    break;
   146d4:	00001f06 	br	14754 <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   146d8:	e0bffb17 	ldw	r2,-20(fp)
   146dc:	00801f16 	blt	zero,r2,1475c <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   146e0:	e0bffe17 	ldw	r2,-8(fp)
   146e4:	10800843 	ldbu	r2,33(r2)
   146e8:	10803fcc 	andi	r2,r2,255
   146ec:	10801428 	cmpgeui	r2,r2,80
   146f0:	10001a1e 	bne	r2,zero,1475c <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   146f4:	e0bffe17 	ldw	r2,-8(fp)
   146f8:	10800883 	ldbu	r2,34(r2)
   146fc:	10803fcc 	andi	r2,r2,255
   14700:	014018c4 	movi	r5,99
   14704:	1009883a 	mov	r4,r2
   14708:	000fc140 	call	fc14 <__mulsi3>
   1470c:	10801004 	addi	r2,r2,64
   14710:	e0fffe17 	ldw	r3,-8(fp)
   14714:	1887883a 	add	r3,r3,r2
   14718:	e0bffe17 	ldw	r2,-8(fp)
   1471c:	10800843 	ldbu	r2,33(r2)
   14720:	10803fcc 	andi	r2,r2,255
   14724:	1889883a 	add	r4,r3,r2
   14728:	e0bffe17 	ldw	r2,-8(fp)
   1472c:	10800843 	ldbu	r2,33(r2)
   14730:	10803fcc 	andi	r2,r2,255
   14734:	00c01404 	movi	r3,80
   14738:	1885c83a 	sub	r2,r3,r2
   1473c:	100d883a 	mov	r6,r2
   14740:	01400804 	movi	r5,32
   14744:	00031a00 	call	31a0 <memset>
    }
    break;
   14748:	00000406 	br	1475c <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   1474c:	0001883a 	nop
   14750:	00000306 	br	14760 <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   14754:	0001883a 	nop
   14758:	00000106 	br	14760 <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   1475c:	0001883a 	nop
  }
}
   14760:	0001883a 	nop
   14764:	e037883a 	mov	sp,fp
   14768:	dfc00117 	ldw	ra,4(sp)
   1476c:	df000017 	ldw	fp,0(sp)
   14770:	dec00204 	addi	sp,sp,8
   14774:	f800283a 	ret

00014778 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   14778:	defff104 	addi	sp,sp,-60
   1477c:	dfc00e15 	stw	ra,56(sp)
   14780:	df000d15 	stw	fp,52(sp)
   14784:	dc400c15 	stw	r17,48(sp)
   14788:	dc000b15 	stw	r16,44(sp)
   1478c:	df000d04 	addi	fp,sp,52
   14790:	e13ffa15 	stw	r4,-24(fp)
   14794:	e17ffb15 	stw	r5,-20(fp)
   14798:	e1bffc15 	stw	r6,-16(fp)
   1479c:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   147a0:	e0bffc17 	ldw	r2,-16(fp)
   147a4:	e0fffb17 	ldw	r3,-20(fp)
   147a8:	1885883a 	add	r2,r3,r2
   147ac:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   147b0:	e0bffa17 	ldw	r2,-24(fp)
   147b4:	00c00044 	movi	r3,1
   147b8:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   147bc:	00009b06 	br	14a2c <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   147c0:	e0bffb17 	ldw	r2,-20(fp)
   147c4:	10800003 	ldbu	r2,0(r2)
   147c8:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   147cc:	e0bffa17 	ldw	r2,-24(fp)
   147d0:	10800903 	ldbu	r2,36(r2)
   147d4:	10803fcc 	andi	r2,r2,255
   147d8:	1080201c 	xori	r2,r2,128
   147dc:	10bfe004 	addi	r2,r2,-128
   147e0:	10003716 	blt	r2,zero,148c0 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   147e4:	e0bffa17 	ldw	r2,-24(fp)
   147e8:	10800903 	ldbu	r2,36(r2)
   147ec:	10803fcc 	andi	r2,r2,255
   147f0:	1080201c 	xori	r2,r2,128
   147f4:	10bfe004 	addi	r2,r2,-128
   147f8:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   147fc:	e0bff817 	ldw	r2,-32(fp)
   14800:	1000031e 	bne	r2,zero,14810 <altera_avalon_lcd_16207_write+0x98>
   14804:	e0bff707 	ldb	r2,-36(fp)
   14808:	108016d8 	cmpnei	r2,r2,91
   1480c:	10000d1e 	bne	r2,zero,14844 <altera_avalon_lcd_16207_write+0xcc>
   14810:	e0bff817 	ldw	r2,-32(fp)
   14814:	10001826 	beq	r2,zero,14878 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   14818:	d0e01217 	ldw	r3,-32696(gp)
   1481c:	e0bff707 	ldb	r2,-36(fp)
   14820:	10800044 	addi	r2,r2,1
   14824:	1885883a 	add	r2,r3,r2
   14828:	10800003 	ldbu	r2,0(r2)
   1482c:	10803fcc 	andi	r2,r2,255
   14830:	1080010c 	andi	r2,r2,4
   14834:	1000101e 	bne	r2,zero,14878 <altera_avalon_lcd_16207_write+0x100>
   14838:	e0bff707 	ldb	r2,-36(fp)
   1483c:	10800ee0 	cmpeqi	r2,r2,59
   14840:	10000d1e 	bne	r2,zero,14878 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   14844:	e0fffa17 	ldw	r3,-24(fp)
   14848:	e0bff817 	ldw	r2,-32(fp)
   1484c:	1885883a 	add	r2,r3,r2
   14850:	10800a04 	addi	r2,r2,40
   14854:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   14858:	e0bff707 	ldb	r2,-36(fp)
   1485c:	100b883a 	mov	r5,r2
   14860:	e13ffa17 	ldw	r4,-24(fp)
   14864:	00144b40 	call	144b4 <lcd_handle_escape>

        sp->esccount = -1;
   14868:	e0bffa17 	ldw	r2,-24(fp)
   1486c:	00ffffc4 	movi	r3,-1
   14870:	10c00905 	stb	r3,36(r2)
   14874:	00006a06 	br	14a20 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   14878:	e0bffa17 	ldw	r2,-24(fp)
   1487c:	10800903 	ldbu	r2,36(r2)
   14880:	10803fcc 	andi	r2,r2,255
   14884:	108001e8 	cmpgeui	r2,r2,7
   14888:	1000651e 	bne	r2,zero,14a20 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   1488c:	e0fffa17 	ldw	r3,-24(fp)
   14890:	e0bff817 	ldw	r2,-32(fp)
   14894:	1885883a 	add	r2,r3,r2
   14898:	10800a04 	addi	r2,r2,40
   1489c:	e0fff703 	ldbu	r3,-36(fp)
   148a0:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   148a4:	e0bffa17 	ldw	r2,-24(fp)
   148a8:	10800903 	ldbu	r2,36(r2)
   148ac:	10800044 	addi	r2,r2,1
   148b0:	1007883a 	mov	r3,r2
   148b4:	e0bffa17 	ldw	r2,-24(fp)
   148b8:	10c00905 	stb	r3,36(r2)
   148bc:	00005806 	br	14a20 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   148c0:	e0bff707 	ldb	r2,-36(fp)
   148c4:	108006d8 	cmpnei	r2,r2,27
   148c8:	1000031e 	bne	r2,zero,148d8 <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   148cc:	e0bffa17 	ldw	r2,-24(fp)
   148d0:	10000905 	stb	zero,36(r2)
   148d4:	00005206 	br	14a20 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   148d8:	e0bff707 	ldb	r2,-36(fp)
   148dc:	10800358 	cmpnei	r2,r2,13
   148e0:	1000031e 	bne	r2,zero,148f0 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   148e4:	e0bffa17 	ldw	r2,-24(fp)
   148e8:	10000845 	stb	zero,33(r2)
   148ec:	00004c06 	br	14a20 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   148f0:	e0bff707 	ldb	r2,-36(fp)
   148f4:	10800298 	cmpnei	r2,r2,10
   148f8:	1000101e 	bne	r2,zero,1493c <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   148fc:	e0bffa17 	ldw	r2,-24(fp)
   14900:	10000845 	stb	zero,33(r2)
      sp->y++;
   14904:	e0bffa17 	ldw	r2,-24(fp)
   14908:	10800883 	ldbu	r2,34(r2)
   1490c:	10800044 	addi	r2,r2,1
   14910:	1007883a 	mov	r3,r2
   14914:	e0bffa17 	ldw	r2,-24(fp)
   14918:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   1491c:	e0bffa17 	ldw	r2,-24(fp)
   14920:	10800883 	ldbu	r2,34(r2)
   14924:	10803fcc 	andi	r2,r2,255
   14928:	108000f0 	cmpltui	r2,r2,3
   1492c:	10003c1e 	bne	r2,zero,14a20 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   14930:	e13ffa17 	ldw	r4,-24(fp)
   14934:	00143cc0 	call	143cc <lcd_scroll_up>
   14938:	00003906 	br	14a20 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   1493c:	e0bff707 	ldb	r2,-36(fp)
   14940:	10800218 	cmpnei	r2,r2,8
   14944:	10000b1e 	bne	r2,zero,14974 <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   14948:	e0bffa17 	ldw	r2,-24(fp)
   1494c:	10800843 	ldbu	r2,33(r2)
   14950:	10803fcc 	andi	r2,r2,255
   14954:	10003226 	beq	r2,zero,14a20 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   14958:	e0bffa17 	ldw	r2,-24(fp)
   1495c:	10800843 	ldbu	r2,33(r2)
   14960:	10bfffc4 	addi	r2,r2,-1
   14964:	1007883a 	mov	r3,r2
   14968:	e0bffa17 	ldw	r2,-24(fp)
   1496c:	10c00845 	stb	r3,33(r2)
   14970:	00002b06 	br	14a20 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   14974:	d0e01217 	ldw	r3,-32696(gp)
   14978:	e0bff707 	ldb	r2,-36(fp)
   1497c:	10800044 	addi	r2,r2,1
   14980:	1885883a 	add	r2,r3,r2
   14984:	10800003 	ldbu	r2,0(r2)
   14988:	10803fcc 	andi	r2,r2,255
   1498c:	1080201c 	xori	r2,r2,128
   14990:	10bfe004 	addi	r2,r2,-128
   14994:	108025cc 	andi	r2,r2,151
   14998:	10002126 	beq	r2,zero,14a20 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   1499c:	e0bffa17 	ldw	r2,-24(fp)
   149a0:	10800883 	ldbu	r2,34(r2)
   149a4:	10803fcc 	andi	r2,r2,255
   149a8:	108000b0 	cmpltui	r2,r2,2
   149ac:	1000021e 	bne	r2,zero,149b8 <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   149b0:	e13ffa17 	ldw	r4,-24(fp)
   149b4:	00143cc0 	call	143cc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   149b8:	e0bffa17 	ldw	r2,-24(fp)
   149bc:	10800843 	ldbu	r2,33(r2)
   149c0:	10803fcc 	andi	r2,r2,255
   149c4:	10801428 	cmpgeui	r2,r2,80
   149c8:	10000f1e 	bne	r2,zero,14a08 <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   149cc:	e0bffa17 	ldw	r2,-24(fp)
   149d0:	10800883 	ldbu	r2,34(r2)
   149d4:	10c03fcc 	andi	r3,r2,255
   149d8:	e0bffa17 	ldw	r2,-24(fp)
   149dc:	10800843 	ldbu	r2,33(r2)
   149e0:	14003fcc 	andi	r16,r2,255
   149e4:	e47ffa17 	ldw	r17,-24(fp)
   149e8:	014018c4 	movi	r5,99
   149ec:	1809883a 	mov	r4,r3
   149f0:	000fc140 	call	fc14 <__mulsi3>
   149f4:	8885883a 	add	r2,r17,r2
   149f8:	1405883a 	add	r2,r2,r16
   149fc:	10801004 	addi	r2,r2,64
   14a00:	e0fff703 	ldbu	r3,-36(fp)
   14a04:	10c00005 	stb	r3,0(r2)

      sp->x++;
   14a08:	e0bffa17 	ldw	r2,-24(fp)
   14a0c:	10800843 	ldbu	r2,33(r2)
   14a10:	10800044 	addi	r2,r2,1
   14a14:	1007883a 	mov	r3,r2
   14a18:	e0bffa17 	ldw	r2,-24(fp)
   14a1c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   14a20:	e0bffb17 	ldw	r2,-20(fp)
   14a24:	10800044 	addi	r2,r2,1
   14a28:	e0bffb15 	stw	r2,-20(fp)
   14a2c:	e0fffb17 	ldw	r3,-20(fp)
   14a30:	e0bff617 	ldw	r2,-40(fp)
   14a34:	18bf6236 	bltu	r3,r2,147c0 <__alt_data_end+0xf80147c0>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   14a38:	00800404 	movi	r2,16
   14a3c:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14a40:	e03ff315 	stw	zero,-52(fp)
   14a44:	00003d06 	br	14b3c <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   14a48:	00801404 	movi	r2,80
   14a4c:	e0bff515 	stw	r2,-44(fp)
   14a50:	00001306 	br	14aa0 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   14a54:	e0bff517 	ldw	r2,-44(fp)
   14a58:	143fffc4 	addi	r16,r2,-1
   14a5c:	e47ffa17 	ldw	r17,-24(fp)
   14a60:	e0bff317 	ldw	r2,-52(fp)
   14a64:	014018c4 	movi	r5,99
   14a68:	1009883a 	mov	r4,r2
   14a6c:	000fc140 	call	fc14 <__mulsi3>
   14a70:	8885883a 	add	r2,r17,r2
   14a74:	1405883a 	add	r2,r2,r16
   14a78:	10801004 	addi	r2,r2,64
   14a7c:	10800003 	ldbu	r2,0(r2)
   14a80:	10803fcc 	andi	r2,r2,255
   14a84:	1080201c 	xori	r2,r2,128
   14a88:	10bfe004 	addi	r2,r2,-128
   14a8c:	10800820 	cmpeqi	r2,r2,32
   14a90:	10000626 	beq	r2,zero,14aac <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   14a94:	e0bff517 	ldw	r2,-44(fp)
   14a98:	10bfffc4 	addi	r2,r2,-1
   14a9c:	e0bff515 	stw	r2,-44(fp)
   14aa0:	e0bff517 	ldw	r2,-44(fp)
   14aa4:	00bfeb16 	blt	zero,r2,14a54 <__alt_data_end+0xf8014a54>
   14aa8:	00000106 	br	14ab0 <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   14aac:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   14ab0:	e0bff517 	ldw	r2,-44(fp)
   14ab4:	10800448 	cmpgei	r2,r2,17
   14ab8:	1000031e 	bne	r2,zero,14ac8 <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   14abc:	00800404 	movi	r2,16
   14ac0:	e0bff515 	stw	r2,-44(fp)
   14ac4:	00000306 	br	14ad4 <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   14ac8:	e0bff517 	ldw	r2,-44(fp)
   14acc:	10800044 	addi	r2,r2,1
   14ad0:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   14ad4:	e0bff517 	ldw	r2,-44(fp)
   14ad8:	1023883a 	mov	r17,r2
   14adc:	e43ffa17 	ldw	r16,-24(fp)
   14ae0:	e0bff317 	ldw	r2,-52(fp)
   14ae4:	014018c4 	movi	r5,99
   14ae8:	1009883a 	mov	r4,r2
   14aec:	000fc140 	call	fc14 <__mulsi3>
   14af0:	8085883a 	add	r2,r16,r2
   14af4:	10802444 	addi	r2,r2,145
   14af8:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   14afc:	e0fff417 	ldw	r3,-48(fp)
   14b00:	e0bff517 	ldw	r2,-44(fp)
   14b04:	1880020e 	bge	r3,r2,14b10 <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   14b08:	e0bff517 	ldw	r2,-44(fp)
   14b0c:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   14b10:	e43ffa17 	ldw	r16,-24(fp)
   14b14:	e0bff317 	ldw	r2,-52(fp)
   14b18:	014018c4 	movi	r5,99
   14b1c:	1009883a 	mov	r4,r2
   14b20:	000fc140 	call	fc14 <__mulsi3>
   14b24:	8085883a 	add	r2,r16,r2
   14b28:	10802484 	addi	r2,r2,146
   14b2c:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14b30:	e0bff317 	ldw	r2,-52(fp)
   14b34:	10800044 	addi	r2,r2,1
   14b38:	e0bff315 	stw	r2,-52(fp)
   14b3c:	e0bff317 	ldw	r2,-52(fp)
   14b40:	10800090 	cmplti	r2,r2,2
   14b44:	103fc01e 	bne	r2,zero,14a48 <__alt_data_end+0xf8014a48>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   14b48:	e0bff417 	ldw	r2,-48(fp)
   14b4c:	10800448 	cmpgei	r2,r2,17
   14b50:	1000031e 	bne	r2,zero,14b60 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   14b54:	e0bffa17 	ldw	r2,-24(fp)
   14b58:	10000985 	stb	zero,38(r2)
   14b5c:	00003406 	br	14c30 <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   14b60:	e0bff417 	ldw	r2,-48(fp)
   14b64:	1085883a 	add	r2,r2,r2
   14b68:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   14b6c:	e0bff417 	ldw	r2,-48(fp)
   14b70:	1007883a 	mov	r3,r2
   14b74:	e0bffa17 	ldw	r2,-24(fp)
   14b78:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14b7c:	e03ff315 	stw	zero,-52(fp)
   14b80:	00002806 	br	14c24 <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   14b84:	e43ffa17 	ldw	r16,-24(fp)
   14b88:	e0bff317 	ldw	r2,-52(fp)
   14b8c:	014018c4 	movi	r5,99
   14b90:	1009883a 	mov	r4,r2
   14b94:	000fc140 	call	fc14 <__mulsi3>
   14b98:	8085883a 	add	r2,r16,r2
   14b9c:	10802444 	addi	r2,r2,145
   14ba0:	10800003 	ldbu	r2,0(r2)
   14ba4:	10803fcc 	andi	r2,r2,255
   14ba8:	1080201c 	xori	r2,r2,128
   14bac:	10bfe004 	addi	r2,r2,-128
   14bb0:	10800450 	cmplti	r2,r2,17
   14bb4:	1000181e 	bne	r2,zero,14c18 <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   14bb8:	e43ffa17 	ldw	r16,-24(fp)
   14bbc:	e0bff317 	ldw	r2,-52(fp)
   14bc0:	014018c4 	movi	r5,99
   14bc4:	1009883a 	mov	r4,r2
   14bc8:	000fc140 	call	fc14 <__mulsi3>
   14bcc:	8085883a 	add	r2,r16,r2
   14bd0:	10802444 	addi	r2,r2,145
   14bd4:	10800003 	ldbu	r2,0(r2)
   14bd8:	10803fcc 	andi	r2,r2,255
   14bdc:	1080201c 	xori	r2,r2,128
   14be0:	10bfe004 	addi	r2,r2,-128
   14be4:	1004923a 	slli	r2,r2,8
   14be8:	e17ff417 	ldw	r5,-48(fp)
   14bec:	1009883a 	mov	r4,r2
   14bf0:	00012cc0 	call	12cc <__divsi3>
   14bf4:	1023883a 	mov	r17,r2
   14bf8:	e43ffa17 	ldw	r16,-24(fp)
   14bfc:	e0bff317 	ldw	r2,-52(fp)
   14c00:	014018c4 	movi	r5,99
   14c04:	1009883a 	mov	r4,r2
   14c08:	000fc140 	call	fc14 <__mulsi3>
   14c0c:	8085883a 	add	r2,r16,r2
   14c10:	10802484 	addi	r2,r2,146
   14c14:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   14c18:	e0bff317 	ldw	r2,-52(fp)
   14c1c:	10800044 	addi	r2,r2,1
   14c20:	e0bff315 	stw	r2,-52(fp)
   14c24:	e0bff317 	ldw	r2,-52(fp)
   14c28:	10800090 	cmplti	r2,r2,2
   14c2c:	103fd51e 	bne	r2,zero,14b84 <__alt_data_end+0xf8014b84>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   14c30:	e0bffa17 	ldw	r2,-24(fp)
   14c34:	10800943 	ldbu	r2,37(r2)
   14c38:	10803fcc 	andi	r2,r2,255
   14c3c:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   14c40:	e13ffa17 	ldw	r4,-24(fp)
   14c44:	00141a40 	call	141a4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   14c48:	e0bffa17 	ldw	r2,-24(fp)
   14c4c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   14c50:	e0bffa17 	ldw	r2,-24(fp)
   14c54:	10800943 	ldbu	r2,37(r2)
   14c58:	10c03fcc 	andi	r3,r2,255
   14c5c:	e0bff917 	ldw	r2,-28(fp)
   14c60:	18800426 	beq	r3,r2,14c74 <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   14c64:	e0bffa17 	ldw	r2,-24(fp)
   14c68:	00c00044 	movi	r3,1
   14c6c:	10c009c5 	stb	r3,39(r2)
  }
   14c70:	003fef06 	br	14c30 <__alt_data_end+0xf8014c30>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   14c74:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   14c78:	e0bffc17 	ldw	r2,-16(fp)
}
   14c7c:	e6fffe04 	addi	sp,fp,-8
   14c80:	dfc00317 	ldw	ra,12(sp)
   14c84:	df000217 	ldw	fp,8(sp)
   14c88:	dc400117 	ldw	r17,4(sp)
   14c8c:	dc000017 	ldw	r16,0(sp)
   14c90:	dec00404 	addi	sp,sp,16
   14c94:	f800283a 	ret

00014c98 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   14c98:	defffc04 	addi	sp,sp,-16
   14c9c:	dfc00315 	stw	ra,12(sp)
   14ca0:	df000215 	stw	fp,8(sp)
   14ca4:	df000204 	addi	fp,sp,8
   14ca8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   14cac:	e0bfff17 	ldw	r2,-4(fp)
   14cb0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   14cb4:	e0bffe17 	ldw	r2,-8(fp)
   14cb8:	10800943 	ldbu	r2,37(r2)
   14cbc:	10803fcc 	andi	r2,r2,255
   14cc0:	10c00044 	addi	r3,r2,1
   14cc4:	e0bffe17 	ldw	r2,-8(fp)
   14cc8:	10800983 	ldbu	r2,38(r2)
   14ccc:	10803fcc 	andi	r2,r2,255
   14cd0:	18800316 	blt	r3,r2,14ce0 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   14cd4:	e0bffe17 	ldw	r2,-8(fp)
   14cd8:	10000945 	stb	zero,37(r2)
   14cdc:	00000606 	br	14cf8 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   14ce0:	e0bffe17 	ldw	r2,-8(fp)
   14ce4:	10800943 	ldbu	r2,37(r2)
   14ce8:	10800044 	addi	r2,r2,1
   14cec:	1007883a 	mov	r3,r2
   14cf0:	e0bffe17 	ldw	r2,-8(fp)
   14cf4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   14cf8:	e0bffe17 	ldw	r2,-8(fp)
   14cfc:	10800983 	ldbu	r2,38(r2)
   14d00:	10803fcc 	andi	r2,r2,255
   14d04:	10000826 	beq	r2,zero,14d28 <alt_lcd_16207_timeout+0x90>
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	108009c3 	ldbu	r2,39(r2)
   14d10:	10803fcc 	andi	r2,r2,255
   14d14:	1080201c 	xori	r2,r2,128
   14d18:	10bfe004 	addi	r2,r2,-128
   14d1c:	1000021e 	bne	r2,zero,14d28 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   14d20:	e13ffe17 	ldw	r4,-8(fp)
   14d24:	00141a40 	call	141a4 <lcd_repaint_screen>

  return sp->period;
   14d28:	e0bffe17 	ldw	r2,-8(fp)
   14d2c:	10800717 	ldw	r2,28(r2)
}
   14d30:	e037883a 	mov	sp,fp
   14d34:	dfc00117 	ldw	ra,4(sp)
   14d38:	df000017 	ldw	fp,0(sp)
   14d3c:	dec00204 	addi	sp,sp,8
   14d40:	f800283a 	ret

00014d44 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   14d44:	defffc04 	addi	sp,sp,-16
   14d48:	dfc00315 	stw	ra,12(sp)
   14d4c:	df000215 	stw	fp,8(sp)
   14d50:	df000204 	addi	fp,sp,8
   14d54:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   14d58:	e0bfff17 	ldw	r2,-4(fp)
   14d5c:	10800017 	ldw	r2,0(r2)
   14d60:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   14d64:	e0bfff17 	ldw	r2,-4(fp)
   14d68:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   14d6c:	010ea604 	movi	r4,15000
   14d70:	001325c0 	call	1325c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   14d74:	e0bffe17 	ldw	r2,-8(fp)
   14d78:	00c00c04 	movi	r3,48
   14d7c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   14d80:	01040104 	movi	r4,4100
   14d84:	001325c0 	call	1325c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   14d88:	e0bffe17 	ldw	r2,-8(fp)
   14d8c:	00c00c04 	movi	r3,48
   14d90:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   14d94:	0100fa04 	movi	r4,1000
   14d98:	001325c0 	call	1325c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   14d9c:	e0bffe17 	ldw	r2,-8(fp)
   14da0:	00c00c04 	movi	r3,48
   14da4:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   14da8:	01400e04 	movi	r5,56
   14dac:	e13fff17 	ldw	r4,-4(fp)
   14db0:	0013f2c0 	call	13f2c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   14db4:	01400204 	movi	r5,8
   14db8:	e13fff17 	ldw	r4,-4(fp)
   14dbc:	0013f2c0 	call	13f2c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   14dc0:	e13fff17 	ldw	r4,-4(fp)
   14dc4:	00140bc0 	call	140bc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   14dc8:	01400184 	movi	r5,6
   14dcc:	e13fff17 	ldw	r4,-4(fp)
   14dd0:	0013f2c0 	call	13f2c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   14dd4:	01400304 	movi	r5,12
   14dd8:	e13fff17 	ldw	r4,-4(fp)
   14ddc:	0013f2c0 	call	13f2c <lcd_write_command>

  sp->esccount = -1;
   14de0:	e0bfff17 	ldw	r2,-4(fp)
   14de4:	00ffffc4 	movi	r3,-1
   14de8:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   14dec:	e0bfff17 	ldw	r2,-4(fp)
   14df0:	10800a04 	addi	r2,r2,40
   14df4:	01800204 	movi	r6,8
   14df8:	000b883a 	mov	r5,zero
   14dfc:	1009883a 	mov	r4,r2
   14e00:	00031a00 	call	31a0 <memset>

  sp->scrollpos = 0;
   14e04:	e0bfff17 	ldw	r2,-4(fp)
   14e08:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   14e0c:	e0bfff17 	ldw	r2,-4(fp)
   14e10:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	100009c5 	stb	zero,39(r2)
   14e1c:	d0a73f17 	ldw	r2,-25348(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   14e20:	01400284 	movi	r5,10
   14e24:	1009883a 	mov	r4,r2
   14e28:	00013c40 	call	13c4 <__udivsi3>
   14e2c:	1007883a 	mov	r3,r2
   14e30:	e0bfff17 	ldw	r2,-4(fp)
   14e34:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   14e38:	e0bfff17 	ldw	r2,-4(fp)
   14e3c:	10c00104 	addi	r3,r2,4
   14e40:	e0bfff17 	ldw	r2,-4(fp)
   14e44:	10800717 	ldw	r2,28(r2)
   14e48:	e1ffff17 	ldw	r7,-4(fp)
   14e4c:	01800074 	movhi	r6,1
   14e50:	31932604 	addi	r6,r6,19608
   14e54:	100b883a 	mov	r5,r2
   14e58:	1809883a 	mov	r4,r3
   14e5c:	0014fcc0 	call	14fcc <alt_alarm_start>
}
   14e60:	0001883a 	nop
   14e64:	e037883a 	mov	sp,fp
   14e68:	dfc00117 	ldw	ra,4(sp)
   14e6c:	df000017 	ldw	fp,0(sp)
   14e70:	dec00204 	addi	sp,sp,8
   14e74:	f800283a 	ret

00014e78 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14e78:	defffa04 	addi	sp,sp,-24
   14e7c:	dfc00515 	stw	ra,20(sp)
   14e80:	df000415 	stw	fp,16(sp)
   14e84:	df000404 	addi	fp,sp,16
   14e88:	e13ffd15 	stw	r4,-12(fp)
   14e8c:	e17ffe15 	stw	r5,-8(fp)
   14e90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   14e94:	e0bffd17 	ldw	r2,-12(fp)
   14e98:	10800017 	ldw	r2,0(r2)
   14e9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   14ea0:	e0bffc17 	ldw	r2,-16(fp)
   14ea4:	10c00a04 	addi	r3,r2,40
   14ea8:	e0bffd17 	ldw	r2,-12(fp)
   14eac:	10800217 	ldw	r2,8(r2)
   14eb0:	100f883a 	mov	r7,r2
   14eb4:	e1bfff17 	ldw	r6,-4(fp)
   14eb8:	e17ffe17 	ldw	r5,-8(fp)
   14ebc:	1809883a 	mov	r4,r3
   14ec0:	00147780 	call	14778 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   14ec4:	e037883a 	mov	sp,fp
   14ec8:	dfc00117 	ldw	ra,4(sp)
   14ecc:	df000017 	ldw	fp,0(sp)
   14ed0:	dec00204 	addi	sp,sp,8
   14ed4:	f800283a 	ret

00014ed8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14ed8:	defffa04 	addi	sp,sp,-24
   14edc:	dfc00515 	stw	ra,20(sp)
   14ee0:	df000415 	stw	fp,16(sp)
   14ee4:	df000404 	addi	fp,sp,16
   14ee8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14eec:	0007883a 	mov	r3,zero
   14ef0:	e0bfff17 	ldw	r2,-4(fp)
   14ef4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14ef8:	e0bfff17 	ldw	r2,-4(fp)
   14efc:	10800104 	addi	r2,r2,4
   14f00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f04:	0005303a 	rdctl	r2,status
   14f08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f0c:	e0fffd17 	ldw	r3,-12(fp)
   14f10:	00bfff84 	movi	r2,-2
   14f14:	1884703a 	and	r2,r3,r2
   14f18:	1001703a 	wrctl	status,r2
  
  return context;
   14f1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14f20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14f24:	00159240 	call	15924 <alt_tick>
   14f28:	e0bffc17 	ldw	r2,-16(fp)
   14f2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f30:	e0bffe17 	ldw	r2,-8(fp)
   14f34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14f38:	0001883a 	nop
   14f3c:	e037883a 	mov	sp,fp
   14f40:	dfc00117 	ldw	ra,4(sp)
   14f44:	df000017 	ldw	fp,0(sp)
   14f48:	dec00204 	addi	sp,sp,8
   14f4c:	f800283a 	ret

00014f50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14f50:	defff804 	addi	sp,sp,-32
   14f54:	dfc00715 	stw	ra,28(sp)
   14f58:	df000615 	stw	fp,24(sp)
   14f5c:	df000604 	addi	fp,sp,24
   14f60:	e13ffc15 	stw	r4,-16(fp)
   14f64:	e17ffd15 	stw	r5,-12(fp)
   14f68:	e1bffe15 	stw	r6,-8(fp)
   14f6c:	e1ffff15 	stw	r7,-4(fp)
   14f70:	e0bfff17 	ldw	r2,-4(fp)
   14f74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14f78:	d0a73f17 	ldw	r2,-25348(gp)
   14f7c:	1000021e 	bne	r2,zero,14f88 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   14f80:	e0bffb17 	ldw	r2,-20(fp)
   14f84:	d0a73f15 	stw	r2,-25348(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14f88:	e0bffc17 	ldw	r2,-16(fp)
   14f8c:	10800104 	addi	r2,r2,4
   14f90:	00c001c4 	movi	r3,7
   14f94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14f98:	d8000015 	stw	zero,0(sp)
   14f9c:	e1fffc17 	ldw	r7,-16(fp)
   14fa0:	01800074 	movhi	r6,1
   14fa4:	3193b604 	addi	r6,r6,20184
   14fa8:	e17ffe17 	ldw	r5,-8(fp)
   14fac:	e13ffd17 	ldw	r4,-12(fp)
   14fb0:	00127140 	call	12714 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14fb4:	0001883a 	nop
   14fb8:	e037883a 	mov	sp,fp
   14fbc:	dfc00117 	ldw	ra,4(sp)
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00204 	addi	sp,sp,8
   14fc8:	f800283a 	ret

00014fcc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14fcc:	defff504 	addi	sp,sp,-44
   14fd0:	df000a15 	stw	fp,40(sp)
   14fd4:	df000a04 	addi	fp,sp,40
   14fd8:	e13ffc15 	stw	r4,-16(fp)
   14fdc:	e17ffd15 	stw	r5,-12(fp)
   14fe0:	e1bffe15 	stw	r6,-8(fp)
   14fe4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14fe8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14fec:	d0a73f17 	ldw	r2,-25348(gp)
  
  if (alt_ticks_per_second ())
   14ff0:	10003c26 	beq	r2,zero,150e4 <alt_alarm_start+0x118>
  {
    if (alarm)
   14ff4:	e0bffc17 	ldw	r2,-16(fp)
   14ff8:	10003826 	beq	r2,zero,150dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14ffc:	e0bffc17 	ldw	r2,-16(fp)
   15000:	e0fffe17 	ldw	r3,-8(fp)
   15004:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15008:	e0bffc17 	ldw	r2,-16(fp)
   1500c:	e0ffff17 	ldw	r3,-4(fp)
   15010:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15014:	0005303a 	rdctl	r2,status
   15018:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1501c:	e0fff917 	ldw	r3,-28(fp)
   15020:	00bfff84 	movi	r2,-2
   15024:	1884703a 	and	r2,r3,r2
   15028:	1001703a 	wrctl	status,r2
  
  return context;
   1502c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   15030:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15034:	d0a74017 	ldw	r2,-25344(gp)
      
      current_nticks = alt_nticks();
   15038:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1503c:	e0fffd17 	ldw	r3,-12(fp)
   15040:	e0bff617 	ldw	r2,-40(fp)
   15044:	1885883a 	add	r2,r3,r2
   15048:	10c00044 	addi	r3,r2,1
   1504c:	e0bffc17 	ldw	r2,-16(fp)
   15050:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15054:	e0bffc17 	ldw	r2,-16(fp)
   15058:	10c00217 	ldw	r3,8(r2)
   1505c:	e0bff617 	ldw	r2,-40(fp)
   15060:	1880042e 	bgeu	r3,r2,15074 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   15064:	e0bffc17 	ldw	r2,-16(fp)
   15068:	00c00044 	movi	r3,1
   1506c:	10c00405 	stb	r3,16(r2)
   15070:	00000206 	br	1507c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   15074:	e0bffc17 	ldw	r2,-16(fp)
   15078:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1507c:	e0bffc17 	ldw	r2,-16(fp)
   15080:	d0e01004 	addi	r3,gp,-32704
   15084:	e0fffa15 	stw	r3,-24(fp)
   15088:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1508c:	e0bffb17 	ldw	r2,-20(fp)
   15090:	e0fffa17 	ldw	r3,-24(fp)
   15094:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15098:	e0bffa17 	ldw	r2,-24(fp)
   1509c:	10c00017 	ldw	r3,0(r2)
   150a0:	e0bffb17 	ldw	r2,-20(fp)
   150a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   150a8:	e0bffa17 	ldw	r2,-24(fp)
   150ac:	10800017 	ldw	r2,0(r2)
   150b0:	e0fffb17 	ldw	r3,-20(fp)
   150b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   150b8:	e0bffa17 	ldw	r2,-24(fp)
   150bc:	e0fffb17 	ldw	r3,-20(fp)
   150c0:	10c00015 	stw	r3,0(r2)
   150c4:	e0bff817 	ldw	r2,-32(fp)
   150c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150cc:	e0bff717 	ldw	r2,-36(fp)
   150d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   150d4:	0005883a 	mov	r2,zero
   150d8:	00000306 	br	150e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   150dc:	00bffa84 	movi	r2,-22
   150e0:	00000106 	br	150e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   150e4:	00bfde84 	movi	r2,-134
  }
}
   150e8:	e037883a 	mov	sp,fp
   150ec:	df000017 	ldw	fp,0(sp)
   150f0:	dec00104 	addi	sp,sp,4
   150f4:	f800283a 	ret

000150f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   150f8:	defffa04 	addi	sp,sp,-24
   150fc:	dfc00515 	stw	ra,20(sp)
   15100:	df000415 	stw	fp,16(sp)
   15104:	df000404 	addi	fp,sp,16
   15108:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1510c:	00800244 	movi	r2,9
   15110:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   15114:	014003f4 	movhi	r5,15
   15118:	29509004 	addi	r5,r5,16960
   1511c:	e13ffd17 	ldw	r4,-12(fp)
   15120:	000fc140 	call	fc14 <__mulsi3>
   15124:	100b883a 	mov	r5,r2
   15128:	01017db4 	movhi	r4,1526
   1512c:	21384004 	addi	r4,r4,-7936
   15130:	00013c40 	call	13c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   15134:	100b883a 	mov	r5,r2
   15138:	01200034 	movhi	r4,32768
   1513c:	213fffc4 	addi	r4,r4,-1
   15140:	00013c40 	call	13c4 <__udivsi3>
   15144:	100b883a 	mov	r5,r2
   15148:	e13fff17 	ldw	r4,-4(fp)
   1514c:	00013c40 	call	13c4 <__udivsi3>
   15150:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   15154:	e0bffe17 	ldw	r2,-8(fp)
   15158:	10002a26 	beq	r2,zero,15204 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1515c:	e03ffc15 	stw	zero,-16(fp)
   15160:	00001706 	br	151c0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   15164:	00a00034 	movhi	r2,32768
   15168:	10bfffc4 	addi	r2,r2,-1
   1516c:	10bfffc4 	addi	r2,r2,-1
   15170:	103ffe1e 	bne	r2,zero,1516c <__alt_data_end+0xf801516c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   15174:	014003f4 	movhi	r5,15
   15178:	29509004 	addi	r5,r5,16960
   1517c:	e13ffd17 	ldw	r4,-12(fp)
   15180:	000fc140 	call	fc14 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   15184:	100b883a 	mov	r5,r2
   15188:	01017db4 	movhi	r4,1526
   1518c:	21384004 	addi	r4,r4,-7936
   15190:	00013c40 	call	13c4 <__udivsi3>
   15194:	100b883a 	mov	r5,r2
   15198:	01200034 	movhi	r4,32768
   1519c:	213fffc4 	addi	r4,r4,-1
   151a0:	00013c40 	call	13c4 <__udivsi3>
   151a4:	1007883a 	mov	r3,r2
   151a8:	e0bfff17 	ldw	r2,-4(fp)
   151ac:	10c5c83a 	sub	r2,r2,r3
   151b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   151b4:	e0bffc17 	ldw	r2,-16(fp)
   151b8:	10800044 	addi	r2,r2,1
   151bc:	e0bffc15 	stw	r2,-16(fp)
   151c0:	e0fffc17 	ldw	r3,-16(fp)
   151c4:	e0bffe17 	ldw	r2,-8(fp)
   151c8:	18bfe616 	blt	r3,r2,15164 <__alt_data_end+0xf8015164>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   151cc:	014003f4 	movhi	r5,15
   151d0:	29509004 	addi	r5,r5,16960
   151d4:	e13ffd17 	ldw	r4,-12(fp)
   151d8:	000fc140 	call	fc14 <__mulsi3>
   151dc:	100b883a 	mov	r5,r2
   151e0:	01017db4 	movhi	r4,1526
   151e4:	21384004 	addi	r4,r4,-7936
   151e8:	00013c40 	call	13c4 <__udivsi3>
   151ec:	e17fff17 	ldw	r5,-4(fp)
   151f0:	1009883a 	mov	r4,r2
   151f4:	000fc140 	call	fc14 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   151f8:	10bfffc4 	addi	r2,r2,-1
   151fc:	103ffe1e 	bne	r2,zero,151f8 <__alt_data_end+0xf80151f8>
   15200:	00000d06 	br	15238 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   15204:	014003f4 	movhi	r5,15
   15208:	29509004 	addi	r5,r5,16960
   1520c:	e13ffd17 	ldw	r4,-12(fp)
   15210:	000fc140 	call	fc14 <__mulsi3>
   15214:	100b883a 	mov	r5,r2
   15218:	01017db4 	movhi	r4,1526
   1521c:	21384004 	addi	r4,r4,-7936
   15220:	00013c40 	call	13c4 <__udivsi3>
   15224:	e17fff17 	ldw	r5,-4(fp)
   15228:	1009883a 	mov	r4,r2
   1522c:	000fc140 	call	fc14 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   15230:	10bfffc4 	addi	r2,r2,-1
   15234:	00bffe16 	blt	zero,r2,15230 <__alt_data_end+0xf8015230>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   15238:	0005883a 	mov	r2,zero
}
   1523c:	e037883a 	mov	sp,fp
   15240:	dfc00117 	ldw	ra,4(sp)
   15244:	df000017 	ldw	fp,0(sp)
   15248:	dec00204 	addi	sp,sp,8
   1524c:	f800283a 	ret

00015250 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15250:	deffff04 	addi	sp,sp,-4
   15254:	df000015 	stw	fp,0(sp)
   15258:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1525c:	0001883a 	nop
   15260:	e037883a 	mov	sp,fp
   15264:	df000017 	ldw	fp,0(sp)
   15268:	dec00104 	addi	sp,sp,4
   1526c:	f800283a 	ret

00015270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15270:	defffe04 	addi	sp,sp,-8
   15274:	dfc00115 	stw	ra,4(sp)
   15278:	df000015 	stw	fp,0(sp)
   1527c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15280:	d0a00c17 	ldw	r2,-32720(gp)
   15284:	10000326 	beq	r2,zero,15294 <alt_get_errno+0x24>
   15288:	d0a00c17 	ldw	r2,-32720(gp)
   1528c:	103ee83a 	callr	r2
   15290:	00000106 	br	15298 <alt_get_errno+0x28>
   15294:	d0a73104 	addi	r2,gp,-25404
}
   15298:	e037883a 	mov	sp,fp
   1529c:	dfc00117 	ldw	ra,4(sp)
   152a0:	df000017 	ldw	fp,0(sp)
   152a4:	dec00204 	addi	sp,sp,8
   152a8:	f800283a 	ret

000152ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   152ac:	defffa04 	addi	sp,sp,-24
   152b0:	dfc00515 	stw	ra,20(sp)
   152b4:	df000415 	stw	fp,16(sp)
   152b8:	df000404 	addi	fp,sp,16
   152bc:	e13ffe15 	stw	r4,-8(fp)
   152c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   152c4:	e0bffe17 	ldw	r2,-8(fp)
   152c8:	10000326 	beq	r2,zero,152d8 <alt_dev_llist_insert+0x2c>
   152cc:	e0bffe17 	ldw	r2,-8(fp)
   152d0:	10800217 	ldw	r2,8(r2)
   152d4:	1000061e 	bne	r2,zero,152f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   152d8:	00152700 	call	15270 <alt_get_errno>
   152dc:	1007883a 	mov	r3,r2
   152e0:	00800584 	movi	r2,22
   152e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   152e8:	00bffa84 	movi	r2,-22
   152ec:	00001306 	br	1533c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   152f0:	e0bffe17 	ldw	r2,-8(fp)
   152f4:	e0ffff17 	ldw	r3,-4(fp)
   152f8:	e0fffc15 	stw	r3,-16(fp)
   152fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15300:	e0bffd17 	ldw	r2,-12(fp)
   15304:	e0fffc17 	ldw	r3,-16(fp)
   15308:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1530c:	e0bffc17 	ldw	r2,-16(fp)
   15310:	10c00017 	ldw	r3,0(r2)
   15314:	e0bffd17 	ldw	r2,-12(fp)
   15318:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1531c:	e0bffc17 	ldw	r2,-16(fp)
   15320:	10800017 	ldw	r2,0(r2)
   15324:	e0fffd17 	ldw	r3,-12(fp)
   15328:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1532c:	e0bffc17 	ldw	r2,-16(fp)
   15330:	e0fffd17 	ldw	r3,-12(fp)
   15334:	10c00015 	stw	r3,0(r2)

  return 0;  
   15338:	0005883a 	mov	r2,zero
}
   1533c:	e037883a 	mov	sp,fp
   15340:	dfc00117 	ldw	ra,4(sp)
   15344:	df000017 	ldw	fp,0(sp)
   15348:	dec00204 	addi	sp,sp,8
   1534c:	f800283a 	ret

00015350 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15350:	defffd04 	addi	sp,sp,-12
   15354:	dfc00215 	stw	ra,8(sp)
   15358:	df000115 	stw	fp,4(sp)
   1535c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15360:	00800074 	movhi	r2,1
   15364:	10977804 	addi	r2,r2,24032
   15368:	e0bfff15 	stw	r2,-4(fp)
   1536c:	00000606 	br	15388 <_do_ctors+0x38>
        (*ctor) (); 
   15370:	e0bfff17 	ldw	r2,-4(fp)
   15374:	10800017 	ldw	r2,0(r2)
   15378:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1537c:	e0bfff17 	ldw	r2,-4(fp)
   15380:	10bfff04 	addi	r2,r2,-4
   15384:	e0bfff15 	stw	r2,-4(fp)
   15388:	e0ffff17 	ldw	r3,-4(fp)
   1538c:	00800074 	movhi	r2,1
   15390:	10977904 	addi	r2,r2,24036
   15394:	18bff62e 	bgeu	r3,r2,15370 <__alt_data_end+0xf8015370>
        (*ctor) (); 
}
   15398:	0001883a 	nop
   1539c:	e037883a 	mov	sp,fp
   153a0:	dfc00117 	ldw	ra,4(sp)
   153a4:	df000017 	ldw	fp,0(sp)
   153a8:	dec00204 	addi	sp,sp,8
   153ac:	f800283a 	ret

000153b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   153b0:	defffd04 	addi	sp,sp,-12
   153b4:	dfc00215 	stw	ra,8(sp)
   153b8:	df000115 	stw	fp,4(sp)
   153bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   153c0:	00800074 	movhi	r2,1
   153c4:	10977804 	addi	r2,r2,24032
   153c8:	e0bfff15 	stw	r2,-4(fp)
   153cc:	00000606 	br	153e8 <_do_dtors+0x38>
        (*dtor) (); 
   153d0:	e0bfff17 	ldw	r2,-4(fp)
   153d4:	10800017 	ldw	r2,0(r2)
   153d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   153dc:	e0bfff17 	ldw	r2,-4(fp)
   153e0:	10bfff04 	addi	r2,r2,-4
   153e4:	e0bfff15 	stw	r2,-4(fp)
   153e8:	e0ffff17 	ldw	r3,-4(fp)
   153ec:	00800074 	movhi	r2,1
   153f0:	10977904 	addi	r2,r2,24036
   153f4:	18bff62e 	bgeu	r3,r2,153d0 <__alt_data_end+0xf80153d0>
        (*dtor) (); 
}
   153f8:	0001883a 	nop
   153fc:	e037883a 	mov	sp,fp
   15400:	dfc00117 	ldw	ra,4(sp)
   15404:	df000017 	ldw	fp,0(sp)
   15408:	dec00204 	addi	sp,sp,8
   1540c:	f800283a 	ret

00015410 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15410:	defffa04 	addi	sp,sp,-24
   15414:	dfc00515 	stw	ra,20(sp)
   15418:	df000415 	stw	fp,16(sp)
   1541c:	df000404 	addi	fp,sp,16
   15420:	e13ffe15 	stw	r4,-8(fp)
   15424:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15428:	e0bfff17 	ldw	r2,-4(fp)
   1542c:	10800017 	ldw	r2,0(r2)
   15430:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15434:	e13ffe17 	ldw	r4,-8(fp)
   15438:	00038ac0 	call	38ac <strlen>
   1543c:	10800044 	addi	r2,r2,1
   15440:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15444:	00000d06 	br	1547c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15448:	e0bffc17 	ldw	r2,-16(fp)
   1544c:	10800217 	ldw	r2,8(r2)
   15450:	e0fffd17 	ldw	r3,-12(fp)
   15454:	180d883a 	mov	r6,r3
   15458:	e17ffe17 	ldw	r5,-8(fp)
   1545c:	1009883a 	mov	r4,r2
   15460:	0015a9c0 	call	15a9c <memcmp>
   15464:	1000021e 	bne	r2,zero,15470 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15468:	e0bffc17 	ldw	r2,-16(fp)
   1546c:	00000706 	br	1548c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15470:	e0bffc17 	ldw	r2,-16(fp)
   15474:	10800017 	ldw	r2,0(r2)
   15478:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1547c:	e0fffc17 	ldw	r3,-16(fp)
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	18bff01e 	bne	r3,r2,15448 <__alt_data_end+0xf8015448>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15488:	0005883a 	mov	r2,zero
}
   1548c:	e037883a 	mov	sp,fp
   15490:	dfc00117 	ldw	ra,4(sp)
   15494:	df000017 	ldw	fp,0(sp)
   15498:	dec00204 	addi	sp,sp,8
   1549c:	f800283a 	ret

000154a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   154a0:	defffb04 	addi	sp,sp,-20
   154a4:	dfc00415 	stw	ra,16(sp)
   154a8:	df000315 	stw	fp,12(sp)
   154ac:	df000304 	addi	fp,sp,12
   154b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   154b4:	d0a00717 	ldw	r2,-32740(gp)
   154b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   154bc:	00003106 	br	15584 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   154c0:	e0bffd17 	ldw	r2,-12(fp)
   154c4:	10800217 	ldw	r2,8(r2)
   154c8:	1009883a 	mov	r4,r2
   154cc:	00038ac0 	call	38ac <strlen>
   154d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   154d4:	e0bffd17 	ldw	r2,-12(fp)
   154d8:	10c00217 	ldw	r3,8(r2)
   154dc:	e0bffe17 	ldw	r2,-8(fp)
   154e0:	10bfffc4 	addi	r2,r2,-1
   154e4:	1885883a 	add	r2,r3,r2
   154e8:	10800003 	ldbu	r2,0(r2)
   154ec:	10803fcc 	andi	r2,r2,255
   154f0:	1080201c 	xori	r2,r2,128
   154f4:	10bfe004 	addi	r2,r2,-128
   154f8:	10800bd8 	cmpnei	r2,r2,47
   154fc:	1000031e 	bne	r2,zero,1550c <alt_find_file+0x6c>
    {
      len -= 1;
   15500:	e0bffe17 	ldw	r2,-8(fp)
   15504:	10bfffc4 	addi	r2,r2,-1
   15508:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1550c:	e0bffe17 	ldw	r2,-8(fp)
   15510:	e0ffff17 	ldw	r3,-4(fp)
   15514:	1885883a 	add	r2,r3,r2
   15518:	10800003 	ldbu	r2,0(r2)
   1551c:	10803fcc 	andi	r2,r2,255
   15520:	1080201c 	xori	r2,r2,128
   15524:	10bfe004 	addi	r2,r2,-128
   15528:	10800be0 	cmpeqi	r2,r2,47
   1552c:	1000081e 	bne	r2,zero,15550 <alt_find_file+0xb0>
   15530:	e0bffe17 	ldw	r2,-8(fp)
   15534:	e0ffff17 	ldw	r3,-4(fp)
   15538:	1885883a 	add	r2,r3,r2
   1553c:	10800003 	ldbu	r2,0(r2)
   15540:	10803fcc 	andi	r2,r2,255
   15544:	1080201c 	xori	r2,r2,128
   15548:	10bfe004 	addi	r2,r2,-128
   1554c:	10000a1e 	bne	r2,zero,15578 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	10800217 	ldw	r2,8(r2)
   15558:	e0fffe17 	ldw	r3,-8(fp)
   1555c:	180d883a 	mov	r6,r3
   15560:	e17fff17 	ldw	r5,-4(fp)
   15564:	1009883a 	mov	r4,r2
   15568:	0015a9c0 	call	15a9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1556c:	1000021e 	bne	r2,zero,15578 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15570:	e0bffd17 	ldw	r2,-12(fp)
   15574:	00000706 	br	15594 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15578:	e0bffd17 	ldw	r2,-12(fp)
   1557c:	10800017 	ldw	r2,0(r2)
   15580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15584:	e0fffd17 	ldw	r3,-12(fp)
   15588:	d0a00704 	addi	r2,gp,-32740
   1558c:	18bfcc1e 	bne	r3,r2,154c0 <__alt_data_end+0xf80154c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15590:	0005883a 	mov	r2,zero
}
   15594:	e037883a 	mov	sp,fp
   15598:	dfc00117 	ldw	ra,4(sp)
   1559c:	df000017 	ldw	fp,0(sp)
   155a0:	dec00204 	addi	sp,sp,8
   155a4:	f800283a 	ret

000155a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   155a8:	defffa04 	addi	sp,sp,-24
   155ac:	dfc00515 	stw	ra,20(sp)
   155b0:	df000415 	stw	fp,16(sp)
   155b4:	dc000315 	stw	r16,12(sp)
   155b8:	df000404 	addi	fp,sp,16
   155bc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   155c0:	00bffa04 	movi	r2,-24
   155c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   155c8:	e03ffc15 	stw	zero,-16(fp)
   155cc:	00001d06 	br	15644 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   155d0:	04000074 	movhi	r16,1
   155d4:	841b5504 	addi	r16,r16,27988
   155d8:	e0bffc17 	ldw	r2,-16(fp)
   155dc:	01400304 	movi	r5,12
   155e0:	1009883a 	mov	r4,r2
   155e4:	000fc140 	call	fc14 <__mulsi3>
   155e8:	8085883a 	add	r2,r16,r2
   155ec:	10800017 	ldw	r2,0(r2)
   155f0:	1000111e 	bne	r2,zero,15638 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   155f4:	04000074 	movhi	r16,1
   155f8:	841b5504 	addi	r16,r16,27988
   155fc:	e0bffc17 	ldw	r2,-16(fp)
   15600:	01400304 	movi	r5,12
   15604:	1009883a 	mov	r4,r2
   15608:	000fc140 	call	fc14 <__mulsi3>
   1560c:	8085883a 	add	r2,r16,r2
   15610:	e0fffe17 	ldw	r3,-8(fp)
   15614:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15618:	d0e00b17 	ldw	r3,-32724(gp)
   1561c:	e0bffc17 	ldw	r2,-16(fp)
   15620:	1880020e 	bge	r3,r2,1562c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   15624:	e0bffc17 	ldw	r2,-16(fp)
   15628:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   1562c:	e0bffc17 	ldw	r2,-16(fp)
   15630:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15634:	00000606 	br	15650 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15638:	e0bffc17 	ldw	r2,-16(fp)
   1563c:	10800044 	addi	r2,r2,1
   15640:	e0bffc15 	stw	r2,-16(fp)
   15644:	e0bffc17 	ldw	r2,-16(fp)
   15648:	10800810 	cmplti	r2,r2,32
   1564c:	103fe01e 	bne	r2,zero,155d0 <__alt_data_end+0xf80155d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15650:	e0bffd17 	ldw	r2,-12(fp)
}
   15654:	e6ffff04 	addi	sp,fp,-4
   15658:	dfc00217 	ldw	ra,8(sp)
   1565c:	df000117 	ldw	fp,4(sp)
   15660:	dc000017 	ldw	r16,0(sp)
   15664:	dec00304 	addi	sp,sp,12
   15668:	f800283a 	ret

0001566c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1566c:	deffff04 	addi	sp,sp,-4
   15670:	df000015 	stw	fp,0(sp)
   15674:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15678:	0001883a 	nop
   1567c:	e037883a 	mov	sp,fp
   15680:	df000017 	ldw	fp,0(sp)
   15684:	dec00104 	addi	sp,sp,4
   15688:	f800283a 	ret

0001568c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1568c:	defffe04 	addi	sp,sp,-8
   15690:	df000115 	stw	fp,4(sp)
   15694:	df000104 	addi	fp,sp,4
   15698:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1569c:	e0bfff17 	ldw	r2,-4(fp)
   156a0:	10bffe84 	addi	r2,r2,-6
   156a4:	10c00428 	cmpgeui	r3,r2,16
   156a8:	18001a1e 	bne	r3,zero,15714 <alt_exception_cause_generated_bad_addr+0x88>
   156ac:	100690ba 	slli	r3,r2,2
   156b0:	00800074 	movhi	r2,1
   156b4:	1095b104 	addi	r2,r2,22212
   156b8:	1885883a 	add	r2,r3,r2
   156bc:	10800017 	ldw	r2,0(r2)
   156c0:	1000683a 	jmp	r2
   156c4:	00015704 	movi	zero,1372
   156c8:	00015704 	movi	zero,1372
   156cc:	00015714 	movui	zero,1372
   156d0:	00015714 	movui	zero,1372
   156d4:	00015714 	movui	zero,1372
   156d8:	00015704 	movi	zero,1372
   156dc:	0001570c 	andi	zero,zero,1372
   156e0:	00015714 	movui	zero,1372
   156e4:	00015704 	movi	zero,1372
   156e8:	00015704 	movi	zero,1372
   156ec:	00015714 	movui	zero,1372
   156f0:	00015704 	movi	zero,1372
   156f4:	0001570c 	andi	zero,zero,1372
   156f8:	00015714 	movui	zero,1372
   156fc:	00015714 	movui	zero,1372
   15700:	00015704 	movi	zero,1372
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15704:	00800044 	movi	r2,1
   15708:	00000306 	br	15718 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1570c:	0005883a 	mov	r2,zero
   15710:	00000106 	br	15718 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15714:	0005883a 	mov	r2,zero
  }
}
   15718:	e037883a 	mov	sp,fp
   1571c:	df000017 	ldw	fp,0(sp)
   15720:	dec00104 	addi	sp,sp,4
   15724:	f800283a 	ret

00015728 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15728:	defff804 	addi	sp,sp,-32
   1572c:	dfc00715 	stw	ra,28(sp)
   15730:	df000615 	stw	fp,24(sp)
   15734:	dc000515 	stw	r16,20(sp)
   15738:	df000604 	addi	fp,sp,24
   1573c:	e13ffb15 	stw	r4,-20(fp)
   15740:	e17ffc15 	stw	r5,-16(fp)
   15744:	e1bffd15 	stw	r6,-12(fp)
   15748:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1574c:	e1bffe17 	ldw	r6,-8(fp)
   15750:	e17ffd17 	ldw	r5,-12(fp)
   15754:	e13ffc17 	ldw	r4,-16(fp)
   15758:	0012e8c0 	call	12e8c <open>
   1575c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15760:	e0bffa17 	ldw	r2,-24(fp)
   15764:	10002216 	blt	r2,zero,157f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15768:	04000074 	movhi	r16,1
   1576c:	841b5504 	addi	r16,r16,27988
   15770:	e0bffa17 	ldw	r2,-24(fp)
   15774:	01400304 	movi	r5,12
   15778:	1009883a 	mov	r4,r2
   1577c:	000fc140 	call	fc14 <__mulsi3>
   15780:	8085883a 	add	r2,r16,r2
   15784:	10c00017 	ldw	r3,0(r2)
   15788:	e0bffb17 	ldw	r2,-20(fp)
   1578c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15790:	04000074 	movhi	r16,1
   15794:	841b5504 	addi	r16,r16,27988
   15798:	e0bffa17 	ldw	r2,-24(fp)
   1579c:	01400304 	movi	r5,12
   157a0:	1009883a 	mov	r4,r2
   157a4:	000fc140 	call	fc14 <__mulsi3>
   157a8:	8085883a 	add	r2,r16,r2
   157ac:	10800104 	addi	r2,r2,4
   157b0:	10c00017 	ldw	r3,0(r2)
   157b4:	e0bffb17 	ldw	r2,-20(fp)
   157b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   157bc:	04000074 	movhi	r16,1
   157c0:	841b5504 	addi	r16,r16,27988
   157c4:	e0bffa17 	ldw	r2,-24(fp)
   157c8:	01400304 	movi	r5,12
   157cc:	1009883a 	mov	r4,r2
   157d0:	000fc140 	call	fc14 <__mulsi3>
   157d4:	8085883a 	add	r2,r16,r2
   157d8:	10800204 	addi	r2,r2,8
   157dc:	10c00017 	ldw	r3,0(r2)
   157e0:	e0bffb17 	ldw	r2,-20(fp)
   157e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   157e8:	e13ffa17 	ldw	r4,-24(fp)
   157ec:	00131280 	call	13128 <alt_release_fd>
  }
} 
   157f0:	0001883a 	nop
   157f4:	e6ffff04 	addi	sp,fp,-4
   157f8:	dfc00217 	ldw	ra,8(sp)
   157fc:	df000117 	ldw	fp,4(sp)
   15800:	dc000017 	ldw	r16,0(sp)
   15804:	dec00304 	addi	sp,sp,12
   15808:	f800283a 	ret

0001580c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1580c:	defffb04 	addi	sp,sp,-20
   15810:	dfc00415 	stw	ra,16(sp)
   15814:	df000315 	stw	fp,12(sp)
   15818:	df000304 	addi	fp,sp,12
   1581c:	e13ffd15 	stw	r4,-12(fp)
   15820:	e17ffe15 	stw	r5,-8(fp)
   15824:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15828:	01c07fc4 	movi	r7,511
   1582c:	01800044 	movi	r6,1
   15830:	e17ffd17 	ldw	r5,-12(fp)
   15834:	01000074 	movhi	r4,1
   15838:	211b5804 	addi	r4,r4,28000
   1583c:	00157280 	call	15728 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15840:	01c07fc4 	movi	r7,511
   15844:	000d883a 	mov	r6,zero
   15848:	e17ffe17 	ldw	r5,-8(fp)
   1584c:	01000074 	movhi	r4,1
   15850:	211b5504 	addi	r4,r4,27988
   15854:	00157280 	call	15728 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15858:	01c07fc4 	movi	r7,511
   1585c:	01800044 	movi	r6,1
   15860:	e17fff17 	ldw	r5,-4(fp)
   15864:	01000074 	movhi	r4,1
   15868:	211b5b04 	addi	r4,r4,28012
   1586c:	00157280 	call	15728 <alt_open_fd>
}  
   15870:	0001883a 	nop
   15874:	e037883a 	mov	sp,fp
   15878:	dfc00117 	ldw	ra,4(sp)
   1587c:	df000017 	ldw	fp,0(sp)
   15880:	dec00204 	addi	sp,sp,8
   15884:	f800283a 	ret

00015888 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15888:	defffa04 	addi	sp,sp,-24
   1588c:	df000515 	stw	fp,20(sp)
   15890:	df000504 	addi	fp,sp,20
   15894:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15898:	0005303a 	rdctl	r2,status
   1589c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158a0:	e0fffc17 	ldw	r3,-16(fp)
   158a4:	00bfff84 	movi	r2,-2
   158a8:	1884703a 	and	r2,r3,r2
   158ac:	1001703a 	wrctl	status,r2
  
  return context;
   158b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   158b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   158b8:	e0bfff17 	ldw	r2,-4(fp)
   158bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   158c0:	e0bffd17 	ldw	r2,-12(fp)
   158c4:	10800017 	ldw	r2,0(r2)
   158c8:	e0fffd17 	ldw	r3,-12(fp)
   158cc:	18c00117 	ldw	r3,4(r3)
   158d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   158d4:	e0bffd17 	ldw	r2,-12(fp)
   158d8:	10800117 	ldw	r2,4(r2)
   158dc:	e0fffd17 	ldw	r3,-12(fp)
   158e0:	18c00017 	ldw	r3,0(r3)
   158e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   158e8:	e0bffd17 	ldw	r2,-12(fp)
   158ec:	e0fffd17 	ldw	r3,-12(fp)
   158f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   158f4:	e0bffd17 	ldw	r2,-12(fp)
   158f8:	e0fffd17 	ldw	r3,-12(fp)
   158fc:	10c00015 	stw	r3,0(r2)
   15900:	e0bffb17 	ldw	r2,-20(fp)
   15904:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15908:	e0bffe17 	ldw	r2,-8(fp)
   1590c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15910:	0001883a 	nop
   15914:	e037883a 	mov	sp,fp
   15918:	df000017 	ldw	fp,0(sp)
   1591c:	dec00104 	addi	sp,sp,4
   15920:	f800283a 	ret

00015924 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15924:	defffb04 	addi	sp,sp,-20
   15928:	dfc00415 	stw	ra,16(sp)
   1592c:	df000315 	stw	fp,12(sp)
   15930:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15934:	d0a01017 	ldw	r2,-32704(gp)
   15938:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1593c:	d0a74017 	ldw	r2,-25344(gp)
   15940:	10800044 	addi	r2,r2,1
   15944:	d0a74015 	stw	r2,-25344(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15948:	00002e06 	br	15a04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1594c:	e0bffd17 	ldw	r2,-12(fp)
   15950:	10800017 	ldw	r2,0(r2)
   15954:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15958:	e0bffd17 	ldw	r2,-12(fp)
   1595c:	10800403 	ldbu	r2,16(r2)
   15960:	10803fcc 	andi	r2,r2,255
   15964:	10000426 	beq	r2,zero,15978 <alt_tick+0x54>
   15968:	d0a74017 	ldw	r2,-25344(gp)
   1596c:	1000021e 	bne	r2,zero,15978 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15970:	e0bffd17 	ldw	r2,-12(fp)
   15974:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15978:	e0bffd17 	ldw	r2,-12(fp)
   1597c:	10800217 	ldw	r2,8(r2)
   15980:	d0e74017 	ldw	r3,-25344(gp)
   15984:	18801d36 	bltu	r3,r2,159fc <alt_tick+0xd8>
   15988:	e0bffd17 	ldw	r2,-12(fp)
   1598c:	10800403 	ldbu	r2,16(r2)
   15990:	10803fcc 	andi	r2,r2,255
   15994:	1000191e 	bne	r2,zero,159fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15998:	e0bffd17 	ldw	r2,-12(fp)
   1599c:	10800317 	ldw	r2,12(r2)
   159a0:	e0fffd17 	ldw	r3,-12(fp)
   159a4:	18c00517 	ldw	r3,20(r3)
   159a8:	1809883a 	mov	r4,r3
   159ac:	103ee83a 	callr	r2
   159b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   159b4:	e0bfff17 	ldw	r2,-4(fp)
   159b8:	1000031e 	bne	r2,zero,159c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   159bc:	e13ffd17 	ldw	r4,-12(fp)
   159c0:	00158880 	call	15888 <alt_alarm_stop>
   159c4:	00000d06 	br	159fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   159c8:	e0bffd17 	ldw	r2,-12(fp)
   159cc:	10c00217 	ldw	r3,8(r2)
   159d0:	e0bfff17 	ldw	r2,-4(fp)
   159d4:	1887883a 	add	r3,r3,r2
   159d8:	e0bffd17 	ldw	r2,-12(fp)
   159dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   159e0:	e0bffd17 	ldw	r2,-12(fp)
   159e4:	10c00217 	ldw	r3,8(r2)
   159e8:	d0a74017 	ldw	r2,-25344(gp)
   159ec:	1880032e 	bgeu	r3,r2,159fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   159f0:	e0bffd17 	ldw	r2,-12(fp)
   159f4:	00c00044 	movi	r3,1
   159f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   159fc:	e0bffe17 	ldw	r2,-8(fp)
   15a00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15a04:	e0fffd17 	ldw	r3,-12(fp)
   15a08:	d0a01004 	addi	r2,gp,-32704
   15a0c:	18bfcf1e 	bne	r3,r2,1594c <__alt_data_end+0xf801594c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15a10:	0001883a 	nop
}
   15a14:	0001883a 	nop
   15a18:	e037883a 	mov	sp,fp
   15a1c:	dfc00117 	ldw	ra,4(sp)
   15a20:	df000017 	ldw	fp,0(sp)
   15a24:	dec00204 	addi	sp,sp,8
   15a28:	f800283a 	ret

00015a2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15a2c:	deffff04 	addi	sp,sp,-4
   15a30:	df000015 	stw	fp,0(sp)
   15a34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15a38:	000170fa 	wrctl	ienable,zero
}
   15a3c:	0001883a 	nop
   15a40:	e037883a 	mov	sp,fp
   15a44:	df000017 	ldw	fp,0(sp)
   15a48:	dec00104 	addi	sp,sp,4
   15a4c:	f800283a 	ret

00015a50 <atexit>:
   15a50:	200b883a 	mov	r5,r4
   15a54:	000f883a 	mov	r7,zero
   15a58:	000d883a 	mov	r6,zero
   15a5c:	0009883a 	mov	r4,zero
   15a60:	0015b181 	jmpi	15b18 <__register_exitproc>

00015a64 <exit>:
   15a64:	defffe04 	addi	sp,sp,-8
   15a68:	000b883a 	mov	r5,zero
   15a6c:	dc000015 	stw	r16,0(sp)
   15a70:	dfc00115 	stw	ra,4(sp)
   15a74:	2021883a 	mov	r16,r4
   15a78:	0015c300 	call	15c30 <__call_exitprocs>
   15a7c:	008000b4 	movhi	r2,2
   15a80:	10a01604 	addi	r2,r2,-32680
   15a84:	11000017 	ldw	r4,0(r2)
   15a88:	20800f17 	ldw	r2,60(r4)
   15a8c:	10000126 	beq	r2,zero,15a94 <exit+0x30>
   15a90:	103ee83a 	callr	r2
   15a94:	8009883a 	mov	r4,r16
   15a98:	0015db00 	call	15db0 <_exit>

00015a9c <memcmp>:
   15a9c:	01c000c4 	movi	r7,3
   15aa0:	3980192e 	bgeu	r7,r6,15b08 <memcmp+0x6c>
   15aa4:	2144b03a 	or	r2,r4,r5
   15aa8:	11c4703a 	and	r2,r2,r7
   15aac:	10000f26 	beq	r2,zero,15aec <memcmp+0x50>
   15ab0:	20800003 	ldbu	r2,0(r4)
   15ab4:	28c00003 	ldbu	r3,0(r5)
   15ab8:	10c0151e 	bne	r2,r3,15b10 <memcmp+0x74>
   15abc:	31bfff84 	addi	r6,r6,-2
   15ac0:	01ffffc4 	movi	r7,-1
   15ac4:	00000406 	br	15ad8 <memcmp+0x3c>
   15ac8:	20800003 	ldbu	r2,0(r4)
   15acc:	28c00003 	ldbu	r3,0(r5)
   15ad0:	31bfffc4 	addi	r6,r6,-1
   15ad4:	10c00e1e 	bne	r2,r3,15b10 <memcmp+0x74>
   15ad8:	21000044 	addi	r4,r4,1
   15adc:	29400044 	addi	r5,r5,1
   15ae0:	31fff91e 	bne	r6,r7,15ac8 <__alt_data_end+0xf8015ac8>
   15ae4:	0005883a 	mov	r2,zero
   15ae8:	f800283a 	ret
   15aec:	20c00017 	ldw	r3,0(r4)
   15af0:	28800017 	ldw	r2,0(r5)
   15af4:	18bfee1e 	bne	r3,r2,15ab0 <__alt_data_end+0xf8015ab0>
   15af8:	31bfff04 	addi	r6,r6,-4
   15afc:	21000104 	addi	r4,r4,4
   15b00:	29400104 	addi	r5,r5,4
   15b04:	39bff936 	bltu	r7,r6,15aec <__alt_data_end+0xf8015aec>
   15b08:	303fe91e 	bne	r6,zero,15ab0 <__alt_data_end+0xf8015ab0>
   15b0c:	003ff506 	br	15ae4 <__alt_data_end+0xf8015ae4>
   15b10:	10c5c83a 	sub	r2,r2,r3
   15b14:	f800283a 	ret

00015b18 <__register_exitproc>:
   15b18:	defffa04 	addi	sp,sp,-24
   15b1c:	dc000315 	stw	r16,12(sp)
   15b20:	040000b4 	movhi	r16,2
   15b24:	84201604 	addi	r16,r16,-32680
   15b28:	80c00017 	ldw	r3,0(r16)
   15b2c:	dc400415 	stw	r17,16(sp)
   15b30:	dfc00515 	stw	ra,20(sp)
   15b34:	18805217 	ldw	r2,328(r3)
   15b38:	2023883a 	mov	r17,r4
   15b3c:	10003726 	beq	r2,zero,15c1c <__register_exitproc+0x104>
   15b40:	10c00117 	ldw	r3,4(r2)
   15b44:	010007c4 	movi	r4,31
   15b48:	20c00e16 	blt	r4,r3,15b84 <__register_exitproc+0x6c>
   15b4c:	1a000044 	addi	r8,r3,1
   15b50:	8800221e 	bne	r17,zero,15bdc <__register_exitproc+0xc4>
   15b54:	18c00084 	addi	r3,r3,2
   15b58:	18c7883a 	add	r3,r3,r3
   15b5c:	18c7883a 	add	r3,r3,r3
   15b60:	12000115 	stw	r8,4(r2)
   15b64:	10c7883a 	add	r3,r2,r3
   15b68:	19400015 	stw	r5,0(r3)
   15b6c:	0005883a 	mov	r2,zero
   15b70:	dfc00517 	ldw	ra,20(sp)
   15b74:	dc400417 	ldw	r17,16(sp)
   15b78:	dc000317 	ldw	r16,12(sp)
   15b7c:	dec00604 	addi	sp,sp,24
   15b80:	f800283a 	ret
   15b84:	00800034 	movhi	r2,0
   15b88:	10800004 	addi	r2,r2,0
   15b8c:	10002626 	beq	r2,zero,15c28 <__register_exitproc+0x110>
   15b90:	01006404 	movi	r4,400
   15b94:	d9400015 	stw	r5,0(sp)
   15b98:	d9800115 	stw	r6,4(sp)
   15b9c:	d9c00215 	stw	r7,8(sp)
   15ba0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
   15ba4:	d9400017 	ldw	r5,0(sp)
   15ba8:	d9800117 	ldw	r6,4(sp)
   15bac:	d9c00217 	ldw	r7,8(sp)
   15bb0:	10001d26 	beq	r2,zero,15c28 <__register_exitproc+0x110>
   15bb4:	81000017 	ldw	r4,0(r16)
   15bb8:	10000115 	stw	zero,4(r2)
   15bbc:	02000044 	movi	r8,1
   15bc0:	22405217 	ldw	r9,328(r4)
   15bc4:	0007883a 	mov	r3,zero
   15bc8:	12400015 	stw	r9,0(r2)
   15bcc:	20805215 	stw	r2,328(r4)
   15bd0:	10006215 	stw	zero,392(r2)
   15bd4:	10006315 	stw	zero,396(r2)
   15bd8:	883fde26 	beq	r17,zero,15b54 <__alt_data_end+0xf8015b54>
   15bdc:	18c9883a 	add	r4,r3,r3
   15be0:	2109883a 	add	r4,r4,r4
   15be4:	1109883a 	add	r4,r2,r4
   15be8:	21802215 	stw	r6,136(r4)
   15bec:	01800044 	movi	r6,1
   15bf0:	12406217 	ldw	r9,392(r2)
   15bf4:	30cc983a 	sll	r6,r6,r3
   15bf8:	4992b03a 	or	r9,r9,r6
   15bfc:	12406215 	stw	r9,392(r2)
   15c00:	21c04215 	stw	r7,264(r4)
   15c04:	01000084 	movi	r4,2
   15c08:	893fd21e 	bne	r17,r4,15b54 <__alt_data_end+0xf8015b54>
   15c0c:	11006317 	ldw	r4,396(r2)
   15c10:	218cb03a 	or	r6,r4,r6
   15c14:	11806315 	stw	r6,396(r2)
   15c18:	003fce06 	br	15b54 <__alt_data_end+0xf8015b54>
   15c1c:	18805304 	addi	r2,r3,332
   15c20:	18805215 	stw	r2,328(r3)
   15c24:	003fc606 	br	15b40 <__alt_data_end+0xf8015b40>
   15c28:	00bfffc4 	movi	r2,-1
   15c2c:	003fd006 	br	15b70 <__alt_data_end+0xf8015b70>

00015c30 <__call_exitprocs>:
   15c30:	defff504 	addi	sp,sp,-44
   15c34:	df000915 	stw	fp,36(sp)
   15c38:	dd400615 	stw	r21,24(sp)
   15c3c:	dc800315 	stw	r18,12(sp)
   15c40:	dfc00a15 	stw	ra,40(sp)
   15c44:	ddc00815 	stw	r23,32(sp)
   15c48:	dd800715 	stw	r22,28(sp)
   15c4c:	dd000515 	stw	r20,20(sp)
   15c50:	dcc00415 	stw	r19,16(sp)
   15c54:	dc400215 	stw	r17,8(sp)
   15c58:	dc000115 	stw	r16,4(sp)
   15c5c:	d9000015 	stw	r4,0(sp)
   15c60:	2839883a 	mov	fp,r5
   15c64:	04800044 	movi	r18,1
   15c68:	057fffc4 	movi	r21,-1
   15c6c:	008000b4 	movhi	r2,2
   15c70:	10a01604 	addi	r2,r2,-32680
   15c74:	12000017 	ldw	r8,0(r2)
   15c78:	45005217 	ldw	r20,328(r8)
   15c7c:	44c05204 	addi	r19,r8,328
   15c80:	a0001c26 	beq	r20,zero,15cf4 <__call_exitprocs+0xc4>
   15c84:	a0800117 	ldw	r2,4(r20)
   15c88:	15ffffc4 	addi	r23,r2,-1
   15c8c:	b8000d16 	blt	r23,zero,15cc4 <__call_exitprocs+0x94>
   15c90:	14000044 	addi	r16,r2,1
   15c94:	8421883a 	add	r16,r16,r16
   15c98:	8421883a 	add	r16,r16,r16
   15c9c:	84402004 	addi	r17,r16,128
   15ca0:	a463883a 	add	r17,r20,r17
   15ca4:	a421883a 	add	r16,r20,r16
   15ca8:	e0001e26 	beq	fp,zero,15d24 <__call_exitprocs+0xf4>
   15cac:	80804017 	ldw	r2,256(r16)
   15cb0:	e0801c26 	beq	fp,r2,15d24 <__call_exitprocs+0xf4>
   15cb4:	bdffffc4 	addi	r23,r23,-1
   15cb8:	843fff04 	addi	r16,r16,-4
   15cbc:	8c7fff04 	addi	r17,r17,-4
   15cc0:	bd7ff91e 	bne	r23,r21,15ca8 <__alt_data_end+0xf8015ca8>
   15cc4:	00800034 	movhi	r2,0
   15cc8:	10800004 	addi	r2,r2,0
   15ccc:	10000926 	beq	r2,zero,15cf4 <__call_exitprocs+0xc4>
   15cd0:	a0800117 	ldw	r2,4(r20)
   15cd4:	1000301e 	bne	r2,zero,15d98 <__call_exitprocs+0x168>
   15cd8:	a0800017 	ldw	r2,0(r20)
   15cdc:	10003226 	beq	r2,zero,15da8 <__call_exitprocs+0x178>
   15ce0:	a009883a 	mov	r4,r20
   15ce4:	98800015 	stw	r2,0(r19)
   15ce8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
   15cec:	9d000017 	ldw	r20,0(r19)
   15cf0:	a03fe41e 	bne	r20,zero,15c84 <__alt_data_end+0xf8015c84>
   15cf4:	dfc00a17 	ldw	ra,40(sp)
   15cf8:	df000917 	ldw	fp,36(sp)
   15cfc:	ddc00817 	ldw	r23,32(sp)
   15d00:	dd800717 	ldw	r22,28(sp)
   15d04:	dd400617 	ldw	r21,24(sp)
   15d08:	dd000517 	ldw	r20,20(sp)
   15d0c:	dcc00417 	ldw	r19,16(sp)
   15d10:	dc800317 	ldw	r18,12(sp)
   15d14:	dc400217 	ldw	r17,8(sp)
   15d18:	dc000117 	ldw	r16,4(sp)
   15d1c:	dec00b04 	addi	sp,sp,44
   15d20:	f800283a 	ret
   15d24:	a0800117 	ldw	r2,4(r20)
   15d28:	80c00017 	ldw	r3,0(r16)
   15d2c:	10bfffc4 	addi	r2,r2,-1
   15d30:	15c01426 	beq	r2,r23,15d84 <__call_exitprocs+0x154>
   15d34:	80000015 	stw	zero,0(r16)
   15d38:	183fde26 	beq	r3,zero,15cb4 <__alt_data_end+0xf8015cb4>
   15d3c:	95c8983a 	sll	r4,r18,r23
   15d40:	a0806217 	ldw	r2,392(r20)
   15d44:	a5800117 	ldw	r22,4(r20)
   15d48:	2084703a 	and	r2,r4,r2
   15d4c:	10000b26 	beq	r2,zero,15d7c <__call_exitprocs+0x14c>
   15d50:	a0806317 	ldw	r2,396(r20)
   15d54:	2088703a 	and	r4,r4,r2
   15d58:	20000c1e 	bne	r4,zero,15d8c <__call_exitprocs+0x15c>
   15d5c:	89400017 	ldw	r5,0(r17)
   15d60:	d9000017 	ldw	r4,0(sp)
   15d64:	183ee83a 	callr	r3
   15d68:	a0800117 	ldw	r2,4(r20)
   15d6c:	15bfbf1e 	bne	r2,r22,15c6c <__alt_data_end+0xf8015c6c>
   15d70:	98800017 	ldw	r2,0(r19)
   15d74:	153fcf26 	beq	r2,r20,15cb4 <__alt_data_end+0xf8015cb4>
   15d78:	003fbc06 	br	15c6c <__alt_data_end+0xf8015c6c>
   15d7c:	183ee83a 	callr	r3
   15d80:	003ff906 	br	15d68 <__alt_data_end+0xf8015d68>
   15d84:	a5c00115 	stw	r23,4(r20)
   15d88:	003feb06 	br	15d38 <__alt_data_end+0xf8015d38>
   15d8c:	89000017 	ldw	r4,0(r17)
   15d90:	183ee83a 	callr	r3
   15d94:	003ff406 	br	15d68 <__alt_data_end+0xf8015d68>
   15d98:	a0800017 	ldw	r2,0(r20)
   15d9c:	a027883a 	mov	r19,r20
   15da0:	1029883a 	mov	r20,r2
   15da4:	003fb606 	br	15c80 <__alt_data_end+0xf8015c80>
   15da8:	0005883a 	mov	r2,zero
   15dac:	003ffb06 	br	15d9c <__alt_data_end+0xf8015d9c>

00015db0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15db0:	defffd04 	addi	sp,sp,-12
   15db4:	df000215 	stw	fp,8(sp)
   15db8:	df000204 	addi	fp,sp,8
   15dbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15dc0:	0001883a 	nop
   15dc4:	e0bfff17 	ldw	r2,-4(fp)
   15dc8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15dcc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15dd0:	10000226 	beq	r2,zero,15ddc <_exit+0x2c>
    ALT_SIM_FAIL();
   15dd4:	002af070 	cmpltui	zero,zero,43969
   15dd8:	00000106 	br	15de0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15ddc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15de0:	003fff06 	br	15de0 <__alt_data_end+0xf8015de0>
